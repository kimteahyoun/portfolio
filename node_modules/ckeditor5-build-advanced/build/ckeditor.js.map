{"version":3,"sources":["webpack://ClassicEditor/webpack/universalModuleDefinition","webpack://ClassicEditor/webpack/bootstrap","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js","webpack://ClassicEditor/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://ClassicEditor/./node_modules/lodash-es/_root.js","webpack://ClassicEditor/./node_modules/lodash-es/_nodeUtil.js","webpack://ClassicEditor/./node_modules/lodash-es/isBuffer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/version.js","webpack://ClassicEditor/./node_modules/lodash-es/_freeGlobal.js","webpack://ClassicEditor/(webpack)/buildin/harmony-module.js","webpack://ClassicEditor/(webpack)/buildin/global.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/theme/heading.css?3817","webpack://ClassicEditor/./node_modules/lodash-es/stubFalse.js","webpack://ClassicEditor/./node_modules/lodash-es/_cloneBuffer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css?e043","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css?0c98","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css?9b58","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css?a80d","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css?0a0d","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css?a52e","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/theme/classiceditor.css?d951","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/theme/classiceditor.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css?dcba","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css?a250","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css?c37e","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css?ab63","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css?fc0e","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css?7150","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css?4d56","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css?92e1","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/theme/heading.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css?1b9a","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledinput/labeledinput.css?6a85","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledinput/labeledinput.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css?f229","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/textalternativeform.css?ec83","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/textalternativeform.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css?9810","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css?270e","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css?e8ce","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/image.css?4996","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/image.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageresize.css?ad23","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageresize.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imagestyle.css?453e","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imagestyle.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadprogress.css?fc17","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadprogress.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadicon.css?0258","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadicon.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadloader.css?9840","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadloader.css","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/md5.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/styles/styles.css?01d8","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/styles/styles.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css?5c83","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css?6096","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/table.css?cbbb","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/table.css","webpack://ClassicEditor/./node_modules/lodash-es/_Symbol.js","webpack://ClassicEditor/./node_modules/lodash-es/_getRawTag.js","webpack://ClassicEditor/./node_modules/lodash-es/_objectToString.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseGetTag.js","webpack://ClassicEditor/./node_modules/lodash-es/_overArg.js","webpack://ClassicEditor/./node_modules/lodash-es/_getPrototype.js","webpack://ClassicEditor/./node_modules/lodash-es/isObjectLike.js","webpack://ClassicEditor/./node_modules/lodash-es/isPlainObject.js","webpack://ClassicEditor/./node_modules/lodash-es/_listCacheClear.js","webpack://ClassicEditor/./node_modules/lodash-es/eq.js","webpack://ClassicEditor/./node_modules/lodash-es/_assocIndexOf.js","webpack://ClassicEditor/./node_modules/lodash-es/_listCacheDelete.js","webpack://ClassicEditor/./node_modules/lodash-es/_listCacheGet.js","webpack://ClassicEditor/./node_modules/lodash-es/_listCacheHas.js","webpack://ClassicEditor/./node_modules/lodash-es/_listCacheSet.js","webpack://ClassicEditor/./node_modules/lodash-es/_ListCache.js","webpack://ClassicEditor/./node_modules/lodash-es/_stackClear.js","webpack://ClassicEditor/./node_modules/lodash-es/_stackDelete.js","webpack://ClassicEditor/./node_modules/lodash-es/_stackGet.js","webpack://ClassicEditor/./node_modules/lodash-es/_stackHas.js","webpack://ClassicEditor/./node_modules/lodash-es/isObject.js","webpack://ClassicEditor/./node_modules/lodash-es/isFunction.js","webpack://ClassicEditor/./node_modules/lodash-es/_coreJsData.js","webpack://ClassicEditor/./node_modules/lodash-es/_isMasked.js","webpack://ClassicEditor/./node_modules/lodash-es/_toSource.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsNative.js","webpack://ClassicEditor/./node_modules/lodash-es/_getValue.js","webpack://ClassicEditor/./node_modules/lodash-es/_getNative.js","webpack://ClassicEditor/./node_modules/lodash-es/_Map.js","webpack://ClassicEditor/./node_modules/lodash-es/_nativeCreate.js","webpack://ClassicEditor/./node_modules/lodash-es/_hashClear.js","webpack://ClassicEditor/./node_modules/lodash-es/_hashDelete.js","webpack://ClassicEditor/./node_modules/lodash-es/_hashGet.js","webpack://ClassicEditor/./node_modules/lodash-es/_hashHas.js","webpack://ClassicEditor/./node_modules/lodash-es/_hashSet.js","webpack://ClassicEditor/./node_modules/lodash-es/_Hash.js","webpack://ClassicEditor/./node_modules/lodash-es/_mapCacheClear.js","webpack://ClassicEditor/./node_modules/lodash-es/_isKeyable.js","webpack://ClassicEditor/./node_modules/lodash-es/_getMapData.js","webpack://ClassicEditor/./node_modules/lodash-es/_mapCacheDelete.js","webpack://ClassicEditor/./node_modules/lodash-es/_mapCacheGet.js","webpack://ClassicEditor/./node_modules/lodash-es/_mapCacheHas.js","webpack://ClassicEditor/./node_modules/lodash-es/_mapCacheSet.js","webpack://ClassicEditor/./node_modules/lodash-es/_MapCache.js","webpack://ClassicEditor/./node_modules/lodash-es/_stackSet.js","webpack://ClassicEditor/./node_modules/lodash-es/_Stack.js","webpack://ClassicEditor/./node_modules/lodash-es/_arrayEach.js","webpack://ClassicEditor/./node_modules/lodash-es/_defineProperty.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseAssignValue.js","webpack://ClassicEditor/./node_modules/lodash-es/_assignValue.js","webpack://ClassicEditor/./node_modules/lodash-es/_copyObject.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseTimes.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsArguments.js","webpack://ClassicEditor/./node_modules/lodash-es/isArguments.js","webpack://ClassicEditor/./node_modules/lodash-es/isArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_isIndex.js","webpack://ClassicEditor/./node_modules/lodash-es/isLength.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseUnary.js","webpack://ClassicEditor/./node_modules/lodash-es/isTypedArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_arrayLikeKeys.js","webpack://ClassicEditor/./node_modules/lodash-es/_isPrototype.js","webpack://ClassicEditor/./node_modules/lodash-es/_nativeKeys.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseKeys.js","webpack://ClassicEditor/./node_modules/lodash-es/isArrayLike.js","webpack://ClassicEditor/./node_modules/lodash-es/keys.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseAssign.js","webpack://ClassicEditor/./node_modules/lodash-es/_nativeKeysIn.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseKeysIn.js","webpack://ClassicEditor/./node_modules/lodash-es/keysIn.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseAssignIn.js","webpack://ClassicEditor/./node_modules/lodash-es/_copyArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_arrayFilter.js","webpack://ClassicEditor/./node_modules/lodash-es/stubArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_getSymbols.js","webpack://ClassicEditor/./node_modules/lodash-es/_copySymbols.js","webpack://ClassicEditor/./node_modules/lodash-es/_arrayPush.js","webpack://ClassicEditor/./node_modules/lodash-es/_getSymbolsIn.js","webpack://ClassicEditor/./node_modules/lodash-es/_copySymbolsIn.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseGetAllKeys.js","webpack://ClassicEditor/./node_modules/lodash-es/_getAllKeys.js","webpack://ClassicEditor/./node_modules/lodash-es/_getAllKeysIn.js","webpack://ClassicEditor/./node_modules/lodash-es/_DataView.js","webpack://ClassicEditor/./node_modules/lodash-es/_Promise.js","webpack://ClassicEditor/./node_modules/lodash-es/_Set.js","webpack://ClassicEditor/./node_modules/lodash-es/_WeakMap.js","webpack://ClassicEditor/./node_modules/lodash-es/_getTag.js","webpack://ClassicEditor/./node_modules/lodash-es/_initCloneArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_Uint8Array.js","webpack://ClassicEditor/./node_modules/lodash-es/_cloneArrayBuffer.js","webpack://ClassicEditor/./node_modules/lodash-es/_cloneDataView.js","webpack://ClassicEditor/./node_modules/lodash-es/_cloneRegExp.js","webpack://ClassicEditor/./node_modules/lodash-es/_cloneSymbol.js","webpack://ClassicEditor/./node_modules/lodash-es/_cloneTypedArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_initCloneByTag.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseCreate.js","webpack://ClassicEditor/./node_modules/lodash-es/_initCloneObject.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsMap.js","webpack://ClassicEditor/./node_modules/lodash-es/isMap.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsSet.js","webpack://ClassicEditor/./node_modules/lodash-es/isSet.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseClone.js","webpack://ClassicEditor/./node_modules/lodash-es/cloneDeepWith.js","webpack://ClassicEditor/./node_modules/lodash-es/isElement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/config.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/spy.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/uid.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/mix.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js","webpack://ClassicEditor/./node_modules/lodash-es/clone.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/objecttomap.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js","webpack://ClassicEditor/./node_modules/lodash-es/identity.js","webpack://ClassicEditor/./node_modules/lodash-es/_apply.js","webpack://ClassicEditor/./node_modules/lodash-es/_overRest.js","webpack://ClassicEditor/./node_modules/lodash-es/constant.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseSetToString.js","webpack://ClassicEditor/./node_modules/lodash-es/_shortOut.js","webpack://ClassicEditor/./node_modules/lodash-es/_setToString.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseRest.js","webpack://ClassicEditor/./node_modules/lodash-es/_isIterateeCall.js","webpack://ClassicEditor/./node_modules/lodash-es/_createAssigner.js","webpack://ClassicEditor/./node_modules/lodash-es/assignIn.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/rooteditableelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/count.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/collection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/env.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/diff.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/insertat.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/remove.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/indexof.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getancestors.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getcommonancestor.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js","webpack://ClassicEditor/./node_modules/lodash-es/_setCacheAdd.js","webpack://ClassicEditor/./node_modules/lodash-es/_setCacheHas.js","webpack://ClassicEditor/./node_modules/lodash-es/_SetCache.js","webpack://ClassicEditor/./node_modules/lodash-es/_arraySome.js","webpack://ClassicEditor/./node_modules/lodash-es/_cacheHas.js","webpack://ClassicEditor/./node_modules/lodash-es/_equalArrays.js","webpack://ClassicEditor/./node_modules/lodash-es/_mapToArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_setToArray.js","webpack://ClassicEditor/./node_modules/lodash-es/_equalByTag.js","webpack://ClassicEditor/./node_modules/lodash-es/_equalObjects.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsEqualDeep.js","webpack://ClassicEditor/./node_modules/lodash-es/_baseIsEqual.js","webpack://ClassicEditor/./node_modules/lodash-es/isEqualWith.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/keyobserver.js","webpack://ClassicEditor/./node_modules/lodash-es/now.js","webpack://ClassicEditor/./node_modules/lodash-es/isSymbol.js","webpack://ClassicEditor/./node_modules/lodash-es/toNumber.js","webpack://ClassicEditor/./node_modules/lodash-es/debounce.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/compositionobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/inputobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/scroll.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/view.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js","webpack://ClassicEditor/./node_modules/lodash-es/last.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js","webpack://ClassicEditor/./node_modules/lodash-es/cloneDeep.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/commandcollection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/translation-service.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/locale.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/viewconsumable.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js","webpack://ClassicEditor/./node_modules/lodash-es/isEqual.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/detachoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/writer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/differ.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/history.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/unicode.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/document.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/modifyselection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/model.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/editor.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/componentfactory.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/editorui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/placeholder.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/elementreplacer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditorui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/template.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/view.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/editoruiview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/label/labelview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editableui/editableuiview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/preventdefault.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditoruiview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditor.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/attachtoform.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getdatafromelement.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/plugin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/datatransfer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/command.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-enter/src/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-enter/src/entercommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-enter/src/enter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-enter/src/shiftentercommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-enter/src/shiftenter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/difftochanges.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/injecttypingmutationshandling.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/input.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/deleteobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/delete.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-typing/src/typing.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undocommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/src/redocommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undoediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/tooltip/tooltipview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/theme/icons/undo.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/theme/icons/redo.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undoui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undo.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-autoformat/src/blockautoformatediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-autoformat/src/inlineautoformatediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/theme/icons/browse-files.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfinderui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/notification/notification.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfindercommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfinderediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-upload/src/filereader.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-upload/src/filerepository.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-adapter-ckfinder/src/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/bold.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/italic.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/first.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/src/headingcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/src/headingediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/model.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getpositionedancestor.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/dropdownview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/list/listview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/list/listitemview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/list/listseparatorview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/src/headingui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/src/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/imageloadobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/converters.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/icons/drag-handler.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/imageinsertcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/imageediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widget.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativeediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/inputtext/inputtextview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/check.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/cancel.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/ui/textalternativeformview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/submithandler.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/previous-arrow.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/next-arrow.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/low-vision.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/ui/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativeui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizer.js","webpack://ClassicEditor/./node_modules/lodash-es/throttle.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestylecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/converters.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-left.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-center.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-right.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgettoolbarrepository.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/image.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/theme/icons/image_placeholder.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadprogress.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/upcastwriter.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/listcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/converters.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/listediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/theme/icons/numberedlist.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/theme/icons/bulletedlist.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/listui.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/clickobserver.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/constants.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/mathml.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/configuration.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/textcache.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/listeners.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/serviceprovider.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/latex.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/stringmanager.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/util.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/image.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/accessibility.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/parser.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/editorlistener.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/contentmanager.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/customeditors.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/jsvariables.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/event.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/popupmessage.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/modal.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/polyfills.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/core.src.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/integrationmodel.js","webpack://ClassicEditor/./node_modules/@wiris/ckeditor5-mathml/src/mathmlschema.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/xmldataprocessor.js","webpack://ClassicEditor/./node_modules/@wiris/ckeditor5-mathml/src/conversion/mathmldataprocessor.js","webpack://ClassicEditor/./node_modules/@wiris/ckeditor5-mathml/src/mathml.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/conversion/custommathmldataprocessor.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/integration.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/commands/mathtype.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/commands/chemtype.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/theme/icons/formula.svg","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/theme/icons/chem.svg","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/plugin.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/upcasttable.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/utils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-post-fixer.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/ui/inserttableview.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-column.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-row.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-merge-cell.svg","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/tableui.js","webpack://ClassicEditor/./src/ckeditor.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-essentials/src/essentials.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfinder.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-heading/src/heading.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/image.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageresize.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetoolbar.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-list/src/list.js","webpack://ClassicEditor/./node_modules/@wiris/mathtype-ckeditor5/src/conversion/downcast.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/table.js","webpack://ClassicEditor/./node_modules/@ckeditor/ckeditor5-table/src/tabletoolbar.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","CKEditorError","attachLinkToDocumentation","DOCUMENTATION_URL","Error","[object Object]","message","context","data","JSON","stringify","super","this","type","matchedErrorName","match","stylesInDom","isOldIE","memo","Boolean","document","all","atob","getTarget","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","listToStyles","list","options","styles","newStyles","length","item","id","base","part","css","media","sourceMap","parts","push","addStylesToDom","domStyle","j","refs","addStyle","insertStyleElement","style","createElement","attributes","nonce","nc","keys","forEach","setAttribute","insert","appendChild","replaceText","textStore","index","replacement","filter","join","applyToSingletonTag","remove","obj","styleSheet","cssText","cssNode","createTextNode","childNodes","removeChild","insertBefore","singleton","singletonCounter","update","styleIndex","btoa","concat","unescape","encodeURIComponent","firstChild","parentNode","removeStyleElement","newObj","newList","mayRemove","_i","_domStyle","_freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__","freeSelf","self","Function","freeExports","nodeType","freeModule","freeProcess","process","nodeUtil","types","require","binding","_root_js__WEBPACK_IMPORTED_MODULE_0__","_stubFalse_js__WEBPACK_IMPORTED_MODULE_1__","Buffer","undefined","isBuffer","global","ckeditor5_package_json__WEBPACK_IMPORTED_MODULE_0__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_1__","windowOrGlobal","CKEDITOR_VERSION","freeGlobal","originalModule","webpackPolyfill","children","g","content","injectType","locals","allocUnsafe","buffer","isDeep","slice","result","constructor","copy","md5","_unused_webpack_default_export","HxOverrides","__name__","dateStr","date","getMonth","getDate","h","getHours","mi","getMinutes","getSeconds","getFullYear","strDate","k","split","Date","setTime","setUTCHours","setUTCMinutes","setUTCSeconds","y","cca","x","charCodeAt","substr","pos","len","a","splice","iter","cur","arr","hasNext","next","IntIter","min","max","__class__","Std","v","js","Boot","__instanceof","string","__string_rec","parseInt","isNaN","parseFloat","random","Math","floor","com","wiris","JsPluginTools","tryReady","main","ev","getInstance","haxe","Timer","delay","$bind","instance","bypassEncapsulation","md5encode","Md5","encode","doLoad","ready","Lib","readyState","Log","trace","infos","__trace","clear","__clear_trace","doEncode","str","str2blks","b","olda","oldb","oldc","oldd","ff","gg","hh","ii","addme","rhex","cmn","bitXOR","bitOR","bitAND","q","rol","num","cnt","nblk","blks","Array","_g1","_g","charAt","lsw","time_ms","me","setInterval","run","f","stop","measure","t0","stamp","getTime","clearInterval","$_","method","apply","scope","arguments","__unhtml","msg","fileName","lineNumber","getElementById","innerHTML","console","log","isClass","isEnum","__ename__","getClass","__enum__","i1","tostr","toString","s2","hasp","substring","String","__interfLoop","cc","cl","intf","__interfaces__","__super__","Int","ceil","Float","Bool","Dynamic","Class","Enum","__cast","debug","alert","eval","code","setErrorHandler","onerror","indexOf","NaN","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","isFinite","Void","url","line","_Symbol","_root","objectProto","_getRawTag_hasOwnProperty","nativeObjectToString","symToStringTag","_getRawTag","isOwn","tag","unmasked","_objectToString_nativeObjectToString","_objectToString","nullTag","undefinedTag","_baseGetTag_symToStringTag","_baseGetTag","_overArg","func","transform","arg","_getPrototype","getPrototypeOf","lodash_es_isObjectLike","objectTag","funcProto","isPlainObject_objectProto","funcToString","isPlainObject_hasOwnProperty","objectCtorString","lodash_es_isPlainObject","proto","Ctor","_listCacheClear","__data__","size","lodash_es_eq","other","_assocIndexOf","array","_listCacheDelete","pop","_listCacheGet","_listCacheHas","_listCacheSet","ListCache","entries","entry","set","has","_ListCache","_stackClear","_stackDelete","_stackGet","_stackHas","lodash_es_isObject","asyncTag","funcTag","genTag","proxyTag","lodash_es_isFunction","_coreJsData","maskSrcKey","uid","exec","IE_PROTO","_isMasked","_toSource_funcToString","_toSource","reIsHostCtor","_baseIsNative_funcProto","_baseIsNative_objectProto","_baseIsNative_funcToString","_baseIsNative_hasOwnProperty","reIsNative","RegExp","replace","_baseIsNative","test","_getValue","_getNative","_Map","_nativeCreate","_hashClear","_hashDelete","HASH_UNDEFINED","_hashGet_hasOwnProperty","_hashGet","_hashHas_hasOwnProperty","_hashHas","_hashSet_HASH_UNDEFINED","_hashSet","Hash","_Hash","_mapCacheClear","hash","map","_isKeyable","_getMapData","_mapCacheDelete","_mapCacheGet","_mapCacheHas","_mapCacheSet","MapCache","_MapCache","LARGE_ARRAY_SIZE","_stackSet","pairs","Stack","_Stack","_arrayEach","iteratee","_defineProperty","_baseAssignValue","configurable","writable","_assignValue_hasOwnProperty","_assignValue","objValue","_copyObject","source","props","customizer","isNew","newValue","_baseTimes","argsTag","_baseIsArguments","isArguments_objectProto","isArguments_hasOwnProperty","propertyIsEnumerable","lodash_es_isArguments","lodash_es_isArray","isArray","MAX_SAFE_INTEGER","reIsUint","_isIndex","isLength_MAX_SAFE_INTEGER","lodash_es_isLength","typedArrayTags","_baseIsTypedArray","_baseUnary","nodeIsTypedArray","_nodeUtil","isTypedArray","lodash_es_isTypedArray","_arrayLikeKeys_hasOwnProperty","_arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","_isPrototype_objectProto","_isPrototype","_nativeKeys","_baseKeys_hasOwnProperty","_baseKeys","lodash_es_isArrayLike","lodash_es_keys","_baseAssign","_nativeKeysIn","_baseKeysIn_hasOwnProperty","_baseKeysIn","isProto","lodash_es_keysIn","_baseAssignIn","_copyArray","_arrayFilter","predicate","resIndex","lodash_es_stubArray","_getSymbols_propertyIsEnumerable","nativeGetSymbols","getOwnPropertySymbols","_getSymbols","symbol","_copySymbols","_arrayPush","values","offset","_getSymbolsIn","_copySymbolsIn","_baseGetAllKeys","keysFunc","symbolsFunc","_getAllKeys","_getAllKeysIn","_DataView","_Promise","_Set","_WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","resolve","ctorString","_getTag","_initCloneArray_hasOwnProperty","_initCloneArray","input","_Uint8Array","Uint8Array","_cloneArrayBuffer","arrayBuffer","byteLength","_cloneDataView","dataView","byteOffset","reFlags","_cloneRegExp","regexp","lastIndex","symbolProto","symbolValueOf","valueOf","_cloneSymbol","_cloneTypedArray","typedArray","_initCloneByTag_boolTag","_initCloneByTag_dateTag","_initCloneByTag_mapTag","_initCloneByTag_numberTag","_initCloneByTag_regexpTag","_initCloneByTag_setTag","_initCloneByTag_stringTag","symbolTag","_initCloneByTag_arrayBufferTag","_initCloneByTag_dataViewTag","_initCloneByTag_float32Tag","_initCloneByTag_float64Tag","_initCloneByTag_int8Tag","_initCloneByTag_int16Tag","_initCloneByTag_int32Tag","_initCloneByTag_uint8Tag","_initCloneByTag_uint8ClampedTag","_initCloneByTag_uint16Tag","_initCloneByTag_uint32Tag","_initCloneByTag","objectCreate","_baseCreate","_initCloneObject","_baseIsMap_mapTag","_baseIsMap","nodeIsMap","isMap","lodash_es_isMap","_baseIsSet_setTag","_baseIsSet","nodeIsSet","isSet","lodash_es_isSet","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","_baseClone_argsTag","_baseClone_funcTag","_baseClone_genTag","_baseClone_objectTag","cloneableTags","_baseClone","baseClone","bitmask","stack","isFlat","isFull","isFunc","_cloneBuffer","stacked","subValue","add","keysIn","cloneDeepWith_CLONE_DEEP_FLAG","cloneDeepWith_CLONE_SYMBOLS_FLAG","lodash_es_cloneDeepWith","lodash_es_isElement","config_Config","configurations","defaultConfigurations","_config","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","leaveDOMReferences","cloneConfig","configuration","src_spy","spy","called","eventinfo_EventInfo","path","off","uid_uid","uuid","src_priorities","priority","normal","highest","high","low","lowest","_listeningTo","_emitterId","emittermixin","event","callback","listenTo","wasFired","args","stopListening","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","_setEmitterId","emitterId","callbacks","eventName","events","getEvents","childEventName","newEventNodes","childEvents","lastIndexOf","node","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","added","removeCallback","eventOrInfo","eventInfo","getCallbacksForEvent","_events","callbackArgs","from","_delegations","destinations","passAllDestinations","fireDelegatedEvents","return","to","nameOrFunction","Map","delete","eventNode","callbacksLists","childCallbacksLists","fireArgs","delegatedInfo","fire","mix","baseClass","mixins","mixin","getOwnPropertyNames","sourceDescriptor","getOwnPropertyDescriptor","compareArrays","minLen","clone_CLONE_SYMBOLS_FLAG","lodash_es_clone","node_Node","parent","getChildIndex","ckeditorerror","nextSibling","getChild","previousSibling","unshift","includeSelf","parentFirst","ancestors","ancestorsA","getAncestors","ancestorsB","thisPath","getPath","nodePath","isBefore","_removeChildren","_fireChange","json","text_Text","_textData","is","_data","otherNode","textproxy_TextProxy","textNode","offsetInText","offsetSize","isPartial","objectToMap","isIterable","iterator","Matcher","pattern","_patterns","classes","element","singleElement","isElementMatching","results","matchName","patterns","hasAttribute","attribute","getAttribute","matchAttributes","getClassNames","hasClass","matchClasses","hasStyle","getStyle","matchStyles","element_Element","attrs","_attrs","parseAttributes","_children","_insertChild","_classes","Set","classString","parseClasses","_styles","parseInlineStyles","_customProperties","childCount","isEmpty","cutType","styleString","otherElement","className","matcher","sort","deep","childrenClone","child","getChildren","_clone","cloned","getFillerOffset","items","count","nodes","normalize","_remove","howMany","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","propertyName","char","propertyValue","trim","classesSet","classesString","classArray","containerelement_ContainerElement","lastChild","lodash_es_identity","_apply","thisArg","nativeMax","_overRest","start","otherArgs","lodash_es_constant","_baseSetToString","HOT_COUNT","HOT_SPAN","nativeNow","now","_setToString","lastCalled","remaining","_shortOut","_baseRest","_isIterateeCall","lodash_es_assignIn","assigner","sources","guard","_createAssigner","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","ObservableMixin","initObservable","properties","oldValue","bindProperties","isStringArray","boundProperties","bindings","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","methodName","originalMethod","on","evt","observablemixin","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","toBindings","updateBoundObservableProperty","attachBindToListeners","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","observableAndAttributePairs","getBindingTargets","every","documentSymbol","editableelement_EditableElement","getCustomProperty","_document","_setCustomProperty","isFocused","selection","editableElement","rootNameSymbol","rooteditableelement_RootEditableElement","rootName","_name","treewalker_TreeWalker","boundaries","startPosition","direction","position","position_Position","_createAt","singleCharacters","shallow","ignoreElementEnd","_boundaryStartParent","_boundaryEndParent","end","skip","done","prevPosition","_next","_previous","clone","previousPosition","isAtEnd","_createAfter","_formatReturnValue","charactersCount","textLength","textProxy","isAtStart","_createBefore","startOffset","nextPosition","isEqual","nodeAfter","nodeBefore","endOffset","editable","shift","shifted","treeWalker","otherPosition","compareWith","otherPath","itemOrPosition","range_Range","isCollapsed","getLastMatchingPosition","enlargeTrimSkip","isAfter","nodeAfterStart","nodeBeforeEnd","otherRange","loose","containsStart","containsPosition","containsEnd","ranges","isIntersecting","commonRangeStart","commonRangeEnd","getCommonAncestor","startElement","endElement","getShiftedBy","_createFromParentsAndOffsets","_createFromPositionAndShift","count_count","_","selection_Selection","selectable","placeOrOffset","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","setTo","isFake","fakeSelectionLabel","anchor","range","focus","rangeCount","isBackward","first","last","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","getTrimmed","rangeB","_setRanges","_setFakeOptions","documentselection_DocumentSelection","fake","label","backward","_createIn","_createOn","newFocus","_addRange","newRanges","isLastBackward","_pushRange","storedRange","addedRange","intersectingRange","_selection","delegate","getFirstPosition","getLastPosition","getSelectedElement","isSimilar","setFocus","collection_Collection","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","WeakMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","itemId","idOrIndex","itemOrId","subject","itemDoesNotExist","externalItem","ctx","find","_bindToCollection","externalCollection","as","_setUpBindToBinding","using","callbackOrProperty","addItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","getIndex","reduce","document_Document","roots","_postFixers","postFixer","destroy","writer","wasFixed","DEFAULT_PRIORITY","attributeelement_AttributeElement","attributeelement_getFillerOffset","_priority","_id","_clonesGroup","nonUiChildrenCount","emptyelement_EmptyElement","emptyelement_getFillerOffset","userAgent","navigator","toLowerCase","src_env","isMac","isEdge","isGecko","isSafari","isAndroid","env_isAndroid","features","isRegExpUnicodePropertySupported","isSupported","search","error","macGlyphsToModifiers","⌘","⇧","⌥","modifiersToMacGlyphs","ctrl","alt","keyCodes","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","cmd","letter","fromCharCode","generateKnownKeyCodes","getCode","keyCode","altKey","ctrlKey","shiftKey","parseKeystroke","keystroke","splitKeystrokeText","sum","uielement_UIElement","uielement_getFillerOffset","domDocument","toDomElement","domElement","getAttributeKeys","injectUiElementHandling","view","domConverter","domSelection","domTarget","ownerDocument","defaultView","getSelection","domSelectionCollapsed","getRangeAt","collapsed","domParent","focusNode","domOffset","focusOffset","viewPosition","domPositionToView","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","viewPositionToDom","collapse","extend","jumpOverUiElement","documentfragment_DocumentFragment","documentfragment_normalize","downcastwriter_DowncastWriter","_cloneGroups","_setTo","_setFocus","attributeElement","renderFunction","uiElement","render","_setAttribute","_removeAttribute","_addClass","_removeClass","_setStyle","_removeStyle","_removeCustomProperty","positionOrRange","_breakAttributes","_breakAttributesRange","newElement","sourceRange","targetPosition","move","positionOffset","positionParent","_removeFromClonedElementsGroup","mergeAttributes","mergeTextNodes","_appendChild","prev","newPosition","validateNodesToInsert","errorContext","validNodesToInsert","some","validNode","container","getParentContainer","insertionPosition","_addToClonedElementsGroup","endPosition","rangeOrItem","validateRangeContainer","breakStart","breakEnd","parentContainer","removed","mergePosition","walker","getWalker","current","rangeToRemove","parentElement","ancestor","countBefore","_hasNonUiChildren","_wrapPosition","viewSelection","setSelection","_wrapRange","newRange","_unwrapChildren","newName","viewElement","getAttributes","groupName","wrapElement","wrapPositions","isText","isAttribute","isUI","_wrapAttributeElement","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","breakTextNode","fakePosition","createAttributeElement","wrapRange","wrap","wrapper","toWrap","canBeJoined","getStyleNames","setStyle","addClass","toUnwrap","removeAttribute","removeClass","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","group","getIdentity","textToMove","t1","t2","nodeBeforeLength","startContainer","endContainer","istext_isText","BR_FILLER","fillerBr","dataset","ckeFiller","NBSP_FILLER","INLINE_FILLER_LENGTH","INLINE_FILLER","startsWithFiller","domNode","isInlineFiller","domText","getDataWithoutFiller","templateBlockFillers","isBlockFiller","blockFiller","templateBlockFiller","isEqualNode","jumpOverInlineFiller","fastDiff","cmp","atomicChanges","changeIndexes","arr1","arr2","firstIndex","findFirstDifferenceIndex","lastIndexOld","lastIndexNew","oldArrayReversed","cutAndReverse","newArrayReversed","findChangeBoundaryIndexes","newLength","fill","changeIndexesToAtomicChanges","newArray","changeIndexesToChanges","reverse","diff_diff","aLength","bLength","_insert","_delete","tmp","delta","es","fp","snake","y1","y2","dir","insertat_insertAt","nodeToInsert","remove_remove","isNode","Document","Node","renderer_Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","mapViewToDom","inlineFillerPosition","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","_updateAttrs","_updateChildren","_updateText","fillerDomPosition","addInlineFiller","_updateSelection","_updateFocus","actualDomChildren","expectedDomChildren","viewChildrenToDom","withChildren","diff","_diffNodeLists","actions","_findReplaceActions","counter","equal","action","insertIndex","deleteIndex","viewChild","_updateElementMappings","unbindDomElement","bindElements","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","findAncestor","isEditable","viewText","findCorrespondingDomText","newDomText","viewToDom","actualText","expectedText","filler","insertData","deleteData","domAttrKeys","attr","viewAttrKeys","nodesToUnbind","_markDescendantTextToSync","domToView","domChildList","fakeSelectionContainer","childList","filterOutFakeSelectionContainer","actualDomChild","expectedDomChild","actualDom","expectedDom","newActions","actualSlice","expectedSlice","areSimilar","viewNode","_removeDomSelection","_removeFakeSelection","domRoot","_updateFakeSelection","_updateDomSelection","assign","top","left","width","textContent","domRange","createRange","removeAllRanges","selectNodeContents","addRange","bindFakeSelection","_domSelectionNeedsUpdate","ELEMENT_NODE","childAtOffset","tagName","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","doc","activeDomElement","activeElement","mapDomToView","domParentOrArray","nodeAfterFiller","fillerNode","node1","node2","DOCUMENT_NODE","domconverter_DomConverter","preElements","blockElements","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","viewDocumentSelection","domFragment","viewFragment","textData","_processDataFromViewText","createDocumentFragment","bindDocumentFragments","fillerPositionOffset","childView","viewRange","domStart","domEnd","setStart","setEnd","viewParent","domBefore","domAfter","getParentUIElement","_processDataFromDomText","isComment","isDocumentFragment","viewName","keepOriginalCase","domChildrenToView","domChild","fakeSelectionToView","isDomSelectionBackward","viewRanges","domRangeToView","viewStart","viewEnd","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","isElement","documentFragmentOrElement","viewEditable","domEditable","scrollX","scrollY","scrollPositions","forEachDomNodeAncestor","scrollLeft","scrollTop","scrollTo","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","anchorNode","anchorOffset","detach","_isDomSelectionPositionCorrect","includes","prevNode","_getTouchingViewTextNode","_nodeEndsWithSpace","nextNode","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","Text","getNext","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","currentNode","touchingNode","lca","nodeA","nodeB","boundaryParent","parents","isWindow","stringifiedObject","dom_emittermixin","rest","proxy","_getProxyEmitter","emittermixin_ProxyEmitter","attach","listeningEmitter","listenedToEmitterId","_getEmitterListenedTo","getNodeUID","_domNode","_domListeners","domListener","_createDomListener","useCapture","addEventListener","removeListener","domEvt","removeEventListener","Observer","isEnabled","disable","_setCacheAdd_HASH_UNDEFINED","_setCacheAdd","_setCacheHas","SetCache","_SetCache","_arraySome","_cacheHas","cache","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","_equalArrays","equalFunc","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","_mapToArray","_setToArray","_equalByTag_COMPARE_PARTIAL_FLAG","_equalByTag_COMPARE_UNORDERED_FLAG","_equalByTag_boolTag","_equalByTag_dateTag","_equalByTag_errorTag","_equalByTag_mapTag","_equalByTag_numberTag","_equalByTag_regexpTag","_equalByTag_setTag","_equalByTag_stringTag","_equalByTag_symbolTag","_equalByTag_arrayBufferTag","_equalByTag_dataViewTag","_equalByTag_symbolProto","_equalByTag_symbolValueOf","_equalByTag","convert","_equalObjects_COMPARE_PARTIAL_FLAG","_equalObjects_hasOwnProperty","_equalObjects","objProps","objLength","skipCtor","objCtor","othCtor","_baseIsEqualDeep_COMPARE_PARTIAL_FLAG","_baseIsEqualDeep_argsTag","_baseIsEqualDeep_arrayTag","_baseIsEqualDeep_objectTag","_baseIsEqualDeep_hasOwnProperty","_baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","_baseIsEqual","baseIsEqual","lodash_es_isEqualWith","mutationobserver_MutationObserver","characterData","characterDataOldValue","subtree","renderer","_renderer","_domElements","_mutationObserver","MutationObserver","_onMutations","takeRecords","observe","enable","disconnect","domMutations","mutatedTexts","mutatedElements","mutation","_isBogusBrMutation","text","oldText","newText","viewMutations","mutatedText","markToSync","viewChildren","newViewChildren","sameNodes","oldChildren","newChildren","viewSelectionAnchor","viewSelectionFocus","child1","child2","forceRender","addedNode","removedNodes","addedNodes","domeventdata_DomEventData","domEvent","additionalData","preventDefault","stopPropagation","domeventobserver_DomEventObserver","domEventType","onDomEvent","eventType","keyobserver_KeyObserver","metaKey","lodash_es_now","isSymbol_symbolTag","lodash_es_isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","lodash_es_toNumber","isBinary","FUNC_ERROR_TEXT","debounce_nativeMax","nativeMin","lodash_es_debounce","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","clearTimeout","cancel","flush","fakeselectionobserver_FakeSelectionObserver","_fireSelectionChangeDoneDebounced","_isArrowKeyCode","_handleSelectionMove","newSelection","oldSelection","selectionobserver_SelectionObserver","mutationObserver","getObserver","_documents","WeakSet","_clearInfiniteLoopInterval","_clearInfiniteLoop","_loopbackCounter","_handleSelectionChange","isReadOnly","newViewSelection","focusobserver_FocusObserver","_renderTimeoutId","selectedEditable","compositionobserver_CompositionObserver","isComposing","inputobserver_InputObserver","isRange","getBorderWidths","getComputedStyle","borderTopWidth","right","borderRightWidth","bottom","borderBottomWidth","borderLeftWidth","rectProperties","rect_Rect","isSourceRange","_source","copyRectProperties","getDomRangeRects","getBoundingClientRect","innerWidth","innerHeight","height","anotherRect","rect","getIntersection","getArea","visibleRect","isBody","commonAncestorContainer","parentRect","intersectionRect","prop","intersectRect","scrollBarWidth","scrollBarHeight","documentElement","clientWidth","clientHeight","borderWidths","offsetWidth","offsetHeight","moveBy","rects","clientRects","getClientRects","elementOrRange","body","scrollViewportToShowTarget","viewportOffset","targetWindow","getWindow","currentWindow","currentFrame","firstAncestorToScroll","scrollAncestorsToShowRect","getParentElement","getRectRelativeToWindow","targetRect","scrollWindowToShowRect","frameElement","targetShiftedDownRect","targetShiftedUpRect","viewportRect","excludeScrollbarsAndBorders","contains","isAbove","isBelow","isLeftOf","isRightOf","getRect","parentWindow","firstRect","secondRect","relativeWindow","frame","frameRect","scrollAncestorsToShowTarget","view_View","domRoots","_initialDomRootAttributes","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","injectQuirksHandling","_render","viewRoot","getRoot","initialDomRootAttributes","updateContenteditableAttribute","change","observer","viewRangeToDom","isRenderingInProgress","callbackResult","_callPostFixers","flag","disableObservers","enableObservers","toMap","model_node_Node","getChildStartOffset","model_text_Text","toJSON","model_textproxy_TextProxy","nodelist_NodeList","_nodes","_insertNodes","maxOffset","getNodeIndex","getNodeStartOffset","totalOffset","nodeList","indexStart","model_element_Element","getNode","offsetToIndex","relativePath","element_normalize","_removeNodes","fromJSON","model_treewalker_TreeWalker","model_position_Position","stickiness","_visitedParent","prevVisitedParent","formatReturnValue","offsetInTextNode","lodash_es_last","newOffset","diffAt","leftParent","getParentPath","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","_getTransformedByInsertion","_getTransformedByMove","sourcePosition","movedRange","_getCombined","splitPosition","moveTargetPosition","graveyardPosition","_getTransformedByDeletion","deletionPosition","deletePosition","transformed","insertPosition","combined","graveyard","model_range_Range","getCommonPath","posParent","operations","getTransformedByOperation","containsRange","spread","newPos","moveRange","differenceSet","getDifference","difference","common","transformedCommon","newStart","newEnd","ref","refIndex","mapper_Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","_markerNameToElements","_elementToMarkerNames","_unboundMarkerNames","viewContainer","modelPosition","_findPositionIn","viewBlock","findMappedViewAncestor","modelParent","modelOffset","_toModelOffset","modelElement","toModelElement","markerName","toViewElement","elements","names","nameToElements","elementToNames","markerNames","toModelPosition","modelRange","toViewPosition","mapper","isPhantom","boundElements","getElementsWithSameId","viewElementName","lengthCallback","viewOffset","getModelLength","expectedOffset","lastLength","_moveViewPositionToTextNode","modelconsumable_ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","_getSymbolForTextProxy","itemConsumables","startMap","endMap","_addSymbolForTextProxy","downcastdispatcher_DowncastDispatcher","conversionApi","dispatcher","differ","markers","getMarkersToRemove","convertMarkerRemove","getChanges","convertInsert","convertRemove","convertAttribute","attributeKey","attributeOldValue","attributeNewValue","flushUnboundMarkerNames","markerRange","getRange","convertMarkerAdd","getMarkersToAdd","consumable","_createInsertConsumable","_testAndFire","_clearConversionApi","_createConsumableForRange","markersAtSelection","getMarkersAtPosition","_createSelectionConsumable","marker","shouldMarkerChangeBeConverted","getItems","containsItem","model_selection_Selection","anyNewRange","oldRange","_removeAllRanges","directChange","_popRange","attributeKeys","visited","startBlock","getParentBlock","isUnvisitedBlockContainer","endBlock","isTouching","selected","getSelectedBlocks","block","parentBlock","findAncestorBlock","limitStartPosition","limitEndPosition","_checkRange","model","schema","isBlock","hasParentLimit","isLimit","liverange_LiveRange","isDocumentOperation","_createFromRanges","boundariesChanged","contentChanged","doesOperationChangeRangeContent","toRange","storePrefix","model_documentselection_DocumentSelection","documentselection_LiveSelection","hasOwnRange","isGravityOverridden","getTopMostBlocks","containsEntireContent","_updateMarkers","_updateAttributes","_getStoredAttributes","overrideGravity","restoreGravity","startsWith","_model","_attributePriority","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityRegister","liveRange","_fixGraveyardSelection","_validateSelectionRange","batch","changeParent","isNoLongerEmpty","enqueueChange","storedAttributes","clearAttributesStoredInElement","_getDefaultRange","optionsOrPlaceOrOffset","overrideUid","_prepareRange","fromRange","selectionRange","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_setAttributesTo","changed","newKey","oldKey","getAttrsIfCharacter","isObject","removedRangeStart","positionCandidate","getNearestSelectionRange","ConversionHelpers","dispatchers","_dispatchers","conversionHelper","cloneDeep_CLONE_DEEP_FLAG","cloneDeep_CLONE_SYMBOLS_FLAG","lodash_es_cloneDeep","downcasthelpers_DowncastHelpers","config","normalizeToElementConfig","elementCreator","consume","insertElement","converterPriority","downcastElementToElement","modelValue","getFromAttributeCreator","oldViewElement","newViewElement","viewWriter","toViewRange","unwrap","downcastAttributeToElement","normalizeToAttributeConfig","attributeCreator","oldAttribute","changeAttribute","downcastAttributeToAttribute","isOpening","viewStartElement","viewEndElement","bindElementToMarker","insertUIElement","markerNameToElements","unbindElementFromMarkerName","createRangeOn","clearClonedElementsGroup","downcastMarkerToElement","highlightDescriptor","descriptor","prepareDescriptor","createViewElementFromHighlightDescriptor","rangeAfterWrap","highlightText","highlightElement","viewHighlightElement","removeHighlight","downcastMarkerToHighlight","viewElementType","modelData","viewElementDefinition","createContainerElement","createUIElement","createViewElementFromDefinition","modelAttributeValue","upcasthelpers_UpcastHelpers","upcastElementToElement","normalizeModelAttributeConfig","converter","prepareToAttributeConverter","elementName","getViewElementNameFromConfig","upcastElementToAttribute","viewKey","normalized","keyName","normalizeViewAttributeKeyValueConfig","upcastAttributeToAttribute","oldModel","modelWriter","data-name","normalizeToMarkerConfig","upcastElementToMarker","matcherResult","viewItem","getModelElement","splitResult","splitToAllowedParent","modelCursor","convertChildren","createPositionAt","getSplitParts","createPositionBefore","createPositionAfter","cursorParent","prepareToElementConverter","viewAttributeKeyToCopy","defaultModelValue","modelKey","onlyViewNameIsDefined","modelAttribute","checkAttribute","setAttributeOn","editingcontroller_EditingController","downcastDispatcher","_disableRendering","convertChanges","convertSelection","modelSelection","toModelRange","convertSelectionChange","createText","modelEnd","createRangeIn","unbindViewElement","brokenPosition","breakAttributes","plugincollection_PluginCollection","editor","availablePlugins","_editor","_availablePlugins","_plugins","PluginConstructor","pluginName","plugin","errorMsg","plugins","removePlugins","that","loading","loaded","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","pluginNameOrConstructor","getPluginConstructor","getMissingPluginNames","Promise","reject","loadPlugin","then","initPlugins","requires","RequiredPluginConstructorOrName","RequiredPluginConstructor","requiredBy","_add","instantiatePlugin","catch","err","loadedPlugins","promise","PluginConstructorOrName","promises","pluginInstance","plugin1","plugin2","commandcollection_CommandCollection","_commands","commandName","command","execute","commands","translate","language","translationKey","numberOfLanguages","CKEDITOR_TRANSLATIONS","hasTranslation","RTL_LANGUAGE_CODES","locale_Locale","uiLanguage","contentLanguage","uiLanguageDirection","getLanguageDirection","contentLanguageDirection","_t","warn","translatedString","languageCode","ViewConsumable","_consumables","consumables","elementConsumables","viewconsumable_ViewElementConsumables","revert","consumablesFromElement","createFrom","_canConsumeName","_test","_consume","_revert","consumableName","schema_Schema","_sourceDefinitions","_attributeProperties","decorate","SchemaContext","getDefinition","itemName","definition","_clearCache","_compiledDefinitions","_compile","getDefinitions","def","isInline","_checkContextMatch","attributeName","allowAttributes","positionOrBaseElement","elementToMerge","checkMerge","checkChild","childDef","retValue","getAttributeProperties","selectionOrRangeOrPosition","rangeCommonAncestor","getMinimalFlatRanges","convertToMinimalFlatRanges","_getValidRangesForRange","backwardWalker","forwardWalker","forward","step","combineWalkers","removeDisallowedAttributes","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","endsWith","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","inheritAllFrom","makeInheritAllWork","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","getValues","ctxItem","upcastdispatcher_UpcastDispatcher","_splitParts","_modelCursor","convertItem","_convertItem","_convertChildren","_splitToAllowedParent","_getSplitParts","contextDefinition","append","createContextTree","store","documentFragment","_removeEmptyElements","modelItem","markerElements","markerElement","currentPosition","extractMarkersFromModelFragment","nextModelCursor","allowedParent","findAllowedParent","treeWalkerValue","originalPart","splitPart","_registerSplitPair","anyRemoved","datacontroller_DataController","dataProcessor","processor","upcastDispatcher","_checkIfRootsExists","hasContent","ignoreWhitespaces","modelElementOrFragment","viewDocumentFragment","toView","toData","clearBindings","elementRange","intersection","_getMarkersRelativeToElement","version","initialData","modelRoot","parse","newData","removeSelectionAttribute","toModel","viewElementOrFragment","rootNames","getRootNames","conversion_Conversion","downcastDispatchers","upcastDispatchers","_helpers","_downcast","_createConversionHelpers","isDowncast","_upcast","alias","for","elementToElement","_getAllUpcastDefinitions","attributeToElement","elementToAttribute","attributeToAttribute","helpers","_getUpcastDefinition","upcastAlso","upcastAlsoItem","Batch","baseVersion","op","Operation","__className","model_documentfragment_DocumentFragment","model_documentfragment_normalize","_normalizeNodes","_splitNodeAtPosition","_mergeNodesAtIndex","_move","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","iteratorA","iteratorB","lodash_es_isEqual","attributeoperation_AttributeOperation","detachoperation_DetachOperation","moveoperation_MoveOperation","newTargetPosition","getMovedRangeStart","sourceElement","targetElement","sourceOffset","targetOffset","insertoperation_InsertOperation","shouldReceiveAttributes","gyPosition","originalNodes","markeroperation_MarkerOperation","affectsData","_markers","renameoperation_RenameOperation","oldName","rootattributeoperation_RootAttributeOperation","mergeoperation_MergeOperation","splitoperation_SplitOperation","mergedElement","getInsertionPosition","splitElement","rootelement_RootElement","_doc","writer_Writer","_assertWriterUsedCorrectly","isSameTree","addOperation","applyOperation","rangeRootPosition","usingOperation","updateMarker","addMarker","itemOrRange","setAttributeOnRange","setAttributeOnItem","val","removeAttributesFromItem","_addOperationForAffectedMarkers","flat","applyRemoveOperation","_merge","_mergeDetached","createPositionFromPath","createSelection","merge","renameOperation","limitElement","firstSplitElement","firstCopyElement","elementOrString","shiftedRange","applyMarkerOperation","_set","markerOrName","currentMarker","_refresh","hasUsingOperationDefined","affectsDataDefined","currentRange","updatedRange","managedUsingOperations","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","_overrideGravity","_restoreGravity","storeKey","_getStoreAttributeKey","_currentWriter","isAffected","elementBefore","elementAfter","affectedInLeftElement","affectedInRightElement","affectedAfterLeftElement","affectedBeforeRightElement","valueBefore","valueAfter","lastSplitPosition","previousValue","rootA","rootB","differ_Differ","markerCollection","_markerCollection","_changesInElement","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_isInInsertedElement","_markRemove","_markInsert","getMarkersIntersectingRange","bufferMarkerChange","_markAttribute","sourceParentInserted","targetParentInserted","graveyardParent","mergedIntoElement","buffered","includeChangesInGraveyard","diffSet","changes","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","old","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","diffs","snapshot","oldChildrenLength","oldChildrenHandled","repeat","posInGy","rangeInGy","History","_operations","_undoPairs","_undoneOperations","undoneOperation","undoingOperation","isInsideSurrogatePair","character","isHighSurrogateHalf","isLowSurrogateHalf","isInsideCombinedSymbol","isCombiningMark","graveyardName","model_document_Document","history","_hasSelectionChangedFromTheLastChangeBlock","createRoot","bufferOperation","_hasDocumentChangedFromTheLastChangeBlock","refresh","hasDataChanges","reset","defaultRoot","_getDefaultRoot","validateTextNodePosition","rangeBoundary","markercollection_MarkerCollection","markercollection_Marker","oldMarker","hasChanged","_attachLiveRange","_managedUsingOperations","_affectsData","_destroyMarker","prefix","_detachLiveRange","_liveRange","stopDelegating","liveposition_LivePosition","oldPosition","toPosition","insertcontent_Insertion","canMergeWith","_filterAttributesOf","_affectedStart","_affectedEnd","parentContext","_handleNode","isFirst","isLast","nodeToSelect","_handleObject","_checkAndSplitToAllowedPosition","_mergeSiblingsOf","_handleDisallowedNode","_tryAutoparagraphing","handleNodes","livePos","fromPosition","_setAffectedBoundaries","mergeLeft","_canMergeLeft","mergeRight","_canMergeRight","mergePosLeft","mergePosRight","livePosition","paragraph","_getAllowedIn","tempPos","deleteContent","selRange","doNotResetEntireContent","getLimitElement","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","startPos","endPos","leaveUnmerged","mergeBranches","startParent","endParent","leftPos","rightPos","rangeToCheck","checkCanBeMerged","parentToRemove","collapseSelectionAt","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","validSelectionRange","doNotAutoparagraph","wordBoundaryCharacters","modifySelection","isForward","unit","searchEnd","getSearchRange","tryExtendingTo","setSelectionFocus","isAtWordBoundary","isAtNodeBoundary","boundaryChar","getCorrectWordBreakPosition","getCorrectPosition","offsetToCheck","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","injectSelectionPostFixer","registerPostFixer","correctedRange","tryFixingRange","fixedRanges","selectionStart","selectionEnd","selectionPostFixer","originalPosition","nearestSelectionRange","fixedPosition","tryFixingCollapsedRange","isTextAllowedOnStart","isTextAllowedOnEnd","startLimitElement","endLimitElement","startIsOnBlock","endIsOnBlock","checkSelectionOnNonLimitElements","isStartObject","fixedStart","isEndObject","fixedEnd","isStartInLimit","isEndInLimit","bothInSameParent","expandStart","isInObject","expandEnd","findOutermostLimitAncestor","tryFixingNonCollapsedRage","startingNode","isLimitNode","model_Model","_pendingChanges","_validate","register","addChildCheck","childDefinition","_runPendingChanges","batchOrType","_execute","insertion","nodesToInsert","getSelectionRange","affectedRange","getAffectedRange","insertContent","frag","commonPath","commonParent","getNodeByPath","flatSubtreeRange","appendText","leftExcessRange","getSelectedContent","rangeOrElement","intersectingMarker","ret","currentBatch","callbackReturnValue","_handleChangeBlock","keystrokehandler_KeystrokeHandler","_listener","keyEvtData","editingkeystrokehandler_EditingKeystrokeHandler","evtData","editor_Editor","builtinPlugins","defaultConfig","languageConfig","locale","ui","once","state","editing","conversion","addAlias","keystrokes","extraPlugins","init","readyPromise","dataapimixin","elementapimixin","el","HTMLTextAreaElement","setDataInElement","BasicHtmlWriter","fragment","implementation","createHTMLDocument","htmldataprocessor_HtmlDataProcessor","_domParser","DOMParser","_domConverter","_htmlWriter","getHtml","_toDom","parseFromString","componentfactory_ComponentFactory","_components","originalName","getNormalized","focustracker_FocusTracker","_elements","_nextEventLoopTimeout","_focus","_blur","focusedElement","editorui_EditorUI","componentFactory","focusTracker","_editableElementsMap","ckeditorInstance","_editableElements","editorUI","documentPlaceholders","hidePlaceholder","updateDocumentPlaceholders","placeholders","wasViewModified","updatePlaceholder","isDirectHost","hostElement","getChildPlaceholderHostSubstitute","isEmptyish","selectionAnchor","needsPlaceholder","showPlaceholder","ElementReplacer","_replacedElements","display","classiceditorui_ClassicEditorUI","_toolbarConfig","normalizeToolbarConfig","_elementReplacer","replacementElement","editingView","editingRoot","setEditableElement","attachDomRoot","_initPlaceholder","_initToolbar","restore","detachDomRoot","stickyPanel","limiterElement","viewportTopOffset","toolbar","fillFromConfig","origin","originKeystrokeHandler","originFocusTracker","beforeFocus","afterBlur","enableToolbarKeyboardFocus","placeholderText","enablePlaceholder","viewcollection_ViewCollection","isRendered","_parentElement","elementOrDocFragment","viewcollection_isStringArray","dest","evtName","xhtmlNs","template_Template","template_normalize","template_clone","_isRendered","_revertData","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","if","valueIfTrue","TemplateIfBinding","template","extendTemplate","extendObjectValueArray","eventListeners","childIndex","isInvalid","_renderText","_renderElement","createElementNS","_renderAttributes","_renderElementChildren","_setUpListeners","hasTemplateBinding","_bindToObservable","updater","getTextUpdater","attrName","attrValue","domAttrValue","attrNs","valueToBind","shouldExtend","getAttributeUpdater","_renderStyleAttribute","isFalsy","arrayValueReducer","setAttributeNS","styleName","styleValue","getStyleUpdater","isViewCollection","setParent","childRevertData","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","TemplateBinding","matches","getValue","getValueSchemaValue","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","ext","src_view_View","_viewCollections","_unboundChildren","createCollection","collection","bindTemplate","_bindTemplate","registerChild","getViews","editoruiview_EditorUIView","_renderBodyCollection","_bodyCollectionContainer","bodyElement","class","labelview_LabelView","setTemplate","boxededitoruiview_BoxedEditorUIView","ariaLabelUid","_voiceLabelView","_createVoiceLabel","role","lang","aria-labelledby","voiceLabel","editableuiview_EditableUIView","_editableElement","_hasExternalElement","_editingView","_updateIsFocusedClasses","updateAfterRender","inlineeditableuiview_InlineEditableUIView","toUnit","toPx","stickypanelview_StickyPanelView","_contentPanelPlaceholder","isSticky","_panelRect","_contentPanel","_hasViewportTopOffset","_isStickyToTheLimiter","limiterBottomOffset","marginLeft","_checkIfShouldBeSticky","panelRect","limiterRect","_limiterRect","isActive","_marginLeft","FocusCycler","keystrokeHandler","focusables","isFocusable","_getFocusableItem","previous","viewIndex","focused","collectionLength","toolbarseparatorview_ToolbarSeparatorView","toolbarview_ToolbarView","_focusCycler","focusPrevious","focusNext","aria-label","mousedown","focusFirst","focusLast","classiceditoruiview_ClassicEditorUIView","classiceditor_ClassicEditor","sourceElementOrData","updateSourceElement","form","originalSubmit","onSubmit","submit","attachToForm","getDataFromElement","getInitialData","Plugin","DataTransfer","nativeDataTransfer","files","kind","getAsFile","getFiles","_native","getData","setData","clipboardobserver_ClipboardObserver","viewDocument","handleInput","targetRanges","dropRange","dataTransfer","clipboardData","domDoc","clientX","clientY","caretRangeFromPoint","rangeParent","rangeOffset","getDropViewRange","smallPaddingElements","clipboard_Clipboard","modelDocument","onCopyCut","_htmlDataProcessor","fullMatch","spaces","normalizeClipboardData","plainTextToHtml","scrollToTheSelection","dataController","modelFragment","viewToPlainText","childText","Command","_disableStack","forceDisabled","clearForceDisabled","forceDisable","getCopyOnEnterAttributes","allAttributes","copyOnEnter","entercommand_EnterCommand","isSelectionEmpty","attributesToCopy","splitBlock","setSelectionAttribute","isContainedWithinOneElement","enterBlock","splitPos","enterobserver_EnterObserver","isSoft","enter_Enter","shiftentercommand_ShiftEnterCommand","insertBreak","softBreakAction","anchorPos","isInsideLimitElement","breakLineElement","shiftenter_ShiftEnter","createEmptyElement","ChangeBuffer","limit","isLocked","_changeCallback","_batch","_reset","_selectionChangeCallback","createBatch","ignoreLock","inputcommand_InputCommand","undoStepSize","_buffer","_batches","textInsertions","resultRange","isCollapsedRange","lock","unlock","injectUnsafeKeystrokesHandling","latestCompositionSelection","inputCommand","handleUnsafeKeystroke","isSelectionUnchanged","keyData","safeKeycodes","isSafeKeystroke","deleteSelectionContent","isFlatSelection","getSingleTextNodeChange","output","lastOperation","pushLast","isContinuationOf","expected","diffToChanges","compareChildNodes","oldChild","newChild","injecttypingmutationshandling_MutationHandler","mutations","containerChildrenMutated","_handleContainerChildrenMutations","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","commonAncestor","getMutationsContainer","domMutationCommonAncestor","freshDomConverter","modelFromCurrentDom","currentModel","modelFromDomChildren","currentModelChildren","lastDomChild","lastCurrentChild","isSafeForTextMutation","diffResult","firstChangeAt","insertions","deletions","calculateChanges","modelSelectionRange","insertText","viewPos","modelPos","insertedText","lastChangeAt","input_Input","handle","injectTypingMutationsHandling","deletecommand_DeleteCommand","_shouldEntireContentBeReplacedWithParagraph","sequence","_replaceEntireContentWithParagraph","limitElementFirstChild","deleteobserver_DeleteObserver","fireViewDeleteEvent","originalEvent","hasWordModifier","inputType","selectionToRemove","delete_Delete","deleteCommandParams","domSelectionAfterDeletion","typing_Typing","nooperation_NoOperation","transformations","setTransformation","OperationA","OperationB","transformationFunction","aGroup","noUpdateTransformation","transform_transform","getTransformation","transformSets","operationsA","operationsB","contextFactory","transform_ContextFactory","useRelations","forceWeakRemove","setOriginalOperations","originalOperations","nextTransformIndex","nextBaseVersionA","nextBaseVersionB","originalOperationsACount","originalOperationsBCount","opA","indexB","opB","newOpsA","getContext","newOpsB","updateRelation","newOpA","padWithNoOps","brokenOperationsACount","brokenOperationsBCount","updateBaseVersions","_history","_useRelations","_forceWeakRemove","_relations","takeFrom","originalOperation","_setRelation","affectedLeft","affectedRight","side","wasInLeftElement","wasStartBeforeMergedElement","wasEndBeforeMergedElement","wasInRightElement","aIsStrong","aWasUndone","_wasUndone","bWasUndone","abRelation","_getRelation","baRelation","originalOp","wasUndone","isUndoneOperation","origB","undoneB","getUndoneOperation","origA","relationsA","relation","_getComplementaryAttributeOperations","insertOperation","insertValue","_moveTargetIntoMovedRange","_makeMoveOperationsFromRanges","hasSameParentAs","moveOp","_breakRangeByMoveOperation","aNewRange","aToGraveyard","bToGraveyard","removedRange","mergeInside","mergeSplittingElement","getReversed","aCompB","shouldSpread","rightRange","movesGraveyardElement","gyMoveSource","splitNodesMoveSource","gyMoveTarget","gyMove","splitNodesMoveTargetPath","splitNodesMoveTarget","splitNodesMove","splitPath","additionalSplit","rangeToMove","gyElementMoved","newParentPosition","newTargetPath","howManyRemoved","aInGraveyard","bInGraveyard","newPositionPath","basecommand_BaseCommand","_stack","_createdBatches","docSelection","selectionRanges","transformSelectionRange","batchToUndo","undoingBatch","operationsToUndo","operationToUndo","nextBaseVersion","historyOperations","getOperations","reversedOperations","setOperationAsUndone","getTransformedByOperations","undocommand_UndoCommand","batchIndex","findIndex","_undo","_restoreSelection","redocommand_RedoCommand","redoingBatch","undoediting_UndoEditing","_batchRegistry","_undoCommand","_redoCommand","isRedoBatch","isUndoBatch","addBatch","clearStack","undoneBatch","iconview_IconView","viewBox","_updateXMLContent","_colorFillPaths","svg","fillColor","querySelectorAll","tooltipview_TooltipView","buttonview_ButtonView","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","_getTooltipString","tabindex","aria-disabled","aria-pressed","isToggleable","click","icon","tooltip","getEnvKeystrokeText","undo","redo","undoui_UndoUI","localizedUndoIcon","localizedRedoIcon","_addButton","Icon","undo_Undo","blockautoformatediting_BlockAutoformatEditing","callbackOrCommand","InlineAutoformatEditing","testRegexpOrCallback","attributeOrCallback","regExp","testCallback","formatCallback","format","1","leftDel","2","3","rightDel","delStart","delEnd","rangesToFormat","validRanges","getValidRanges","getText","testOutput","testOutputToRanges","rangesToRemove","arrays","getCallbackFunctionForInlineAutoformat","browse_files","ckfinderui_CKFinderUI","button","notification_Notification","_showNotification","namespace","title","ckfindercommand_CKFinderCommand","imageCommand","linkCommand","openerMethod","chooseFiles","originalOnInit","onInit","finder","toArray","links","file","isImage","images","linkFile","getUrl","imagesUrls","image","request","insertImages","resizedUrl","notification","showWarning","CKFinder","urls","ckfinderediting_CKFinderEditing","pendingactions_PendingActions","_actions","hasAny","FileReader","reader","_reader","onprogress","total","onload","onabort","readAsDataURL","abort","filerepository_FileRepository","loaders","_updatePendingAction","_loadersMap","_pendingAction","uploaded","fileOrPromise","createUploadAdapter","loader","filerepository_FileLoader","aggregatedUploaded","aggregatedTotal","uploadTotal","fileOrPromiseOrLoader","getLoader","_destroy","pendingActions","getMessage","uploadedPercent","filePromise","uploadAdapterCreator","_filePromiseWrapper","_createFilePromiseWrapper","_adapter","status","read","upload","uploadResponse","isFulfilled","rejecter","resolver","TOKEN_COOKIE_NAME","TOKEN_LENGTH","tokenCharset","getCsrfToken","token","cookie","pair","decodeURIComponent","getCookie","randValues","crypto","getRandomValues","toUpperCase","generateToken","setCookie","uploadadapter_CKFinderUploadAdapter","uploadadapter_UploadAdapter","_initRequest","_initListeners","_sendRequest","xhr","XMLHttpRequest","open","responseType","genericError","response","default","lengthComputable","FormData","send","attributecommand_AttributeCommand","_getValueFromFirstAllowedNode","checkAttributeInSelection","forceValue","BOLD","boldediting_BoldEditing","setAttributeProperties","isFormatting","font-weight","bold","boldui_BOLD","boldui_BoldUI","ITALIC","italicediting_ItalicEditing","font-style","italic","italicui_ITALIC","italicui_ItalicUI","first_first","iterable","iteratorItem","paragraphcommand_ParagraphCommand","checkCanBecomeParagraph","blocks","rename","paragraph_Paragraph","paragraphLikeElements","isParagraphable","wrapInParagraph","_autoparagraphEmptyRoots","createContext","headingcommand_HeadingCommand","modelElements","heading","checkCanBecomeHeading","defaultModelElement","headingediting_HeadingEditing","option","_addDefaultH1Conversion","enterCommand","src_model_Model","dropdownpanelview_DropdownPanelView","selectstart","getOptimalPosition","positions","limiter","fitInViewport","positionedElementAncestor","getPositionedAncestor","elementRect","bestPosition","getVisible","bestPositionRect","bestPositionName","maxLimiterIntersectArea","maxViewportIntersectArea","elementRectArea","positionName","positionRect","getPosition","limiterIntersectArea","viewportIntersectArea","limiterViewportIntersectRect","getIntersectionArea","setBestPosition","getBestPosition","getAbsoluteRectCoordinates","ancestorPosition","ancestorBorderWidths","moveTo","dropdownview_DropdownView","buttonView","panelView","isOpen","panelPosition","_getOptimalPosition","_panelPositions","closeDropdown","southEast","southWest","northEast","northWest","defaultPanelPositions","buttonRect","dropdown_arrow","dropdownbuttonview_DropdownButtonView","arrowView","_createArrowView","aria-haspopup","listview_ListView","listitemview_ListItemView","listseparatorview_ListSeparatorView","switchbuttonview_SwitchButtonView","toggleSwitchView","_createToggleView","clickOutsideHandler","activator","contextElements","contextElement","createDropdown","ButtonClass","dropdownView","closeDropdownOnBlur","closeDropdownOnExecute","focusDropdownContentsOnArrows","addDefaultBehavior","addListToDropdown","listView","listItemView","headingui_HeadingUI","localizedTitles","Paragraph","Heading 1","Heading 2","Heading 3","Heading 4","Heading 5","Heading 6","getLocalizedOptions","defaultTitle","dropdownTooltip","titles","itemDefinitions","headingCommand","paragraphCommand","withText","commandValue","isOn","areEnabled","para","whichModel","imageloadobserver_ImageLoadObserver","_observedElements","_updateObservedElements","_fireEvents","modelToViewAttributeConverter","img","HighlightStack","oldTop","_insertDescriptor","newTop","compareDescriptors","oldDescriptor","newDescriptor","_removeDescriptor","shouldABeBeforeB","classesToString","drag_handler","WIDGET_CLASS_NAME","WIDGET_SELECTED_CLASS_NAME","isWidget","toWidget","setCustomProperty","utils_getFillerOffset","labelOrCreator","setLabel","hasSelectionHandler","widgetElement","selectionHandler","addSelectionHandler","setHighlightHandling","normalizeToArray","getLabel","labelCreator","toWidgetEditable","findOptimalInsertionPosition","selectedElement","firstBlock","positionAfter","getSelectedImageWidget","isImageWidget","insertImage","imageElement","insertAtSelection","isImageAllowed","getInsertImageParent","isImageAllowedInParent","checkSelectionOnObject","isInOtherImage","imageinsertcommand_ImageInsertCommand","src","imageediting_ImageEditing","createImageViewElement","altText","toImageWidget","srcset","srcsetAttributeConverter","viewImage","conversionResult","modelImage","viewFigureToModel","emptyElement","figure","mouseobserver_MouseObserver","selectAllKeystrokeCode","widget_Widget","_previouslySelected","_clearPreviouslySelectedWidgets","lastMarked","isChild","_onMousedown","_onKeydown","_handleDelete","domEventData","isInsideNestedEditable","detail","_setSelectionOverElement","wasHandled","isArrowKeyCode","isSelectAllKeyCode","_handleEnterKey","_selectAllNestedEditableContent","_selectAllContent","_handleArrowKeys","objectElement","_getObjectElementNextToSelection","previousNode","nodeToRemove","objectElement2","isBackwards","shouldInsertParagraph","paragraphLimit","documentSelection","widgetParent","probe","widget","imagetextalternativecommand_ImageTextAlternativeCommand","imagetextalternativeediting_ImageTextAlternativeEditing","labeledinputview_LabeledInputView","InputView","inputUid","statusUid","inputView","_createInputView","statusView","_createStatusView","errorText","infoText","ariaDescribedById","select","inputtextview_InputTextView","placeholder","readonly","aria-invalid","aria-describedby","setValue","check","icons_cancel","textalternativeformview_TextAlternativeFormView","labeledInput","_createLabeledInputView","saveButtonView","_createButton","cancelButtonView","_focusables","submitHandler","balloonpanelview_toPx","defaultLimiterElement","balloonpanelview_BalloonPanelView","isVisible","show","defaultPositions","positionOptions","southArrowNorth","southArrowNorthWest","southArrowNorthEast","northArrowSouth","northArrowSouthWest","northArrowSouthEast","optimalPosition","unpin","_pinWhenIsVisibleCallback","_startPinning","_stopPinning","hide","attachTo","getDomElement","scrollTarget","isWithinScrollTarget","isLimiterWithinScrollTarget","getNorthTop","balloonRect","arrowVerticalOffset","getSouthTop","arrowHorizontalOffset","northWestArrowSouth","northWestArrowSouthWest","northWestArrowSouthEast","northEastArrowSouth","northEastArrowSouthEast","northEastArrowSouthWest","southWestArrowNorth","southWestArrowNorthWest","southWestArrowNorthEast","southEastArrowNorth","southEastArrowNorthEast","southEastArrowNorthWest","previous_arrow","next_arrow","contextualballoon_toPx","contextualballoon_ContextualBalloon","positionLimiter","_viewToStack","_idToStack","_rotatorView","_createRotatorView","_fakePanelsView","_createFakePanelsView","hasView","stackId","_numberOfStacks","_visibleStack","singleViewMode","showStack","_showView","_singleViewMode","visibleView","_showNextStack","hideView","_getStackId","pin","_getBalloonPosition","updatePosition","visibleStack","stacks","nextIndex","contextualballoon_RotatorView","isSingleViewMode","numberOfStacks","buttonNextView","buttonPrevView","_showPrevStack","contextualballoon_FakePanelsView","number","balloonClassName","withArrow","showView","_createButtonView","z-index","balloonPanelView","_balloonPanelView","_addPanels","_removePanels","deregisterChild","numberOfPanels","low_vision","getBalloonPositionData","imagetextalternativeui_ImageTextAlternativeUI","_createForm","_form","_showForm","_balloon","_hideForm","_isVisible","balloon","repositionContextualBalloon","_isInBalloon","focusEditable","imagetextalternative_ImageTextAlternative","resizerstate_ResizeState","_options","_referenceCoordinates","domResizeHandle","domHandleHost","domResizeHost","clientRect","activeHandlePosition","domHandle","resizerPositions","classList","getResizerHandleClass","getHandlePosition","resizerPosition","positionParts","getAbsoluteBoundaryPoint","replacements","getOppositePosition","originalWidth","originalHeight","aspectRatio","widthStyle","originalWidthPercents","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","resizer_Resizer","_domResizerWrapper","downcastWriter","viewResizerWrapper","_appendHandles","_appendSizeUI","propName","_sizeUI","bindToState","begin","_getHandleHost","_getResizeHost","redraw","_proposeNewSize","domHandleHostRect","round","domResizeHostRect","onCommit","_cleanup","domWrapper","existsInDom","widgetWrapper","handleHost","isSameNode","offsetLeft","offsetTop","dismiss","currentCoordinates","pageX","pageY","extractCoordinates","isCentered","enlargement","proposedSize","abs","dominant","targetSize","getResizeHost","getHandleHost","getResizerClass","sizeUI","resizer_SizeView","visible","resizerState","unbind","throttle_FUNC_ERROR_TEXT","lodash_es_throttle","widgetresize_WidgetResize","resizers","activeResizer","_observer","isResizeHandle","resizeHandle","_getResizerByHandle","updateSize","commit","redrawResizers","resizer","containsHandle","imageresizecommand_ImageResizeCommand","imagestylecommand_ImageStyleCommand","defaultStyle","isDefault","attributeValue","getStyleByName","object_full_width","object_left","object_center","object_right","defaultStyles","full","alignLeft","alignCenter","alignRight","defaultIcons","center","normalizeImageStyles","configuredStyles","_normalizeStyle","extendedStyle","imagestyleediting_ImageStyleEditing","modelToViewConverter","newStyle","oldStyle","modelToViewStyleAttribute","filteredStyles","viewFigureElement","modelImageElement","viewToModelStyleAttribute","imagestyleui_ImageStyleUI","localizedDefaultStylesTitles","Full size image","Side image","Left aligned image","Centered image","Right aligned image","translatedStyles","translateStyles","componentName","widgettoolbarrepository_WidgetToolbarRepository","balloonToolbar","isWidgetSelected","_toolbarDefinitions","_updateToolbarsVisibility","toolbarConfig","toolbarId","ariaLabel","getRelatedElement","toolbarView","maxRelatedElementDepth","deepestRelatedElement","deepestToolbarDefinition","relatedElement","relatedElementDepth","_isToolbarInBalloon","_hideToolbar","_isToolbarVisible","_showToolbar","toolbarDefinition","widgettoolbarrepository_repositionContextualBalloon","widgettoolbarrepository_getBalloonPositionData","filedialogbuttonview_FileDialogButtonView","_fileInputView","filedialogbuttonview_FileInputView","accept","multiple","icons_image","isImageType","fetchLocalImage","imageSrc","fetch","resource","blob","mimeType","getImageMimeType","filename","File","createFileFromBlob","imageuploadui_ImageUploadUI","acceptedType","allowMultipleFiles","imagesToUpload","image_placeholder","imageuploadprogress_ImageUploadProgress","uploadStatusChange","uploadId","fileRepository","viewFigure","_startAppearEffect","_showPlaceholder","_hidePlaceholder","progressBar","_createProgressBar","_showProgressBar","viewImg","_displayLocalImage","completeIcon","_showCompleteIcon","_removeUIElement","_hideProgressBar","_stopAppearEffect","_getUIElement","_createPlaceholder","imageFigure","uniqueProperty","upcastwriter_UpcastWriter","removeChildren","oldElement","insertChild","imageuploadcommand_ImageUploadCommand","filesToUpload","uploadImage","createLoader","imageuploadediting_ImageUploadEditing","isHtmlIncluded","fetchableImages","isLocalImage","fetchableImage","isInGraveyard","getImagesFromChangeItem","_readAndUpload","domFigure","originalDisplay","_ckHack","setAttributes","uploadStatus","_parseAndSetSrcsetAttributeOnImage","clean","destroyLoader","maxWidth","srcsetAttribute","listcommand_ListCommand","_checkEnabled","checkCanBecomeListItem","turnOff","currentIndent","indent","newIndent","listIndent","lowestIndent","_fixType","listType","listItem","startingItem","indentcommand_IndentCommand","indentDirection","_indentBy","itemsToChange","lastItem","generateLiInUl","getListItemFillerOffset","createViewListItemElement","viewList","injectViewList","injectedItem","injectedList","refItem","getSiblingListItem","sameIndent","smallerIndent","prevItem","breakContainer","positionAfterUiElements","prevView","breakPosition","mergeViewLists","nextViewList","lastSubChild","modelChild","firstList","secondList","mergeContainers","itemIndent","createUIComponent","hasOnlyLists","modelViewInsertion","modelViewChangeType","listName","modelViewMergeAfterChangeType","modelViewSplitOnInsert","removeStart","removeEnd","previousList","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","conversionStore","listItemModel","convertedChild","wasSplit","findNextListItem","viewToModelListItemChildrenConverter","cleanList","cleanListItem","foundList","firstNode","modelToViewPosition","topmostViewList","modelIndentPasteFixer","indentChange","hoistNestedLists","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","foo","prevIndent","prevViewList","listediting_ListEditing","itemToListHead","applied","_addListToFix","listHead","_fixListIndents","_fixListTypes","maxIndent","fixBy","typesStack","modelChangePostFixer","registerViewToModelLength","getViewListItemLength","modelNode","modelLength","viewToModelPosition","viewListPrev","modelViewChangeIndent","modelViewRemove","firstPosition","getCommandExecuter","outdent","registerChildCommand","numberedlist","bulletedlist","listui_ListUI","clickobserver_ClickObserver","Constants","safeXmlCharactersEntities","tagOpener","tagCloser","doubleQuote","realDoubleQuote","safeBadBlackboardCharacters","ltElement","gtElement","ampElement","safeGoodBlackboardCharacters","xmlCharacters","ampersand","quote","safeXmlCharacters","mathml_MathML","expression","reversed","_wrs_blackboard","returnValue","currentEntity","mathml","toReturn","codePointAt","util_Util","fixedCharCodeAt","innerText","customEditor","annotationEncoding","mathmlWithAnnotation","closeSemanticsIndex","endIndexInline","endIndexNonInline","endIndex","beginMathMLContent","endMathmlContent","mathmlContent","mathmlWithoutAnnotation","openAnnotationTag","startAnnotationIndex","differentAnnotationFound","differentAnnotationIndex","endAnnotationIndex","removeSemantics","mathmlWithoutSemantics","startSemantics","startAnnotation","characters","mathTagStart","mathTagEnd","mathTagEndline","semanticsTagStart","annotationTagStart","mathTagEndIndex","mathTagEndlineIndex","firstTagCloser","semanticsIndex","mmlTagStart","annotationIndex","startIndex","mathML","classIndex","classTagEndIndex","firstCloseTagIndex","firstCloseTagInlineIndex","empty","mathTagEndArray","quoteIndex","propertyValueEncoded","htmlEntities","Configuration","_properties","updateProperty","saveMode","base64savemode","TextCache","Listeners","listener","cancelled","defaultPrevented","serviceprovider_ServiceProvider","_listeners","parameters","_parameters","servicePaths","_servicePaths","service","serviceName","integrationPath","_integrationPath","location","href","configurationURI","createServiceURI","createImageURI","showImageURI","getMathMLURI","serviceURI","URI","serverPath","getServerURL","setServicePath","postVariables","currentPath","httpRequest","createHttpRequest","setRequestHeader","httpBuildQuery","responseText","serviceUrl","getServicePath","extension","serverExtension","concatenateUrl","server","latex_Latex","_cache","mml","jsonResponse","getService","latex","latexHtmlEntitiesEncoded","mathmlWithSemantics","addAnnotation","populate","includeLatexOnSemantics","latexCache","saveLatex","mathTagBegin","openTarget","closeTarget","closeAnnotation","safeXmlDecode","caretPosition","latexTags","close","startNode","getNextLatexPosition","nodeValue","isPrevious","endNode","tagLength","StringManager","strings","eventTarget","createEvent","eventObject","initEvent","dispatchEvent","createEventObject","fireEvent","callBackFunction","attachEvent","detachEvent","doubleClickHandler","mousedownHandler","mouseupHandler","addEvent","realEvent","srcElement","containsClass","currentClasses","newClassName","xitpos","valpos","startquote","endquote","newvalue","creator","html","objectCode","recursiveParamsFix","attributesParsed","nodeName","param","NAME","VALUE","replaceChild","applet","specified","createObject","path1","path2","separator","textarea","ActiveXObject","oc","urlEncode","s1","compareStrings","an","bn","idx","hi","ss","kv","clearString","imgCode","convertToXml","convertToSafeXml","imgObject","dataMathML","removeAnnotation","safeXmlEncode","staticNodeLengths","IMG","BR","getNodeLength","isIframe","forceGetSelection","windowTarget","contentWindow","htmlText","getSelectedItem","execCommand","temporalObject","pasteHTML","textNodeValues","getLatexFromTextNode","autoClosed","endString","PLUS","SLASH","NUMBER","LOWER","UPPER","PLUS_URL_SAFE","SLASH_URL_SAFE","b64String","placeHolders","decode64","bytes","int32","selectionEndSub","textareaStart","parameter","sep","src_image_Image","attributesToRemove","originImg","destImg","customEditorAttributeName","originAttribute","uri","ar","base64String","svgString","getMetricsFromSvgString","b64ToByteArray","getMetricsFromBytes","urlToAssArray","cw","ch","baseline","cb","dpi","verticalAlign","setImgSize","base64","typ","readBytes","readInt32","readByte","accessibility_Accessibility","containClass","accessibleText","accessibleJsonResponse","parser_Parser","wirisProperties","align","metrics","centerbaseline","mathmlSubstring","createImageSrc","mathMLToAccessible","createShowImageSrc","baseParts","initParseSaveMode","initParseEditMode","parseMathmlToLatex","parseMathmlToImg","codeImgTransform","imgList","getElementsByNameFromString","carry","mathmlStartToken","mathmlStart","mathmlEnd","latexStartPosition","latexEndPosition","htmlEntitiesDecode","codeEndParsedEditMode","endParseEditMode","endParseSaveMode","decodedLatex","getMathMLFromLatex","dataMd5","renderParams","dataObject","formula","propertiesToString","patternLength","characterNextPosition","xmlCode","mathmlToImgObject","createObjectCode","getWIRISImageOutput","imageMathmlAtrribute","isMathmlInAttribute","mathMLEntities","Config","EditorListener","isContentChanged","waitingForChanges","contentmanager_ContentManager","contentManagerAttributes","editorAttributes","customEditors","environment","editorListener","ua","deviceProperties","isIOS","modalDialogInstance","isNewElement","integrationModel","isEditorLoaded","updateTitle","insertEditor","jsEditor","JsEditor","newInstance","insertInto","contentContainer","rtl","getEditorModel","isRTL","addEditorListener","hideKeyboard","formulaDisplayDiv","getElementsByClassName","handleOpenedIosSoftkeyboard","handleClosedIosSoftkeyboard","script","editorUrl","urlObject","protocol","port","hostname","pathname","stats","getElementsByTagName","setMathML","focusDisabled","setMathMLWithCallback","setWaitingForChanges","setIsContentChanged","onFocus","isFormulaEmpty","updateFormula","getMathMLWithSemantics","getActiveEditor","addCustomEditorClassAttribute","editors","removeCustomEditorClassAttribute","mathmlEntitiesEncoded","notifyWindowClosed","setEmptyMathML","updateToolbar","_wrs_int_wirisProperties","setToolbar","getToolbar","setTitle","setParams","getIsContentChanged","keyboardEvent","cancelAction","submitButton","cancelButton","CustomEditors","activeEditor","editorName","editorParams","confVariable","customEditorName","jsvariables","imageCustomEditorName","imageClassName","CASClassName","Event","PopUpMessage","popupMessageAttributes","overlayElement","overlayWrapper","overlay","buttonArea","buttonSubmitArguments","submitString","closeButton","createButton","closeAction","buttonCancelArguments","cancelString","blur","_wrs_modalWindow","cancelCallback","closeCallback","modal_ModalDialog","modalDialogAttributes","iosSoftkeyboardOpened","iosMeasureUnit","iosDivHeight","deviceWidth","outerWidth","deviceHeight","outerHeight","landscape","portrait","isLandscape","isPortrait","isMobile","instanceId","orientation","isDesktop","created","previousState","websiteBeforeLockParameters","getElementId","titleBar","closeDiv","stackDiv","maximizeDiv","minimizeDiv","controls","buttonContainer","createSubmitButton","submitAction","contentManager","popupStrings","popupupProperties","popup","hasChanges","showPopUpMessage","getElement","recalculateScrollBar","createModalWindowDesktop","createResizeButtons","addListeners","maximize","createModalWindowAndroid","createModalWindowIos","scrollbarWidth","resizerBR","resizerTL","activateResizeStateBR","activateResizeStateTL","mouseEvent","initializeResizeProperties","leftOption","resizeDataObject","eventClient","X","Y","initialWidth","initialHeight","leftScale","initialRight","initialBottom","restoreWebsiteScale","lockWebsiteScroll","restoreState","setContainerHeight","newListener","onOpen","addListener","saveModalProperties","unlockWebsiteScroll","viewportmeta","contentAttrsToUpdate","contentAttrsValuesToUpdate","setMetaAttrFunc","viewportelement","contentAttrs","contentAttr","attrArray","finalContentMeta","oldAttrs","isAttrToUpdate","bodyStylePosition","bodyStyleOverflow","overflow","htmlStyleOverflow","windowScrollX","windowScrollY","orientationChangeAndroidSoftkeyboard","orientationChangeIosSoftkeyboard","minimize","restoreModalProperties","setResizeButtonsVisibility","recalculatePosition","recalculateScale","removeListeners","setSize","setPosition","recalculateSize","visibility","startDrag","stopDrag","drag","onWindowResize","onKeyDown","removeEvent","changedTouches","dragDataObject","lastDrag","isIE11","limitWindow","getLimitWindow","limitY","minPointer","maxPointer","limitX","dragX","dragY","scaleMultiplier","maxHeight","contStyleBottom","contStyleRight","pageXOffset","offSetToolbarY","offSetToolbarX","minPointerY","maxPointerY","inner","outer","widthOuter","widthInner","sizeModificated","hasScrollBar","getScrollBarWidth","inputField","portraitMode","second","varArgs","nextSource","nextKey","core_src_Core","coreProperties","editMode","modalDialog","addEditor","editionProperties","temporalImage","latexRange","browser","serviceProviderProperties","globalListeners","_globalListeners","initialized","_initialized","integrationEnvironment","serviceProviderListener","jsConfiguration","jsonConfiguration","addConfiguration","beforeUpdateEvent","focusElement","returnObject","getLatexFromMathML","fillNonLatexNode","afterUpdateEvent","insertElementOnSelection","nodeDocument","setStartAfter","updateTextArea","editorSelection","deleteContents","splitText","placeCaretAfterNode","insertNode","getSelectedItemOnTextarea","updateExistingTextOnTextarea","removeImgDataAttributes","selectedItem","getMathmlFromTextNode","latexResult","leftOffset","moveToElementText","moveEnd","defaultEditorAttributesArray","defaultEditorAttributes","tempAttribute","serverEditorParameters","cliendEditorParameters","editorParameters","setContentManager","setModalDialogInstance","setIntegrationModel","integrationmodel_IntegrationModel","integrationModelProperties","configurationService","scriptName","callbackMethodArguments","editorObject","managesLanguage","temporalImageResizing","core","integrationParameters","getLanguage","callbackFunction","getServerLanguageFromService","configurationIndex","subsTring","serviceParametersURI","setCore","setEnvironment","col","openModalDialog","util","EditorUtils","beforeUpdateFormula","insertFormula","afterUpdateFormula","addElementEvents","getCustomEditors","openExistingFormulaEditor","fixAfterResize","getBrowserLanguage","userLanguage","addEvents","viewElements","viewMath","mathmlschema_modelElements","modelMath","mathmlschema_attributes","mathmlschema_schema","realName","modelName","needsCasting","allowsText","xmldataprocessor_XmlDataProcessor","namespaces","nsp","parsedDocument","parserError","mathmldataprocessor_MathmlDataProcessor","frontier","closest","domParser","out","src_mathml_MathML","addAttributeCheck","contextArray","custommathmldataprocessor_CustomMathmlDataProcessor","mathPattern","innerStartIndex","closeStartIndex","htmlPieces","mathmlPieces","piece","acc","integration_CKEditor5Integration","ckeditorIntegrationModelProperties","integrationFolderName","wirislistenersdisabled","checkElement","wirisActive","setTarget","customEditorAttr","addEditorListeners","openNewFormulaEditor","getCore","mathmlDP","modelElementNew","modelElementOld","pivot","descendants","findText","insertMathml","mathtype_MathType","integration","chemtype_ChemType","chem","WirisPlugin","Core","Parser","Image","MathML","Util","IntegrationModel","Latex","parentName","updateNumericAttribute","defaultValue","createEmptyTableCell","tableCell","upcastTable","viewTable","rows","headingRows","headingColumns","tableMeta","headRows","bodyRows","firstTheadElement","tableChild","trs","tr","headingCols","scanRowForHeadingColumns","scanTable","table","row","upcastTableCell","viewTableCell","th","TableWalker","startRow","endRow","includeSpanned","column","_skipRows","_row","_column","_cellIndex","_spannedCells","_nextCellAtColumn","_isOverEndRow","cell","skipCurrentValue","outValue","_isSpanned","_getSpanned","_shouldSkipRow","_shouldSkipColumn","_formatOutValue","colspan","rowspan","_recordSpans","isSpanned","cellIndex","rowIsBelowStartRow","rowIsMarkedAsSkipped","columnToUpdate","_markSpannedCell","rowToUpdate","isTableWidget","getSelectedTableWidget","getTableWidgetAncestor","parentTable","downcastInsertTable","asWidget","figureElement","tableElement","tableWidget","toTableWidget","tableWalker","tableAttributes","viewRows","tableWalkerValue","tableSection","getOrCreateTableSection","getSectionName","tableRow","trElement","createTr","createViewTableCellElement","downcastInsertRow","getViewTable","downcastInsertCell","rowIndex","downcastTableHeadingRowsChange","oldRows","newRows","rowsToMove","isBetween","moveViewRowsToTableSection","renameViewTableCell","removeTableSectionIfEmpty","renameViewTableCellIfRequired","lower","upper","downcastTableHeadingColumnsChange","oldColumns","newColumns","lastColumnToCheck","desiredCellElementName","viewCell","renamedCell","createEditableElement","getCellElementName","cellElementName","cellElement","isSingleParagraph","hasAnyAttribute","innerParagraph","paragraphInsertPosition","fakeParagraph","sectionName","viewTableSection","getExistingTableSectionElement","tableChildElement","createTableSection","viewTableRow","inserttablecommand_InsertTableCommand","validParent","getInsertTableParent","tableUtils","columns","createTable","insertrowcommand_InsertRowCommand","order","tableParent","insertAt","insertRows","at","insertcolumncommand_InsertColumnCommand","getCellLocation","insertColumns","splitcellcommand_SplitCellCommand","isHorizontally","splitCellHorizontally","splitCellVertically","mergecellcommand_MergeCellCommand","isHorizontal","cellToMerge","_getMergeableCell","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","mergecellcommand_isEmpty","mergeTableCells","spanAttribute","cellSpan","cellToMergeSpan","removedRowIndex","overlapsRemovedRow","removeEmptyRow","horizontalCell","cellOnLeft","cellOnRight","leftCellColumn","rightCellColumn","leftCellSpan","getHorizontalCell","currentCellRowSpan","rowOfCellToMerge","tableMap","mergeColumn","cellToMergeData","getVerticalCell","span","removerowcommand_RemoveRowCommand","currentRow","cellsToMove","rowspanToSet","targetRow","previousCell","cellToMove","removecolumncommand_RemoveColumnCommand","getColumns","removedColumn","setheaderrowcommand_SetHeaderRowCommand","isInTable","_isInHeading","currentHeadingRows","selectionRow","headingRowsToSet","cellsToSplit","getOverlappingCells","splitHorizontally","newRowspan","spanToSet","columnIndex","setheadercolumncommand_SetHeaderColumnCommand","selectionColumn","headingColumnsToSet","tableutils_TableUtils","createEmptyRows","rowsToInsert","tableIterator","cellsToInsert","columnsToInsert","tableColumns","createCells","skipRow","numberOfCells","newCellsSpan","updatedSpan","breakSpanEvenly","newCellsAttributes","splitCellColumn","cellsToUpdate","splitCellRow","cellColumn","tableCellToInsert","cells","injectTableLayoutPostFixer","analyzedTables","isTableAttributeEntry","fixTableCellsRowspan","fixTableRowsSizes","tableLayoutPostFixer","cellsToTrim","maxRows","isInHeader","rowLimit","findCellsToTrim","rowsLengths","lengths","getRowsLengths","tableSize","maxColumns","isAttributeType","injectTableCellParagraphPostFixer","fixTable","fixTableRow","fixTableCellContent","checkTableCellChange","tableCellContentsPostFixer","textNodes","injectTableCellRefreshPostFixer","cellsToRefresh","checkRefresh","refreshItem","tableCellRefreshPostFixer","attributesCount","tableediting_TableEditing","_handleTabOnSelectedTable","_getTabHandler","currentRowIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","isLastRow","cellToFocus","nextRow","previousRow","inserttableview_InsertTableView","boxView","inserttableview_TableSizeGridBoxView","_highlightGridBoxes","mouseover","icons_table","table_column","table_row","table_merge_cell","tableui_TableUI","insertTableView","bindIsOn","_prepareDropdown","addListOption","ckeditor_ClassicEditor","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","boldCallback","italicCallback","codeCallback","level","_registerSchema","_registerConverters","domWidgetElement","imageStyle","math","htmlDataProcessor","mathString","imgHtml","initParse","imgElement","imgAttributes","downcast","integrationProperties","widgetToolbarRepository","tableContentToolbarItems","tableToolbarItems","contentToolbar"],"mappings":"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","file":"ckeditor.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ClassicEditor\"] = factory();\n\telse\n\t\troot[\"ClassicEditor\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 81);\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use `console.warn()` with\n * {@link module:utils/ckeditorerror~attachLinkToDocumentation `attachLinkToDocumentation()`}\n * to improve developers experience and let them see the working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load: It was not possible to load the \"{$pluginName}\" plugin in module \"{$moduleName}', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be added to the `message`.\n\t * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n\t * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n\t * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n\t * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n\t * to check if the object works as the context.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( message, context, data ) {\n\t\tmessage = attachLinkToDocumentation( message );\n\n\t\tif ( data ) {\n\t\t\tmessage += ' ' + JSON.stringify( data );\n\t\t}\n\n\t\tsuper( message );\n\n\t\t/**\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * A context of the error by which the Watchdog is able to determine which editor crashed.\n\t\t *\n\t\t * @type {Object|null}\n\t\t */\n\t\tthis.context = context;\n\n\t\t/**\n\t\t * The additional error data passed to the constructor. Undefined if none was passed.\n\t\t *\n\t\t * @type {Object|undefined}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if the error is of the `CKEditorError` type.\n\t */\n\tis( type ) {\n\t\treturn type === 'CKEditorError';\n\t}\n}\n\n/**\n * Attaches the link to the documentation at the end of the error message. Use whenever you log a warning or error on the\n * console. It is also used by {@link module:utils/ckeditorerror~CKEditorError}.\n *\n *\t\t /**\n *\t\t  * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t  * name does not exist so it was omitted when rendering the toolbar.\n *\t\t  *\n *\t\t  * @error toolbarview-item-unavailable\n *\t\t  * @param {String} name The name of the component.\n *\t\t  * /\n *\t\t console.warn( attachLinkToDocumentation(\n *\t\t \t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\nexport function attachLinkToDocumentation( message ) {\n\tconst matchedErrorName = message.match( /^([^:]+):/ );\n\n\tif ( !matchedErrorName ) {\n\t\treturn message;\n\t}\n\n\treturn message + ` Read more: ${ DOCUMENTATION_URL }#error-${ matchedErrorName[ 1 ] }\\n`;\n}\n","\"use strict\";\n\nvar stylesInDom = {};\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nfunction listToStyles(list, options) {\n  var styles = [];\n  var newStyles = {};\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n\n  return styles;\n}\n\nfunction addStylesToDom(styles, options) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i];\n    var domStyle = stylesInDom[item.id];\n    var j = 0;\n\n    if (domStyle) {\n      domStyle.refs++;\n\n      for (; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j]);\n      }\n\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j], options));\n      }\n    } else {\n      var parts = [];\n\n      for (; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j], options));\n      }\n\n      stylesInDom[item.id] = {\n        id: item.id,\n        refs: 1,\n        parts: parts\n      };\n    }\n  }\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(options.attributes).forEach(function (key) {\n    style.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  var styles = listToStyles(list, options);\n  addStylesToDom(styles, options);\n  return function update(newList) {\n    var mayRemove = [];\n\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i];\n      var domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs--;\n        mayRemove.push(domStyle);\n      }\n    }\n\n    if (newList) {\n      var newStyles = listToStyles(newList, options);\n      addStylesToDom(newStyles, options);\n    }\n\n    for (var _i = 0; _i < mayRemove.length; _i++) {\n      var _domStyle = mayRemove[_i];\n\n      if (_domStyle.refs === 0) {\n        for (var j = 0; j < _domStyle.parts.length; j++) {\n          _domStyle.parts[j]();\n        }\n\n        delete stylesInDom[_domStyle.id];\n      }\n    }\n  };\n};","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\n\nimport { version } from 'ckeditor5/package.json';\nimport CKEditorError from './ckeditorerror';\n\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n\nif ( windowOrGlobal.CKEDITOR_VERSION ) {\n\t/**\n\t * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n\t * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n\t * errors.\n\t *\n\t * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n\t * you may need to check your project for each of these issues and fix them all.\n\t *\n\t * # Trying to add a plugin to an existing build\n\t *\n\t * If you import an existing CKEditor 5 build and a plugin like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n\t *\n\t * Then your project loads some CKEditor 5 packages twice. How does it happen?\n\t *\n\t * The build package contains a file which is already compiled with webpack. This means\n\t * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n\t *\n\t * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n\t * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n\t * included inside the build package, and second, because they are required by the `Highlight` plugin.\n\t *\n\t * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n\t *\n\t * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n\t * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n\t *\n\t * Read more in the {@glink builds/guides/integration/installing-plugins \"Installing plugins\"} guide.\n\t *\n\t * # Confused an editor build with an editor implementation\n\t *\n\t * This scenario is very similar to the previous one, but has a different origin.\n\t *\n\t * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"} section\n\t * or in the {@glink framework/guides/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n\t *\n\t * The correct way to do so is to import an editor and plugins and run them together like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( error => {\n\t *\t\t\t\tconsole.error( error.stack );\n\t *\t\t\t} );\n\t *\n\t * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n\t * your imports will look like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t * This creates the same situation as in the previous section because you use a build together with source plugins.\n\t *\n\t * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n\t *\n\t * # Loading two or more builds on one page\n\t *\n\t * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n\t * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n\t *\n\t * If you want to use two different types of editors at once, see the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-3-using-two-different-editors \"Using two different editors\"}\n\t * section.\n\t *\n\t * # Using outdated packages\n\t *\n\t * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n\t * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n\t * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n\t * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n\t * different versions of the core package.\n\t *\n\t * The solution to this issue is to update all packages to their latest version. We recommend\n\t * using tools like [`node-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n\t *\n\t * # Conflicting version of dependencies\n\t *\n\t * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n\t * it may happen that even if you use the latest versions of the official packages and the latest version of\n\t * these third-party packages, there will be a conflict between some of their dependencies.\n\t *\n\t * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n\t * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n\t *\n\t * # Packages were duplicated in `node_modules`\n\t *\n\t * In some situations, especially when calling `npm install` multiple times, it may happen\n\t * that npm will not correctly \"deduplicate\" packages.\n\t *\n\t * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n\t * However, it is known to fail to do so from time to time.\n\t *\n\t * We recommend checking if any of the steps listed below help:\n\t *\n\t * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n\t * is known to help in most cases.\n\t * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n\t * * Check whether all CKEditor 5 packages are up to date and reinstall them\n\t * if you changed anything (`rm -rf node_modules && npm install`).\n\t *\n\t * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n\t * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n\t *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n\t *\n\t * @error ckeditor-duplicated-modules\n\t */\n\tthrow new CKEditorError(\n\t\t'ckeditor-duplicated-modules: Some CKEditor 5 modules are duplicated.',\n\t\tnull\n\t);\n} else {\n\twindowOrGlobal.CKEDITOR_VERSION = version;\n}\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./heading.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./placeholder.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-placeholder:before,.ck .ck-placeholder:before{content:attr(data-placeholder);pointer-events:none;cursor:text;color:var(--ck-color-engine-placeholder-text)}\"","var content = require(\"!!../../../../postcss-loader/src/index.js??ref--5-1!./globals.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999);--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border:#47a4f5;--ck-color-focus-shadow:rgba(119,186,248,0.5);--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-drop-active:rgba(0,0,0,0.2);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-off-hover-background:#a3a3a3;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#579e3d;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,0.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#5c5c5c;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1);--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./editorui.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./label.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./stickypanel.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-sticky-panel .ck-sticky-panel__content_sticky{z-index:var(--ck-z-modal);position:fixed;top:0}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky_bottom-limit{top:auto;position:absolute}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky{box-shadow:var(--ck-drop-shadow),0 0;border-width:0 1px 1px;border-top-left-radius:0;border-top-right-radius:0}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./toolbar.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row wrap;align-items:center}.ck.ck-toolbar.ck-toolbar_vertical{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating{flex-wrap:nowrap}.ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar__newline{display:block;width:100%}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar>*{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small);margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-toolbar>*{margin-left:var(--ck-spacing-small);margin-right:0}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck{width:100%;margin:0;border-radius:0;border:0}[dir=ltr] .ck.ck-toolbar>:last-child{margin-right:0}[dir=rtl] .ck.ck-toolbar>:last-child{margin-left:0}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar__separator{align-self:stretch;width:1px;margin-top:0;margin-bottom:0;background:var(--ck-color-toolbar-border)}.ck.ck-toolbar__newline{margin:0}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./classiceditor.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-editor{position:relative}.ck.ck-editor .ck-editor__top .ck-sticky-panel .ck-toolbar{z-index:var(--ck-z-modal)}.ck.ck-editor__top .ck-sticky-panel .ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-editor__top .ck-sticky-panel .ck-toolbar,.ck.ck-editor__top .ck-sticky-panel .ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-editor__top .ck-sticky-panel .ck-toolbar{border-bottom-width:0}.ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar{border-bottom-width:1px;border-radius:0}.ck-rounded-corners .ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar,.ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:0}.ck.ck-editor__main>.ck-editor__editable{background:var(--ck-color-base-background);border-radius:0}.ck-rounded-corners .ck.ck-editor__main>.ck-editor__editable,.ck.ck-editor__main>.ck-editor__editable.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}.ck.ck-editor__main>.ck-editor__editable:not(.ck-focused){border-color:var(--ck-color-base-border)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./icon.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./tooltip.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck-tooltip .ck-tooltip__text{display:inline-block}.ck-tooltip .ck-tooltip__text:after{content:\\\"\\\";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%;top:0}.ck.ck-tooltip.ck-tooltip_s{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_n{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{border-style:solid;left:50%}.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./button.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button .ck-button__label,.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button .ck-button__label,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0;border-color:transparent}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(-1*var(--ck-spacing-small));margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-right:calc(-1*var(--ck-spacing-small));margin-left:var(--ck-spacing-small)}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./dropdown.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block;will-change:transform}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{transform:translate3d(0,100%,0)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}:root{--ck-dropdown-arrow-size:calc(0.5*var(--ck-icon-size))}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown__panel{background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./list.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;border:0;padding:calc(0.2*var(--ck-line-height-base)*var(--ck-font-size-base)) calc(0.4*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(1.2*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:hover:not(ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./switchbutton.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px;--ck-switch-button-translation:1.3846153847em}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(2*var(--ck-spacing-large))}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(2*var(--ck-spacing-large))}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(0.5*var(--ck-border-radius))}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:all .3s ease}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var(--ck-switch-button-translation))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(-1*var(--ck-switch-button-translation)))}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./toolbardropdown.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-toolbar-dropdown .ck-toolbar{flex-wrap:nowrap}.ck.ck-toolbar-dropdown .ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./listdropdown.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}\"","module.exports = \".ck.ck-heading_heading1{font-size:20px}.ck.ck-heading_heading2{font-size:17px}.ck.ck-heading_heading3{font-size:14px}.ck[class*=ck-heading_heading]{font-weight:700}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__panel .ck-list__item{min-width:18em}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./widget.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-color-resizer:var(--ck-color-focus-border);--ck-resizer-size:10px;--ck-resizer-border-width:1px;--ck-resizer-border-radius:2px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-tooltip-offset:10px;--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2}.ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;position:absolute;pointer-events:none;left:0;top:0;outline:1px solid var(--ck-color-resizer)}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{position:absolute;pointer-events:all;width:var(--ck-resizer-size);height:var(--ck-resizer-size);background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{top:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{top:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nesw-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nesw-resize}.ck .ck-widget.ck-widget_with-selection-handler{position:relative}.ck .ck-widget.ck-widget_with-selection-handler:hover .ck-widget__selection-handler{visibility:visible}.ck .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler{position:absolute}.ck .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handler.ck-widget_selected .ck-widget__selection-handler{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);color:var(--ck-color-resizer-tooltip-text);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);font-size:var(--ck-font-size-tiny);display:block;padding:var(--ck-spacing-small)}.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{top:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{top:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck-editor__editable>.ck-widget.ck-widget_with-selection-handler:first-child,.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handler:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}.ck .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness))}.ck .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handler.ck-widget_selected .ck-widget__selection-handler,.ck .ck-widget.ck-widget_with-selection-handler.ck-widget_selected:hover .ck-widget__selection-handler{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_with-selection-handler.ck-widget_selected .ck-widget__selection-handler .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handler.ck-widget_selected:hover .ck-widget__selection-handler .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handler:hover .ck-widget__selection-handler{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handler .ck-widget__selection-handler{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected .ck-widget__selection-handler,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected .ck-widget__selection-handler:hover,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover .ck-widget__selection-handler,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover .ck-widget__selection-handler:hover{background:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-read-only .ck-widget{--ck-widget-outline-thickness:0}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./labeledinput.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-labeled-input .ck-labeled-input__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-input .ck-labeled-input__status_error{color:var(--ck-color-base-error)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./inputtext.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{box-shadow:var(--ck-inner-shadow),0 0;background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition-property:box-shadow,border;transition:.2s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),var(--ck-inner-shadow)}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./textalternativeform.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-text-alternative-form{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-text-alternative-form .ck-labeled-input{display:inline-block}.ck.ck-text-alternative-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-text-alternative-form{flex-wrap:wrap}.ck.ck-text-alternative-form .ck-labeled-input{flex-basis:100%}.ck.ck-text-alternative-form .ck-button{flex-basis:50%}}.ck.ck-text-alternative-form{padding:var(--ck-spacing-standard)}.ck.ck-text-alternative-form:focus{outline:none}[dir=ltr] .ck.ck-text-alternative-form>:not(:first-child),[dir=rtl] .ck.ck-text-alternative-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-text-alternative-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-text-alternative-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-text-alternative-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-text-alternative-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-text-alternative-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-text-alternative-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./balloonpanel.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:\\\"\\\";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-bottom-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-bottom-color:var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-top-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent}.ck.ck-balloon-panel[class*=arrow_s]:after{border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./balloonrotator.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-balloon-rotator__navigation{display:flex;align-items:center;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./fakepanel.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);width:100%;height:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./image.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .image{display:table;clear:both;text-align:center;margin:1em auto}.ck-content .image>img{display:block;margin:0 auto;max-width:100%;min-width:50px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageresize.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .image.image_resized{max-width:100%;display:block;box-sizing:border-box}.ck-content .image.image_resized img{width:100%}.ck-content .image.image_resized>figcaption{display:block}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imagestyle.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-image-style-spacing:1.5em}.ck-content .image-style-align-center:not(.image_resized),.ck-content .image-style-align-left:not(.image_resized),.ck-content .image-style-align-right:not(.image_resized),.ck-content .image-style-side:not(.image_resized){max-width:50%}.ck-content .image-style-side{float:right;margin-left:var(--ck-image-style-spacing)}.ck-content .image-style-align-left{float:left;margin-right:var(--ck-image-style-spacing)}.ck-content .image-style-align-center{margin-left:auto;margin-right:auto}.ck-content .image-style-align-right{float:right;margin-left:var(--ck-image-style-spacing)}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageuploadprogress.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-editor__editable .image{position:relative}.ck.ck-editor__editable .image .ck-progress-bar{position:absolute;top:0;left:0}.ck.ck-editor__editable .image.ck-appear{animation:fadeIn .7s}.ck.ck-editor__editable .image .ck-progress-bar{height:2px;width:0;background:var(--ck-color-upload-bar-background);transition:width .1s}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageuploadicon.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-image-upload-complete-icon{display:block;position:absolute;top:10px;right:10px;border-radius:50%}.ck-image-upload-complete-icon:after{content:\\\"\\\";position:absolute}:root{--ck-color-image-upload-icon:#fff;--ck-color-image-upload-icon-background:#008a00;--ck-image-upload-icon-size:20px;--ck-image-upload-icon-width:2px}.ck-image-upload-complete-icon{width:var(--ck-image-upload-icon-size);height:var(--ck-image-upload-icon-size);opacity:0;background:var(--ck-color-image-upload-icon-background);animation-name:ck-upload-complete-icon-show,ck-upload-complete-icon-hide;animation-fill-mode:forwards,forwards;animation-duration:.5s,.5s;font-size:var(--ck-image-upload-icon-size);animation-delay:0ms,3s}.ck-image-upload-complete-icon:after{left:25%;top:50%;opacity:0;height:0;width:0;transform:scaleX(-1) rotate(135deg);transform-origin:left top;border-top:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);border-right:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);animation-name:ck-upload-complete-icon-check;animation-duration:.5s;animation-delay:.5s;animation-fill-mode:forwards;box-sizing:border-box}@keyframes ck-upload-complete-icon-show{0%{opacity:0}to{opacity:1}}@keyframes ck-upload-complete-icon-hide{0%{opacity:1}to{opacity:0}}@keyframes ck-upload-complete-icon-check{0%{opacity:1;width:0;height:0}33%{width:.3em;height:0}to{opacity:1;width:.3em;height:.45em}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageuploadloader.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-upload-placeholder-loader{position:absolute;display:flex;align-items:center;justify-content:center;top:0;left:0}.ck .ck-upload-placeholder-loader:before{content:\\\"\\\";position:relative}:root{--ck-color-upload-placeholder-loader:#b3b3b3;--ck-upload-placeholder-loader-size:32px}.ck .ck-image-upload-placeholder{width:100%;margin:0}.ck .ck-upload-placeholder-loader{width:100%;height:100%}.ck .ck-upload-placeholder-loader:before{width:var(--ck-upload-placeholder-loader-size);height:var(--ck-upload-placeholder-loader-size);border-radius:50%;border-top:3px solid var(--ck-color-upload-placeholder-loader);border-right:2px solid transparent;animation:ck-upload-placeholder-loader 1s linear infinite}@keyframes ck-upload-placeholder-loader{to{transform:rotate(1turn)}}\"","/* eslint-disable */\nvar md5;\nexport default md5;\n\n(function () {\n  var HxOverrides = function () { }\n  HxOverrides.__name__ = true;\n  HxOverrides.dateStr = function (date) {\n    var m = date.getMonth() + 1;\n    var d = date.getDate();\n    var h = date.getHours();\n    var mi = date.getMinutes();\n    var s = date.getSeconds();\n    return date.getFullYear() + \"-\" + (m < 10 ? \"0\" + m : \"\" + m) + \"-\" + (d < 10 ? \"0\" + d : \"\" + d) + \" \" + (h < 10 ? \"0\" + h : \"\" + h) + \":\" + (mi < 10 ? \"0\" + mi : \"\" + mi) + \":\" + (s < 10 ? \"0\" + s : \"\" + s);\n  }\n  HxOverrides.strDate = function (s) {\n    switch (s.length) {\n      case 8:\n        var k = s.split(\":\");\n        var d = new Date();\n        d.setTime(0);\n        d.setUTCHours(k[0]);\n        d.setUTCMinutes(k[1]);\n        d.setUTCSeconds(k[2]);\n        return d;\n      case 10:\n        var k = s.split(\"-\");\n        return new Date(k[0], k[1] - 1, k[2], 0, 0, 0);\n      case 19:\n        var k = s.split(\" \");\n        var y = k[0].split(\"-\");\n        var t = k[1].split(\":\");\n        return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);\n      default:\n        throw \"Invalid date format : \" + s;\n    }\n  }\n  HxOverrides.cca = function (s, index) {\n    var x = s.charCodeAt(index);\n    if (x != x) return undefined;\n    return x;\n  }\n  HxOverrides.substr = function (s, pos, len) {\n    if (pos != null && pos != 0 && len != null && len < 0) return \"\";\n    if (len == null) len = s.length;\n    if (pos < 0) {\n      pos = s.length + pos;\n      if (pos < 0) pos = 0;\n    } else if (len < 0) len = s.length + len - pos;\n    return s.substr(pos, len);\n  }\n  HxOverrides.remove = function (a, obj) {\n    var i = 0;\n    var l = a.length;\n    while (i < l) {\n      if (a[i] == obj) {\n        a.splice(i, 1);\n        return true;\n      }\n      i++;\n    }\n    return false;\n  }\n  HxOverrides.iter = function (a) {\n    return {\n      cur: 0, arr: a, hasNext: function () {\n        return this.cur < this.arr.length;\n      }, next: function () {\n        return this.arr[this.cur++];\n      }\n    };\n  }\n  var IntIter = function (min, max) {\n    this.min = min;\n    this.max = max;\n  };\n  IntIter.__name__ = true;\n  IntIter.prototype = {\n    next: function () {\n      return this.min++;\n    }\n    , hasNext: function () {\n      return this.min < this.max;\n    }\n    , __class__: IntIter\n  }\n  var Std = function () { }\n  Std.__name__ = true;\n  Std[\"is\"] = function (v, t) {\n    return js.Boot.__instanceof(v, t);\n  }\n  Std.string = function (s) {\n    return js.Boot.__string_rec(s, \"\");\n  }\n  Std[\"int\"] = function (x) {\n    return x | 0;\n  }\n  Std.parseInt = function (x) {\n    var v = parseInt(x, 10);\n    if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = parseInt(x);\n    if (isNaN(v)) return null;\n    return v;\n  }\n  Std.parseFloat = function (x) {\n    return parseFloat(x);\n  }\n  Std.random = function (x) {\n    return Math.floor(Math.random() * x);\n  }\n  var com = com || {}\n  if (!com.wiris) com.wiris = {}\n  if (!com.wiris.js) com.wiris.js = {}\n  com.wiris.js.JsPluginTools = function () {\n    this.tryReady();\n  };\n  com.wiris.js.JsPluginTools.__name__ = true;\n  com.wiris.js.JsPluginTools.main = function () {\n    var ev;\n    ev = com.wiris.js.JsPluginTools.getInstance();\n    haxe.Timer.delay($bind(ev, ev.tryReady), 100);\n  }\n  com.wiris.js.JsPluginTools.getInstance = function () {\n    if (com.wiris.js.JsPluginTools.instance == null) com.wiris.js.JsPluginTools.instance = new com.wiris.js.JsPluginTools();\n    return com.wiris.js.JsPluginTools.instance;\n  }\n  com.wiris.js.JsPluginTools.bypassEncapsulation = function () {\n    if (window.com == null) window.com = {};\n    if (window.com.wiris == null) window.com.wiris = {};\n    if (window.com.wiris.js == null) window.com.wiris.js = {};\n    if (window.com.wiris.js.JsPluginTools == null) window.com.wiris.js.JsPluginTools = com.wiris.js.JsPluginTools.getInstance();\n  }\n  com.wiris.js.JsPluginTools.prototype = {\n    md5encode: function (content) {\n      return haxe.Md5.encode(content);\n    }\n    , doLoad: function () {\n      this.ready = true;\n      com.wiris.js.JsPluginTools.instance = this;\n      com.wiris.js.JsPluginTools.bypassEncapsulation();\n    }\n    , tryReady: function () {\n      this.ready = false;\n      if (js.Lib.document.readyState) {\n        this.doLoad();\n        this.ready = true;\n      }\n      if (!this.ready) haxe.Timer.delay($bind(this, this.tryReady), 100);\n    }\n    , __class__: com.wiris.js.JsPluginTools\n  }\n  var haxe = haxe || {}\n  haxe.Log = function () { }\n  haxe.Log.__name__ = true;\n  haxe.Log.trace = function (v, infos) {\n    js.Boot.__trace(v, infos);\n  }\n  haxe.Log.clear = function () {\n    js.Boot.__clear_trace();\n  }\n  haxe.Md5 = function () {\n  };\n  haxe.Md5.__name__ = true;\n  haxe.Md5.encode = function (s) {\n    return new haxe.Md5().doEncode(s);\n  }\n  haxe.Md5.prototype = {\n    doEncode: function (str) {\n      var x = this.str2blks(str);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var step;\n      var i = 0;\n      while (i < x.length) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        step = 0;\n        a = this.ff(a, b, c, d, x[i], 7, -680876936);\n        d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = this.ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = this.gg(b, c, d, a, x[i], 20, -373897302);\n        a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = this.hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = this.hh(d, a, b, c, x[i], 11, -358537222);\n        c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);\n        a = this.ii(a, b, c, d, x[i], 6, -198630844);\n        d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);\n        a = this.addme(a, olda);\n        b = this.addme(b, oldb);\n        c = this.addme(c, oldc);\n        d = this.addme(d, oldd);\n        i += 16;\n      }\n      return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);\n    }\n    , ii: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(c, this.bitOR(b, ~d)), a, b, x, s, t);\n    }\n    , hh: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(this.bitXOR(b, c), d), a, b, x, s, t);\n    }\n    , gg: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, d), this.bitAND(c, ~d)), a, b, x, s, t);\n    }\n    , ff: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, c), this.bitAND(~b, d)), a, b, x, s, t);\n    }\n    , cmn: function (q, a, b, x, s, t) {\n      return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);\n    }\n    , rol: function (num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n    , str2blks: function (str) {\n      var nblk = (str.length + 8 >> 6) + 1;\n      var blks = new Array();\n      var _g1 = 0, _g = nblk * 16;\n      while (_g1 < _g) {\n        var i = _g1++;\n        blks[i] = 0;\n      }\n      var i = 0;\n      while (i < str.length) {\n        blks[i >> 2] |= HxOverrides.cca(str, i) << (str.length * 8 + i) % 4 * 8;\n        i++;\n      }\n      blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;\n      var l = str.length * 8;\n      var k = nblk * 16 - 2;\n      blks[k] = l & 255;\n      blks[k] |= (l >>> 8 & 255) << 8;\n      blks[k] |= (l >>> 16 & 255) << 16;\n      blks[k] |= (l >>> 24 & 255) << 24;\n      return blks;\n    }\n    , rhex: function (num) {\n      var str = \"\";\n      var hex_chr = \"0123456789abcdef\";\n      var _g = 0;\n      while (_g < 4) {\n        var j = _g++;\n        str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);\n      }\n      return str;\n    }\n    , addme: function (x, y) {\n      var lsw = (x & 65535) + (y & 65535);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 65535;\n    }\n    , bitAND: function (a, b) {\n      var lsb = a & 1 & (b & 1);\n      var msb31 = a >>> 1 & b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitXOR: function (a, b) {\n      var lsb = a & 1 ^ b & 1;\n      var msb31 = a >>> 1 ^ b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitOR: function (a, b) {\n      var lsb = a & 1 | b & 1;\n      var msb31 = a >>> 1 | b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , __class__: haxe.Md5\n  }\n  haxe.Timer = function (time_ms) {\n    var me = this;\n    this.id = window.setInterval(function () {\n      me.run();\n    }, time_ms);\n  };\n  haxe.Timer.__name__ = true;\n  haxe.Timer.delay = function (f, time_ms) {\n    var t = new haxe.Timer(time_ms);\n    t.run = function () {\n      t.stop();\n      f();\n    };\n    return t;\n  }\n  haxe.Timer.measure = function (f, pos) {\n    var t0 = haxe.Timer.stamp();\n    var r = f();\n    haxe.Log.trace(haxe.Timer.stamp() - t0 + \"s\", pos);\n    return r;\n  }\n  haxe.Timer.stamp = function () {\n    return new Date().getTime() / 1000;\n  }\n  haxe.Timer.prototype = {\n    run: function () {\n    }\n    , stop: function () {\n      if (this.id == null) return;\n      window.clearInterval(this.id);\n      this.id = null;\n    }\n    , __class__: haxe.Timer\n  }\n  var js = js || {}\n  js.Boot = function () { }\n  js.Boot.__name__ = true;\n  js.Boot.__unhtml = function (s) {\n    return s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n  }\n  js.Boot.__trace = function (v, i) {\n    var msg = i != null ? i.fileName + \":\" + i.lineNumber + \": \" : \"\";\n    msg += js.Boot.__string_rec(v, \"\");\n    var d;\n    if (typeof (document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null) d.innerHTML += js.Boot.__unhtml(msg) + \"<br/>\"; else if (typeof (console) != \"undefined\" && console.log != null) console.log(msg);\n  }\n  js.Boot.__clear_trace = function () {\n    var d = document.getElementById(\"haxe:trace\");\n    if (d != null) d.innerHTML = \"\";\n  }\n  js.Boot.isClass = function (o) {\n    return o.__name__;\n  }\n  js.Boot.isEnum = function (e) {\n    return e.__ename__;\n  }\n  js.Boot.getClass = function (o) {\n    return o.__class__;\n  }\n  js.Boot.__string_rec = function (o, s) {\n    if (o == null) return \"null\";\n    if (s.length >= 5) return \"<...>\";\n    var t = typeof (o);\n    if (t == \"function\" && (o.__name__ || o.__ename__)) t = \"object\";\n    switch (t) {\n      case \"object\":\n        if (o instanceof Array) {\n          if (o.__enum__) {\n            if (o.length == 2) return o[0];\n            var str = o[0] + \"(\";\n            s += \"\\t\";\n            var _g1 = 2, _g = o.length;\n            while (_g1 < _g) {\n              var i = _g1++;\n              if (i != 2) str += \",\" + js.Boot.__string_rec(o[i], s); else str += js.Boot.__string_rec(o[i], s);\n            }\n            return str + \")\";\n          }\n          var l = o.length;\n          var i;\n          var str = \"[\";\n          s += \"\\t\";\n          var _g = 0;\n          while (_g < l) {\n            var i1 = _g++;\n            str += (i1 > 0 ? \",\" : \"\") + js.Boot.__string_rec(o[i1], s);\n          }\n          str += \"]\";\n          return str;\n        }\n        var tostr;\n        try {\n          tostr = o.toString;\n        } catch (e) {\n          return \"???\";\n        }\n        if (tostr != null && tostr != Object.toString) {\n          var s2 = o.toString();\n          if (s2 != \"[object Object]\") return s2;\n        }\n        var k = null;\n        var str = \"{\\n\";\n        s += \"\\t\";\n        var hasp = o.hasOwnProperty != null;\n        for (var k in o) {\n          ;\n          if (hasp && !o.hasOwnProperty(k)) {\n            continue;\n          }\n          if (k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\n            continue;\n          }\n          if (str.length != 2) str += \", \\n\";\n          str += s + k + \" : \" + js.Boot.__string_rec(o[k], s);\n        }\n        s = s.substring(1);\n        str += \"\\n\" + s + \"}\";\n        return str;\n      case \"function\":\n        return \"<function>\";\n      case \"string\":\n        return o;\n      default:\n        return String(o);\n    }\n  }\n  js.Boot.__interfLoop = function (cc, cl) {\n    if (cc == null) return false;\n    if (cc == cl) return true;\n    var intf = cc.__interfaces__;\n    if (intf != null) {\n      var _g1 = 0, _g = intf.length;\n      while (_g1 < _g) {\n        var i = _g1++;\n        var i1 = intf[i];\n        if (i1 == cl || js.Boot.__interfLoop(i1, cl)) return true;\n      }\n    }\n    return js.Boot.__interfLoop(cc.__super__, cl);\n  }\n  js.Boot.__instanceof = function (o, cl) {\n    try {\n      if (o instanceof cl) {\n        if (cl == Array) return o.__enum__ == null;\n        return true;\n      }\n      if (js.Boot.__interfLoop(o.__class__, cl)) return true;\n    } catch (e) {\n      if (cl == null) return false;\n    }\n    switch (cl) {\n      case Int:\n        return Math.ceil(o % 2147483648.0) === o;\n      case Float:\n        return typeof (o) == \"number\";\n      case Bool:\n        return o === true || o === false;\n      case String:\n        return typeof (o) == \"string\";\n      case Dynamic:\n        return true;\n      default:\n        if (o == null) return false;\n        if (cl == Class && o.__name__ != null) return true; else null;\n        if (cl == Enum && o.__ename__ != null) return true; else null;\n        return o.__enum__ == cl;\n    }\n  }\n  js.Boot.__cast = function (o, t) {\n    if (js.Boot.__instanceof(o, t)) return o; else throw \"Cannot cast \" + Std.string(o) + \" to \" + Std.string(t);\n  }\n  js.Lib = function () { }\n  js.Lib.__name__ = true;\n  js.Lib.debug = function () {\n    debugger;\n  }\n  js.Lib.alert = function (v) {\n    alert(js.Boot.__string_rec(v, \"\"));\n  }\n  js.Lib.eval = function (code) {\n    return eval(code);\n  }\n  js.Lib.setErrorHandler = function (f) {\n    js.Lib.onerror = f;\n  }\n  var $_;\n  function $bind(o, m) { var f = function () { return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; return f; };\n  if (Array.prototype.indexOf) HxOverrides.remove = function (a, o) {\n    var i = a.indexOf(o);\n    if (i == -1) return false;\n    a.splice(i, 1);\n    return true;\n  }; else null;\n  Math.__name__ = [\"Math\"];\n  Math.NaN = Number.NaN;\n  Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;\n  Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n  Math.isFinite = function (i) {\n    return isFinite(i);\n  };\n  Math.isNaN = function (i) {\n    return isNaN(i);\n  };\n  String.prototype.__class__ = String;\n  String.__name__ = true;\n  Array.prototype.__class__ = Array;\n  Array.__name__ = true;\n  Date.prototype.__class__ = Date;\n  Date.__name__ = [\"Date\"];\n  var Int = { __name__: [\"Int\"] };\n  var Dynamic = { __name__: [\"Dynamic\"] };\n  var Float = Number;\n  Float.__name__ = [\"Float\"];\n  var Bool = Boolean;\n  Bool.__ename__ = [\"Bool\"];\n  var Class = { __name__: [\"Class\"] };\n  var Enum = {};\n  var Void = { __ename__: [\"Void\"] };\n  if (typeof document != \"undefined\") js.Lib.document = document;\n  if (typeof window != \"undefined\") {\n    js.Lib.window = window;\n    js.Lib.window.onerror = function (msg, url, line) {\n      var f = js.Lib.onerror;\n      if (f == null) return false;\n      return f(msg, [url + \":\" + line]);\n    };\n  }\n  com.wiris.js.JsPluginTools.main();\n  delete Array.prototype.__class__;\n}());\n\n\n(function () {\n  var HxOverrides = function () { }\n  HxOverrides.__name__ = true;\n  HxOverrides.dateStr = function (date) {\n    var m = date.getMonth() + 1;\n    var d = date.getDate();\n    var h = date.getHours();\n    var mi = date.getMinutes();\n    var s = date.getSeconds();\n    return date.getFullYear() + \"-\" + (m < 10 ? \"0\" + m : \"\" + m) + \"-\" + (d < 10 ? \"0\" + d : \"\" + d) + \" \" + (h < 10 ? \"0\" + h : \"\" + h) + \":\" + (mi < 10 ? \"0\" + mi : \"\" + mi) + \":\" + (s < 10 ? \"0\" + s : \"\" + s);\n  }\n  HxOverrides.strDate = function (s) {\n    switch (s.length) {\n      case 8:\n        var k = s.split(\":\");\n        var d = new Date();\n        d.setTime(0);\n        d.setUTCHours(k[0]);\n        d.setUTCMinutes(k[1]);\n        d.setUTCSeconds(k[2]);\n        return d;\n      case 10:\n        var k = s.split(\"-\");\n        return new Date(k[0], k[1] - 1, k[2], 0, 0, 0);\n      case 19:\n        var k = s.split(\" \");\n        var y = k[0].split(\"-\");\n        var t = k[1].split(\":\");\n        return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);\n      default:\n        throw \"Invalid date format : \" + s;\n    }\n  }\n  HxOverrides.cca = function (s, index) {\n    var x = s.charCodeAt(index);\n    if (x != x) return undefined;\n    return x;\n  }\n  HxOverrides.substr = function (s, pos, len) {\n    if (pos != null && pos != 0 && len != null && len < 0) return \"\";\n    if (len == null) len = s.length;\n    if (pos < 0) {\n      pos = s.length + pos;\n      if (pos < 0) pos = 0;\n    } else if (len < 0) len = s.length + len - pos;\n    return s.substr(pos, len);\n  }\n  HxOverrides.remove = function (a, obj) {\n    var i = 0;\n    var l = a.length;\n    while (i < l) {\n      if (a[i] == obj) {\n        a.splice(i, 1);\n        return true;\n      }\n      i++;\n    }\n    return false;\n  }\n  HxOverrides.iter = function (a) {\n    return {\n      cur: 0, arr: a, hasNext: function () {\n        return this.cur < this.arr.length;\n      }, next: function () {\n        return this.arr[this.cur++];\n      }\n    };\n  }\n  var IntIter = function (min, max) {\n    this.min = min;\n    this.max = max;\n  };\n  IntIter.__name__ = true;\n  IntIter.prototype = {\n    next: function () {\n      return this.min++;\n    }\n    , hasNext: function () {\n      return this.min < this.max;\n    }\n    , __class__: IntIter\n  }\n  var Std = function () { }\n  Std.__name__ = true;\n  Std[\"is\"] = function (v, t) {\n    return js.Boot.__instanceof(v, t);\n  }\n  Std.string = function (s) {\n    return js.Boot.__string_rec(s, \"\");\n  }\n  Std[\"int\"] = function (x) {\n    return x | 0;\n  }\n  Std.parseInt = function (x) {\n    var v = parseInt(x, 10);\n    if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = parseInt(x);\n    if (isNaN(v)) return null;\n    return v;\n  }\n  Std.parseFloat = function (x) {\n    return parseFloat(x);\n  }\n  Std.random = function (x) {\n    return Math.floor(Math.random() * x);\n  }\n  var com = com || {}\n  if (!com.wiris) com.wiris = {}\n  if (!com.wiris.js) com.wiris.js = {}\n  com.wiris.js.JsPluginTools = function () {\n    this.tryReady();\n  };\n  com.wiris.js.JsPluginTools.__name__ = true;\n  com.wiris.js.JsPluginTools.main = function () {\n    var ev;\n    ev = com.wiris.js.JsPluginTools.getInstance();\n    haxe.Timer.delay($bind(ev, ev.tryReady), 100);\n  }\n  com.wiris.js.JsPluginTools.getInstance = function () {\n    if (com.wiris.js.JsPluginTools.instance == null) com.wiris.js.JsPluginTools.instance = new com.wiris.js.JsPluginTools();\n    return com.wiris.js.JsPluginTools.instance;\n  }\n  com.wiris.js.JsPluginTools.bypassEncapsulation = function () {\n    if (window.com == null) window.com = {};\n    if (window.com.wiris == null) window.com.wiris = {};\n    if (window.com.wiris.js == null) window.com.wiris.js = {};\n    if (window.com.wiris.js.JsPluginTools == null) window.com.wiris.js.JsPluginTools = com.wiris.js.JsPluginTools.getInstance();\n  }\n  com.wiris.js.JsPluginTools.prototype = {\n    md5encode: function (content) {\n      return haxe.Md5.encode(content);\n    }\n    , doLoad: function () {\n      this.ready = true;\n      com.wiris.js.JsPluginTools.instance = this;\n      com.wiris.js.JsPluginTools.bypassEncapsulation();\n    }\n    , tryReady: function () {\n      this.ready = false;\n      if (js.Lib.document.readyState) {\n        this.doLoad();\n        this.ready = true;\n      }\n      if (!this.ready) haxe.Timer.delay($bind(this, this.tryReady), 100);\n    }\n    , __class__: com.wiris.js.JsPluginTools\n  }\n  var haxe = haxe || {}\n  haxe.Log = function () { }\n  haxe.Log.__name__ = true;\n  haxe.Log.trace = function (v, infos) {\n    js.Boot.__trace(v, infos);\n  }\n  haxe.Log.clear = function () {\n    js.Boot.__clear_trace();\n  }\n  haxe.Md5 = function () {\n  };\n  haxe.Md5.__name__ = true;\n  haxe.Md5.encode = function (s) {\n    return new haxe.Md5().doEncode(s);\n  }\n  haxe.Md5.prototype = {\n    doEncode: function (str) {\n      var x = this.str2blks(str);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var step;\n      var i = 0;\n      while (i < x.length) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        step = 0;\n        a = this.ff(a, b, c, d, x[i], 7, -680876936);\n        d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = this.ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = this.gg(b, c, d, a, x[i], 20, -373897302);\n        a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = this.hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = this.hh(d, a, b, c, x[i], 11, -358537222);\n        c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);\n        a = this.ii(a, b, c, d, x[i], 6, -198630844);\n        d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);\n        a = this.addme(a, olda);\n        b = this.addme(b, oldb);\n        c = this.addme(c, oldc);\n        d = this.addme(d, oldd);\n        i += 16;\n      }\n      return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);\n    }\n    , ii: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(c, this.bitOR(b, ~d)), a, b, x, s, t);\n    }\n    , hh: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(this.bitXOR(b, c), d), a, b, x, s, t);\n    }\n    , gg: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, d), this.bitAND(c, ~d)), a, b, x, s, t);\n    }\n    , ff: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, c), this.bitAND(~b, d)), a, b, x, s, t);\n    }\n    , cmn: function (q, a, b, x, s, t) {\n      return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);\n    }\n    , rol: function (num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n    , str2blks: function (str) {\n      var nblk = (str.length + 8 >> 6) + 1;\n      var blks = new Array();\n      var _g1 = 0, _g = nblk * 16;\n      while (_g1 < _g) {\n        var i = _g1++;\n        blks[i] = 0;\n      }\n      var i = 0;\n      while (i < str.length) {\n        blks[i >> 2] |= HxOverrides.cca(str, i) << (str.length * 8 + i) % 4 * 8;\n        i++;\n      }\n      blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;\n      var l = str.length * 8;\n      var k = nblk * 16 - 2;\n      blks[k] = l & 255;\n      blks[k] |= (l >>> 8 & 255) << 8;\n      blks[k] |= (l >>> 16 & 255) << 16;\n      blks[k] |= (l >>> 24 & 255) << 24;\n      return blks;\n    }\n    , rhex: function (num) {\n      var str = \"\";\n      var hex_chr = \"0123456789abcdef\";\n      var _g = 0;\n      while (_g < 4) {\n        var j = _g++;\n        str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);\n      }\n      return str;\n    }\n    , addme: function (x, y) {\n      var lsw = (x & 65535) + (y & 65535);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 65535;\n    }\n    , bitAND: function (a, b) {\n      var lsb = a & 1 & (b & 1);\n      var msb31 = a >>> 1 & b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitXOR: function (a, b) {\n      var lsb = a & 1 ^ b & 1;\n      var msb31 = a >>> 1 ^ b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitOR: function (a, b) {\n      var lsb = a & 1 | b & 1;\n      var msb31 = a >>> 1 | b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , __class__: haxe.Md5\n  }\n  haxe.Timer = function (time_ms) {\n    var me = this;\n    this.id = window.setInterval(function () {\n      me.run();\n    }, time_ms);\n  };\n  haxe.Timer.__name__ = true;\n  haxe.Timer.delay = function (f, time_ms) {\n    var t = new haxe.Timer(time_ms);\n    t.run = function () {\n      t.stop();\n      f();\n    };\n    return t;\n  }\n  haxe.Timer.measure = function (f, pos) {\n    var t0 = haxe.Timer.stamp();\n    var r = f();\n    haxe.Log.trace(haxe.Timer.stamp() - t0 + \"s\", pos);\n    return r;\n  }\n  haxe.Timer.stamp = function () {\n    return new Date().getTime() / 1000;\n  }\n  haxe.Timer.prototype = {\n    run: function () {\n    }\n    , stop: function () {\n      if (this.id == null) return;\n      window.clearInterval(this.id);\n      this.id = null;\n    }\n    , __class__: haxe.Timer\n  }\n  var js = js || {}\n  js.Boot = function () { }\n  js.Boot.__name__ = true;\n  js.Boot.__unhtml = function (s) {\n    return s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n  }\n  js.Boot.__trace = function (v, i) {\n    var msg = i != null ? i.fileName + \":\" + i.lineNumber + \": \" : \"\";\n    msg += js.Boot.__string_rec(v, \"\");\n    var d;\n    if (typeof (document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null) d.innerHTML += js.Boot.__unhtml(msg) + \"<br/>\"; else if (typeof (console) != \"undefined\" && console.log != null) console.log(msg);\n  }\n  js.Boot.__clear_trace = function () {\n    var d = document.getElementById(\"haxe:trace\");\n    if (d != null) d.innerHTML = \"\";\n  }\n  js.Boot.isClass = function (o) {\n    return o.__name__;\n  }\n  js.Boot.isEnum = function (e) {\n    return e.__ename__;\n  }\n  js.Boot.getClass = function (o) {\n    return o.__class__;\n  }\n  js.Boot.__string_rec = function (o, s) {\n    if (o == null) return \"null\";\n    if (s.length >= 5) return \"<...>\";\n    var t = typeof (o);\n    if (t == \"function\" && (o.__name__ || o.__ename__)) t = \"object\";\n    switch (t) {\n      case \"object\":\n        if (o instanceof Array) {\n          if (o.__enum__) {\n            if (o.length == 2) return o[0];\n            var str = o[0] + \"(\";\n            s += \"\\t\";\n            var _g1 = 2, _g = o.length;\n            while (_g1 < _g) {\n              var i = _g1++;\n              if (i != 2) str += \",\" + js.Boot.__string_rec(o[i], s); else str += js.Boot.__string_rec(o[i], s);\n            }\n            return str + \")\";\n          }\n          var l = o.length;\n          var i;\n          var str = \"[\";\n          s += \"\\t\";\n          var _g = 0;\n          while (_g < l) {\n            var i1 = _g++;\n            str += (i1 > 0 ? \",\" : \"\") + js.Boot.__string_rec(o[i1], s);\n          }\n          str += \"]\";\n          return str;\n        }\n        var tostr;\n        try {\n          tostr = o.toString;\n        } catch (e) {\n          return \"???\";\n        }\n        if (tostr != null && tostr != Object.toString) {\n          var s2 = o.toString();\n          if (s2 != \"[object Object]\") return s2;\n        }\n        var k = null;\n        var str = \"{\\n\";\n        s += \"\\t\";\n        var hasp = o.hasOwnProperty != null;\n        for (var k in o) {\n          ;\n          if (hasp && !o.hasOwnProperty(k)) {\n            continue;\n          }\n          if (k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\n            continue;\n          }\n          if (str.length != 2) str += \", \\n\";\n          str += s + k + \" : \" + js.Boot.__string_rec(o[k], s);\n        }\n        s = s.substring(1);\n        str += \"\\n\" + s + \"}\";\n        return str;\n      case \"function\":\n        return \"<function>\";\n      case \"string\":\n        return o;\n      default:\n        return String(o);\n    }\n  }\n  js.Boot.__interfLoop = function (cc, cl) {\n    if (cc == null) return false;\n    if (cc == cl) return true;\n    var intf = cc.__interfaces__;\n    if (intf != null) {\n      var _g1 = 0, _g = intf.length;\n      while (_g1 < _g) {\n        var i = _g1++;\n        var i1 = intf[i];\n        if (i1 == cl || js.Boot.__interfLoop(i1, cl)) return true;\n      }\n    }\n    return js.Boot.__interfLoop(cc.__super__, cl);\n  }\n  js.Boot.__instanceof = function (o, cl) {\n    try {\n      if (o instanceof cl) {\n        if (cl == Array) return o.__enum__ == null;\n        return true;\n      }\n      if (js.Boot.__interfLoop(o.__class__, cl)) return true;\n    } catch (e) {\n      if (cl == null) return false;\n    }\n    switch (cl) {\n      case Int:\n        return Math.ceil(o % 2147483648.0) === o;\n      case Float:\n        return typeof (o) == \"number\";\n      case Bool:\n        return o === true || o === false;\n      case String:\n        return typeof (o) == \"string\";\n      case Dynamic:\n        return true;\n      default:\n        if (o == null) return false;\n        if (cl == Class && o.__name__ != null) return true; else null;\n        if (cl == Enum && o.__ename__ != null) return true; else null;\n        return o.__enum__ == cl;\n    }\n  }\n  js.Boot.__cast = function (o, t) {\n    if (js.Boot.__instanceof(o, t)) return o; else throw \"Cannot cast \" + Std.string(o) + \" to \" + Std.string(t);\n  }\n  js.Lib = function () { }\n  js.Lib.__name__ = true;\n  js.Lib.debug = function () {\n    debugger;\n  }\n  js.Lib.alert = function (v) {\n    alert(js.Boot.__string_rec(v, \"\"));\n  }\n  js.Lib.eval = function (code) {\n    return eval(code);\n  }\n  js.Lib.setErrorHandler = function (f) {\n    js.Lib.onerror = f;\n  }\n  var $_;\n  function $bind(o, m) { var f = function () { return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; return f; };\n  if (Array.prototype.indexOf) HxOverrides.remove = function (a, o) {\n    var i = a.indexOf(o);\n    if (i == -1) return false;\n    a.splice(i, 1);\n    return true;\n  }; else null;\n  Math.__name__ = [\"Math\"];\n  Math.NaN = Number.NaN;\n  Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;\n  Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n  Math.isFinite = function (i) {\n    return isFinite(i);\n  };\n  Math.isNaN = function (i) {\n    return isNaN(i);\n  };\n  String.prototype.__class__ = String;\n  String.__name__ = true;\n  Array.prototype.__class__ = Array;\n  Array.__name__ = true;\n  Date.prototype.__class__ = Date;\n  Date.__name__ = [\"Date\"];\n  var Int = { __name__: [\"Int\"] };\n  var Dynamic = { __name__: [\"Dynamic\"] };\n  var Float = Number;\n  Float.__name__ = [\"Float\"];\n  var Bool = Boolean;\n  Bool.__ename__ = [\"Bool\"];\n  var Class = { __name__: [\"Class\"] };\n  var Enum = {};\n  var Void = { __ename__: [\"Void\"] };\n  if (typeof document != \"undefined\") js.Lib.document = document;\n  if (typeof window != \"undefined\") {\n    js.Lib.window = window;\n    js.Lib.window.onerror = function (msg, url, line) {\n      var f = js.Lib.onerror;\n      if (f == null) return false;\n      return f(msg, [url + \":\" + line]);\n    };\n  }\n  com.wiris.js.JsPluginTools.main();\n}());\ndelete Array.prototype.__class__;\n// @codingStandardsIgnoreEnd\n","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./styles.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".wrs_modal_overlay{position:fixed;font-family:arial,sans-serif;top:0;right:0;left:0;bottom:0;background:rgba(0,0,0,.8);z-index:999998;opacity:.65;pointer-events:auto}.wrs_modal_overlay.wrs_modal_android,.wrs_modal_overlay.wrs_modal_ios{visibility:hidden;display:none}.wrs_modal_overlay.wrs_modal_ios.moodle{position:fixed}.wrs_modal_overlay.wrs_modal_desktop.wrs_stack{background:transparent;display:none}.wrs_modal_overlay.wrs_modal_desktop.wrs_maximized{background:rgba(0,0,0,.8)}.wrs_modal_overlay.wrs_modal_desktop.wrs_closed,.wrs_modal_overlay.wrs_modal_desktop.wrs_minimized{background:transparent;display:none}.wrs_modal_title{color:#fff;padding:5px 0 5px 10px;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;text-align:left}.wrs_modal_close_button{float:right;cursor:pointer;color:#fff;padding:5px 10px 5px 0;background-image:url(icons/general/close_icon.png);background-size:10px;margin:10px 7px 0 0;background-repeat:no-repeat}.wrs_modal_close_button:hover{background-image:url(icons/hover/close_icon_h.png)}.wrs_modal_minimize_button{float:right;cursor:pointer;color:#fff;padding:5px 10px 5px 0;top:inherit;margin:10px 7px 0 0;background-size:10px;background-image:url(icons/general/min_icon.png);background-repeat:no-repeat}.wrs_modal_minimize_button:hover{background-image:url(icons/hover/min_icon_h.png)}.wrs_modal_minimize_button.wrs_minimized{background-image:url(icons/general/max_icon.png)}.wrs_modal_minimize_button.wrs_minimized:hover{background-image:url(icons/hover/max_icon_h.png)}.wrs_modal_stack_button{float:right;cursor:pointer;color:#fff;margin:10px 7px 0 0;padding:5px 10px 5px 0;top:inherit;background-image:url(icons/general/mins_icon.png);background-size:10px}.wrs_modal_stack_button.wrs_minimized,.wrs_modal_stack_button.wrs_stack{visibility:hidden;margin:0;padding:0}.wrs_modal_stack_button:hover{background-image:url(icons/hover/mins_icon_h.png)}.wrs_modal_maximize_button{float:right;cursor:pointer;color:#fff;margin:10px 7px 0 0;padding:5px 10px 5px 0;top:inherit;background-image:url(icons/general/fulls_icon.png);background-size:10px;background-repeat:no-repeat}.wrs_modal_maximize_button.wrs_maximized{visibility:hidden;margin:0;padding:0}.wrs_modal_maximize_button:hover{background-image:url(icons/hover/fulls_icon_h.png)}.wrs_modal_wrapper{display:block}.wrs_modal_title_bar{display:block;background-color:#778e9a}.wrs_modal_dialogContainer{border:none;background:#fafafa;z-index:999999}.wrs_modal_dialogContainer.wrs_modal_desktop{font-size:14px}.wrs_modal_dialogContainer.wrs_modal_desktop.wrs_maximized{position:fixed}.wrs_modal_dialogContainer.wrs_modal_desktop.wrs_minimized{position:fixed;top:inherit;margin:0 10px 0 0}.wrs_modal_dialogContainer.wrs_closed{visibility:hidden;display:none;opacity:0}.wrs_modal_dialogContainer.wrs_modal_desktop.wrs_stack{position:fixed;bottom:0;right:0;box-shadow:0 2px 8px rgba(0,0,0,.5)}.wrs_modal_dialogContainer.wrs_drag,.wrs_modal_dialogContainer.wrs_modal_desktop.wrs_drag{box-shadow:0 2px 8px rgba(0,0,0,.5)}.wrs_modal_dialogContainer.wrs_modal_android{width:99%;height:99%}.wrs_modal_dialogContainer.wrs_modal_android,.wrs_modal_dialogContainer.wrs_modal_ios{margin:auto;overflow:hidden;transform:translate(50%,-50%);top:50%;right:50%!important;position:fixed}.wrs_modal_dialogContainer.wrs_modal_ios{width:100%;height:100%}.wrs_content_container.wrs_minimized{display:none}.wrs_content_container.wrs_modal_android{width:100%;flex-grow:1;display:flex;flex-direction:column}.wrs_content_container.wrs_modal_android>div:first-child,.wrs_content_container.wrs_modal_desktop>div:first-child,.wrs_content_container.wrs_modal_ios>div:first-child{flex-grow:1}.wrs_modal_wrapper.wrs_modal_android{margin:auto;display:flex;flex-direction:column;height:100%;width:100%}.wrs_content_container.wrs_modal_desktop,.wrs_content_container.wrs_modal_ios{width:100%;flex-grow:1;display:flex;flex-direction:column}.wrs_modal_wrapper.wrs_modal_ios{margin:auto;display:flex;flex-direction:column;height:100%;width:100%}.wrs_virtual_keyboard{height:100%;width:100%;top:0;left:50%;transform:translate(-50%)}@media (orientation:portrait){.wrs_modal_dialogContainer.wrs_modal_mobile{width:100vmin;height:100vmin;margin:auto;border-width:0}.wrs_modal_wrapper.wrs_modal_mobile{width:100vmin;height:100vmin;margin:auto}}@media (orientation:landscape){.wrs_modal_dialogContainer.wrs_modal_mobile{width:100vmin;height:100vmin;margin:auto;border-width:0}.wrs_modal_wrapper.wrs_modal_mobile{width:100vmin;height:100vmin;margin:auto}}.wrs_modal_dialogContainer.wrs_modal_badStock,.wrs_modal_wrapper.wrs_modal_badStock{width:100%;height:280px;margin:0 auto;border-width:0}.wrs_noselect{-khtml-user-select:none}.wrs_bottom_right_resizer,.wrs_noselect{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.wrs_bottom_right_resizer{width:10px;height:10px;color:#778e9a;position:absolute;right:4px;bottom:8px;cursor:se-resize}.wrs_bottom_left_resizer{width:15px;height:15px;color:#778e9a;position:absolute;left:0;top:0;cursor:se-resize}.wrs_modal_controls{height:42px;margin:3px 0;overflow:hidden;line-height:normal}.wrs_modal_links{margin:10px auto 0;font-family:arial,sans-serif;padding:6px;display:inline;float:right;text-align:right}.wrs_modal_links>a{text-decoration:none;color:#778e9a;font-size:16px}.wrs_modal_button_cancel,.wrs_modal_button_cancel:active,.wrs_modal_button_cancel:focus,.wrs_modal_button_cancel:hover,.wrs_modal_button_cancel:visited{min-width:80px;font-size:14px;border-radius:3px;border:1px solid #778e9a;padding:6px 8px;margin:10px auto 0 5px;cursor:pointer;font-family:arial,sans-serif;background-color:#ddd;height:32px}.wrs_modal_button_accept,.wrs_modal_button_accept:active,.wrs_modal_button_accept:focus,.wrs_modal_button_accept:hover,.wrs_modal_button_accept:visited{min-width:80px;font-size:14px;border-radius:3px;border:1px solid #778e9a;padding:6px 8px;margin:10px 5px 0 auto;color:#fff;background:#778e9a;cursor:pointer;font-family:arial,sans-serif;height:32px}.wrs_editor_vertical_bar{height:20px;float:right;background:none;width:20px;cursor:pointer}.wrs_modal_buttons_container{display:inline;float:left}.wrs_modal_buttons_container.wrs_modalAndroid{padding-left:6px}.wrs_modal_buttons_container.wrs_modalDesktop{padding-left:0}.wrs_modal_buttons_container>button{line-height:normal;background-image:none}.wrs_modal_wrapper{margin:6px;display:flex;flex-direction:column}.wrs_modal_wrapper.wrs_modal_desktop.wrs_minimized{display:none}@media only screen and (max-device-width:480px) and (orientation:portrait){#wrs_modal_wrapper{width:140%}}.wrs_popupmessage_overlay_envolture{display:none;width:100%}.wrs_popupmessage_overlay{position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0;background-color:rgba(0,0,0,.5);z-index:4;cursor:pointer}.wrs_popupmessage_panel{top:50%;left:50%;transform:translate(-50%,-50%);position:absolute;background:#fff;max-width:500px;width:75%;border-radius:2px;padding:20px;font-family:sans-serif;font-size:15px;text-align:left;color:#2e2e2e;z-index:5;max-height:75%;overflow:auto}.wrs_popupmessage_button_area{margin:10px 0 0}.wrs_panelContainer *{border:0}.wrs_button_cancel,.wrs_button_cancel:active,.wrs_button_cancel:focus,.wrs_button_cancel:hover,.wrs_button_cancel:visited{min-width:80px;font-size:14px;border-radius:3px;border:1px solid #778e9a;padding:6px 8px;margin:10px auto 0 5px;cursor:pointer;font-family:arial,sans-serif;background-color:#ddd;background-image:none;height:32px}.wrs_button_accept,.wrs_button_accept:active,.wrs_button_accept:focus,.wrs_button_accept:hover,.wrs_button_accept:visited{min-width:80px;font-size:14px;border-radius:3px;border:1px solid #778e9a;padding:6px 8px;margin:10px 5px 0 auto;color:#fff;background:#778e9a;cursor:pointer;font-family:arial,sans-serif;height:32px}.wrs_editor button{box-shadow:none}.wrs_editor .wrs_header button{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.wrs_modal_overlay.wrs_modal_desktop.wrs_stack.wrs_overlay_active{display:block}.wrs_toolbar tr:focus,.wrs_toolbar tr:hover{background:none}.wrs_modal_rtl .wrs_modal_button_cancel{margin-right:5px;margin-left:0}.wrs_modal_rtl .wrs_modal_button_accept{margin-right:0;margin-left:5px}.wrs_modal_rtl .wrs_button_cancel{margin-right:5px;margin-left:0}.wrs_modal_rtl .wrs_button_accept{margin-right:0;margin-left:5px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./tableediting.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-color-table-focused-cell-background:#f5fafe}.ck-widget.table td.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table th.ck-editor__nested-editable.ck-editor__nested-editable_focused{background:var(--ck-color-table-focused-cell-background);border-style:none;outline:1px solid var(--ck-color-focus-border);outline-offset:-1px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./inserttable.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-insert-table-dropdown-padding:10px;--ck-insert-table-dropdown-box-height:11px;--ck-insert-table-dropdown-box-width:12px;--ck-insert-table-dropdown-box-margin:1px;--ck-insert-table-dropdown-box-border-color:#bfbfbf;--ck-insert-table-dropdown-box-border-active-color:#53a0e4;--ck-insert-table-dropdown-box-active-background:#c7e5ff}.ck .ck-insert-table-dropdown__grid{display:flex;flex-direction:row;flex-wrap:wrap;width:calc(var(--ck-insert-table-dropdown-box-width)*10 + var(--ck-insert-table-dropdown-box-margin)*20 + var(--ck-insert-table-dropdown-padding)*2);padding:var(--ck-insert-table-dropdown-padding) var(--ck-insert-table-dropdown-padding) 0}.ck .ck-insert-table-dropdown__label{text-align:center}.ck .ck-insert-table-dropdown-grid-box{width:var(--ck-insert-table-dropdown-box-width);height:var(--ck-insert-table-dropdown-box-height);margin:var(--ck-insert-table-dropdown-box-margin);border:1px solid var(--ck-insert-table-dropdown-box-border-color);border-radius:1px}.ck .ck-insert-table-dropdown-grid-box.ck-on{border-color:var(--ck-insert-table-dropdown-box-border-active-color);background:var(--ck-insert-table-dropdown-box-active-background)}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./table.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .table{margin:1em auto;display:table}.ck-content .table table{border-collapse:collapse;border-spacing:0;border:1px double #b3b3b3}.ck-content .table table td,.ck-content .table table th{min-width:2em;padding:.4em;border-color:#d9d9d9}.ck-content .table table th{font-weight:700;background:#fafafa}\"","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/config\n */\n\nimport { isPlainObject, isElement, cloneDeepWith } from 'lodash-es';\n\n/**\n * Handles a configuration dictionary.\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of the {@link ~Config} class.\n\t *\n\t * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\n\t * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\n\t */\n\tconstructor( configurations, defaultConfigurations ) {\n\t\t/**\n\t\t * Store for the whole configuration.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {};\n\n\t\t// Set default configuration.\n\t\tif ( defaultConfigurations ) {\n\t\t\tthis.define( defaultConfigurations );\n\t\t}\n\n\t\t// Set initial configuration.\n\t\tif ( configurations ) {\n\t\t\tthis._setObjectToTarget( this._config, configurations );\n\t\t}\n\t}\n\n\t/**\n\t * Set configuration values.\n\t *\n\t * It accepts both a name/value pair or an object, which properties and values will be used to set\n\t * configurations.\n\t *\n\t * It also accepts setting a \"deep configuration\" by using dots in the name. For example, `'resize.width'` sets\n\t * the value for the `width` configuration in the `resize` subset.\n\t *\n\t *\t\tconfig.set( 'width', 500 );\n\t *\t\tconfig.set( 'toolbar.collapsed', true );\n\t *\n\t *\t\t// Equivalent to:\n\t *\t\tconfig.set( {\n\t *\t\t\twidth: 500\n\t *\t\t\ttoolbar: {\n\t *\t\t\t\tcollapsed: true\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Passing an object as the value will amend the configuration, not replace it.\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcollapsed: true,\n\t *\t\t} );\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcolor: 'red',\n\t *\t\t} );\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' ); // true\n\t *\t\tconfig.get( 'toolbar.color' ); // 'red'\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tset( name, value ) {\n\t\tthis._setToTarget( this._config, name, value );\n\t}\n\n\t/**\n\t * Does exactly the same as {@link #set} with one exception – passed configuration extends\n\t * existing one, but does not overwrite already defined values.\n\t *\n\t * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\n\t * rarely used for other needs.\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tdefine( name, value ) {\n\t\tconst isDefine = true;\n\n\t\tthis._setToTarget( this._config, name, value, isDefine );\n\t}\n\n\t/**\n\t * Gets the value for a configuration entry.\n\t *\n\t *\t\tconfig.get( 'name' );\n\t *\n\t * Deep configurations can be retrieved by separating each part with a dot.\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' );\n\t *\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\tget( name ) {\n\t\treturn this._getFromSource( this._config, name );\n\t}\n\n\t/**\n\t * Saves passed configuration to the specified target (nested object).\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\n\t */\n\t_setToTarget( target, name, value, isDefine = false ) {\n\t\t// In case of an object, iterate through it and call `_setToTarget` again for each property.\n\t\tif ( isPlainObject( name ) ) {\n\t\t\tthis._setObjectToTarget( target, name, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\t// If there is no object for specified part then create one.\n\t\t\tif ( !isPlainObject( target[ part ] ) ) {\n\t\t\t\ttarget[ part ] = {};\n\t\t\t}\n\n\t\t\t// Nested object becomes a target.\n\t\t\ttarget = target[ part ];\n\t\t}\n\n\t\t// In case of value is an object.\n\t\tif ( isPlainObject( value ) ) {\n\t\t\t// We take care of proper config structure.\n\t\t\tif ( !isPlainObject( target[ name ] ) ) {\n\t\t\t\ttarget[ name ] = {};\n\t\t\t}\n\n\t\t\ttarget = target[ name ];\n\n\t\t\t// And iterate through this object calling `_setToTarget` again for each property.\n\t\t\tthis._setObjectToTarget( target, value, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing if we are defining configuration for non empty name.\n\t\tif ( isDefine && typeof target[ name ] != 'undefined' ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttarget[ name ] = value;\n\t}\n\n\t/**\n\t * Get specified configuration from specified source (nested object).\n\t *\n\t * @private\n\t * @param {Object} source level of nested object.\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\t_getFromSource( source, name ) {\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\tif ( !isPlainObject( source[ part ] ) ) {\n\t\t\t\tsource = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Nested object becomes a source.\n\t\t\tsource = source[ part ];\n\t\t}\n\n\t\t// Always returns undefined for non existing configuration.\n\t\treturn source ? cloneConfig( source[ name ] ) : undefined;\n\t}\n\n\t/**\n\t * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {Object} configuration Configuration data set\n\t * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\n\t */\n\t_setObjectToTarget( target, configuration, isDefine ) {\n\t\tObject.keys( configuration ).forEach( key => {\n\t\t\tthis._setToTarget( target, key, configuration[ key ], isDefine );\n\t\t} );\n\t}\n}\n\n// Clones configuration object or value.\n// @param {*} source Source configuration\n// @returns {*} Cloned configuration value.\nfunction cloneConfig( source ) {\n\treturn cloneDeepWith( source, leaveDOMReferences );\n}\n\n// A customizer function for cloneDeepWith.\n// It will leave references to DOM Elements instead of cloning them.\n//\n// @param {*} value\n// @returns {Element|undefined}\nfunction leaveDOMReferences( value ) {\n\treturn isElement( value ) ? value : undefined;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/spy\n */\n\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns {Function} The spy function.\n */\nfunction spy() {\n\treturn function spy() {\n\t\tspy.called = true;\n\t};\n}\n\nexport default spy;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/eventinfo\n */\n\nimport spy from './spy';\n\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n\t/**\n\t * @param {Object} source The emitter.\n\t * @param {String} name The event name.\n\t */\n\tconstructor( source, name ) {\n\t\t/**\n\t\t * The object that fired the event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The event name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis.path = [];\n\n\t\t// The following methods are defined in the constructor because they must be re-created per instance.\n\n\t\t/**\n\t\t * Stops the event emitter to call further callbacks for this event interaction.\n\t\t *\n\t\t * @method #stop\n\t\t */\n\t\tthis.stop = spy();\n\n\t\t/**\n\t\t * Removes the current callback from future interactions of this event.\n\t\t *\n\t\t * @method #off\n\t\t */\n\t\tthis.off = spy();\n\n\t\t/**\n\t\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n\t\t *\n\t\t * It's `undefined` by default and can be changed by an event listener:\n\t\t *\n\t\t *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n\t\t *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n\t\t *\t\t\t// always return an empty DocumentFragment.\n\t\t *\t\t\tevt.return = new DocumentFragment();\n\t\t *\n\t\t *\t\t\t// Make sure no other listeners are executed.\n\t\t *\t\t\tevt.stop();\n\t\t *\t\t} );\n\t\t *\n\t\t * @member #return\n\t\t */\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/uid\n */\n\n/**\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\n * Each character in uid string represents a hexadecimal digit (base 16).\n *\n * @returns {String} A hexadecimal number representing the id.\n */\nexport default function uid() {\n\tlet uuid = 'e'; // Make sure that id does not start with number.\n\n\tfor ( let i = 0; i < 8; i++ ) {\n\t\tuuid += Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\n\t}\n\n\treturn uuid;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/priorities\n */\n\n/**\n * String representing a priority value.\n *\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\n */\n\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n *\n * @namespace\n */\nconst priorities = {\n\t/**\n\t * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\n\t *\n\t * @static\n\t * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\n\t * @returns {Number} Converted priority.\n\t */\n\tget( priority ) {\n\t\tif ( typeof priority != 'number' ) {\n\t\t\treturn this[ priority ] || this.normal;\n\t\t} else {\n\t\t\treturn priority;\n\t\t}\n\t},\n\n\thighest: 100000,\n\thigh: 1000,\n\tnormal: 0,\n\tlow: -1000,\n\tlowest: -100000\n};\n\nexport default priorities;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/emittermixin\n */\n\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\n\n// To check if component is loaded more than once.\nimport './version';\n\nconst _listeningTo = Symbol( 'listeningTo' );\nconst _emitterId = Symbol( 'emitterId' );\n\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\nconst EmitterMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\ton( event, callback, options = {} ) {\n\t\tthis.listenTo( this, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tonce( event, callback, options ) {\n\t\tlet wasFired = false;\n\n\t\tconst onceCallback = function( event, ...args ) {\n\t\t\t// Ensure the callback is called only once even if the callback itself leads to re-firing the event\n\t\t\t// (which would call the callback again).\n\t\t\tif ( !wasFired ) {\n\t\t\t\twasFired = true;\n\n\t\t\t\t// Go off() at the first call.\n\t\t\t\tevent.off();\n\n\t\t\t\t// Go with the original callback.\n\t\t\t\tcallback.call( this, event, ...args );\n\t\t\t}\n\t\t};\n\n\t\t// Make a similar on() call, simply replacing the callback.\n\t\tthis.listenTo( this, event, onceCallback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\toff( event, callback ) {\n\t\tthis.stopListening( this, event, callback );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\tlet emitterInfo, eventCallbacks;\n\n\t\t// _listeningTo contains a list of emitters that this object is listening to.\n\t\t// This list has the following format:\n\t\t//\n\t\t// _listeningTo: {\n\t\t//     emitterId: {\n\t\t//         emitter: emitter,\n\t\t//         callbacks: {\n\t\t//             event1: [ callback1, callback2, ... ]\n\t\t//             ....\n\t\t//         }\n\t\t//     },\n\t\t//     ...\n\t\t// }\n\n\t\tif ( !this[ _listeningTo ] ) {\n\t\t\tthis[ _listeningTo ] = {};\n\t\t}\n\n\t\tconst emitters = this[ _listeningTo ];\n\n\t\tif ( !_getEmitterId( emitter ) ) {\n\t\t\t_setEmitterId( emitter );\n\t\t}\n\n\t\tconst emitterId = _getEmitterId( emitter );\n\n\t\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\n\t\t\temitterInfo = emitters[ emitterId ] = {\n\t\t\t\temitter,\n\t\t\t\tcallbacks: {}\n\t\t\t};\n\t\t}\n\n\t\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\n\t\t\teventCallbacks = emitterInfo.callbacks[ event ] = [];\n\t\t}\n\n\t\teventCallbacks.push( callback );\n\n\t\t// Finally register the callback to the event.\n\t\tcreateEventNamespace( emitter, event );\n\t\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\t\tconst priority = priorities.get( options.priority );\n\n\t\tconst callbackDefinition = {\n\t\t\tcallback,\n\t\t\tpriority\n\t\t};\n\n\t\t// Add the callback to all callbacks list.\n\t\tfor ( const callbacks of lists ) {\n\t\t\t// Add the callback to the list in the right priority position.\n\t\t\tlet added = false;\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].priority < priority ) {\n\t\t\t\t\tcallbacks.splice( i, 0, callbackDefinition );\n\t\t\t\t\tadded = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add at the end, if right place was not found.\n\t\t\tif ( !added ) {\n\t\t\t\tcallbacks.push( callbackDefinition );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\tconst emitters = this[ _listeningTo ];\n\t\tlet emitterId = emitter && _getEmitterId( emitter );\n\t\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\n\t\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\n\n\t\t// Stop if nothing has been listened.\n\t\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// All params provided. off() that single callback.\n\t\tif ( callback ) {\n\t\t\tremoveCallback( emitter, event, callback );\n\t\t}\n\t\t// Only `emitter` and `event` provided. off() all callbacks for that event.\n\t\telse if ( eventCallbacks ) {\n\t\t\twhile ( ( callback = eventCallbacks.pop() ) ) {\n\t\t\t\tremoveCallback( emitter, event, callback );\n\t\t\t}\n\n\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t}\n\t\t// Only `emitter` provided. off() all events for that emitter.\n\t\telse if ( emitterInfo ) {\n\t\t\tfor ( event in emitterInfo.callbacks ) {\n\t\t\t\tthis.stopListening( emitter, event );\n\t\t\t}\n\t\t\tdelete emitters[ emitterId ];\n\t\t}\n\t\t// No params provided. off() all emitters.\n\t\telse {\n\t\t\tfor ( emitterId in emitters ) {\n\t\t\t\tthis.stopListening( emitters[ emitterId ].emitter );\n\t\t\t}\n\t\t\tdelete this[ _listeningTo ];\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfire( eventOrInfo, ...args ) {\n\t\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\n\t\tconst event = eventInfo.name;\n\t\tlet callbacks = getCallbacksForEvent( this, event );\n\n\t\t// Record that the event passed this emitter on its path.\n\t\teventInfo.path.push( this );\n\n\t\t// Handle event listener callbacks first.\n\t\tif ( callbacks ) {\n\t\t\t// Arguments passed to each callback.\n\t\t\tconst callbackArgs = [ eventInfo, ...args ];\n\n\t\t\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n\t\t\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n\t\t\t// failed if callbacks were added to the queue before currently processed callback.\n\t\t\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n\t\t\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\t\t\tcallbacks = Array.from( callbacks );\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tcallbacks[ i ].callback.apply( this, callbackArgs );\n\n\t\t\t\t// Remove the callback from future requests if off() has been called.\n\t\t\t\tif ( eventInfo.off.called ) {\n\t\t\t\t\t// Remove the called mark for the next calls.\n\t\t\t\t\tdelete eventInfo.off.called;\n\n\t\t\t\t\tremoveCallback( this, event, callbacks[ i ].callback );\n\t\t\t\t}\n\n\t\t\t\t// Do not execute next callbacks if stop() was called.\n\t\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delegate event to other emitters if needed.\n\t\tif ( this._delegations ) {\n\t\t\tconst destinations = this._delegations.get( event );\n\t\t\tconst passAllDestinations = this._delegations.get( '*' );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tfireDelegatedEvents( destinations, eventInfo, args );\n\t\t\t}\n\n\t\t\tif ( passAllDestinations ) {\n\t\t\t\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\n\t\t\t}\n\t\t}\n\n\t\treturn eventInfo.return;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdelegate( ...events ) {\n\t\treturn {\n\t\t\tto: ( emitter, nameOrFunction ) => {\n\t\t\t\tif ( !this._delegations ) {\n\t\t\t\t\tthis._delegations = new Map();\n\t\t\t\t}\n\n\t\t\t\t// Originally there was a for..of loop which unfortunately caused an error in Babel that didn't allow\n\t\t\t\t// build an application. See: https://github.com/ckeditor/ckeditor5-react/issues/40.\n\t\t\t\tevents.forEach( eventName => {\n\t\t\t\t\tconst destinations = this._delegations.get( eventName );\n\n\t\t\t\t\tif ( !destinations ) {\n\t\t\t\t\t\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestinations.set( emitter, nameOrFunction );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopDelegating( event, emitter ) {\n\t\tif ( !this._delegations ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !event ) {\n\t\t\tthis._delegations.clear();\n\t\t} else if ( !emitter ) {\n\t\t\tthis._delegations.delete( event );\n\t\t} else {\n\t\t\tconst destinations = this._delegations.get( event );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tdestinations.delete( emitter );\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} listeningEmitter An emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~Emitter|null}\n */\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\n\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\n\t\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId( emitter, id ) {\n\tif ( !emitter[ _emitterId ] ) {\n\t\temitter[ _emitterId ] = id || uid();\n\t}\n}\n\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter which id will be returned.\n */\nexport function _getEmitterId( emitter ) {\n\treturn emitter[ _emitterId ];\n}\n\n// Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\nfunction getEvents( source ) {\n\tif ( !source._events ) {\n\t\tObject.defineProperty( source, '_events', {\n\t\t\tvalue: {}\n\t\t} );\n\t}\n\n\treturn source._events;\n}\n\n// Creates event node for generic-specific events relation architecture.\nfunction makeEventNode() {\n\treturn {\n\t\tcallbacks: [],\n\t\tchildEvents: []\n\t};\n}\n\n// Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\nfunction createEventNamespace( source, eventName ) {\n\tconst events = getEvents( source );\n\n\t// First, check if the event we want to add to the structure already exists.\n\tif ( events[ eventName ] ) {\n\t\t// If it exists, we don't have to do anything.\n\t\treturn;\n\t}\n\n\t// In other case, we have to create the structure for the event.\n\t// Note, that we might need to create intermediate events too.\n\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n\t// we need to also register foo:bar.\n\n\t// Currently processed event name.\n\tlet name = eventName;\n\t// Name of the event that is a child event for currently processed event.\n\tlet childEventName = null;\n\n\t// Array containing all newly created specific events.\n\tconst newEventNodes = [];\n\n\t// While loop can't check for ':' index because we have to handle generic events too.\n\t// In each loop, we truncate event name, going from the most specific name to the generic one.\n\t// I.e. foo:bar:abc -> foo:bar -> foo.\n\twhile ( name !== '' ) {\n\t\tif ( events[ name ] ) {\n\t\t\t// If the currently processed event name is already registered, we can be sure\n\t\t\t// that it already has all the structure created, so we can break the loop here\n\t\t\t// as no more events need to be registered.\n\t\t\tbreak;\n\t\t}\n\n\t\t// If this event is not yet registered, create a new object for it.\n\t\tevents[ name ] = makeEventNode();\n\t\t// Add it to the array with newly created events.\n\t\tnewEventNodes.push( events[ name ] );\n\n\t\t// Add previously processed event name as a child of this event.\n\t\tif ( childEventName ) {\n\t\t\tevents[ name ].childEvents.push( childEventName );\n\t\t}\n\n\t\tchildEventName = name;\n\t\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\t\tname = name.substr( 0, name.lastIndexOf( ':' ) );\n\t}\n\n\tif ( name !== '' ) {\n\t\t// If name is not empty, we found an already registered event that was a parent of the\n\t\t// event we wanted to register.\n\n\t\t// Copy that event's callbacks to newly registered events.\n\t\tfor ( const node of newEventNodes ) {\n\t\t\tnode.callbacks = events[ name ].callbacks.slice();\n\t\t}\n\n\t\t// Add last newly created event to the already registered event.\n\t\tevents[ name ].childEvents.push( childEventName );\n\t}\n}\n\n// Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\nfunction getCallbacksListsForNamespace( source, eventName ) {\n\tconst eventNode = getEvents( source )[ eventName ];\n\n\tif ( !eventNode ) {\n\t\treturn [];\n\t}\n\n\tlet callbacksLists = [ eventNode.callbacks ];\n\n\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\n\t\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\n\n\t\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\n\t}\n\n\treturn callbacksLists;\n}\n\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\nfunction getCallbacksForEvent( source, eventName ) {\n\tlet event;\n\n\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\n\t\t// There are no callbacks registered for specified eventName.\n\t\t// But this could be a specific-type event that is in a namespace.\n\t\tif ( eventName.indexOf( ':' ) > -1 ) {\n\t\t\t// If the eventName is specific, try to find callback lists for more generic event.\n\t\t\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\n\t\t} else {\n\t\t\t// If this is a top-level generic event, return null;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn event.callbacks;\n}\n\n// Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing `[ {@link utils.Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\n\tfor ( let [ emitter, name ] of destinations ) {\n\t\tif ( !name ) {\n\t\t\tname = eventInfo.name;\n\t\t} else if ( typeof name == 'function' ) {\n\t\t\tname = name( eventInfo.name );\n\t\t}\n\n\t\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\n\n\t\tdelegatedInfo.path = [ ...eventInfo.path ];\n\n\t\temitter.fire( delegatedInfo, ...fireArgs );\n\t}\n}\n\n// Removes callback from emitter for given event.\n//\n// @param {module:utils/emittermixin~Emitter} emitter\n// @param {String} event\n// @param {Function} callback\nfunction removeCallback( emitter, event, callback ) {\n\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\n\tfor ( const callbacks of lists ) {\n\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\tif ( callbacks[ i ].callback == callback ) {\n\t\t\t\t// Remove the callback from the list (fixing the next index).\n\t\t\t\tcallbacks.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} [nameOrFunction] A custom event name or function which converts the original name string.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/mix\n */\n\n/**\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\n * prototype of first object (a constructor).\n *\n *\t\tclass Editor {\n *\t\t\t...\n *\t\t}\n *\n *\t\tconst SomeMixin = {\n *\t\t\ta() {\n *\t\t\t\treturn 'a';\n *\t\t\t}\n *\t\t};\n *\n *\t\tmix( Editor, SomeMixin, ... );\n *\n *\t\tnew Editor().a(); // -> 'a'\n *\n * Note: Properties which already exist in the base class will not be overriden.\n *\n * @param {Function} [baseClass] Class which prototype will be extended.\n * @param {Object} [...mixins] Objects from which to get properties.\n */\nexport default function mix( baseClass, ...mixins ) {\n\tmixins.forEach( mixin => {\n\t\tObject.getOwnPropertyNames( mixin ).concat( Object.getOwnPropertySymbols( mixin ) )\n\t\t\t.forEach( key => {\n\t\t\t\tif ( key in baseClass.prototype ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\n\t\t\t\tsourceDescriptor.enumerable = false;\n\n\t\t\t\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\n\t\t\t} );\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/comparearrays\n */\n\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n *\t\tcompareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n *\t\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n *\n * @param {Array} a Array that is compared.\n * @param {Array} b Array to compare with.\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\n */\nexport default function compareArrays( a, b ) {\n\tconst minLen = Math.min( a.length, b.length );\n\n\tfor ( let i = 0; i < minLen; i++ ) {\n\t\tif ( a[ i ] != b[ i ] ) {\n\t\t\t// The arrays are different.\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t// Both arrays were same at all points.\n\tif ( a.length == b.length ) {\n\t\t// If their length is also same, they are the same.\n\t\treturn 'same';\n\t} else if ( a.length < b.length ) {\n\t\t// Compared array is shorter so it is a prefix of the other array.\n\t\treturn 'prefix';\n\t} else {\n\t\t// Compared array is longer so it is an extension of the other array.\n\t\treturn 'extension';\n\t}\n}\n\n/**\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\n */\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Abstract tree view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/element~Element} class to create view elements\n * or {@link module:engine/view/text~Text} class to create view text nodes.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\t// Parent might be Node, null or DocumentFragment.\n\t\tif ( this.parent instanceof Node ) {\n\t\t\treturn this.parent.document;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n\t *\n\t *\t\tconst abc = downcastWriter.createText( 'abc' );\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n\t *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.index );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t *\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing view objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of model objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tviewElement.is( 'view:element' ); // -> true\n\t *\t\tviewElement.is( 'model:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timgElement.is( 'img' ); // -> true\n\t *\t\timgElement.is( 'element', 'img' ); // -> same as above\n\t *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n\t *\n\t * The list of view objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n\t * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n\t * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n\t * * {@link module:engine/view/element~Element#is `Element#is()`}\n\t * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n\t * * {@link module:engine/view/node~Node#is `Node#is()`}\n\t * * {@link module:engine/view/position~Position#is `Position#is()`}\n\t * * {@link module:engine/view/range~Range#is `Range#is()`}\n\t * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n\t * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/view/text~Text#is `Text#is()`}\n\t * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n\t * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'view:node';\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @method #_clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'view:text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n\t * from which the text proxy starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given offsetInText value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given length value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-length: Given length value is incorrect.', this );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/view/textproxy~TextProxy#data\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in the `textNode` where this `TextProxy` instance starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset size of this node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.data.length !== this.textNode.data.length;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttextProxy.is( 'textProxy' ); // -> true\n\t *\t\ttextProxy.is( 'view:textProxy' ); // -> true\n\t *\n\t *\t\ttextProxy.is( 'model:textProxy' ); // -> false\n\t *\t\ttextProxy.is( 'element' ); // -> false\n\t *\t\ttextProxy.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy' || type == 'view:textProxy';\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n\t * root element, otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this.textNode : this.parent;\n\n\t\twhile ( parent !== null ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/objecttomap\n */\n\n/**\n * Transforms object to map.\n *\n *\t\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap.get( 'foo' ); // 1\n *\n * @param {Object} obj Object to transform.\n * @returns {Map} Map created from object.\n */\nexport default function objectToMap( obj ) {\n\tconst map = new Map();\n\n\tfor ( const key in obj ) {\n\t\tmap.set( key, obj[ key ] );\n\t}\n\n\treturn map;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/isiterable\n */\n\n/**\n * Checks if value implements iterator interface.\n *\n * @param {*} value The value to check.\n * @returns {Boolean} True if value implements iterator interface.\n */\nexport default function isIterable( value ) {\n\treturn !!( value && value[ Symbol.iterator ] );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n\t/**\n\t * Creates new instance of Matcher.\n\t *\n\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n\t * more information.\n\t */\n\tconstructor( ...pattern ) {\n\t\t/**\n\t\t * @private\n\t\t * @type {Array<String|RegExp|Object>}\n\t\t */\n\t\tthis._patterns = [];\n\n\t\tthis.add( ...pattern );\n\t}\n\n\t/**\n\t * Adds pattern or patterns to matcher instance.\n\t *\n\t *\t\t// String.\n\t *\t\tmatcher.add( 'div' );\n\t *\n\t *\t\t// Regular expression.\n\t *\t\tmatcher.add( /^\\w/ );\n\t *\n\t *\t\t// Single class.\n\t *\t\tmatcher.add( {\n\t *\t\t\tclasses: 'foobar'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n\t *\n\t * Multiple patterns can be added in one call:\n\t *\n\t * \t\tmatcher.add( 'div', { classes: 'foobar' } );\n\t *\n\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n\t * is provided it will be used to match element's name. Pattern can be also provided in a form\n\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n\t * Function's return value will be stored under `match` key of the object returned from\n\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n\t * @param {Object} [pattern.attributes] Object with key-value pairs representing attributes to match. Each object key\n\t * represents attribute name. Value under that key can be either:\n\t * * `true` - then attribute is just required (can be empty),\n\t * * a string - then attribute has to be equal, or\n\t * * a regular expression - then attribute has to match the expression.\n\t * @param {String|RegExp|Array} [pattern.classes] Class name or array of class names to match. Each name can be\n\t * provided in a form of string or regular expression.\n\t * @param {Object} [pattern.styles] Object with key-value pairs representing styles to match. Each object key\n\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\n\t * to match style value.\n\t */\n\tadd( ...pattern ) {\n\t\tfor ( let item of pattern ) {\n\t\t\t// String or RegExp pattern is used as element's name.\n\t\t\tif ( typeof item == 'string' || item instanceof RegExp ) {\n\t\t\t\titem = { name: item };\n\t\t\t}\n\n\t\t\t// Single class name/RegExp can be provided.\n\t\t\tif ( item.classes && ( typeof item.classes == 'string' || item.classes instanceof RegExp ) ) {\n\t\t\t\titem.classes = [ item.classes ];\n\t\t\t}\n\n\t\t\tthis._patterns.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns match information about first found\n\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n\t *\n\t * Example of returned object:\n\t *\n\t *\t\t{\n\t *\t\t\telement: <instance of found element>,\n\t *\t\t\tpattern: <pattern used to match found element>,\n\t *\t\t\tmatch: {\n\t *\t\t\t\tname: true,\n\t *\t\t\t\tattributes: [ 'title', 'href' ],\n\t *\t\t\t\tclasses: [ 'foo' ],\n\t *\t\t\t\tstyles: [ 'color', 'position' ]\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#matchAll\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Object|null} result\n\t * @returns {module:engine/view/element~Element} result.element Matched view element.\n\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n\t * @returns {Object} result.match Object representing matched element parts.\n\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\n\t * @returns {Array} [result.match.attributes] Array with matched attribute names.\n\t * @returns {Array} [result.match.classes] Array with matched class names.\n\t * @returns {Array} [result.match.styles] Array with matched style names.\n\t */\n\tmatch( ...element ) {\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns array of match information with all found\n\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#match\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\n\t */\n\tmatchAll( ...element ) {\n\t\tconst results = [];\n\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\tresults.push( {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results.length > 0 ? results : null;\n\t}\n\n\t/**\n\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n\t *\n\t * @returns {String|null} Element name trying to match.\n\t */\n\tgetElementName() {\n\t\tif ( this._patterns.length !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst pattern = this._patterns[ 0 ];\n\t\tconst name = pattern.name;\n\n\t\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\n\t}\n}\n\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\nfunction isElementMatching( element, pattern ) {\n\t// If pattern is provided as function - return result of that function;\n\tif ( typeof pattern == 'function' ) {\n\t\treturn pattern( element );\n\t}\n\n\tconst match = {};\n\t// Check element's name.\n\tif ( pattern.name ) {\n\t\tmatch.name = matchName( pattern.name, element.name );\n\n\t\tif ( !match.name ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's attributes.\n\tif ( pattern.attributes ) {\n\t\tmatch.attributes = matchAttributes( pattern.attributes, element );\n\n\t\tif ( !match.attributes ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's classes.\n\tif ( pattern.classes ) {\n\t\tmatch.classes = matchClasses( pattern.classes, element );\n\n\t\tif ( !match.classes ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Check element's styles.\n\tif ( pattern.styles ) {\n\t\tmatch.styles = matchStyles( pattern.styles, element );\n\n\t\tif ( !match.styles ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\nfunction matchName( pattern, name ) {\n\t// If pattern is provided as RegExp - test against this regexp.\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( name );\n\t}\n\n\treturn pattern === name;\n}\n\n// Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\nfunction matchAttributes( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasAttribute( name ) ) {\n\t\t\tconst attribute = element.getAttribute( name );\n\n\t\t\tif ( pattern === true ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else if ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( attribute ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( attribute === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\nfunction matchClasses( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const pattern of patterns ) {\n\t\tif ( pattern instanceof RegExp ) {\n\t\t\tconst classes = element.getClassNames();\n\n\t\t\tfor ( const name of classes ) {\n\t\t\t\tif ( pattern.test( name ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( match.length === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if ( element.hasClass( pattern ) ) {\n\t\t\tmatch.push( pattern );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\nfunction matchStyles( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasStyle( name ) ) {\n\t\t\tconst style = element.getStyle( name );\n\n\t\t\tif ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( style ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( style === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattributes: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclasses: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclasses: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclasses: [ 'baz', 'bar', /foo.../ ]\n *\t\t};\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyles: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyles: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclasses: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [classes] View element's class name(s) to match.\n * @property {Object} [styles] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attributes] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Map of styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new Map();\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'view:element' ); // -> true\n\t *\t\telement.is( 'view:node' ); // -> true\n\t *\n\t *\t\telement.is( 'model:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/view/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'img' ); // -> true if this is an <img> element\n\t *\t\telement.is( 'element', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\tyield* this._attrs.keys();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tlet styleString = '';\n\n\t\t\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\t\t\tstyleString += `${ property }:${ value };`;\n\t\t\t\t}\n\n\t\t\t\treturn styleString;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn this._styles.size > 0;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for given property.\n\t * Undefined is returned if style does not exist.\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.get( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.keys();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( styles == '' ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles = new Map( this._styles );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tparseInlineStyles( this._styles, value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( isPlainObject( property ) ) {\n\t\t\tconst keys = Object.keys( property );\n\n\t\t\tfor ( const key of keys ) {\n\t\t\t\tthis._styles.set( key, property[ key ] );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styles.set( property, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.delete( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tif ( isPlainObject( attrs ) ) {\n\t\tattrs = objectToMap( attrs );\n\t} else {\n\t\tattrs = new Map( attrs );\n\t}\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\nfunction parseInlineStyles( stylesMap, stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tstylesMap.clear();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tcontainerElement.is( 'containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'element' ); // -> true\n\t *\t\tcontainerElement.is( 'node' ); // -> true\n\t *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'view:element' ); // -> true\n\t *\t\tcontainerElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tcontainerElement.is( 'model:element' ); // -> false\n\t *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a container element, you can also check its\n\t * {@link module:engine/view/containerelement~ContainerElement#name name}:\n\t *\n\t *\t\tcontainerElement.is( 'div' ); // -> true if this is a div container element\n\t *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n\tconst children = [ ...this.getChildren() ];\n\tconst lastChild = children[ this.childCount - 1 ];\n\n\t// Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\tif ( lastChild && lastChild.is( 'element', 'br' ) ) {\n\t\treturn this.childCount;\n\t}\n\n\tfor ( const child of children ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/observablemixin\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { extend, isObject } from 'lodash-es';\n\nconst observablePropertiesSymbol = Symbol( 'observableProperties' );\nconst boundObservablesSymbol = Symbol( 'boundObservables' );\nconst boundPropertiesSymbol = Symbol( 'boundProperties' );\n\n/**\n * Mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * Read more about the concept of observables in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\nconst ObservableMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tset( name, value ) {\n\t\t// If the first parameter is an Object, iterate over its properties.\n\t\tif ( isObject( name ) ) {\n\t\t\tObject.keys( name ).forEach( property => {\n\t\t\t\tthis.set( property, name[ property ] );\n\t\t\t}, this );\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst properties = this[ observablePropertiesSymbol ];\n\n\t\tif ( ( name in this ) && !properties.has( name ) ) {\n\t\t\t/**\n\t\t\t * Cannot override an existing property.\n\t\t\t *\n\t\t\t * This error is thrown when trying to {@link ~Observable#set set} an property with\n\t\t\t * a name of an already existing property. For example:\n\t\t\t *\n\t\t\t *\t\tlet observable = new Model();\n\t\t\t *\t\tobservable.property = 1;\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n\t\t\t *\n\t\t\t *\t\tobservable.set( 'property', 1 );\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n\t\t\t *\n\t\t\t * @error observable-set-cannot-override\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-set-cannot-override: Cannot override an existing property.', this );\n\t\t}\n\n\t\tObject.defineProperty( this, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget() {\n\t\t\t\treturn properties.get( name );\n\t\t\t},\n\n\t\t\tset( value ) {\n\t\t\t\tconst oldValue = properties.get( name );\n\n\t\t\t\t// Fire `set` event before the new value will be set to make it possible\n\t\t\t\t// to override observable property without affecting `change` event.\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\t\t\t\tlet newValue = this.fire( 'set:' + name, name, value, oldValue );\n\n\t\t\t\tif ( newValue === undefined ) {\n\t\t\t\t\tnewValue = value;\n\t\t\t\t}\n\n\t\t\t\t// Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n\t\t\t\t// Note: When properties map has no such own property, then its value is undefined.\n\t\t\t\tif ( oldValue !== newValue || !properties.has( name ) ) {\n\t\t\t\t\tproperties.set( name, newValue );\n\t\t\t\t\tthis.fire( 'change:' + name, name, newValue, oldValue );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis[ name ] = value;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbind( ...bindProperties ) {\n\t\tif ( !bindProperties.length || !isStringArray( bindProperties ) ) {\n\t\t\t/**\n\t\t\t * All properties must be strings.\n\t\t\t *\n\t\t\t * @error observable-bind-wrong-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-wrong-properties: All properties must be strings.', this );\n\t\t}\n\n\t\tif ( ( new Set( bindProperties ) ).size !== bindProperties.length ) {\n\t\t\t/**\n\t\t\t * Properties must be unique.\n\t\t\t *\n\t\t\t * @error observable-bind-duplicate-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-duplicate-properties: Properties must be unique.', this );\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\n\t\tbindProperties.forEach( propertyName => {\n\t\t\tif ( boundProperties.has( propertyName ) ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot bind the same property more that once.\n\t\t\t\t *\n\t\t\t\t * @error observable-bind-rebind\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-bind-rebind: Cannot bind the same property more that once.', this );\n\t\t\t}\n\t\t} );\n\n\t\tconst bindings = new Map();\n\n\t\t// @typedef {Object} Binding\n\t\t// @property {Array} property Property which is bound.\n\t\t// @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n\t\t// @property {Array} callback A function which processes `to` components.\n\t\tbindProperties.forEach( a => {\n\t\t\tconst binding = { property: a, to: [] };\n\n\t\t\tboundProperties.set( a, binding );\n\t\t\tbindings.set( a, binding );\n\t\t} );\n\n\t\t// @typedef {Object} BindChain\n\t\t// @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n\t\t// @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n\t\t// @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n\t\t// @property {Array} _bindProperties Array of `_observable` properties to be bound.\n\t\t// @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n\t\t// @property {Map} _bindings Stores bindings to be kept in\n\t\t// {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n\t\t// initiated in this binding chain.\n\t\treturn {\n\t\t\tto: bindTo,\n\t\t\ttoMany: bindToMany,\n\n\t\t\t_observable: this,\n\t\t\t_bindProperties: bindProperties,\n\t\t\t_to: [],\n\t\t\t_bindings: bindings\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tunbind( ...unbindProperties ) {\n\t\t// Nothing to do here if not inited yet.\n\t\tif ( !( observablePropertiesSymbol in this ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\t\tconst boundObservables = this[ boundObservablesSymbol ];\n\n\t\tif ( unbindProperties.length ) {\n\t\t\tif ( !isStringArray( unbindProperties ) ) {\n\t\t\t\t/**\n\t\t\t\t * Properties must be strings.\n\t\t\t\t *\n\t\t\t\t * @error observable-unbind-wrong-properties\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-unbind-wrong-properties: Properties must be strings.', this );\n\t\t\t}\n\n\t\t\tunbindProperties.forEach( propertyName => {\n\t\t\t\tconst binding = boundProperties.get( propertyName );\n\n\t\t\t\t// Nothing to do if the binding is not defined\n\t\t\t\tif ( !binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet toObservable, toProperty, toProperties, toPropertyBindings;\n\n\t\t\t\tbinding.to.forEach( to => {\n\t\t\t\t\t// TODO: ES6 destructuring.\n\t\t\t\t\ttoObservable = to[ 0 ];\n\t\t\t\t\ttoProperty = to[ 1 ];\n\t\t\t\t\ttoProperties = boundObservables.get( toObservable );\n\t\t\t\t\ttoPropertyBindings = toProperties[ toProperty ];\n\n\t\t\t\t\ttoPropertyBindings.delete( binding );\n\n\t\t\t\t\tif ( !toPropertyBindings.size ) {\n\t\t\t\t\t\tdelete toProperties[ toProperty ];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !Object.keys( toProperties ).length ) {\n\t\t\t\t\t\tboundObservables.delete( toObservable );\n\t\t\t\t\t\tthis.stopListening( toObservable, 'change' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tboundProperties.delete( propertyName );\n\t\t\t} );\n\t\t} else {\n\t\t\tboundObservables.forEach( ( bindings, boundObservable ) => {\n\t\t\t\tthis.stopListening( boundObservable, 'change' );\n\t\t\t} );\n\n\t\t\tboundObservables.clear();\n\t\t\tboundProperties.clear();\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdecorate( methodName ) {\n\t\tconst originalMethod = this[ methodName ];\n\n\t\tif ( !originalMethod ) {\n\t\t\t/**\n\t\t\t * Cannot decorate an undefined method.\n\t\t\t *\n\t\t\t * @error observablemixin-cannot-decorate-undefined\n\t\t\t * @param {Object} object The object which method should be decorated.\n\t\t\t * @param {String} methodName Name of the method which does not exist.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.',\n\t\t\t\tthis,\n\t\t\t\t{ object: this, methodName }\n\t\t\t);\n\t\t}\n\n\t\tthis.on( methodName, ( evt, args ) => {\n\t\t\tevt.return = originalMethod.apply( this, args );\n\t\t} );\n\n\t\tthis[ methodName ] = function( ...args ) {\n\t\t\treturn this.fire( methodName, args );\n\t\t};\n\t}\n};\n\nextend( ObservableMixin, EmitterMixin );\n\nexport default ObservableMixin;\n\n// Init symbol properties needed to for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\nfunction initObservable( observable ) {\n\t// Do nothing if already inited.\n\tif ( observablePropertiesSymbol in observable ) {\n\t\treturn;\n\t}\n\n\t// The internal hash containing the observable's state.\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, observablePropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Map containing bindings to external observables. It shares the binding objects\n\t// (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n\t// it is used to observe external observables to update own properties accordingly.\n\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\tz: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t},\n\t//\t\t\t\tC: {\n\t//\t\t\t\t\tw: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundObservablesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Object that stores which properties of this observable are bound and how. It shares\n\t// the binding objects (`{ observable: A, property: 'a', to: ... }`) with {@link utils.ObservableMixin#_boundObservables}.\n\t// This data structure is a reverse of {@link utils.ObservableMixin#_boundObservables} and it is helpful for\n\t// {@link utils.ObservableMixin#unbind}.\n\t//\n\t// See {@link utils.ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundPropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n}\n\n// A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\nfunction bindTo( ...args ) {\n\tconst parsedArgs = parseBindToArgs( ...args );\n\tconst bindingsKeys = Array.from( this._bindings.keys() );\n\tconst numberOfBindings = bindingsKeys.length;\n\n\t// Eliminate A.bind( 'x' ).to( B, C )\n\tif ( !parsedArgs.callback && parsedArgs.to.length > 1 ) {\n\t\t/**\n\t\t * Binding multiple observables only possible with callback.\n\t\t *\n\t\t * @error observable-bind-no-callback\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'observable-bind-to-no-callback: Binding multiple observables only possible with callback.',\n\t\t\tthis\n\t\t);\n\t}\n\n\t// Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\tif ( numberOfBindings > 1 && parsedArgs.callback ) {\n\t\t/**\n\t\t * Cannot bind multiple properties and use a callback in one binding.\n\t\t *\n\t\t * @error observable-bind-to-extra-callback\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tparsedArgs.to.forEach( to => {\n\t\t// Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n\t\tif ( to.properties.length && to.properties.length !== numberOfBindings ) {\n\t\t\t/**\n\t\t\t * The number of properties must match.\n\t\t\t *\n\t\t\t * @error observable-bind-to-properties-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-to-properties-length: The number of properties must match.', this );\n\t\t}\n\n\t\t// When no to.properties specified, observing source properties instead i.e.\n\t\t// A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\t\tif ( !to.properties.length ) {\n\t\t\tto.properties = this._bindProperties;\n\t\t}\n\t} );\n\n\tthis._to = parsedArgs.to;\n\n\t// Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\tif ( parsedArgs.callback ) {\n\t\tthis._bindings.get( bindingsKeys[ 0 ] ).callback = parsedArgs.callback;\n\t}\n\n\tattachBindToListeners( this._observable, this._to );\n\n\t// Update observable._boundProperties and observable._boundObservables.\n\tupdateBindToBound( this );\n\n\t// Set initial values of bound properties.\n\tthis._bindProperties.forEach( propertyName => {\n\t\tupdateBoundObservableProperty( this._observable, propertyName );\n\t} );\n}\n\n// Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\nfunction bindToMany( observables, attribute, callback ) {\n\tif ( this._bindings.size > 1 ) {\n\t\t/**\n\t\t * Binding one attribute to many observables only possible with one attribute.\n\t\t *\n\t\t * @error observable-bind-to-many-not-one-binding\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().', this );\n\t}\n\n\tthis.to(\n\t\t// Bind to #attribute of each observable...\n\t\t...getBindingTargets( observables, attribute ),\n\t\t// ...using given callback to parse attribute values.\n\t\tcallback\n\t);\n}\n\n// Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\nfunction getBindingTargets( observables, attribute ) {\n\tconst observableAndAttributePairs = observables.map( observable => [ observable, attribute ] );\n\n\t// Merge pairs to one-dimension array of observables and attributes.\n\treturn Array.prototype.concat.apply( [], observableAndAttributePairs );\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n\n// Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\nfunction parseBindToArgs( ...args ) {\n\t// Eliminate A.bind( 'x' ).to()\n\tif ( !args.length ) {\n\t\t/**\n\t\t * Invalid argument syntax in `to()`.\n\t\t *\n\t\t * @error observable-bind-to-parse-error\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null );\n\t}\n\n\tconst parsed = { to: [] };\n\tlet lastObservable;\n\n\tif ( typeof args[ args.length - 1 ] == 'function' ) {\n\t\tparsed.callback = args.pop();\n\t}\n\n\targs.forEach( a => {\n\t\tif ( typeof a == 'string' ) {\n\t\t\tlastObservable.properties.push( a );\n\t\t} else if ( typeof a == 'object' ) {\n\t\t\tlastObservable = { observable: a, properties: [] };\n\t\t\tparsed.to.push( lastObservable );\n\t\t} else {\n\t\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null );\n\t\t}\n\t} );\n\n\treturn parsed;\n}\n\n// Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\nfunction updateBoundObservables( observable, binding, toObservable, toPropertyName ) {\n\tconst boundObservables = observable[ boundObservablesSymbol ];\n\tconst bindingsToObservable = boundObservables.get( toObservable );\n\tconst bindings = bindingsToObservable || {};\n\n\tif ( !bindings[ toPropertyName ] ) {\n\t\tbindings[ toPropertyName ] = new Set();\n\t}\n\n\t// Pass the binding to a corresponding Set in `observable._boundObservables`.\n\tbindings[ toPropertyName ].add( binding );\n\n\tif ( !bindingsToObservable ) {\n\t\tboundObservables.set( toObservable, bindings );\n\t}\n}\n\n// Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\nfunction updateBindToBound( chain ) {\n\tlet toProperty;\n\n\tchain._bindings.forEach( ( binding, propertyName ) => {\n\t\t// Note: For a binding without a callback, this will run only once\n\t\t// like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n\t\t// TODO: ES6 destructuring.\n\t\tchain._to.forEach( to => {\n\t\t\ttoProperty = to.properties[ binding.callback ? 0 : chain._bindProperties.indexOf( propertyName ) ];\n\n\t\t\tbinding.to.push( [ to.observable, toProperty ] );\n\t\t\tupdateBoundObservables( chain._observable, binding, to.observable, toProperty );\n\t\t} );\n\t} );\n}\n\n// Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\nfunction updateBoundObservableProperty( observable, propertyName ) {\n\tconst boundProperties = observable[ boundPropertiesSymbol ];\n\tconst binding = boundProperties.get( propertyName );\n\tlet propertyValue;\n\n\t// When a binding with callback is created like\n\t//\n\t// \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n\t//\n\t// collect B.b and C.c, then pass them to callback to set A.a.\n\tif ( binding.callback ) {\n\t\tpropertyValue = binding.callback.apply( observable, binding.to.map( to => to[ 0 ][ to[ 1 ] ] ) );\n\t} else {\n\t\tpropertyValue = binding.to[ 0 ];\n\t\tpropertyValue = propertyValue[ 0 ][ propertyValue[ 1 ] ];\n\t}\n\n\tif ( observable.hasOwnProperty( propertyName ) ) {\n\t\tobservable[ propertyName ] = propertyValue;\n\t} else {\n\t\tobservable.set( propertyName, propertyValue );\n\t}\n}\n\n// Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\nfunction attachBindToListeners( observable, toBindings ) {\n\ttoBindings.forEach( to => {\n\t\tconst boundObservables = observable[ boundObservablesSymbol ];\n\t\tlet bindings;\n\n\t\t// If there's already a chain between the observables (`observable` listens to\n\t\t// `to.observable`), there's no need to create another `change` event listener.\n\t\tif ( !boundObservables.get( to.observable ) ) {\n\t\t\tobservable.listenTo( to.observable, 'change', ( evt, propertyName ) => {\n\t\t\t\tbindings = boundObservables.get( to.observable )[ propertyName ];\n\n\t\t\t\t// Note: to.observable will fire for any property change, react\n\t\t\t\t// to changes of properties which are bound only.\n\t\t\t\tif ( bindings ) {\n\t\t\t\t\tbindings.forEach( binding => {\n\t\t\t\t\t\tupdateBoundObservableProperty( observable, binding.property );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}\n\n/**\n * Interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Fired when a property value is going to be set but is not set yet (before the `change` event is fired).\n *\n * You can control the final value of the property by using\n * the {@link module:utils/eventinfo~EventInfo#return event's `return` property}.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'set:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value is going to be changed from ${ oldValue } to ${ newValue }` );\n *\t\t\tconsole.log( `Current property value is ${ observable[ propertyName ] }` );\n *\n *\t\t\t// Let's override the value.\n *\t\t\tevt.return = 3;\n *\t\t} );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'Value is going to be changed from 1 to 2'\n *\t\t                     // -> 'Current property value is 1'\n *\t\t                     // -> 'Value has changed from 1 to 3'\n *\n * **Note:** Event is fired even when the new value is the same as the old value.\n *\n * @event set:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\n * of the state and is be observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * have a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds {@link #set obvervable properties} to other objects implementing the\n * {@link module:utils/observablemixin~Observable} interface.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#property-bindings dedicated guide}\n * covering the topic of property bindings with some additional examples.\n *\n * Let's consider two objects: a `button` and an associated `command` (both `Observable`).\n *\n * A simple property binding could be as follows:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled' );\n *\n * or even shorter:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\n * which works in the following way:\n *\n * * `button.isEnabled` **instantly equals** `command.isEnabled`,\n * * whenever `command.isEnabled` changes, `button.isEnabled` will immediately reflect its value.\n *\n * **Note**: To release the binding use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * You can also \"rename\" the property in the binding by specifying the new name in the `to()` chain:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isWorking' );\n *\n * It is possible to bind more than one property at a time to shorten the code:\n *\n *\t\tbutton.bind( 'isEnabled', 'value' ).to( command );\n *\n * which corresponds to:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\t\tbutton.bind( 'value' ).to( command );\n *\n * The binding can include more than one observable, combining multiple data sources in a custom callback:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled', ui, 'isVisible',\n *\t\t\t( isCommandEnabled, isUIVisible ) => isCommandEnabled && isUIVisible );\n *\n * It is also possible to bind to the same property in an array of observables.\n * To bind a `button` to multiple commands (also `Observables`) so that each and every one of them\n * must be enabled for the button to become enabled, use the following code:\n *\n *\t\tbutton.bind( 'isEnabled' ).toMany( [ commandA, commandB, commandC ], 'isEnabled',\n *\t\t\t( isAEnabled, isBEnabled, isCEnabled ) => isAEnabled && isBEnabled && isCEnabled );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to another observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\t// Removes the binding for the 'a' property.\n *\t\tA.unbind( 'a' );\n *\n *\t\t// Removes bindings for all properties.\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#decorating-object-methods dedicated guide}\n * covering the topic of decorating methods with some additional examples.\n *\n * Decorating the method does not change its behavior (it only adds an event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, to cancel the method execution the event can be {@link module:utils/eventinfo~EventInfo#stop stopped}:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * **Note**: The high {@link module:utils/priorities~PriorityString priority} listener\n * has been used to execute this particular callback before the one which calls the original method\n * (which uses the \"normal\" priority).\n *\n * It is also possible to change the returned value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it is possible to access and modify the arguments the method is called with:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/editableelement\n */\n\nimport ContainerElement from './containerelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nconst documentSymbol = Symbol( 'document' );\n\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ContainerElement {\n\t/**\n\t * Creates an editable element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Whether the editable is in read-write or read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Whether the editable is focused.\n\t\t *\n\t\t * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n\t\t * selection is changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The {@link module:engine/view/document~Document} which is an owner of this root.\n\t\t * Can only by set once.\n\t\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\n\t\t * when document is already set.\n\t\t *\n\t\t * @member {module:engine/view/document~Document} #document\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\teditableElement.is( 'editableElement' ); // -> true\n\t *\t\teditableElement.is( 'element' ); // -> true\n\t *\t\teditableElement.is( 'node' ); // -> true\n\t *\t\teditableElement.is( 'view:editableElement' ); // -> true\n\t *\t\teditableElement.is( 'view:element' ); // -> true\n\t *\t\teditableElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\teditableElement.is( 'model:element' ); // -> false\n\t *\t\teditableElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an editbale element, you can also check its\n\t * {@link module:engine/view/editableelement~EditableElement#name name}:\n\t *\n\t *\t\teditableElement.is( 'div' ); // -> true if this is a div element\n\t *\t\teditableElement.is( 'editableElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'editableElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'editableElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns document associated with the editable.\n\t *\n\t * @readonly\n\t * @returns {module:engine/view/document~Document}\n\t */\n\tget document() {\n\t\treturn this.getCustomProperty( documentSymbol );\n\t}\n\n\t/**\n\t * Sets document of this editable element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document\n\t */\n\tset _document( document ) {\n\t\tif ( this.getCustomProperty( documentSymbol ) ) {\n\t\t\t/**\n\t\t\t * View document is already set. It can only be set once.\n\t\t\t *\n\t\t\t * @error view-editableelement-document-already-set\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-editableelement-document-already-set: View document is already set.', this );\n\t\t}\n\n\t\tthis._setCustomProperty( documentSymbol, document );\n\n\t\tthis.bind( 'isReadOnly' ).to( document );\n\n\t\tthis.bind( 'isFocused' ).to(\n\t\t\tdocument,\n\t\t\t'isFocused',\n\t\t\tisFocused => isFocused && document.selection.editableElement == this\n\t\t);\n\n\t\t// Update focus state based on selection changes.\n\t\tthis.listenTo( document.selection, 'change', () => {\n\t\t\tthis.isFocused = document.isFocused && document.selection.editableElement == this;\n\t\t} );\n\t}\n}\n\nmix( EditableElement, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\n\nimport EditableElement from './editableelement';\n\nconst rootNameSymbol = Symbol( 'rootName' );\n\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\nexport default class RootEditableElement extends EditableElement {\n\t/**\n\t * Creates root editable element.\n\t *\n\t * @param {String} name Node name.\n\t */\n\tconstructor( name ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n\t\t * other name is set, `main` name is used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = 'main';\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootEditableElement.is( 'rootEditableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'editableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'element' ); // -> true\n\t *\t\trootEditableElement.is( 'node' ); // -> true\n\t *\t\trootEditableElement.is( 'view:rootEditableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'view:editableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'view:element' ); // -> true\n\t *\t\trootEditableElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\trootEditableElement.is( 'model:element' ); // -> false\n\t *\t\trootEditableElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a root editbale element, you can also check its\n\t * {@link module:engine/view/rooteditableelement~RootEditableElement#name name}:\n\t *\n\t *\t\trootEditableElement.is( 'div' ); // -> true if this is a div root editable element\n\t *\t\trootEditableElement.is( 'rootEditableElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tget rootName() {\n\t\treturn this.getCustomProperty( rootNameSymbol );\n\t}\n\n\tset rootName( rootName ) {\n\t\tthis._setCustomProperty( rootNameSymbol, rootName );\n\t}\n\n\t/**\n\t * Overrides old element name and sets new one.\n\t * This is needed because view roots are created before they are attached to the DOM.\n\t * The name of the root element is temporary at this stage. It has to be changed when the\n\t * view root element is attached to the DOM element.\n\t *\n\t * @protected\n\t * @param {String} name The new name of element.\n\t */\n\tset _name( name ) {\n\t\tthis.name = name;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/treewalker\n */\n\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} options Object with configuration.\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\n\t * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\n\t * {@link module:engine/view/textproxy~TextProxy} (`true`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position have been defined.\n\t\t\t *\n\t\t\t * @error view-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.',\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tif ( options.direction && options.direction != 'forward' && options.direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\toptions.startPosition,\n\t\t\t\t{ direction: options.direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n\t\t * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = Position._createAt( options.startPosition );\n\t\t} else {\n\t\t\tthis.position = Position._createAt( options.boundaries[ options.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = options.direction || 'forward';\n\n\t\t/**\n\t\t * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\n\t\t * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\n\t\t * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\n\t\t * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n\t * \t\twalker.skip( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\n\t * information about taken step.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.childCount ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just after current position.\n\t\tlet node;\n\n\t\t// Text is a specific parent because it contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtEnd ) {\n\t\t\t\t// Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createAfter( parent );\n\n\t\t\t\treturn this._next();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\t\t\t\tif ( node == this._boundaryEndParent ) {\n\t\t\t\t\tcharactersCount = this.boundaries.end.offset;\n\t\t\t\t\titem = new TextProxy( node, 0, charactersCount );\n\t\t\t\t\tposition = Position._createAfter( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving forward.\n\t\t\t\t\tposition.offset++;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\ttextLength = 1;\n\t\t\t} else {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n\n\t\t\t\ttextLength = endOffset - position.offset;\n\t\t\t}\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tposition.offset += textLength;\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition = Position._createAfter( parent );\n\t\t\tthis.position = position;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn this._formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position.\n\t\tlet node;\n\n\t\t// Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\t// Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createBefore( parent );\n\n\t\t\t\treturn this._previous();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset - 1 ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset - 1 );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, node.childCount );\n\t\t\t\tthis.position = position;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn this._formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition.offset--;\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, node.data.length );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._previous();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\t\t\t\tif ( node == this._boundaryStartParent ) {\n\t\t\t\t\tconst offset = this.boundaries.start.offset;\n\n\t\t\t\t\titem = new TextProxy( node, offset, node.data.length - offset );\n\t\t\t\t\tcharactersCount = item.data.length;\n\t\t\t\t\tposition = Position._createBefore( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving backward.\n\t\t\t\t\tposition.offset--;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( !this.singleCharacters ) {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n\n\t\t\t\ttextLength = position.offset - startOffset;\n\t\t\t} else {\n\t\t\t\ttextLength = 1;\n\t\t\t}\n\n\t\t\tposition.offset -= textLength;\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition = Position._createBefore( parent );\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n\n\t/**\n\t * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n\t *\n\t * @private\n\t * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\n\t * @param {module:engine/view/item~Item} item Item between old and new position.\n\t * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\n\t * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\n\t * @param {Number} [length] Length of the item.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue}\n\t */\n\t_formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\t\t// Text is a specific parent, because contains string instead of children.\n\t\t// Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n\t\t// or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n\t\t// we move it just before or just after Text.\n\t\tif ( item instanceof TextProxy ) {\n\t\t\t// Position is at the end of Text.\n\t\t\tif ( item.offsetInText + item.data.length == item.textNode.data.length ) {\n\t\t\t\tif ( this.direction == 'forward' && !( this.boundaries && this.boundaries.end.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createAfter( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createAfter( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position is at the begining ot the text.\n\t\t\tif ( item.offsetInText === 0 ) {\n\t\t\t\tif ( this.direction == 'backward' && !( this.boundaries && this.boundaries.start.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createBefore( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createBefore( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\ttype,\n\t\t\t\titem,\n\t\t\t\tpreviousPosition,\n\t\t\t\tnextPosition,\n\t\t\t\tlength\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\n * of node, or `'text'` if walker traversed over single and multiple characters.\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\n *\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\n *\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\n * @property {module:engine/view/item~Item} item Item between the old and the new positions\n * of the tree walker.\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {Number} [length] Length of the item. For `'elementStart'` it is `1`. For `'text'` it is\n * the length of that text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position._createAt( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'view:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'model:position' ); // -> false\n\t *\t\tposition.is( 'element' ); // -> false\n\t *\t\tposition.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'view:position';\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root !== otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst thisPath = this.parent.is( 'node' ) ? this.parent.getPath() : [];\n\t\tconst otherPath = otherPosition.parent.is( 'node' ) ? otherPosition.parent.getPath() : [];\n\n\t\t// Add the positions' offsets to the parents offsets.\n\t\tthisPath.push( this.offset );\n\t\totherPath.push( otherPosition.offset );\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( thisPath, otherPath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < otherPath[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\tclone() {\n\t\treturn new Position( this.parent, this.offset );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position._createBefore},\n\t * * {@link module:engine/view/position~Position._createAfter}.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new this( itemOrPosition.parent, itemOrPosition.offset );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a view item.\n\t\t\t\t *\n\t\t\t\t * @error view-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-createPositionAt-offset-required: ' +\n\t\t\t\t\t'View#createPositionAt() requires the offset when the first parameter is a view item.',\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\n\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at the `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.start = start.clone();\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.end = end ? end.clone() : start.clone();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\n\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n\t * `ignoreElementEnd` option\n\t * set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is it start and end positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n\t *\t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Enlarged range.\n\t */\n\tgetEnlarged() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\t// Fix positions, in case if they are in Text node.\n\t\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\n\t\t\tstart = Position._createBefore( start.parent );\n\t\t}\n\n\t\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\n\t\t\tend = Position._createAfter( end.parent );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n\t *\t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Shrink range.\n\t */\n\tgetTrimmed() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\n\t\t\treturn new Range( start, start );\n\t\t}\n\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tconst nodeAfterStart = start.nodeAfter;\n\t\tconst nodeBeforeEnd = end.nodeBefore;\n\n\t\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\n\t\t\tstart = new Position( nodeAfterStart, 0 );\n\t\t}\n\n\t\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\n\t\t\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Two ranges are equal if their start and end positions are equal.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n\t * `false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n\t * otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n\t * {@link module:engine/view/range~Range range}.\n\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n\t *\t\t\tview.createPositionAt( foo, 1 ),\n\t *\t\t\tview.createPositionAt( bar, 2 )\n\t *\t\t);\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( this.clone() );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n\t *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @param {module:engine/view/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t * @returns {module:engine/view/treewalker~TreeWalker}\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Clones this range.\n\t *\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tclone() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'view:range' ); // -> true\n\t *\n\t *\t\trange.is( 'model:range' ); // -> false\n\t *\t\trange.is( 'element' ); // -> false\n\t *\t\trange.is( 'selection' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'view:range';\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with the given range.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} True if ranges intersect.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Creates a range from the given parents and offsets.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} startElement Start position\n\t * parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} endElement End position\n\t * parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/view/range~Range} Created range.\n\t */\n\tstatic _createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tnew Position( startElement, startOffset ),\n\t\t\tnew Position( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/view/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn this._createFromParentsAndOffsets( element, 0, element, element.childCount );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\n\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), size );\n\t}\n}\n\n// Function used by getEnlarged and getTrimmed methods.\nfunction enlargeTrimSkip( value ) {\n\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/count\n */\n\n/**\n * Returns the number of items return by the iterator.\n *\n *\t\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\n *\n * @param {Iterable.<*>} iterator Any iterator.\n * @returns {Number} Number of items returned by that iterator.\n */\nexport default function count( iterator ) {\n\tlet count = 0;\n\n\tfor ( const _ of iterator ) { // eslint-disable-line no-unused-vars\n\t\tcount++;\n\t}\n\n\treturn count;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/selection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Node from './node';\nimport Element from './element';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport DocumentSelection from './documentselection';\n\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance.\n\t *\n\t * **Note**: The selection constructor is available as a factory method:\n\t *\n\t * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n\t * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Stores all ranges that are selected.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Specifies whether selection instance is fake.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isFake = false;\n\n\t\t/**\n\t\t * Fake selection's label.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._fakeSelectionLabel = '';\n\n\t\tthis.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst anchor = this._lastRangeBackward ? range.end : range.start;\n\n\t\treturn anchor.clone();\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst focus = this._lastRangeBackward ? range.start : range.end;\n\n\t\treturn focus.clone();\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tif ( this.anchor ) {\n\t\t\treturn this.anchor.editableElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield range.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? first.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? last.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst firstRange = this.getFirstRange();\n\n\t\treturn firstRange ? firstRange.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.isFake != otherSelection.isFake ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\tif ( this.isBackward != otherSelection.isBackward ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numOfRangesA = count( this.getRanges() );\n\t\tconst numOfRangesB = count( otherSelection.getRanges() );\n\n\t\t// If selections have different number of ranges, they cannot be similar.\n\t\tif ( numOfRangesA != numOfRangesB ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If both selections have no ranges, they are similar.\n\t\tif ( numOfRangesA == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if each range in one selection has a similar range in other selection.\n\t\tfor ( let rangeA of this.getRanges() ) {\n\t\t\trangeA = rangeA.getTrimmed();\n\n\t\t\tlet found = false;\n\n\t\t\tfor ( let rangeB of otherSelection.getRanges() ) {\n\t\t\t\trangeB = rangeB.getTrimmed();\n\n\t\t\t\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// There were no ranges that weren't matched. Selections are similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\n\t\tlet nodeAfterStart = range.start.nodeAfter;\n\t\tlet nodeBeforeEnd = range.end.nodeBefore;\n\n\t\t// Handle the situation when selection position is at the beginning / at the end of a text node.\n\t\t// In such situation `.nodeAfter` and `.nodeBefore` are `null` but the selection still might be spanning\n\t\t// over one element.\n\t\t//\n\t\t// <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n\t\t//\n\t\t// These are basically the same selections, only the difference is if the selection position is at\n\t\t// at the end/at the beginning of a text node or just before/just after the text node.\n\t\t//\n\t\tif ( range.start.parent.is( 'text' ) && range.start.isAtEnd && range.start.parent.nextSibling ) {\n\t\t\tnodeAfterStart = range.start.parent.nextSibling;\n\t\t}\n\n\t\tif ( range.end.parent.is( 'text' ) && range.end.isAtStart && range.end.parent.previousSibling ) {\n\t\t\tnodeBeforeEnd = range.end.parent.previousSibling;\n\t\t}\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t \t// Sets selection to contents of DocumentSelection.\n\t *\t\tselection.setTo( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tselection.setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tselection.setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t\tthis._setFakeOptions( { fake: selectable.isFake, label: selectable.fakeSelectionLabel } );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset === undefined ) {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t} else if ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t\tthis._setFakeOptions( options );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\t// Array.from() is used to prevent setting ranges to the old iterable\n\t\t\tthis._setRanges( selectable, placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error view-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.', this );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error view-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tthis._ranges.pop();\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._addRange( new Range( newFocus, anchor ), true );\n\t\t} else {\n\t\t\tthis._addRange( new Range( anchor, newFocus ) );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'view:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'model:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'view:selection';\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n\t * Accepts a flag describing in which way the selection is made.\n\t *\n\t * @private\n\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\n\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\t// New ranges should be copied to prevent removing them by setting them to `[]` first.\n\t\t// Only applies to situations when selection is set to the same selection or same selection's ranges.\n\t\tnewRanges = Array.from( newRanges );\n\n\t\tthis._ranges = [];\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._addRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\t}\n\n\t/**\n\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @private\n\t * @param {Object} [options] Options.\n\t * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\t_setFakeOptions( options = {} ) {\n\t\tthis._isFake = !!options.fake;\n\t\tthis._fakeSelectionLabel = options.fake ? options.label || '' : '';\n\t}\n\n\t/**\n\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n\t * selection instance and you can safely operate on it.\n\t *\n\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\n\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in Selection instance.\n\t *\n\t * @private\n\t * @fires change\n\t * @param {module:engine/view/range~Range} range\n\t * @param {Boolean} [isBackward]\n\t */\n\t_addRange( range, isBackward = false ) {\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n\t\t\t *\n\t\t\t * @error view-selection-add-range-not-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-add-range-not-range: ' +\n\t\t\t\t'Selection range set to an object that is not an instance of view.Range',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._pushRange( range );\n\t\tthis._lastRangeBackward = !!isBackward;\n\t}\n\n\t/**\n\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in selection instance.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t */\n\t_pushRange( range ) {\n\t\tfor ( const storedRange of this._ranges ) {\n\t\t\tif ( range.isIntersecting( storedRange ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-range-intersects\n\t\t\t\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ addedRange: range, intersectingRange: storedRange }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/view/selection~Selection#setTo}\n *\n * @typedef {\n *    module:engine/view/selection~Selection|\n *    module:engine/view/documentselection~DocumentSelection|\n *    module:engine/view/position~Position|\n *    Iterable.<module:engine/view/range~Range>|\n *    module:engine/view/range~Range|\n *    module:engine/view/item~Item|\n *    null\n * } module:engine/view/selection~Selectable\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentselection\n */\n\nimport Selection from './selection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates new DocumentSelection instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new DocumentSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = new DocumentSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tconst selection = new DocumentSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = new DocumentSelection( otherSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tconst selection = new DocumentSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = new DocumentSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = new DocumentSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = new DocumentSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Selection is used internally (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/selection~Selection}\n\t\t */\n\t\tthis._selection = new Selection();\n\n\t\t// Delegate change event to be fired on DocumentSelection instance.\n\t\tthis._selection.delegate( 'change' ).to( this );\n\n\t\t// Set selection data.\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #_setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._selection.isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #_setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\treturn this._selection.editableElement;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tyield* this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\treturn this._selection.isEqual( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\treturn this._selection.isSimilar( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocSelection.is( 'selection' ); // -> true\n\t *\t\tdocSelection.is( 'documentSelection' ); // -> true\n\t *\t\tdocSelection.is( 'view:selection' ); // -> true\n\t *\t\tdocSelection.is( 'view:documentSelection' ); // -> true\n\t *\n\t *\t\tdocSelection.is( 'model:documentSelection' ); // -> false\n\t *\t\tdocSelection.is( 'element' ); // -> false\n\t *\t\tdocSelection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'view:selection' ||\n\t\t\ttype == 'view:documentSelection';\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tdocumentSelection._setTo( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tdocumentSelection._setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tdocumentSelection._setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tdocumentSelection._setTo( null );\n\t *\n\t * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tdocumentSelection._setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tdocumentSelection._setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~DocumentSelection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( DocumentSelection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * @param {Object} [options={}] The options object.\n\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t */\n\tadd( item, index ) {\n\t\tlet itemId;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's id should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id', this );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists', this );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\t// TODO: Use ES6 default function argument.\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The index number has invalid value.\n\t\t\t *\n\t\t\t * @error collection-add-item-bad-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index', this );\n\t\t}\n\n\t\tthis._items.splice( index, 0, item );\n\n\t\tthis._itemMap.set( itemId, item );\n\n\t\tthis.fire( 'add', item, index );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets item by its id or index.\n\t *\n\t * @param {String|Number} idOrIndex The item id or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * Index or id must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.', this );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether the collection contains an item.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n\t */\n\thas( itemOrId ) {\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\treturn this._itemMap.has( itemOrId );\n\t\t} else { // Object\n\t\t\tconst idProperty = this._idProperty;\n\t\t\tconst id = itemOrId[ idProperty ];\n\n\t\t\treturn this._itemMap.has( id );\n\t\t}\n\t}\n\n\t/**\n\t * Gets index of item in the collection.\n\t * When item is not defined in the collection then index will be equal -1.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Number} Index of given item.\n\t */\n\tgetIndex( itemOrId ) {\n\t\tlet item;\n\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\titem = this._itemMap.get( itemOrId );\n\t\t} else {\n\t\t\titem = itemOrId;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t */\n\tremove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404: Item not found.', this );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\twhile ( this.length ) {\n\t\t\tthis.remove( 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.', this );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/document\n */\n\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Document {\n\t/**\n\t * Creates a Document instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection} module:engine/view/document~Document#selection\n\t\t */\n\t\tthis.selection = new DocumentSelection();\n\n\t\t/**\n\t\t * Roots of the view tree. Collection of the {@link module:engine/view/element~Element view elements}.\n\t\t *\n\t\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n\t\t * {@link module:engine/model/document~Document#roots} and this is handled by\n\t\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n\t\t * model root using {@link module:engine/model/document~Document#createRoot}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} module:engine/view/document~Document#roots\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * Defines whether document is in read-only mode.\n\t\t *\n\t\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * True if document is focused.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n\t\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * True if composition is in progress inside the document.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n\t\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isComposing\n\t\t */\n\t\tthis.set( 'isComposing', false );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the view document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\t}\n\n\t/**\n\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n\t * specific \"main\" root is returned.\n\t *\n\t * @param {String} [name='main'] Name of the root.\n\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n\t * or null when there is no root of given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n\t * to the DOM.\n\t *\n\t * Post-fixers are executed right after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n\t * changes executed in a view post-fixer should not break model-view mapping.\n\t *\n\t * The types of changes which should be safe:\n\t *\n\t * * adding or removing attribute from elements,\n\t * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n\t * * {@link module:engine/model/differ~Differ#refreshItem marking some of the model elements to be re-converted}.\n\t *\n\t * Try to avoid changes which touch view structure:\n\t *\n\t * * you should not add or remove nor wrap or unwrap any view elements,\n\t * * you should not change the editor data model in a view post-fixer.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n\t *\n\t * Typically, a post-fixer will look like this:\n\t *\n\t *\t\teditor.editing.view.document.registerPostFixer( writer => {\n\t *\t\t\tif ( checkSomeCondition() ) {\n\t *\t\t\t\twriter.doSomething();\n\t *\n\t *\t\t\t\t// Let other post-fixers know that something changed.\n\t *\t\t\t\treturn true;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n\t * That is because adding a post-fixer does not execute it.\n\t * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n\t * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n\t * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n\t *\n\t * If you need to register a callback which is executed when DOM elements are already updated,\n\t * use {@link module:engine/view/view~View#event:render render event}.\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tthis.roots.map( root => root.destroy() );\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @protected\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Event fired whenever document content layout changes. It is fired whenever content is\n\t * {@link module:engine/view/view~View#event:render rendered}, but should be also fired by observers in case of\n\t * other actions which may change layout, for instance when image loads.\n\t *\n\t * @event layoutChanged\n\t */\n}\n\nmix( Document, ObservableMixin );\n\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates an attribute element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\n\t\t/**\n\t\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t\t * and then two elements are considered similar if, and only if they have the same `_id`.\n\t\t *\n\t\t * @protected\n\t\t * @member {String|Number}\n\t\t */\n\t\tthis._id = null;\n\n\t\t/**\n\t\t * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n\t\t * and still exist in the view tree.\n\t\t *\n\t\t * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n\t\t */\n\t\tthis._clonesGroup = null;\n\t}\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t * and then two elements are considered similar if, and only if they have the same `id`.\n\t *\n\t * @readonly\n\t * @type {String|Number}\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n\t * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n\t *\n\t * Note: If this element has been removed from the tree, returned set will not include it.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n\t * if this element has no `id`.\n\t *\n\t * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n\t * with the same `id` that were added and not removed from the view tree.\n\t */\n\tgetElementsWithSameId() {\n\t\tif ( this.id === null ) {\n\t\t\t/**\n\t\t\t * Cannot get elements with the same id for an attribute element without id.\n\t\t\t *\n\t\t\t * @error attribute-element-get-elements-with-same-id-no-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'attribute-element-get-elements-with-same-id-no-id: ' +\n\t\t\t\t'Cannot get elements with the same id for an attribute element without id.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn new Set( this._clonesGroup );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tattributeElement.is( 'attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'element' ); // -> true\n\t *\t\tattributeElement.is( 'node' ); // -> true\n\t *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'view:element' ); // -> true\n\t *\t\tattributeElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tattributeElement.is( 'model:element' ); // -> false\n\t *\t\tattributeElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an attribute element, you can also check its\n\t * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n\t *\n\t *\t\tattributeElement.is( 'b' ); // -> true if this is a bold element\n\t *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n\t *\t\ttext.is( 'b' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'attributeElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'attributeElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t *\n\t * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n\t * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n\t * different set of children nodes.\n\t *\n\t * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n\t * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n\t * considered similar.\n\t *\n\t * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n\t *\n\t * * two following similar elements can be merged together into one, longer element,\n\t * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n\t * decide whether processed element should be unwrapped,\n\t * * etc.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\t// If any element has an `id` set, just compare the ids.\n\t\tif ( this.id !== null || otherElement.id !== null ) {\n\t\t\treturn this.id === otherElement.id;\n\t\t}\n\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @protected\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\t_clone( deep ) {\n\t\tconst cloned = super._clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\t// And id too.\n\t\tcloned._id = this._id;\n\n\t\treturn cloned;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\temptyElement.is( 'emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'element' ); // -> true\n\t *\t\temptyElement.is( 'node' ); // -> true\n\t *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'view:element' ); // -> true\n\t *\t\temptyElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\temptyElement.is( 'model:element' ); // -> false\n\t *\t\temptyElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an empty element, you can also check its\n\t * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n\t *\n\t *\t\temptyElement.is( 'img' ); // -> true if this is a img element\n\t *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'emptyElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'emptyElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.',\n\t\t\t\t[ this, nodes ]\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals navigator:false */\n\n/**\n * @module utils/env\n */\n\nconst userAgent = navigator.userAgent.toLowerCase();\n\n/**\n * A namespace containing environment and browser information.\n *\n * @namespace\n */\nconst env = {\n\t/**\n\t * Indicates that the application is running on Macintosh.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisMac: isMac( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Microsoft Edge.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisEdge: isEdge( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Firefox (Gecko).\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisGecko: isGecko( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Safari.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisSafari: isSafari( userAgent ),\n\n\t/**\n\t * Indicates that the application is running on Android mobile device.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisAndroid: isAndroid( userAgent ),\n\n\t/**\n\t * Environment features information.\n\t *\n\t * @memberOf module:utils/env~env\n\t * @namespace\n\t */\n\tfeatures: {\n\t\t/**\n\t\t * Indicates that the environment supports ES2018 Unicode property escapes — like `\\p{P}` or `\\p{L}`.\n\t\t * More information about unicode properties might be found\n\t\t * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n\t\t *\n\t\t * @type {Boolean}\n\t\t */\n\t\tisRegExpUnicodePropertySupported: isRegExpUnicodePropertySupported()\n\t}\n};\n\nexport default env;\n\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\n */\nexport function isMac( userAgent ) {\n\treturn userAgent.indexOf( 'macintosh' ) > -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Microsoft Edge.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Edge or not.\n */\nexport function isEdge( userAgent ) {\n\treturn !!userAgent.match( /edge\\/(\\d+.?\\d*)/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Firefox (Gecko).\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Firefox or not.\n */\nexport function isGecko( userAgent ) {\n\treturn !!userAgent.match( /gecko\\/\\d+/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Safari.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\nexport function isSafari( userAgent ) {\n\treturn userAgent.indexOf( ' applewebkit/' ) > -1 && userAgent.indexOf( 'chrome' ) === -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Android mobile device.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\nexport function isAndroid( userAgent ) {\n\treturn userAgent.indexOf( 'android' ) > -1;\n}\n\n/**\n * Checks if the current environment supports ES2018 Unicode properties like `\\p{P}` or `\\p{L}`.\n * More information about unicode properties might be found\n * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n *\n * @returns {Boolean}\n */\nexport function isRegExpUnicodePropertySupported() {\n\tlet isSupported = false;\n\n\t// Feature detection for Unicode properties. Added in ES2018. Currently Firefox and Edge do not support it.\n\t// See https://github.com/ckeditor/ckeditor5-mention/issues/44#issuecomment-487002174.\n\n\ttry {\n\t\t// Usage of regular expression literal cause error during build (ckeditor/ckeditor5-dev#534).\n\t\tisSupported = 'ć'.search( new RegExp( '[\\\\p{L}]', 'u' ) ) === 0;\n\t} catch ( error ) {\n\t\t// Firefox throws a SyntaxError when the group is unsupported.\n\t}\n\n\treturn isSupported;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'keyboard-unknown-key: Unknown key name.',\n\t\t\t\tnull, { key }\n\t\t\t);\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/uielement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class UIElement extends Element {\n\t/**\n\t * Creates new instance of UIElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n\t * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for UIElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tuiElement.is( 'uiElement' ); // -> true\n\t *\t\tuiElement.is( 'element' ); // -> true\n\t *\t\tuiElement.is( 'node' ); // -> true\n\t *\t\tuiElement.is( 'view:uiElement' ); // -> true\n\t *\t\tuiElement.is( 'view:element' ); // -> true\n\t *\t\tuiElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tuiElement.is( 'model:element' ); // -> false\n\t *\t\tuiElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an ui element, you can also check its\n\t * {@link module:engine/view/uielement~UIElement#name name}:\n\t *\n\t *\t\tuiElement.is( 'span' ); // -> true if this is a span ui element\n\t *\t\tuiElement.is( 'uiElement', 'span' ); // -> same as above\n\t *\t\ttext.is( 'span' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'uiElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'uiElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n\t * to UIElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n\t\t\t *\n\t\t\t * @error view-uielement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-uielement-cannot-add: Cannot add child nodes to UIElement instance.', this );\n\t\t}\n\t}\n\n\t/**\n\t * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n\t * {@link module:engine/view/domconverter~DomConverter}.\n\t * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n\t *\n\t *\t\tconst myUIElement = downcastWriter.createUIElement( 'span' );\n\t *\t\tmyUIElement.render = function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t};\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\trender( domDocument ) {\n\t\treturn this.toDomElement( domDocument );\n\t}\n\n\t/**\n\t * Creates DOM element based on this view UIElement.\n\t * Note that each time this method is called new DOM element is created.\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\ttoDomElement( domDocument ) {\n\t\tconst domElement = domDocument.createElement( this.name );\n\n\t\tfor ( const key of this.getAttributeKeys() ) {\n\t\t\tdomElement.setAttribute( key, this.getAttribute( key ) );\n\t\t}\n\n\t\treturn domElement;\n\t}\n}\n\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling( view ) {\n\tview.document.on( 'keydown', ( evt, data ) => jumpOverUiElement( evt, data, view.domConverter ) );\n}\n\n// Returns `null` because block filler is not needed for UIElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\nfunction jumpOverUiElement( evt, data, domConverter ) {\n\tif ( data.keyCode == keyCodes.arrowright ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\t\tconst domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed;\n\n\t\t// Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n\t\tif ( domSelectionCollapsed || data.shiftKey ) {\n\t\t\tconst domParent = domSelection.focusNode;\n\t\t\tconst domOffset = domSelection.focusOffset;\n\n\t\t\tconst viewPosition = domConverter.domPositionToView( domParent, domOffset );\n\n\t\t\t// In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n\t\t\tif ( viewPosition === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip all following ui elements.\n\t\t\tlet jumpedOverAnyUiElement = false;\n\n\t\t\tconst nextViewPosition = viewPosition.getLastMatchingPosition( value => {\n\t\t\t\tif ( value.item.is( 'uiElement' ) ) {\n\t\t\t\t\t// Remember that there was at least one ui element.\n\t\t\t\t\tjumpedOverAnyUiElement = true;\n\t\t\t\t}\n\n\t\t\t\t// Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n\t\t\t\tif ( value.item.is( 'uiElement' ) || value.item.is( 'attributeElement' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Don't jump over text or don't get out of container element.\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\t// If anything has been skipped, fix position.\n\t\t\t// This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n\t\t\tif ( jumpedOverAnyUiElement ) {\n\t\t\t\tconst newDomPosition = domConverter.viewPositionToDom( nextViewPosition );\n\n\t\t\t\tif ( domSelectionCollapsed ) {\n\t\t\t\t\t// Selection was collapsed, so collapse it at further position.\n\t\t\t\t\tdomSelection.collapse( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t} else {\n\t\t\t\t\t// Selection was not collapse, so extend it instead of collapsing.\n\t\t\t\t\tdomSelection.extend( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentfragment\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates new DocumentFragment instance.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over nodes added to this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of child nodes in this document fragment.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocFrag.is( 'documentFragment' ); // -> true\n\t *\t\tdocFrag.is( 'view:documentFragment' ); // -> true\n\t *\n\t *\t\tdocFrag.is( 'model:documentFragment' ); // -> false\n\t *\t\tdocFrag.is( 'element' ); // -> false\n\t *\t\tdocFrag.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment' || type == 'view:documentFragment';\n\t}\n\n\t/**\n\t * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n\t * and sets the parent of these nodes to this fragment.\n\t *\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this fragment.\n\t *\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Fires `change` event with given type of the change.\n\t *\n\t * @private\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\t}\n}\n\nmix( DocumentFragment, EmitterMixin );\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\n\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n\tconstructor( document ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t\t * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._cloneGroups = new Map();\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n\t * specified location based on the given {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t * Usage:\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets backward selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t * \t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t *\t\t// Sets selection as fake.\n\t *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * \t\t// represented in other way, for example by applying proper CSS class.\n\t *\t\twriter.setSelection( range, { fake: true } );\n\t *\n\t * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * \t\t// (and be  properly handled by screen readers).\n\t *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'strong', { alignment: 'center' } );\n\t *\n\t *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n\t *\n\t *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n\t *\t\twriter.createAttributeElement( 'span', { class: 'myMarker' }, { id: 'marker:my' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Element's attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n\t * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, options = {} ) {\n\t\tconst attributeElement = new AttributeElement( name, attributes );\n\n\t\tif ( options.priority ) {\n\t\t\tattributeElement._priority = options.priority;\n\t\t}\n\n\t\tif ( options.id ) {\n\t\t\tattributeElement._id = options.id;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'paragraph' );\n\t *\t\twriter.createContainerElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes ) {\n\t\treturn new ContainerElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( 'div' );\n\t *\t\twriter.createEditableElement( 'div', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes ) {\n\t\treturn new EmptyElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { alignment: 'center' } );\n\t *\n\t * Custom render function can be provided as third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Function} [renderFunction] Custom render function.\n\t * @returns {module:engine/view/uielement~UIElement} Created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction ) {\n\t\tconst uiElement = new UIElement( name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Adds or overwrite element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n\t * up to a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n\t *\n\t *        <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *        <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *        <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *        <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n\t * elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn this._breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn this._breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n\t * or at the end of it's parent element.\n\t *\n\t *        <p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *        <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *        <p>^foobar</p> -> ^<p>foobar</p>\n\t *        <p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n\t * @param {module:engine/view/position~Position} position Position where to break element.\n\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n\t * the returned position is placed either before it or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.', this.document );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position._createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element._clone( false );\n\n\t\t\tthis.insert( Position._createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position._createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position._createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *        <p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *        <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *        <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *        <p><b>[]</b></p> -> <p>[]</p>\n\t *        <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\n\t\t\tpositionParent._remove();\n\t\t\tthis._removeFromClonedElementsGroup( positionParent );\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When position is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore._appendChild( nodeAfter.getChildren() );\n\n\t\t\tnodeAfter._remove();\n\t\t\tthis._removeFromClonedElementsGroup( nodeAfter );\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *        <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *        <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\n\t\t\t\t'Element before and after given position cannot be merged.', this.document );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position._createAt( lastChild, 'end' ) : Position._createAt( prev, 'end' );\n\n\t\tthis.move( Range._createIn( next ), Position._createAt( prev, 'end' ) );\n\t\tthis.remove( Range._createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes, this.document );\n\n\t\tconst container = getParentContainer( position );\n\n\t\tif ( !container ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-invalid-position-container', this.document );\n\t\t}\n\n\t\tconst insertionPosition = this._breakAttributes( position, true );\n\t\tconst length = container._insertChild( insertionPosition.offset, nodes );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tthis._addToClonedElementsGroup( node );\n\t\t}\n\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( length === 0 ) {\n\t\t\treturn new Range( start, start );\n\t\t} else {\n\t\t\t// If start position was merged - move end position.\n\t\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\t\tendPosition.offset--;\n\t\t\t}\n\n\t\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n\t * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( rangeOrItem ) {\n\t\tconst range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn( rangeOrItem );\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment();\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\n\n\t\tfor ( const node of removed ) {\n\t\t\tthis._removeFromClonedElementsGroup( node );\n\t\t}\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = mergePosition.clone();\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range._createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range._createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = this._breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = this._breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n     *\n     * If a collapsed range was passed and is same as selection, the selection\n     * will be moved to the inside of the wrapped attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n     * when {@link module:engine/view/range~Range#start}\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n     * is collapsed and different than view selection.\n     *\n     * @param {module:engine/view/range~Range} range Range to wrap.\n     * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n     * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n    */\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * Attribute element need to be instance of attribute element.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New name for element.\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t */\n\trename( newName, viewElement ) {\n\t\tconst newElement = new ContainerElement( newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position._createAfter( viewElement ), newElement );\n\t\tthis.move( Range._createIn( viewElement ), Position._createAt( newElement, 0 ) );\n\t\tthis.remove( Range._createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Cleans up memory by removing obsolete cloned elements group from the writer.\n\t *\n\t * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n\t * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n\t * the group will no longer be needed.\n\t *\n\t * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n\t * were removed from the view.\n\t *\n\t * Keep in mind that group names are equal to the `id` property of the attribute element.\n\t *\n\t * @param {String} groupName Name of the group to clear.\n\t */\n\tclearClonedElementsGroup( groupName ) {\n\t\tthis._cloneGroups.delete( groupName );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} wrapElement\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, wrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( 'text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isEmpty = child.is( 'emptyElement' );\n\t\t\tconst isUI = child.is( 'uiElement' );\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n\t\t\t// If possible, join elements.\n\t\t\t//\n\t\t\t// <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n\t\t\t//\n\t\t\tif ( isAttribute && this._wrapAttributeElement( wrapElement, child ) ) {\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n\t\t\t// `wrapElement` (due to priority).\n\t\t\t//\n\t\t\t// <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n\t\t\t// <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n\t\t\t//\n\t\t\telse if ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( wrapElement, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = wrapElement._clone();\n\n\t\t\t\t// Wrap current node with new attribute.\n\t\t\t\tchild._remove();\n\t\t\t\tnewAttribute._appendChild( child );\n\n\t\t\t\tparent._insertChild( i, newAttribute );\n\t\t\t\tthis._addToClonedElementsGroup( newAttribute );\n\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n\t\t\t//\n\t\t\t// <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n\t\t\t//\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, wrapElement );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} unwrapElement\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, unwrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\t// We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n\t\t// so it could get messy. It is safer to it manually in this case.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// Skip all text nodes. There should be no container element's here either.\n\t\t\tif ( !child.is( 'attributeElement' ) ) {\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n\t\t\t//\n\t\t\t// <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n\t\t\t//\n\t\t\tif ( child.isSimilar( unwrapElement ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild._remove();\n\t\t\t\tparent._insertChild( i, unwrapped );\n\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n\t\t\t// Partial unwrapping will happen only if the elements have the same name.\n\t\t\t//\n\t\t\t// <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n\t\t\t// <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n\t\t\t//\n\t\t\tif ( this._unwrapAttributeElement( unwrapElement, child ) ) {\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + 1 )\n\t\t\t\t);\n\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If other nested attribute is found, look through it's children for elements to unwrap.\n\t\t\t//\n\t\t\t// <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n\t\t\t//\n\t\t\tthis._unwrapChildren( child, 0, child.childCount, unwrapElement );\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( position.clone() );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( 'text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent._insertChild( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition._remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\tif ( !canBeJoined( wrapper, toWrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\tif ( !canBeJoined( wrapper, toUnwrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/range~Range} New range with located at break positions.\n\t */\n\t_breakAttributesRange( range, forceSplitText = false ) {\n\t\tconst rangeStart = range.start;\n\t\tconst rangeEnd = range.end;\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Break at the collapsed position. Return new collapsed range.\n\t\tif ( range.isCollapsed ) {\n\t\t\tconst position = this._breakAttributes( range.start, forceSplitText );\n\n\t\t\treturn new Range( position, position );\n\t\t}\n\n\t\tconst breakEnd = this._breakAttributes( rangeEnd, forceSplitText );\n\t\tconst count = breakEnd.parent.childCount;\n\t\tconst breakStart = this._breakAttributes( rangeStart, forceSplitText );\n\n\t\t// Calculate new break end offset.\n\t\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\t\treturn new Range( breakStart, breakEnd );\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n\t * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n\t * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Position where to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n\t */\n\t_breakAttributes( position, forceSplitText = false ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside EmptyElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-empty-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element', this.document );\n\t\t}\n\n\t\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside UIElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-ui-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element', this.document );\n\t\t}\n\n\t\t// There are no attributes to break and text nodes breaking is not forced.\n\t\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Position's parent is container, so no attributes to break.\n\t\tif ( isContainerOrFragment( positionParent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Break text and start again in new position.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn this._breakAttributes( breakTextNode( position ), forceSplitText );\n\t\t}\n\n\t\tconst length = positionParent.childCount;\n\n\t\t// <p>foo<b><u>bar{}</u></b></p>\n\t\t// <p>foo<b><u>bar</u>[]</b></p>\n\t\t// <p>foo<b><u>bar</u></b>[]</p>\n\t\tif ( positionOffset == length ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t} else {\n\t\t\t// <p>foo<b><u>{}bar</u></b></p>\n\t\t\t// <p>foo<b>[]<u>bar</u></b></p>\n\t\t\t// <p>foo{}<b><u>bar</u></b></p>\n\t\t\tif ( positionOffset === 0 ) {\n\t\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t\t// <p>foo<b><u>b{}ar</u></b></p>\n\t\t\t// <p>foo<b><u>b[]ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t\t\telse {\n\t\t\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t\t\t// Break element.\n\t\t\t\tconst clonedNode = positionParent._clone();\n\n\t\t\t\t// Insert cloned node to position's parent node.\n\t\t\t\tpositionParent.parent._insertChild( offsetAfter, clonedNode );\n\t\t\t\tthis._addToClonedElementsGroup( clonedNode );\n\n\t\t\t\t// Get nodes to move.\n\t\t\t\tconst count = positionParent.childCount - positionOffset;\n\t\t\t\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\n\n\t\t\t\t// Move nodes to cloned node.\n\t\t\t\tclonedNode._appendChild( nodesToMove );\n\n\t\t\t\t// Create new position to work on.\n\t\t\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n\t * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n\t * from the group now keep a reference to the given attribute element.\n\t *\n\t * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n\t *\n\t * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n\t */\n\t_addToClonedElementsGroup( element ) {\n\t\t// Add only if the element is in document tree.\n\t\tif ( !element.root.is( 'rootElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Traverse the element's children recursively to find other attribute elements that also might got inserted.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._addToClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\tgroup = new Set();\n\t\t\tthis._cloneGroups.set( id, group );\n\t\t}\n\n\t\tgroup.add( element );\n\t\telement._clonesGroup = group;\n\t}\n\n\t/**\n\t * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n\t * from its clones group.\n\t *\n\t * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n\t * This allows to reference the whole group even if the element was already removed from the tree.\n\t *\n\t * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n\t */\n\t_removeFromClonedElementsGroup( element ) {\n\t\t// Traverse the element's children recursively to find other attribute elements that also got removed.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.delete( element );\n\t\t// Not removing group from element on purpose!\n\t\t// If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent._data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent._insertChild( position.parent.index + 1, new Text( textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1._data += t2.data;\n\tt2._remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\n// @param {Object} errorContext\nfunction validateNodesToInsert( nodes, errorContext ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node', errorContext );\n\t\t}\n\n\t\tif ( !node.is( 'text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren(), errorContext );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\n// @param {Object} errorContext\nfunction validateRangeContainer( range, errorContext ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n\t\t * parent container for these positions cannot be found.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container', errorContext );\n\t}\n}\n\n// Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\nfunction canBeJoined( a, b ) {\n\treturn a.id === null && b.id === null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/istext\n */\n\n/**\n * Checks if the object is a native DOM Text node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isText( obj ) {\n\treturn Object.prototype.toString.call( obj ) == '[object Text]';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n\n/**\n * Set of utils related to block and inline fillers handling.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n\n/**\n * `<br>` filler creator. This is a function which creates `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @function\n */\nexport const BR_FILLER = domDocument => {\n\tconst fillerBr = domDocument.createElement( 'br' );\n\tfillerBr.dataset.ckeFiller = true;\n\n\treturn fillerBr;\n};\n\n/**\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~BR_FILLER\n * @function\n */\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode( '\\u00A0' );\n\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n\n/**\n * Inline filler which is sequence of the zero width spaces.\n */\nexport let INLINE_FILLER = '';\n\nfor ( let i = 0; i < INLINE_FILLER_LENGTH; i++ ) {\n\tINLINE_FILLER += '\\u200b';\n}\n\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\n *\t\tstartsWithFiller( document.createElement( 'p' ) ); // false\n *\n * @param {Node} domNode DOM node.\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller( domNode ) {\n\treturn isText( domNode ) && ( domNode.data.substr( 0, INLINE_FILLER_LENGTH ) === INLINE_FILLER );\n}\n\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n *\n * @param {Text} domText DOM text node.\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller( domText ) {\n\treturn domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller( domText );\n}\n\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n *\t\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n *\t\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n *\n * @param {Text} domText DOM text node, possible with inline filler.\n * @returns {String} Data without filler.\n */\nexport function getDataWithoutFiller( domText ) {\n\tif ( startsWithFiller( domText ) ) {\n\t\treturn domText.data.slice( INLINE_FILLER_LENGTH );\n\t} else {\n\t\treturn domText.data;\n\t}\n}\n\n// Cache block fillers templates to improve performance.\nconst templateBlockFillers = new WeakMap();\n\n/**\n * Checks if the node is an instance of the block filler of the given type.\n *\n *\t\tconst brFillerInstance = BR_FILLER( document );\n *\t\tisBlockFiller( brFillerInstance, BR_FILLER ); // true\n *\n * @param {Node} domNode DOM node to check.\n * @param {Function} blockFiller Block filler creator.\n * @returns {Boolean} True if text node contains only {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isBlockFiller( domNode, blockFiller ) {\n\tlet templateBlockFiller = templateBlockFillers.get( blockFiller );\n\n\tif ( !templateBlockFiller ) {\n\t\ttemplateBlockFiller = blockFiller( window.document );\n\t\ttemplateBlockFillers.set( blockFiller, templateBlockFiller );\n\t}\n\n\treturn domNode.isEqualNode( templateBlockFiller );\n}\n\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling( view ) {\n\tview.document.on( 'keydown', jumpOverInlineFiller );\n}\n\n// Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\nfunction jumpOverInlineFiller( evt, data ) {\n\tif ( data.keyCode == keyCodes.arrowleft ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\tif ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n\t\t\tconst domParent = domSelection.getRangeAt( 0 ).startContainer;\n\t\t\tconst domOffset = domSelection.getRangeAt( 0 ).startOffset;\n\n\t\t\tif ( startsWithFiller( domParent ) && domOffset <= INLINE_FILLER_LENGTH ) {\n\t\t\t\tdomSelection.collapse( domParent, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/fastdiff\n */\n\n/**\n * Finds positions of the first and last change in the given string/array and generates a set of changes:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n *\t\tfastDiff( '12a', '12aa' );\n *\t\t// [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n *\t\tfastDiff( '12xyza', '12a' );\n *\t\t// [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'a' ], [ '1', '2', 'a' ] );\n *\t\t// [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'b', 'c', '3' ], [ '2', 'a', 'b' ] );\n *\t\t// [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n *\n * Passed arrays can contain any type of data, however to compare them correctly custom comparator function\n * should be passed as a third parameter:\n *\n *\t\tfastDiff( [ { value: 1 }, { value: 2 } ], [ { value: 1 }, { value: 3 } ], ( a, b ) => {\n *\t\t\treturn a.value === b.value;\n *\t\t} );\n *\t\t// [ { index: 1, type: 'insert', values: [ { value: 3 } ] }, { index: 2, type: 'delete', howMany: 1 } ]\n *\n * The resulted set of changes can be applied to the input in order to transform it into the output, for example:\n *\n *\t\tlet input = '12abc3';\n *\t\tconst output = '2ab';\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * or in case of arrays:\n *\n *\t\tlet input = [ '1', '2', 'a', 'b', 'c', '3' ];\n *\t\tconst output = [ '2', 'a', 'b' ];\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( change.values, input.slice( change.index ) );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( input.slice( change.index + change.howMany ) );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * By passing `true` as the fourth parameter (`atomicChanges`) the output of this function will become compatible with\n * the {@link module:utils/diff~diff `diff()`} function:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ 'equal', 'equal', 'insert', 'insert', 'insert', 'equal' ]\n *\n * The default output format of this function is compatible with the output format of\n * {@link module:utils/difftochanges~diffToChanges `diffToChanges()`}. The `diffToChanges()` input format is, in turn,\n * compatible with the output of {@link module:utils/diff~diff `diff()`}:\n *\n *\t\tconst a = '1234';\n *\t\tconst b = '12xyz34';\n *\n *\t\t// Both calls will return the same results (grouped changes format).\n *\t\tfastDiff( a, b );\n *\t\tdiffToChanges( diff( a, b ) );\n *\n *\t\t// Again, both calls will return the same results (atomic changes format).\n *\t\tfastDiff( a, b, null, true );\n *\t\tdiff( a, b );\n *\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Input array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default `===` (strict equal operator) is used.\n * @param {Boolean} [atomicChanges=false] Whether an array of `inset|delete|equal` operations should\n * be returned instead of changes set. This makes this function compatible with {@link module:utils/diff~diff `diff()`}.\n * @returns {Array} Array of changes.\n */\nexport default function fastDiff( a, b, cmp, atomicChanges = false ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\t// Transform text or any iterable into arrays for easier, consistent processing.\n\tif ( !Array.isArray( a ) ) {\n\t\ta = Array.from( a );\n\t}\n\n\tif ( !Array.isArray( b ) ) {\n\t\tb = Array.from( b );\n\t}\n\n\t// Find first and last change.\n\tconst changeIndexes = findChangeBoundaryIndexes( a, b, cmp );\n\n\t// Transform into changes array.\n\treturn atomicChanges ? changeIndexesToAtomicChanges( changeIndexes, b.length ) : changeIndexesToChanges( b, changeIndexes );\n}\n\n// Finds position of the first and last change in the given arrays. For example:\n//\n//\t\tconst indexes = findChangeBoundaryIndexes( [ '1', '2', '3', '4' ], [ '1', '3', '4', '2', '4' ] );\n//\t\tconsole.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n//\n// The above indexes means that in the first array the modified part is `1[23]4` and in the second array it is `1[342]4`.\n// Based on such indexes, array with `insert`/`delete` operations which allows transforming first value into the second one\n// can be generated.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Object}\n// @returns {Number} return.firstIndex Index of the first change in both values (always the same for both).\n// @returns {Number} result.lastIndexOld Index of the last common value in `arr1`.\n// @returns {Number} result.lastIndexNew Index of the last common value in `arr2`.\nfunction findChangeBoundaryIndexes( arr1, arr2, cmp ) {\n\t// Find the first difference between passed values.\n\tconst firstIndex = findFirstDifferenceIndex( arr1, arr2, cmp );\n\n\t// If arrays are equal return -1 indexes object.\n\tif ( firstIndex === -1 ) {\n\t\treturn { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };\n\t}\n\n\t// Remove the common part of each value and reverse them to make it simpler to find the last difference between them.\n\tconst oldArrayReversed = cutAndReverse( arr1, firstIndex );\n\tconst newArrayReversed = cutAndReverse( arr2, firstIndex );\n\n\t// Find the first difference between reversed values.\n\t// It should be treated as \"how many elements from the end the last difference occurred\".\n\t//\n\t// For example:\n\t//\n\t// \t\t\t\tinitial\t->\tafter cut\t-> reversed:\n\t// oldValue:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n\t// newValue:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n\t// lastIndex:\t\t\t\t\t\t\t-> 2\n\t//\n\t// So the last change occurred two characters from the end of the arrays.\n\tconst lastIndex = findFirstDifferenceIndex( oldArrayReversed, newArrayReversed, cmp );\n\n\t// Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n\tconst lastIndexOld = arr1.length - lastIndex;\n\tconst lastIndexNew = arr2.length - lastIndex;\n\n\treturn { firstIndex, lastIndexOld, lastIndexNew };\n}\n\n// Returns a first index on which given arrays differ. If both arrays are the same, -1 is returned.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Number}\nfunction findFirstDifferenceIndex( arr1, arr2, cmp ) {\n\tfor ( let i = 0; i < Math.max( arr1.length, arr2.length ); i++ ) {\n\t\tif ( arr1[ i ] === undefined || arr2[ i ] === undefined || !cmp( arr1[ i ], arr2[ i ] ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1; // Return -1 if arrays are equal.\n}\n\n// Returns a copy of the given array with `howMany` elements removed starting from the beginning and in reversed order.\n//\n// @param {Array} arr Array to be processed.\n// @param {Number} howMany How many elements from array beginning to remove.\n// @returns {Array} Shortened and reversed array.\nfunction cutAndReverse( arr, howMany ) {\n\treturn arr.slice( howMany ).reverse();\n}\n\n// Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n// generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n//\n// @param {Array} newArray New array for which change indexes were calculated.\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @returns {Array.<Object>} Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\nfunction changeIndexesToChanges( newArray, changeIndexes ) {\n\tconst result = [];\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n\t// in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n\t// (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex,\n\t\t\ttype: 'insert',\n\t\t\tvalues: newArray.slice( firstIndex, lastIndexNew )\n\t\t} );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex + ( lastIndexNew - firstIndex ), // Increase index of what was inserted.\n\t\t\ttype: 'delete',\n\t\t\thowMany: lastIndexOld - firstIndex\n\t\t} );\n\t}\n\n\treturn result;\n}\n\n// Generates array with set `equal|insert|delete` operations based on change indexes from `findChangeBoundaryIndexes` function.\n//\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @param {Number} newLength Length of the new array on which `findChangeBoundaryIndexes` calculated change indexes.\n// @returns {Array.<String>} Array of changes compatible with {@link module:utils/diff~diff} format.\nfunction changeIndexesToAtomicChanges( changeIndexes, newLength ) {\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// No changes.\n\tif ( firstIndex === -1 ) {\n\t\treturn Array( newLength ).fill( 'equal' );\n\t}\n\n\tlet result = [];\n\tif ( firstIndex > 0 ) {\n\t\tresult = result.concat( Array( firstIndex ).fill( 'equal' ) );\n\t}\n\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexNew - firstIndex ).fill( 'insert' ) );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexOld - firstIndex ).fill( 'delete' ) );\n\t}\n\n\tif ( lastIndexNew < newLength ) {\n\t\tresult = result.concat( Array( newLength - lastIndexNew ).fill( 'equal' ) );\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/diff\n */\n\nimport fastDiff from '../src/fastdiff';\n\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\nexport default function diff( a, b, cmp ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\tconst aLength = a.length;\n\tconst bLength = b.length;\n\n\t// Perform `fastDiff` for longer strings/arrays (see #269).\n\tif ( aLength > 200 || bLength > 200 || aLength + bLength > 300 ) {\n\t\treturn diff.fastDiff( a, b, cmp, true );\n\t}\n\n\t// Temporary action type statics.\n\tlet _insert, _delete;\n\n\t// Swapped the arrays to use the shorter one as the first one.\n\tif ( bLength < aLength ) {\n\t\tconst tmp = a;\n\n\t\ta = b;\n\t\tb = tmp;\n\n\t\t// We swap the action types as well.\n\t\t_insert = 'delete';\n\t\t_delete = 'insert';\n\t} else {\n\t\t_insert = 'insert';\n\t\t_delete = 'delete';\n\t}\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst delta = n - m;\n\n\t// Edit scripts, for each diagonal.\n\tconst es = {};\n\t// Furthest points, the furthest y we can get on each diagonal.\n\tconst fp = {};\n\n\tfunction snake( k ) {\n\t\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n\t\t// Furthest points (y) on the diagonal below k.\n\t\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\n\t\t// Furthest points (y) on the diagonal above k.\n\t\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\n\t\t// The way we should go to get further.\n\t\tconst dir = y1 > y2 ? -1 : 1;\n\n\t\t// Clone previous changes array (if any).\n\t\tif ( es[ k + dir ] ) {\n\t\t\tes[ k ] = es[ k + dir ].slice( 0 );\n\t\t}\n\n\t\t// Create changes array.\n\t\tif ( !es[ k ] ) {\n\t\t\tes[ k ] = [];\n\t\t}\n\n\t\t// Push the action.\n\t\tes[ k ].push( y1 > y2 ? _insert : _delete );\n\n\t\t// Set the beginning coordinates.\n\t\tlet y = Math.max( y1, y2 );\n\t\tlet x = y - k;\n\n\t\t// Traverse the diagonal as long as the values match.\n\t\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\n\t\t\tx++;\n\t\t\ty++;\n\t\t\t// Push no change action.\n\t\t\tes[ k ].push( 'equal' );\n\t\t}\n\n\t\treturn y;\n\t}\n\n\tlet p = 0;\n\tlet k;\n\n\t// Traverse the graph until we reach the end of the longer string.\n\tdo {\n\t\t// Updates furthest points and edit scripts for diagonals below delta.\n\t\tfor ( k = -p; k < delta; k++ ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest points and edit scripts for diagonals above delta.\n\t\tfor ( k = delta + p; k > delta; k-- ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest point and edit script for the delta diagonal.\n\t\t// note that the delta diagonal is the one which goes through the sink (m, n).\n\t\tfp[ delta ] = snake( delta );\n\n\t\tp++;\n\t} while ( fp[ delta ] !== n );\n\n\t// Return the final list of edit changes.\n\t// We remove the first item that represents the action for the injected nulls.\n\treturn es[ delta ].slice( 1 );\n}\n\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/insertat\n */\n\n/**\n * Inserts node to the parent at given index.\n *\n * @param {Element} parentElement Parent element.\n * @param {Number} index Insertions index.\n * @param {Node} nodeToInsert Node to insert.\n */\nexport default function insertAt( parentElement, index, nodeToInsert ) {\n\tparentElement.insertBefore( nodeToInsert, parentElement.childNodes[ index ] || null );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/remove\n */\n\n/**\n * Removes given node from parent.\n *\n * @param {Node} node Node to remove.\n */\nexport default function remove( node ) {\n\tconst parent = node.parentNode;\n\n\tif ( parent ) {\n\t\tparent.removeChild( node );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isnode\n */\n\n/**\n * Checks if the object is a native DOM Node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isNode( obj ) {\n\tif ( obj ) {\n\t\tif ( obj.defaultView ) {\n\t\t\treturn obj instanceof obj.defaultView.Document;\n\t\t} else if ( obj.ownerDocument && obj.ownerDocument.defaultView ) {\n\t\t\treturn obj instanceof obj.ownerDocument.defaultView.Node;\n\t\t}\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module engine/view/renderer\n */\n\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller, isBlockFiller } from './filler';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport fastDiff from '@ckeditor/ckeditor5-utils/src/fastdiff';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer {\n\t/**\n\t * Creates a renderer instance.\n\t *\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n\t * @param {module:engine/view/documentselection~DocumentSelection} selection View selection.\n\t */\n\tconstructor( domConverter, selection ) {\n\t\t/**\n\t\t * Set of DOM Documents instances.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<Document>}\n\t\t */\n\t\tthis.domDocuments = new Set();\n\n\t\t/**\n\t\t * Converter instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = domConverter;\n\n\t\t/**\n\t\t * Set of nodes which attributes changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedAttributes = new Set();\n\n\t\t/**\n\t\t * Set of elements which child lists changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedChildren = new Set();\n\n\t\t/**\n\t\t * Set of text nodes which text data changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedTexts = new Set();\n\n\t\t/**\n\t\t * View selection. Renderer updates DOM selection based on the view selection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = selection;\n\n\t\t/**\n\t\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n\t\t * this is set to `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isFocused = false;\n\n\t\t/**\n\t\t * The text node in which the inline filler was rendered.\n\t\t *\n\t\t * @private\n\t\t * @member {Text}\n\t\t */\n\t\tthis._inlineFiller = null;\n\n\t\t/**\n\t\t * DOM element containing fake selection.\n\t\t *\n\t\t * @private\n\t\t * @type {null|HTMLElement}\n\t\t */\n\t\tthis._fakeSelectionContainer = null;\n\t}\n\n\t/**\n\t * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n\t *\n\t * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n\t *\n\t * @see #markedAttributes\n\t * @see #markedChildren\n\t * @see #markedTexts\n\t *\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Node to be marked.\n\t */\n\tmarkToSync( type, node ) {\n\t\tif ( type === 'text' ) {\n\t\t\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis.markedTexts.add( node );\n\t\t\t}\n\t\t} else {\n\t\t\t// If the node has no DOM element it is not rendered yet,\n\t\t\t// its children/attributes do not need to be marked to be sync.\n\t\t\tif ( !this.domConverter.mapViewToDom( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( type === 'attributes' ) {\n\t\t\t\tthis.markedAttributes.add( node );\n\t\t\t} else if ( type === 'children' ) {\n\t\t\t\tthis.markedChildren.add( node );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Unknown type passed to Renderer.markToSync.\n\t\t\t\t *\n\t\t\t\t * @error renderer-unknown-type\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.', this );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n\t * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n\t *\n\t * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n\t * so it does as little as it is needed to update the DOM.\n\t *\n\t * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n\t * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n\t * removed as long as the selection is in the text node which needed it at first.\n\t */\n\trender() {\n\t\tlet inlineFillerPosition;\n\n\t\t// Refresh mappings.\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildrenMappings( element );\n\t\t}\n\n\t\t// There was inline filler rendered in the DOM but it's not\n\t\t// at the selection position any more, so we can remove it\n\t\t// (cause even if it's needed, it must be placed in another location).\n\t\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\n\t\t\tthis._removeInlineFiller();\n\t\t}\n\n\t\t// If we've got the filler, let's try to guess its position in the view.\n\t\tif ( this._inlineFiller ) {\n\t\t\tinlineFillerPosition = this._getInlineFillerPosition();\n\t\t}\n\t\t// Otherwise, if it's needed, create it at the selection position.\n\t\telse if ( this._needsInlineFillerAtSelection() ) {\n\t\t\tinlineFillerPosition = this.selection.getFirstPosition();\n\n\t\t\t// Do not use `markToSync` so it will be added even if the parent is already added.\n\t\t\tthis.markedChildren.add( inlineFillerPosition.parent );\n\t\t}\n\n\t\tfor ( const element of this.markedAttributes ) {\n\t\t\tthis._updateAttrs( element );\n\t\t}\n\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildren( element, { inlineFillerPosition } );\n\t\t}\n\n\t\tfor ( const node of this.markedTexts ) {\n\t\t\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis._updateText( node, { inlineFillerPosition } );\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the inline filler is required and where it really is in the DOM.\n\t\t// At this point in most cases it will be in the DOM, but there are exceptions.\n\t\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\n\t\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n\t\t// it will not be present.\n\t\t// Fix those and similar scenarios.\n\t\tif ( inlineFillerPosition ) {\n\t\t\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\n\t\t\tconst domDocument = fillerDomPosition.parent.ownerDocument;\n\n\t\t\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\n\t\t\t\t// Filler has not been created at filler position. Create it now.\n\t\t\t\tthis._inlineFiller = addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\n\t\t\t} else {\n\t\t\t\t// Filler has been found, save it.\n\t\t\t\tthis._inlineFiller = fillerDomPosition.parent;\n\t\t\t}\n\t\t} else {\n\t\t\t// There is no filler needed.\n\t\t\tthis._inlineFiller = null;\n\t\t}\n\n\t\tthis._updateSelection();\n\t\tthis._updateFocus();\n\n\t\tthis.markedTexts.clear();\n\t\tthis.markedAttributes.clear();\n\t\tthis.markedChildren.clear();\n\t}\n\n\t/**\n\t * Updates mappings of view element's children.\n\t *\n\t * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n\t * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n\t * Thanks to that these elements do not need to be re-rendered completely.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose children mappings will be updated.\n\t */\n\t_updateChildrenMappings( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n\t\t\treturn;\n\t\t}\n\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { withChildren: false } )\n\t\t);\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\t\tconst actions = this._findReplaceActions( diff, actualDomChildren, expectedDomChildren );\n\n\t\tif ( actions.indexOf( 'replace' ) !== -1 ) {\n\t\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'replace' ) {\n\t\t\t\t\tconst insertIndex = counter.equal + counter.insert;\n\t\t\t\t\tconst deleteIndex = counter.equal + counter.delete;\n\t\t\t\t\tconst viewChild = viewElement.getChild( insertIndex );\n\n\t\t\t\t\t// The 'uiElement' is a special one and its children are not stored in a view (#799),\n\t\t\t\t\t// so we cannot use it with replacing flow (since it uses view children during rendering\n\t\t\t\t\t// which will always result in rendering empty element).\n\t\t\t\t\tif ( viewChild && !viewChild.is( 'uiElement' ) ) {\n\t\t\t\t\t\tthis._updateElementMappings( viewChild, actualDomChildren[ deleteIndex ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tremove( expectedDomChildren[ insertIndex ] );\n\t\t\t\t\tcounter.equal++;\n\t\t\t\t} else {\n\t\t\t\t\tcounter[ action ]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates mappings of a given view element.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose mappings will be updated.\n\t * @param {Node} domElement The DOM element representing the given view element.\n\t */\n\t_updateElementMappings( viewElement, domElement ) {\n\t\t// Remap 'DomConverter' bindings.\n\t\tthis.domConverter.unbindDomElement( domElement );\n\t\tthis.domConverter.bindElements( domElement, viewElement );\n\n\t\t// View element may have children which needs to be updated, but are not marked, mark them to update.\n\t\tthis.markedChildren.add( viewElement );\n\n\t\t// Because we replace new view element mapping with the existing one, the corresponding DOM element\n\t\t// will not be rerendered. The new view element may have different attributes than the previous one.\n\t\t// Since its corresponding DOM element will not be rerendered, new attributes will not be added\n\t\t// to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n\t\t// detailed case study.\n\t\t// Also there are cases where replaced element is removed from the view structure and then has\n\t\t// its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n\t\t// and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n\t\t// To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n\t\tthis.markedAttributes.add( viewElement );\n\t}\n\n\t/**\n\t * Gets the position of the inline filler based on the current selection.\n\t * Here, we assume that we know that the filler is needed and\n\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n\t * it is somewhere at the selection position.\n\t *\n\t * Note: The filler position cannot be restored based on the filler's DOM text node, because\n\t * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n\t * bindings are only dependable after rendering.\n\t *\n\t * @private\n\t * @returns {module:engine/view/position~Position}\n\t */\n\t_getInlineFillerPosition() {\n\t\tconst firstPos = this.selection.getFirstPosition();\n\n\t\tif ( firstPos.parent.is( 'text' ) ) {\n\t\t\treturn ViewPosition._createBefore( this.selection.getFirstPosition().parent );\n\t\t} else {\n\t\t\treturn firstPos;\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if the selection has not left the inline filler's text node.\n\t * If it is `true`, it means that the filler had been added for a reason and the selection did not\n\t * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler and selection are in the same place.\n\t */\n\t_isSelectionInInlineFiller() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note, we can't check if selection's position equals position of the\n\t\t// this._inlineFiller node, because of #663. We may not be able to calculate\n\t\t// the filler's position in the view at this stage.\n\t\t// Instead, we check it the other way – whether selection is anchored in\n\t\t// that text node or next to it.\n\n\t\t// Possible options are:\n\t\t// \"FILLER{}\"\n\t\t// \"FILLERadded-text{}\"\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\n\n\t\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes the inline filler.\n\t *\n\t * @private\n\t */\n\t_removeInlineFiller() {\n\t\tconst domFillerNode = this._inlineFiller;\n\n\t\t// Something weird happened and the stored node doesn't contain the filler's text.\n\t\tif ( !startsWithFiller( domFillerNode ) ) {\n\t\t\t/**\n\t\t\t * The inline filler node was lost. Most likely, something overwrote the filler text node\n\t\t\t * in the DOM.\n\t\t\t *\n\t\t\t * @error view-renderer-filler-was-lost\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.', this );\n\t\t}\n\n\t\tif ( isInlineFiller( domFillerNode ) ) {\n\t\t\tdomFillerNode.parentNode.removeChild( domFillerNode );\n\t\t} else {\n\t\t\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\n\t\t}\n\n\t\tthis._inlineFiller = null;\n\t}\n\n\t/**\n\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler should be added.\n\t */\n\t_needsInlineFillerAtSelection() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst selectionParent = selectionPosition.parent;\n\t\tconst selectionOffset = selectionPosition.offset;\n\n\t\t// If there is no DOM root we do not care about fillers.\n\t\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !( selectionParent.is( 'element' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prevent adding inline filler inside elements with contenteditable=false.\n\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\t\tif ( !isEditable( selectionParent ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have block filler, we do not need inline one.\n\t\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst nodeBefore = selectionPosition.nodeBefore;\n\t\tconst nodeAfter = selectionPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if text needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} viewText View text to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateText( viewText, options ) {\n\t\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\n\t\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\n\n\t\tconst actualText = domText.data;\n\t\tlet expectedText = newDomText.data;\n\n\t\tconst filler = options.inlineFillerPosition;\n\n\t\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\n\t\t\texpectedText = INLINE_FILLER + expectedText;\n\t\t}\n\n\t\tif ( actualText != expectedText ) {\n\t\t\tconst actions = fastDiff( actualText, expectedText );\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action.type === 'insert' ) {\n\t\t\t\t\tdomText.insertData( action.index, action.values.join( '' ) );\n\t\t\t\t} else { // 'delete'\n\t\t\t\t\tdomText.deleteData( action.index, action.howMany );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if attribute list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement The view element to update.\n\t */\n\t_updateAttrs( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n\t\t\t// in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n\t\t\t// replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n\t\t\t// in 'this._updateChildrenMappings()' so it will be processed separately.\n\t\t\treturn;\n\t\t}\n\n\t\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\n\t\tconst viewAttrKeys = viewElement.getAttributeKeys();\n\n\t\t// Add or overwrite attributes.\n\t\tfor ( const key of viewAttrKeys ) {\n\t\t\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\n\t\t}\n\n\t\t// Remove from DOM attributes which do not exists in the view.\n\t\tfor ( const key of domAttrKeys ) {\n\t\t\tif ( !viewElement.hasAttribute( key ) ) {\n\t\t\t\tdomElement.removeAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if elements child list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateChildren( viewElement, options ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM.\n\t\t\t// There is no need to process it. It will be processed when re-inserted.\n\t\t\treturn;\n\t\t}\n\n\t\tconst inlineFillerPosition = options.inlineFillerPosition;\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { bind: true, inlineFillerPosition } )\n\t\t);\n\n\t\t// Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n\t\t// during diffing so text nodes could be compared correctly and also during rendering to maintain\n\t\t// proper order and indexes while updating the DOM.\n\t\tif ( inlineFillerPosition && inlineFillerPosition.parent === viewElement ) {\n\t\t\taddInlineFiller( domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset );\n\t\t}\n\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\n\t\tlet i = 0;\n\t\tconst nodesToUnbind = new Set();\n\n\t\tfor ( const action of diff ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\tinsertAt( domElement, i, expectedDomChildren[ i ] );\n\t\t\t\ti++;\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tnodesToUnbind.add( actualDomChildren[ i ] );\n\t\t\t\tremove( actualDomChildren[ i ] );\n\t\t\t} else { // 'equal'\n\t\t\t\t// Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n\t\t\t\tthis._markDescendantTextToSync( this.domConverter.domToView( expectedDomChildren[ i ] ) );\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n\t\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n\t\t// it was moved to DOM tree out of the removed node.\n\t\tfor ( const node of nodesToUnbind ) {\n\t\t\tif ( !node.parentNode ) {\n\t\t\t\tthis.domConverter.unbindDomElement( node );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shorthand for diffing two arrays or node lists of DOM nodes.\n\t *\n\t * @private\n\t * @param {Array.<Node>|NodeList} actualDomChildren Actual DOM children\n\t * @param {Array.<Node>|NodeList} expectedDomChildren Expected DOM children.\n\t * @returns {Array.<String>} The list of actions based on the {@link module:utils/diff~diff} function.\n\t */\n\t_diffNodeLists( actualDomChildren, expectedDomChildren ) {\n\t\tactualDomChildren = filterOutFakeSelectionContainer( actualDomChildren, this._fakeSelectionContainer );\n\n\t\treturn diff( actualDomChildren, expectedDomChildren, sameNodes.bind( null, this.domConverter.blockFiller ) );\n\t}\n\n\t/**\n\t * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n\t * within one `insert`/`delete` action group, for example:\n\t *\n\t * \t\tActual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n\t * \t\tExpected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n\t * \t\tInput actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n\t * \t\tOutput actions:\t[ insert, replace, delete, equal, replace ]\n\t *\n\t * @private\n\t * @param {Array.<String>} actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n\t * @param {Array.<Node>|NodeList} actualDom Actual DOM children\n\t * @param {Array.<Node>} expectedDom Expected DOM children.\n\t * @returns {Array.<String>} Actions array modified with the `replace` actions.\n\t */\n\t_findReplaceActions( actions, actualDom, expectedDom ) {\n\t\t// If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n\t\tif ( actions.indexOf( 'insert' ) === -1 || actions.indexOf( 'delete' ) === -1 ) {\n\t\t\treturn actions;\n\t\t}\n\n\t\tlet newActions = [];\n\t\tlet actualSlice = [];\n\t\tlet expectedSlice = [];\n\n\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\tfor ( const action of actions ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\texpectedSlice.push( expectedDom[ counter.equal + counter.insert ] );\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tactualSlice.push( actualDom[ counter.equal + counter.delete ] );\n\t\t\t} else { // equal\n\t\t\t\tnewActions = newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t\t\t\tnewActions.push( 'equal' );\n\t\t\t\t// Reset stored elements on 'equal'.\n\t\t\t\tactualSlice = [];\n\t\t\t\texpectedSlice = [];\n\t\t\t}\n\t\t\tcounter[ action ]++;\n\t\t}\n\n\t\treturn newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t}\n\n\t/**\n\t * Marks text nodes to be synchronized.\n\t *\n\t * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewNode View node to sync.\n\t */\n\t_markDescendantTextToSync( viewNode ) {\n\t\tif ( !viewNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tthis.markedTexts.add( viewNode );\n\t\t} else if ( viewNode.is( 'element' ) ) {\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tthis._markDescendantTextToSync( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the selection needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateSelection() {\n\t\t// If there is no selection - remove DOM and fake selections.\n\t\tif ( this.selection.rangeCount === 0 ) {\n\t\t\tthis._removeDomSelection();\n\t\t\tthis._removeFakeSelection();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\n\n\t\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\t\tif ( !this.isFocused || !domRoot ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render selection.\n\t\tif ( this.selection.isFake ) {\n\t\t\tthis._updateFakeSelection( domRoot );\n\t\t} else {\n\t\t\tthis._removeFakeSelection();\n\t\t\tthis._updateDomSelection( domRoot );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the fake selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the fake selection container should be added.\n\t */\n\t_updateFakeSelection( domRoot ) {\n\t\tconst domDocument = domRoot.ownerDocument;\n\t\tlet container = this._fakeSelectionContainer;\n\n\t\t// Create fake selection container if one does not exist.\n\t\tif ( !container ) {\n\t\t\tthis._fakeSelectionContainer = container = domDocument.createElement( 'div' );\n\n\t\t\tObject.assign( container.style, {\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: '-9999px',\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/752.\n\t\t\t\twidth: '42px'\n\t\t\t} );\n\n\t\t\t// Fill it with a text node so we can update it later.\n\t\t\tcontainer.textContent = '\\u00A0';\n\t\t}\n\n\t\tif ( !container.parentElement || container.parentElement != domRoot ) {\n\t\t\tdomRoot.appendChild( container );\n\t\t}\n\n\t\t// Update contents.\n\t\tcontainer.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n\n\t\t// Update selection.\n\t\tconst domSelection = domDocument.getSelection();\n\t\tconst domRange = domDocument.createRange();\n\n\t\tdomSelection.removeAllRanges();\n\t\tdomRange.selectNodeContents( container );\n\t\tdomSelection.addRange( domRange );\n\n\t\t// Bind fake selection container with current selection.\n\t\tthis.domConverter.bindFakeSelection( container, this.selection );\n\t}\n\n\t/**\n\t * Updates the DOM selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the DOM selection should be rendered.\n\t */\n\t_updateDomSelection( domRoot ) {\n\t\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\n\n\t\t// Let's check whether DOM selection needs updating at all.\n\t\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n\t\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n\t\t// and focus of view selection.\n\t\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n\t\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\t\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\n\t\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\n\n\t\t// Focus the new editing host.\n\t\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\t\tdomRoot.focus();\n\n\t\tdomSelection.collapse( anchor.parent, anchor.offset );\n\t\tdomSelection.extend( focus.parent, focus.offset );\n\n\t\t// Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n\t\tif ( env.isGecko ) {\n\t\t\tfixGeckoSelectionAfterBr( focus, domSelection );\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether a given DOM selection needs to be updated.\n\t *\n\t * @private\n\t * @param {Selection} domSelection The DOM selection to check.\n\t * @returns {Boolean}\n\t */\n\t_domSelectionNeedsUpdate( domSelection ) {\n\t\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\t// Current DOM selection is in incorrect position. We need to update it.\n\t\t\treturn true;\n\t\t}\n\n\t\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If selection is not collapsed, it does not need to be updated if it is similar.\n\t\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\n\t\t\t// Selection did not changed and is correct, do not update.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Selections are not similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes the DOM selection.\n\t *\n\t * @private\n\t */\n\t_removeDomSelection() {\n\t\tfor ( const doc of this.domDocuments ) {\n\t\t\tconst domSelection = doc.getSelection();\n\n\t\t\tif ( domSelection.rangeCount ) {\n\t\t\t\tconst activeDomElement = doc.activeElement;\n\t\t\t\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\n\n\t\t\t\tif ( activeDomElement && viewElement ) {\n\t\t\t\t\tdoc.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake selection.\n\t *\n\t * @private\n\t */\n\t_removeFakeSelection() {\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\tif ( container ) {\n\t\t\tcontainer.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if focus needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateFocus() {\n\t\tif ( this.isFocused ) {\n\t\t\tconst editable = this.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t}\n\t\t}\n\t}\n}\n\nmix( Renderer, ObservableMixin );\n\n// Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\nfunction isEditable( element ) {\n\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\treturn false;\n\t}\n\n\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\n\n\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\n}\n\n// Adds inline filler at a given position.\n//\n// The position can be given as an array of DOM nodes and an offset in that array,\n// or a DOM parent element and an offset in that element.\n//\n// @private\n// @param {Document} domDocument\n// @param {Element|Array.<Node>} domParentOrArray\n// @param {Number} offset\n// @returns {Text} The DOM text node that contains an inline filler.\nfunction addInlineFiller( domDocument, domParentOrArray, offset ) {\n\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n\tconst nodeAfterFiller = childNodes[ offset ];\n\n\tif ( isText( nodeAfterFiller ) ) {\n\t\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n\n\t\treturn nodeAfterFiller;\n\t} else {\n\t\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\n\n\t\tif ( Array.isArray( domParentOrArray ) ) {\n\t\t\tchildNodes.splice( offset, 0, fillerNode );\n\t\t} else {\n\t\t\tinsertAt( domParentOrArray, offset, fillerNode );\n\t\t}\n\n\t\treturn fillerNode;\n\t}\n}\n\n// Whether two DOM nodes should be considered as similar.\n// Nodes are considered similar if they have the same tag name.\n//\n// @private\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction areSimilar( node1, node2 ) {\n\treturn isNode( node1 ) && isNode( node2 ) &&\n\t\t!isText( node1 ) && !isText( node2 ) &&\n\t\tnode1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n\n// Whether two dom nodes should be considered as the same.\n// Two nodes which are considered the same are:\n//\n//\t\t* Text nodes with the same text.\n//\t\t* Element nodes represented by the same object.\n//\t\t* Two block filler elements.\n//\n// @private\n// @param {Function} blockFiller Block filler creator function, see {@link module:engine/view/domconverter~DomConverter#blockFiller}.\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction sameNodes( blockFiller, actualDomChild, expectedDomChild ) {\n\t// Elements.\n\tif ( actualDomChild === expectedDomChild ) {\n\t\treturn true;\n\t}\n\t// Texts.\n\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\n\t\treturn actualDomChild.data === expectedDomChild.data;\n\t}\n\t// Block fillers.\n\telse if ( isBlockFiller( actualDomChild, blockFiller ) &&\n\t\tisBlockFiller( expectedDomChild, blockFiller ) ) {\n\t\treturn true;\n\t}\n\n\t// Not matching types.\n\treturn false;\n}\n\n// The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n// When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n//\n//\t\t<p>foo<br/>[]</p>\n//\n// which happens a lot when using the soft line break, the browser fails to (visually) move the\n// caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\nfunction fixGeckoSelectionAfterBr( focus, domSelection ) {\n\tconst parent = focus.parent;\n\n\t// This fix works only when the focus point is at the very end of an element.\n\t// There is no point in running it in cases unrelated to the browser bug.\n\tif ( parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1 ) {\n\t\treturn;\n\t}\n\n\tconst childAtOffset = parent.childNodes[ focus.offset ];\n\n\t// To stay on the safe side, the fix being as specific as possible, it targets only the\n\t// selection which is at the very end of the element and preceded by <br />.\n\tif ( childAtOffset && childAtOffset.tagName == 'BR' ) {\n\t\tdomSelection.addRange( domSelection.getRangeAt( 0 ) );\n\t}\n}\n\nfunction filterOutFakeSelectionContainer( domChildList, fakeSelectionContainer ) {\n\tconst childList = Array.from( domChildList );\n\n\tif ( childList.length == 0 || !fakeSelectionContainer ) {\n\t\treturn childList;\n\t}\n\n\tconst last = childList[ childList.length - 1 ];\n\n\tif ( last == fakeSelectionContainer ) {\n\t\tchildList.pop();\n\t}\n\n\treturn childList;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module utils/dom/global\n */\n\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nexport default { window, document };\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/indexof\n */\n\n/**\n * Returns index of the node in the parent element.\n *\n * @param {Node} node Node which index is tested.\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf( node ) {\n\tlet index = 0;\n\n\twhile ( node.previousSibling ) {\n\t\tnode = node.previousSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module utils/dom/getancestors\n */\n\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors( node ) {\n\tconst nodes = [];\n\n\t// We are interested in `Node`s `DocumentFragment`s only.\n\twhile ( node && node.nodeType != Node.DOCUMENT_NODE ) {\n\t\tnodes.unshift( node );\n\t\tnode = node.parentNode;\n\t}\n\n\treturn nodes;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, INLINE_FILLER_LENGTH, isBlockFiller, isInlineFiller, startsWithFiller, getDataWithoutFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es';\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * The instance of DOMConverter is available in {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {Object} options Object with configuration options.\n\t * @param {Function} [options.blockFiller=module:engine/view/filler~BR_FILLER] Block filler creator.\n\t */\n\tconstructor( options = {} ) {\n\t\t// Using WeakMap prevent memory leaks: when the converter will be destroyed all referenced between View and DOM\n\t\t// will be removed. Also because it is a *Weak*Map when both view and DOM elements will be removed referenced\n\t\t// will be also removed, isn't it brilliant?\n\t\t//\n\t\t// Yes, PJ. It is.\n\t\t//\n\t\t// You guys so smart.\n\t\t//\n\t\t// I've been here. Seen stuff. Afraid of code now.\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#blockFiller\n\t\t */\n\t\tthis.blockFiller = options.blockFiller || BR_FILLER;\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered pre-formatted elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered block elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ];\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to {@link module:engine/view/documentselection~DocumentSelection\n\t * document selection}. Document selection copy is stored and can be retrieved by\n\t * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n\t */\n\tbindFakeSelection( domElement, viewDocumentSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewDocumentSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n\t * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this.blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this.blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( isBlockFiller( domNode, this.blockFiller ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement._appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, { backward: isBackward } );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( isBlockFiller( domParent, this.blockFiller ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition._createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @returns {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n\t\t// next node (container element boundary).\n\t\t//\n\t\t// Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n\t\t//\n\t\t// Foo <span>&nbsp;bar</span>  <-- bad.\n\t\t// Foo&nbsp;<span> bar</span>  <-- good.\n\t\t//\n\t\t// More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( data.charAt( data.length - 2 ) == ' ' || !nextNode || nextNode.data.charAt( 0 ) == ' ' ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\t// 3. Create space+nbsp pairs.\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t *\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of a text node is removed if it is the first text node in its container\n\t * element or if the previous text node ends with a space character,\n\t * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container\n\t * * nbsps are converted to spaces.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = node.data;\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn getDataWithoutFiller( node );\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingInlineDomNode( node, false );\n\t\tconst nextNode = this._getTouchingInlineDomNode( node, true );\n\n\t\tconst shouldLeftTrim = this._checkShouldLeftTrimDomText( prevNode );\n\t\tconst shouldRightTrim = this._checkShouldRightTrimDomText( node, nextNode );\n\n\t\t// If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If the next text node does not exist remove space character from the end of this text node.\n\t\tif ( shouldRightTrim ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\n\t\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n\t\t// This means that the text node starts/end with normal space instead of non-breaking space.\n\t\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n\t\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\t\tdata = getDataWithoutFiller( new Text( data ) );\n\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\t\t//\n\t\t// Now, We will reverse the process that happens in `_processDataFromViewText`.\n\t\t//\n\t\t// We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, let's change the last nbsp to a space.\n\t\tif ( /( |\\u00A0)\\u00A0$/.test( data ) || !nextNode || ( nextNode.data && nextNode.data.charAt( 0 ) == ' ' ) ) {\n\t\t\tdata = data.replace( /\\u00A0$/, ' ' );\n\t\t}\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n\t * be trimmed from the left side.\n\t *\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldLeftTrimDomText( prevNode ) {\n\t\tif ( !prevNode ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( isElement( prevNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) );\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n\t * be trimmed from the right side.\n\t *\n\t * @param {Node} node\n\t * @param {Node} nextNode\n\t */\n\t_checkShouldRightTrimDomText( node, nextNode ) {\n\t\tif ( nextNode ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !startsWithFiller( node );\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition._createAfter( node ) : ViewPosition._createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t// text node in its container element.\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// <br> found – it works like a block boundary, so do not scan further.\n\t\t\telse if ( value.item.is( 'br' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Found a text node in the same container element.\n\t\t\telse if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For the given text node, it finds the closest touching node which is either\n\t * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n\t * wasn't found so far, `null` is returned.\n\t *\n\t * In the following DOM structure:\n\t *\n\t *\t\t<p>foo<b>bar</b><br>bom</p>\n\t *\n\t * * `foo` doesn't have its previous touching inline node (`null` is returned),\n\t * * `foo`'s next touching inline node is `bar`\n\t * * `bar`'s next touching inline node is `<br>`\n\t *\n\t * This method returns text nodes and `<br>` elements because these types of nodes affect how\n\t * spaces in the given text node need to be converted.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|Element|null}\n\t */\n\t_getTouchingInlineDomNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n\t\t\tacceptNode( node ) {\n\t\t\t\tif ( isText( node ) ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\tif ( node.tagName == 'BR' ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\treturn NodeFilter.FILTER_SKIP;\n\t\t\t}\n\t\t} );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getcommonancestor\n */\n\nimport getAncestors from './getancestors';\n\n/**\n * Searches and returns the lowest common ancestor of two given nodes.\n *\n * @param {Node} nodeA First node.\n * @param {Node} nodeB Second node.\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\n */\nexport default function getCommonAncestor( nodeA, nodeB ) {\n\tconst ancestorsA = getAncestors( nodeA );\n\tconst ancestorsB = getAncestors( nodeB );\n\n\tlet i = 0;\n\n\t// It does not matter which array is shorter.\n\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\ti++;\n\t}\n\n\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/iswindow\n */\n\n/**\n * Checks if the object is a native DOM Window.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isWindow( obj ) {\n\tconst stringifiedObject = Object.prototype.toString.apply( obj );\n\n\t// Returns `true` for the `window` object in browser environments.\n\tif ( stringifiedObject == '[object Window]' ) {\n\t\treturn true;\n\t}\n\n\t// Returns `true` for the `window` object in the Electron environment.\n\tif ( stringifiedObject == '[object global]' ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tlistenTo( emitter, ...rest ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\n\t\t// corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\n\n\t\t\tproxy.attach( ...rest );\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.listenTo.call( this, emitter, ...rest );\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter );\n\n\t\t\t// Element has no listeners.\n\t\t\tif ( !proxy ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\n\t\tif ( emitter instanceof ProxyEmitter ) {\n\t\t\temitter.detach( event );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n\t *\n\t * @pivate\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n\t */\n\t_getProxyEmitter( node ) {\n\t\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n\t */\n\tconstructor( node ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getNodeUID( node ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tattach( event, callback, options = {} ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event, !!options.useCapture );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event, useCapture ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, useCapture );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/observer\n */\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need refresh on DOM events.\n *\n * @abstract\n */\nexport default class Observer {\n\t/**\n\t * Creates an instance of the observer.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/document~Document} object.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * State of the observer. If it is disabled events will not be fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Enables the observer. This method is called when the observer is registered to the\n\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n\t * (all observers are {@link #disable disabled} before rendering).\n\t *\n\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n\t * However, a child class may not need to be disabled, so it can implement an empty method.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#disable\n\t */\n\tenable() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the observer. This method is called before\n\t * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#enable\n\t */\n\tdisable() {\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Disables and destroys the observer, among others removes event listeners created by the observer.\n\t */\n\tdestroy() {\n\t\tthis.disable();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Starts observing the given root element.\n\t *\n\t * @method #observe\n\t * @param {HTMLElement} domElement\n\t * @param {String} name The name of the root element.\n\t */\n}\n\nmix( Observer, DomEmitterMixin );\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class MutationObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Native mutation observer config.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tcharacterDataOldValue: true,\n\t\t\tsubtree: true\n\t\t};\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#_renderer}.\n\t\t *\n\t\t * @member {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis.renderer = view._renderer;\n\n\t\t/**\n\t\t * Observed DOM elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<HTMLElement>}\n\t\t */\n\t\tthis._domElements = [];\n\n\t\t/**\n\t\t * Native mutation observer.\n\t\t *\n\t\t * @private\n\t\t * @member {MutationObserver}\n\t\t */\n\t\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\n\t}\n\n\t/**\n\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n\t * At the same time empties the queue so mutations will not be fired twice.\n\t */\n\tflush() {\n\t\tthis._onMutations( this._mutationObserver.takeRecords() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tthis._domElements.push( domElement );\n\n\t\tif ( this.isEnabled ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tenable() {\n\t\tsuper.enable();\n\n\t\tfor ( const domElement of this._domElements ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisable() {\n\t\tsuper.disable();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n\t *\n\t * @private\n\t * @param {Array.<Object>} domMutations Array of native mutations.\n\t */\n\t_onMutations( domMutations ) {\n\t\t// As a result of this.flush() we can have an empty collection.\n\t\tif ( domMutations.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.domConverter;\n\n\t\t// Use map and set for deduplication.\n\t\tconst mutatedTexts = new Map();\n\t\tconst mutatedElements = new Set();\n\n\t\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n\t\t// element with changed structure anyway.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tif ( mutation.type === 'childList' ) {\n\t\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t\t// Do not collect mutations from UIElements.\n\t\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( element && !this._isBogusBrMutation( mutation ) ) {\n\t\t\t\t\tmutatedElements.add( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t// Do not collect mutations from UIElements.\n\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( mutation.type === 'characterData' ) {\n\t\t\t\tconst text = domConverter.findCorrespondingViewText( mutation.target );\n\n\t\t\t\tif ( text && !mutatedElements.has( text.parent ) ) {\n\t\t\t\t\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\n\t\t\t\t\t// we will have only one in the map.\n\t\t\t\t\tmutatedTexts.set( text, {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\toldText: text.data,\n\t\t\t\t\t\tnewText: getDataWithoutFiller( mutation.target ),\n\t\t\t\t\t\tnode: text\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n\t\t\t\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\n\t\t\t\t// need to fire 'children' mutation instead of 'text'.\n\t\t\t\telse if ( !text && startsWithFiller( mutation.target ) ) {\n\t\t\t\t\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n\t\t// same node multiple times in case of duplication.\n\n\t\t// List of mutations we will fire.\n\t\tconst viewMutations = [];\n\n\t\tfor ( const mutatedText of mutatedTexts.values() ) {\n\t\t\tthis.renderer.markToSync( 'text', mutatedText.node );\n\t\t\tviewMutations.push( mutatedText );\n\t\t}\n\n\t\tfor ( const viewElement of mutatedElements ) {\n\t\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\t\t\tconst viewChildren = Array.from( viewElement.getChildren() );\n\t\t\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement, { withChildren: false } ) );\n\n\t\t\t// It may happen that as a result of many changes (sth was inserted and then removed),\n\t\t\t// both elements haven't really changed. #1031\n\t\t\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\n\t\t\t\tthis.renderer.markToSync( 'children', viewElement );\n\n\t\t\t\tviewMutations.push( {\n\t\t\t\t\ttype: 'children',\n\t\t\t\t\toldChildren: viewChildren,\n\t\t\t\t\tnewChildren: newViewChildren,\n\t\t\t\t\tnode: viewElement\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n\t\t// There should not be simultaneous mutation in multiple documents, so it's fine.\n\t\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\n\n\t\tlet viewSelection = null;\n\n\t\tif ( domSelection && domSelection.anchorNode ) {\n\t\t\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n\t\t\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n\t\t\t// be used by features handling mutations.\n\t\t\t// Only one range is supported.\n\n\t\t\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\n\t\t\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\n\n\t\t\t// Anchor and focus has to be properly mapped to view.\n\t\t\tif ( viewSelectionAnchor && viewSelectionFocus ) {\n\t\t\t\tviewSelection = new ViewSelection( viewSelectionAnchor );\n\t\t\t\tviewSelection.setFocus( viewSelectionFocus );\n\t\t\t}\n\t\t}\n\n\t\tthis.document.fire( 'mutations', viewMutations, viewSelection );\n\n\t\t// If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n\t\t// view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\t\tthis.view.forceRender();\n\n\t\tfunction sameNodes( child1, child2 ) {\n\t\t\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n\t\t\tif ( Array.isArray( child1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Elements.\n\t\t\tif ( child1 === child2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\n\t\t\t\treturn child1.data === child2.data;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n\t * Such mutations are generated while pressing space or performing native spellchecker correction\n\t * on the end of the block element in Firefox browser.\n\t *\n\t * @private\n\t * @param {Object} mutation Native mutation object.\n\t * @returns {Boolean}\n\t */\n\t_isBogusBrMutation( mutation ) {\n\t\tlet addedNode = null;\n\n\t\t// Check if mutation added only one node on the end of its parent.\n\t\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\n\t\t\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\n\t\t\t\twithChildren: false\n\t\t\t} );\n\t\t}\n\n\t\treturn addedNode && addedNode.is( 'element', 'br' );\n\t}\n}\n\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\n\nimport { extend } from 'lodash-es';\n\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n\t/**\n\t * @param {module:engine/view/view~View} view The instance of the view controller.\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] Additional properties that the instance should contain.\n\t */\n\tconstructor( view, domEvent, additionalData ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * The instance of the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The DOM event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n\t\t */\n\t\tthis.domEvent = domEvent;\n\n\t\t/**\n\t\t * The DOM target.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n\t\t */\n\t\tthis.domTarget = domEvent.target;\n\n\t\textend( this, additionalData );\n\t}\n\n\t/**\n\t * The tree view element representing the target.\n\t *\n\t * @readonly\n\t * @type module:engine/view/element~Element\n\t */\n\tget target() {\n\t\treturn this.view.domConverter.mapDomToView( this.domTarget );\n\t}\n\n\t/**\n\t * Prevents the native's event default action.\n\t */\n\tpreventDefault() {\n\t\tthis.domEvent.preventDefault();\n\t}\n\n\t/**\n\t * Stops native event propagation.\n\t */\n\tstopPropagation() {\n\t\tthis.domEvent.stopPropagation();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventobserver\n */\n\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n\t/**\n\t * Type of the DOM event the observer should listen on. Array of types can be defined\n\t * if the obsever should listen to multiple DOM events.\n\t *\n\t * @readonly\n\t * @member {String|Array.<String>} #domEventType\n\t */\n\n\t/**\n\t * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\n\t * observer {@link #isEnabled is not enabled}.\n\t *\n\t * @see #domEventType\n\t * @abstract\n\t * @method #onDomEvent\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * If set to `true` DOM events will be listened on the capturing phase.\n\t\t * Default value is `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.useCapture = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst types = typeof this.domEventType == 'string' ? [ this.domEventType ] : this.domEventType;\n\n\t\ttypes.forEach( type => {\n\t\t\tthis.listenTo( domElement, type, ( eventInfo, domEvent ) => {\n\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\tthis.onDomEvent( domEvent );\n\t\t\t\t}\n\t\t\t}, { useCapture: this.useCapture } );\n\t\t} );\n\t}\n\n\t/**\n\t * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n\t *\n\t * @see module:utils/emittermixin~EmitterMixin#fire\n\t * @param {String} eventType The event type (name).\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] The additional data which should extend the\n\t * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n\t */\n\tfire( eventType, domEvent, additionalData ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( eventType, new DomEventData( this.view, domEvent, additionalData ) );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/keyobserver\n */\n\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Observer for events connected with pressing keyboard keys.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class KeyObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'keydown', 'keyup' ];\n\t}\n\n\tonDomEvent( domEvt ) {\n\t\tthis.fire( domEvt.type, domEvt, {\n\t\t\tkeyCode: domEvt.keyCode,\n\n\t\t\taltKey: domEvt.altKey,\n\t\t\tctrlKey: domEvt.ctrlKey || domEvt.metaKey,\n\t\t\tshiftKey: domEvt.shiftKey,\n\n\t\t\tget keystroke() {\n\t\t\t\treturn getCode( this );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Fired when a key has been pressed.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keydown\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * Fired when a key has been released.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keyup\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\n * {@link module:engine/view/document~Document#event:keyup}.\n *\n * @class module:engine/view/observer/keyobserver~KeyEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n * @implements module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\n *\n * @readonly\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\n */\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n\t/**\n\t * Creates new FakeSelectionObserver instance.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'keydown', ( eventInfo, data ) => {\n\t\t\tconst selection = document.selection;\n\n\t\t\tif ( selection.isFake && _isArrowKeyCode( data.keyCode ) && this.isEnabled ) {\n\t\t\t\t// Prevents default key down handling - no selection change will occur.\n\t\t\t\tdata.preventDefault();\n\n\t\t\t\tthis._handleSelectionMove( data.keyCode );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n\t * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n\t *\n\t * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n\t * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n\t * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n\t *\n\t * @private\n\t * @param {Number} keyCode\n\t * @fires module:engine/view/document~Document#event:selectionChange\n\t * @fires module:engine/view/document~Document#event:selectionChangeDone\n\t */\n\t_handleSelectionMove( keyCode ) {\n\t\tconst selection = this.document.selection;\n\t\tconst newSelection = new ViewSelection( selection.getRanges(), { backward: selection.isBackward, fake: false } );\n\n\t\t// Left or up arrow pressed - move selection to start.\n\t\tif ( keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup ) {\n\t\t\tnewSelection.setTo( newSelection.getFirstPosition() );\n\t\t}\n\n\t\t// Right or down arrow pressed - move selection to end.\n\t\tif ( keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown ) {\n\t\t\tnewSelection.setTo( newSelection.getLastPosition() );\n\t\t}\n\n\t\tconst data = {\n\t\t\toldSelection: selection,\n\t\t\tnewSelection,\n\t\t\tdomSelection: null\n\t\t};\n\n\t\t// Fire dummy selection change event.\n\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t}\n}\n\n// Checks if one of the arrow keys is pressed.\n//\n// @private\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction _isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\n\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport { debounce } from 'lodash-es';\n\n/**\n * Selection observer class observes selection changes in the document. If selection changes on the document this\n * observer checks if there are any mutations and if DOM selection is different than the\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\n * and DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class SelectionObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Instance of the mutation observer. Selection observer calls\n\t\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n\t\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n\t\t */\n\t\tthis.mutationObserver = view.getObserver( MutationObserver );\n\n\t\t/**\n\t\t * Reference to the view {@link module:engine/view/documentselection~DocumentSelection} object used to compare\n\t\t * new selection with it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#selection\n\t\t */\n\t\tthis.selection = this.document.selection;\n\n\t\t/* eslint-disable max-len */\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n\t\t */\n\t\t/* eslint-enable max-len */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Set of documents which have added \"selectionchange\" listener to avoid adding listener twice to the same\n\t\t * document.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n\t\t */\n\t\tthis._documents = new WeakSet();\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\n\t\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\n\n\t\t/**\n\t\t * Private property to check if the code does not enter infinite loop.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n\t\t */\n\t\tthis._loopbackCounter = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst domDocument = domElement.ownerDocument;\n\n\t\t// Add listener once per each document.\n\t\tif ( this._documents.has( domDocument ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( domDocument, 'selectionchange', () => {\n\t\t\tthis._handleSelectionChange( domDocument );\n\t\t} );\n\n\t\tthis._documents.add( domDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tclearInterval( this._clearInfiniteLoopInterval );\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n\t * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\n\t *\n\t * @private\n\t * @param {Document} domDocument DOM document.\n\t */\n\t_handleSelectionChange( domDocument ) {\n\t\t// Selection is handled when document is not focused but is read-only. This is because in read-only\n\t\t// mode contenteditable is set as false and editor won't receive focus but we still need to know\n\t\t// selection position.\n\t\tif ( !this.isEnabled || ( !this.document.isFocused && !this.document.isReadOnly ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the mutation event will be before selection event on all browsers.\n\t\tthis.mutationObserver.flush();\n\n\t\t// If there were mutations then the view will be re-rendered by the mutation observer and selection\n\t\t// will be updated, so selections will equal and event will not be fired, as expected.\n\t\tconst domSelection = domDocument.defaultView.getSelection();\n\t\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we are not in the infinite loop (#400).\n\t\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\n\t\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\t\tif ( ++this._loopbackCounter > 60 ) {\n\t\t\t// Selection change observer detected an infinite rendering loop.\n\t\t\t// Most probably you try to put the selection in the position which is not allowed\n\t\t\t// by the browser and browser fixes it automatically what causes `selectionchange` event on\n\t\t\t// which a loopback through a model tries to re-render the wrong selection and again.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Selection change observer detected an infinite rendering loop.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.selection.isSimilar( newViewSelection ) ) {\n\t\t\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n\t\t\t// Just re-render it, no need to fire any events, etc.\n\t\t\tthis.view.forceRender();\n\t\t} else {\n\t\t\tconst data = {\n\t\t\t\toldSelection: this.selection,\n\t\t\t\tnewSelection: newViewSelection,\n\t\t\t\tdomSelection\n\t\t\t};\n\n\t\t\t// Prepare data for new selection and fire appropriate events.\n\t\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t\t}\n\t}\n\n\t/**\n\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n\t *\n\t * @protected\n\t */\n\t_clearInfiniteLoop() {\n\t\tthis._loopbackCounter = 0;\n\t}\n}\n\n/**\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'focus', 'blur' ];\n\t\tthis.useCapture = true;\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'focus', () => {\n\t\t\tdocument.isFocused = true;\n\n\t\t\t// Unfortunately native `selectionchange` event is fired asynchronously.\n\t\t\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n\t\t\t// overwrite new DOM selection with selection from the view.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n\t\t\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\t\t\tthis._renderTimeoutId = setTimeout( () => view.forceRender(), 50 );\n\t\t} );\n\n\t\tdocument.on( 'blur', ( evt, data ) => {\n\t\t\tconst selectedEditable = document.selection.editableElement;\n\n\t\t\tif ( selectedEditable === null || selectedEditable === data.target ) {\n\t\t\t\tdocument.isFocused = false;\n\n\t\t\t\t// Re-render the document to update view elements.\n\t\t\t\tview.forceRender();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_renderTimeoutId\n\t\t */\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._renderTimeoutId ) {\n\t\t\tclearTimeout( this._renderTimeoutId );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/compositionobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class CompositionObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'compositionstart', 'compositionupdate', 'compositionend' ];\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'compositionstart', () => {\n\t\t\tdocument.isComposing = true;\n\t\t} );\n\n\t\tdocument.on( 'compositionend', () => {\n\t\t\tdocument.isComposing = false;\n\t\t} );\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when composition starts inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionstart\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition is updated inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionupdate\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition ends inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionend\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/inputobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Observer for events connected with data input.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class InputObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'beforeinput' ];\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired before browser inputs (or deletes) some data.\n *\n * This event is available only on browsers which support DOM `beforeinput` event.\n *\n * Introduced by {@link module:engine/view/observer/inputobserver~InputObserver}.\n *\n * Note that because {@link module:engine/view/observer/inputobserver~InputObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/inputobserver~InputObserver\n * @event module:engine/view/document~Document#event:beforeinput\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isrange\n */\n\n/**\n * Checks if the object is a native DOM Range.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isRange( obj ) {\n\treturn Object.prototype.toString.apply( obj ) == '[object Range]';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getborderwidths\n */\n\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param {HTMLElement} element An element which has CSS borders.\n * @returns {Object} An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths( element ) {\n\t// Call getComputedStyle on the window the element document belongs to.\n\tconst style = element.ownerDocument.defaultView.getComputedStyle( element );\n\n\treturn {\n\t\ttop: parseInt( style.borderTopWidth, 10 ),\n\t\tright: parseInt( style.borderRightWidth, 10 ),\n\t\tbottom: parseInt( style.borderBottomWidth, 10 ),\n\t\tleft: parseInt( style.borderLeftWidth, 10 )\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/rect\n */\n\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport getBorderWidths from './getborderwidths';\nimport isText from './istext';\nimport { isElement } from 'lodash-es';\n\nconst rectProperties = [ 'top', 'right', 'bottom', 'left', 'width', 'height' ];\n\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\nexport default class Rect {\n\t/**\n\t * Creates an instance of rect.\n\t *\n\t *\t\t// Rect of an HTMLElement.\n\t *\t\tconst rectA = new Rect( document.body );\n\t *\n\t *\t\t// Rect of a DOM Range.\n\t *\t\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n\t *\n\t *\t\t// Rect of a window (web browser viewport).\n\t *\t\tconst rectC = new Rect( window );\n\t *\n\t *\t\t// Rect out of an object.\n\t *\t\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n\t *\n\t *\t\t// Rect out of another Rect instance.\n\t *\t\tconst rectE = new Rect( rectD );\n\t *\n\t *\t\t// Rect out of a ClientRect.\n\t *\t\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\n\t *\n\t * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n\t * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n\t * to get the inner part of the rect.\n\t *\n\t * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\n\t */\n\tconstructor( source ) {\n\t\tconst isSourceRange = isRange( source );\n\n\t\t/**\n\t\t * The object this rect is for.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\n\t\t */\n\t\tObject.defineProperty( this, '_source', {\n\t\t\t// If the source is a Rect instance, copy it's #_source.\n\t\t\tvalue: source._source || source,\n\t\t\twritable: true,\n\t\t\tenumerable: false\n\t\t} );\n\n\t\tif ( isElement( source ) || isSourceRange ) {\n\t\t\t// The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods. If the source\n\t\t\t// of a rect in an HTML element or a DOM range but it does not belong to any rendered DOM tree, these methods\n\t\t\t// will fail to obtain the geometry and the rect instance makes little sense to the features using it.\n\t\t\t// To get rid of this warning make sure the source passed to the constructor is a descendant of `window.document.body`.\n\t\t\t// @if CK_DEBUG // const sourceNode = isSourceRange ? source.startContainer : source;\n\t\t\t// @if CK_DEBUG // if ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n\t\t\t// @if CK_DEBUG // \tconsole.warn(\n\t\t\t// @if CK_DEBUG // \t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n\t\t\t// @if CK_DEBUG // \t\t{ source } );\n\t\t\t// @if CK_DEBUG // }\n\n\t\t\tif ( isSourceRange ) {\n\t\t\t\tcopyRectProperties( this, Rect.getDomRangeRects( source )[ 0 ] );\n\t\t\t} else {\n\t\t\t\tcopyRectProperties( this, source.getBoundingClientRect() );\n\t\t\t}\n\t\t} else if ( isWindow( source ) ) {\n\t\t\tconst { innerWidth, innerHeight } = source;\n\n\t\t\tcopyRectProperties( this, {\n\t\t\t\ttop: 0,\n\t\t\t\tright: innerWidth,\n\t\t\t\tbottom: innerHeight,\n\t\t\t\tleft: 0,\n\t\t\t\twidth: innerWidth,\n\t\t\t\theight: innerHeight\n\t\t\t} );\n\t\t} else {\n\t\t\tcopyRectProperties( this, source );\n\t\t}\n\n\t\t/**\n\t\t * The \"top\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #top\n\t\t */\n\n\t\t/**\n\t\t * The \"right\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #right\n\t\t */\n\n\t\t/**\n\t\t * The \"bottom\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #bottom\n\t\t */\n\n\t\t/**\n\t\t * The \"left\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #left\n\t\t */\n\n\t\t/**\n\t\t * The \"width\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #width\n\t\t */\n\n\t\t/**\n\t\t * The \"height\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #height\n\t\t */\n\t}\n\n\t/**\n\t * Returns a clone of the rect.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A cloned rect.\n\t */\n\tclone() {\n\t\treturn new Rect( this );\n\t}\n\n\t/**\n\t * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n\t *\n\t * @param {Number} x Desired horizontal location.\n\t * @param {Number} y Desired vertical location.\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveTo( x, y ) {\n\t\tthis.top = y;\n\t\tthis.right = x + this.width;\n\t\tthis.bottom = y + this.height;\n\t\tthis.left = x;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the rect in–place by a dedicated offset.\n\t *\n\t * @param {Number} x A horizontal offset.\n\t * @param {Number} y A vertical offset\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveBy( x, y ) {\n\t\tthis.top += y;\n\t\tthis.right += x;\n\t\tthis.left += x;\n\t\tthis.bottom += y;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a new rect a a result of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {module:utils/dom/rect~Rect}\n\t */\n\tgetIntersection( anotherRect ) {\n\t\tconst rect = {\n\t\t\ttop: Math.max( this.top, anotherRect.top ),\n\t\t\tright: Math.min( this.right, anotherRect.right ),\n\t\t\tbottom: Math.min( this.bottom, anotherRect.bottom ),\n\t\t\tleft: Math.max( this.left, anotherRect.left )\n\t\t};\n\n\t\trect.width = rect.right - rect.left;\n\t\trect.height = rect.bottom - rect.top;\n\n\t\tif ( rect.width < 0 || rect.height < 0 ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new Rect( rect );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect [description]\n\t * @returns {Number} Area of intersection.\n\t */\n\tgetIntersectionArea( anotherRect ) {\n\t\tconst rect = this.getIntersection( anotherRect );\n\n\t\tif ( rect ) {\n\t\t\treturn rect.getArea();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of the rect.\n\t *\n\t * @returns {Number}\n\t */\n\tgetArea() {\n\t\treturn this.width * this.height;\n\t}\n\n\t/**\n\t * Returns a new rect, a part of the original rect, which is actually visible to the user,\n\t * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n\t * other than `\"visible\"`.\n\t *\n\t * If there's no such visible rect, which is when the rect is limited by one or many of\n\t * the ancestors, `null` is returned.\n\t *\n\t * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\n\t */\n\tgetVisible() {\n\t\tconst source = this._source;\n\t\tlet visibleRect = this.clone();\n\n\t\t// There's no ancestor to crop <body> with the overflow.\n\t\tif ( !isBody( source ) ) {\n\t\t\tlet parent = source.parentNode || source.commonAncestorContainer;\n\n\t\t\t// Check the ancestors all the way up to the <body>.\n\t\t\twhile ( parent && !isBody( parent ) ) {\n\t\t\t\tconst parentRect = new Rect( parent );\n\t\t\t\tconst intersectionRect = visibleRect.getIntersection( parentRect );\n\n\t\t\t\tif ( intersectionRect ) {\n\t\t\t\t\tif ( intersectionRect.getArea() < visibleRect.getArea() ) {\n\t\t\t\t\t\t// Reduce the visible rect to the intersection.\n\t\t\t\t\t\tvisibleRect = intersectionRect;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// There's no intersection, the rect is completely invisible.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn visibleRect;\n\t}\n\n\t/**\n\t * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n\t * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n\t * instances.\n\t *\n\t * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\n\t * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\n\t */\n\tisEqual( anotherRect ) {\n\t\tfor ( const prop of rectProperties ) {\n\t\t\tif ( this[ prop ] !== anotherRect[ prop ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether a rect fully contains another rect instance.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {Boolean} `true` if contains, `false` otherwise.\n\t */\n\tcontains( anotherRect ) {\n\t\tconst intersectRect = this.getIntersection( anotherRect );\n\n\t\treturn !!( intersectRect && intersectRect.isEqual( anotherRect ) );\n\t}\n\n\t/**\n\t * Excludes scrollbars and CSS borders from the rect.\n\t *\n\t * * Borders are removed when {@link #_source} is an HTML element.\n\t * * Scrollbars are excluded from HTML elements and the `window`.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\n\t */\n\texcludeScrollbarsAndBorders() {\n\t\tconst source = this._source;\n\t\tlet scrollBarWidth, scrollBarHeight;\n\n\t\tif ( isWindow( source ) ) {\n\t\t\tscrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n\t\t\tscrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n\t\t} else {\n\t\t\tconst borderWidths = getBorderWidths( this._source );\n\n\t\t\tscrollBarWidth = source.offsetWidth - source.clientWidth;\n\t\t\tscrollBarHeight = source.offsetHeight - source.clientHeight;\n\n\t\t\tthis.moveBy( borderWidths.left, borderWidths.top );\n\t\t}\n\n\t\t// Assuming LTR scrollbars. TODO: RTL.\n\t\tthis.width -= scrollBarWidth;\n\t\tthis.right -= scrollBarWidth;\n\n\t\tthis.height -= scrollBarHeight;\n\t\tthis.bottom -= scrollBarHeight;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an array of rects of the given native DOM Range.\n\t *\n\t * @param {Range} range A native DOM range.\n\t * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\n\t */\n\tstatic getDomRangeRects( range ) {\n\t\tconst rects = [];\n\t\t// Safari does not iterate over ClientRectList using for...of loop.\n\t\tconst clientRects = Array.from( range.getClientRects() );\n\n\t\tif ( clientRects.length ) {\n\t\t\tfor ( const rect of clientRects ) {\n\t\t\t\trects.push( new Rect( rect ) );\n\t\t\t}\n\t\t}\n\t\t// If there's no client rects for the Range, use parent container's bounding rect\n\t\t// instead and adjust rect's width to simulate the actual geometry of such range.\n\t\t// https://github.com/ckeditor/ckeditor5-utils/issues/153\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/317\n\t\telse {\n\t\t\tlet startContainer = range.startContainer;\n\n\t\t\tif ( isText( startContainer ) ) {\n\t\t\t\tstartContainer = startContainer.parentNode;\n\t\t\t}\n\n\t\t\tconst rect = new Rect( startContainer.getBoundingClientRect() );\n\t\t\trect.right = rect.left;\n\t\t\trect.width = 0;\n\n\t\t\trects.push( rect );\n\t\t}\n\n\t\treturn rects;\n\t}\n}\n\n// Acquires all the rect properties from the passed source.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} rect\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\nfunction copyRectProperties( rect, source ) {\n\tfor ( const p of rectProperties ) {\n\t\trect[ p ] = source[ p ];\n\t}\n}\n\n// Checks if provided object is a <body> HTML element.\n//\n// @private\n// @param {HTMLElement|Range} elementOrRange\n// @returns {Boolean}\nfunction isBody( elementOrRange ) {\n\tif ( !isElement( elementOrRange ) ) {\n\t\treturn false;\n\t}\n\n\treturn elementOrRange === elementOrRange.ownerDocument.body;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/scroll\n */\n\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\n\nconst utils = {};\n\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n */\nexport function scrollViewportToShowTarget( { target, viewportOffset = 0 } ) {\n\tconst targetWindow = getWindow( target );\n\tlet currentWindow = targetWindow;\n\tlet currentFrame = null;\n\n\t// Iterate over all windows, starting from target's parent window up to window#top.\n\twhile ( currentWindow ) {\n\t\tlet firstAncestorToScroll;\n\n\t\t// Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n\t\t// settled down, the algorithm can eventually scroll the viewport of the current window.\n\t\t//\n\t\t// Note: If the current window is target's **original** window (e.g. the first one),\n\t\t// start scrolling the closest parent of the target. If not, scroll the closest parent\n\t\t// of an iframe that resides in the current window.\n\t\tif ( currentWindow == targetWindow ) {\n\t\t\tfirstAncestorToScroll = getParentElement( target );\n\t\t} else {\n\t\t\tfirstAncestorToScroll = getParentElement( currentFrame );\n\t\t}\n\n\t\t// Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n\t\tscrollAncestorsToShowRect( firstAncestorToScroll, () => {\n\t\t\t// Note: If the target does not belong to the current window **directly**,\n\t\t\t// i.e. it resides in an iframe belonging to the window, obtain the target's rect\n\t\t\t// in the coordinates of the current window. By default, a Rect returns geometry\n\t\t\t// relative to the current window's viewport. To make it work in a parent window,\n\t\t\t// it must be shifted.\n\t\t\treturn getRectRelativeToWindow( target, currentWindow );\n\t\t} );\n\n\t\t// Obtain the rect of the target after it has been scrolled within its ancestors.\n\t\t// It's time to scroll the viewport.\n\t\tconst targetRect = getRectRelativeToWindow( target, currentWindow );\n\n\t\tscrollWindowToShowRect( currentWindow, targetRect, viewportOffset );\n\n\t\tif ( currentWindow.parent != currentWindow ) {\n\t\t\t// Keep the reference to the <iframe> element the \"previous current window\" was\n\t\t\t// rendered within. It will be useful to re–calculate the rect of the target\n\t\t\t// in the parent window's relative geometry. The target's rect must be shifted\n\t\t\t// by it's iframe's position.\n\t\t\tcurrentFrame = currentWindow.frameElement;\n\t\t\tcurrentWindow = currentWindow.parent;\n\n\t\t\t// If the current window has some parent but frameElement is inaccessible, then they have\n\t\t\t// different domains/ports and, due to security reasons, accessing and scrolling\n\t\t\t// the parent window won't be possible.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/930.\n\t\t\tif ( !currentFrame ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentWindow = null;\n\t\t}\n\t}\n}\n\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\n */\nexport function scrollAncestorsToShowTarget( target ) {\n\tconst targetParent = getParentElement( target );\n\n\tscrollAncestorsToShowRect( targetParent, () => {\n\t\treturn new Rect( target );\n\t} );\n}\n\n// TODO: Using a property value shorthand in the top of the file\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\nObject.assign( utils, {\n\tscrollViewportToShowTarget,\n\tscrollAncestorsToShowTarget\n} );\n\n// Makes a given rect visible within its parent window.\n//\n// Note: Avoid the situation where the caret is still in the viewport, but totally\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\n// and it all would look like the caret visually moved up/down:\n//\n// 1.\n//\t\t| foo[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// 2. *paste*\n// 3.\n//\t\t|\n//\t\t|\n//\t\t+-foo-----------------------------...\n//\t\t  bar[]                              <--- caret below viewport, scrolling...\n//\n// 4. *scrolling*\n// 5.\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]                              <--- caret precisely at the edge\n//\t\t+---------------------------------...\n//\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n// no twitching – it's a purely visual improvement:\n//\n// 5. (after fix)\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// @private\n// @param {Window} window A window which is scrolled to reveal the rect.\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\nfunction scrollWindowToShowRect( window, rect, viewportOffset ) {\n\tconst targetShiftedDownRect = rect.clone().moveBy( 0, viewportOffset );\n\tconst targetShiftedUpRect = rect.clone().moveBy( 0, -viewportOffset );\n\tconst viewportRect = new Rect( window ).excludeScrollbarsAndBorders();\n\n\tconst rects = [ targetShiftedUpRect, targetShiftedDownRect ];\n\n\tif ( !rects.every( rect => viewportRect.contains( rect ) ) ) {\n\t\tlet { scrollX, scrollY } = window;\n\n\t\tif ( isAbove( targetShiftedUpRect, viewportRect ) ) {\n\t\t\tscrollY -= viewportRect.top - rect.top + viewportOffset;\n\t\t} else if ( isBelow( targetShiftedDownRect, viewportRect ) ) {\n\t\t\tscrollY += rect.bottom - viewportRect.bottom + viewportOffset;\n\t\t}\n\n\t\t// TODO: Web browsers scroll natively to place the target in the middle\n\t\t// of the viewport. It's not a very popular case, though.\n\t\tif ( isLeftOf( rect, viewportRect ) ) {\n\t\t\tscrollX -= viewportRect.left - rect.left + viewportOffset;\n\t\t} else if ( isRightOf( rect, viewportRect ) ) {\n\t\t\tscrollX += rect.right - viewportRect.right + viewportOffset;\n\t\t}\n\n\t\twindow.scrollTo( scrollX, scrollY );\n\t}\n}\n\n// Recursively scrolls element ancestors to visually reveal a rect.\n//\n// @private\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\nfunction scrollAncestorsToShowRect( parent, getRect ) {\n\tconst parentWindow = getWindow( parent );\n\tlet parentRect, targetRect;\n\n\twhile ( parent != parentWindow.document.body ) {\n\t\ttargetRect = getRect();\n\t\tparentRect = new Rect( parent ).excludeScrollbarsAndBorders();\n\n\t\tif ( !parentRect.contains( targetRect ) ) {\n\t\t\tif ( isAbove( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop -= parentRect.top - targetRect.top;\n\t\t\t} else if ( isBelow( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop += targetRect.bottom - parentRect.bottom;\n\t\t\t}\n\n\t\t\tif ( isLeftOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft -= parentRect.left - targetRect.left;\n\t\t\t} else if ( isRightOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft += targetRect.right - parentRect.right;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parentNode;\n\t}\n}\n\n// Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isBelow( firstRect, secondRect ) {\n\treturn firstRect.bottom > secondRect.bottom;\n}\n\n// Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isAbove( firstRect, secondRect ) {\n\treturn firstRect.top < secondRect.top;\n}\n\n// Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isLeftOf( firstRect, secondRect ) {\n\treturn firstRect.left < secondRect.left;\n}\n\n// Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isRightOf( firstRect, secondRect ) {\n\treturn firstRect.right > secondRect.right;\n}\n\n// Returns the closest window of an element or range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {Window}\nfunction getWindow( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\treturn elementOrRange.startContainer.ownerDocument.defaultView;\n\t} else {\n\t\treturn elementOrRange.ownerDocument.defaultView;\n\t}\n}\n\n// Returns the closest parent of an element or DOM range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {HTMLelement}\nfunction getParentElement( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\tlet parent = elementOrRange.commonAncestorContainer;\n\n\t\t// If a Range is attached to the Text, use the closest element ancestor.\n\t\tif ( isText( parent ) ) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn parent;\n\t} else {\n\t\treturn elementOrRange.parentNode;\n\t}\n}\n\n// Returns the rect of an element or range residing in an iframe.\n// The result rect is relative to the geometry of the passed window instance.\n//\n// @private\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\n// @param {Window} relativeWindow A window the rect should be relative to.\n// @returns {module:utils/dom/rect~Rect}\nfunction getRectRelativeToWindow( target, relativeWindow ) {\n\tconst targetWindow = getWindow( target );\n\tconst rect = new Rect( target );\n\n\tif ( targetWindow === relativeWindow ) {\n\t\treturn rect;\n\t} else {\n\t\tlet currentWindow = targetWindow;\n\n\t\twhile ( currentWindow != relativeWindow ) {\n\t\t\tconst frame = currentWindow.frameElement;\n\t\t\tconst frameRect = new Rect( frame ).excludeScrollbarsAndBorders();\n\n\t\t\trect.moveBy( frameRect.left, frameRect.top );\n\n\t\t\tcurrentWindow = currentWindow.parent;\n\t\t}\n\t}\n\n\treturn rect;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\tconstructor() {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = new Document();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n\t\t * {@link module:engine/view/view~View#_renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter();\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Map.<String, HTMLElement>}\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRenderingInProgress\n\t\t */\n\t\tthis.set( 'isRenderingInProgress', false );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n\t\t * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n\t\t * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n\t\t * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap.<HTMLElement,Object>}\n\t\t */\n\t\tthis._initialDomRootAttributes = new WeakMap();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * Internal flag that disables rendering when there are no changes since the last rendering.\n\t\t * It stores information about changed selection and changed elements from attached document roots.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasChangedSinceTheLastRendering = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method} callbacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/downcastwriter~DowncastWriter}\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\tif ( env.isAndroid ) {\n\t\t\tthis.addObserver( InputObserver );\n\t\t}\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\n\t\t\t// Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\t\t\tthis._hasChangedSinceTheLastRendering = false;\n\t\t} );\n\n\t\t// Listen to the document selection changes directly.\n\t\tthis.listenTo( this.document.selection, 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n\t * with the view what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tconst initialDomRootAttributes = {};\n\n\t\t// 1. Copy and cache the attributes to remember the state of the element before attaching.\n\t\t//    The cached attributes will be restored in detachDomRoot() so the element goes to the\n\t\t//    clean state as if the editing view never used it.\n\t\t// 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n\t\t//    The editing view takes over the attribute management completely because various\n\t\t//    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n\t\t//    cannot be managed by the engine and the UI library at the same time.\n\t\tfor ( const { name, value } of Array.from( domRoot.attributes ) ) {\n\t\t\tinitialDomRootAttributes[ name ] = value;\n\n\t\t\t// Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n\t\t\t// and its descendants could have already set some using the writer.addClass() on the view\n\t\t\t// document root. They haven't been rendered yet so they are not present in the DOM root.\n\t\t\t// Using writer.setAttribute( 'class', ... ) would override them completely.\n\t\t\tif ( name === 'class' ) {\n\t\t\t\tthis._writer.addClass( value.split( ' ' ), viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.setAttribute( name, value, viewRoot );\n\t\t\t}\n\t\t}\n\n\t\tthis._initialDomRootAttributes.set( domRoot, initialDomRootAttributes );\n\n\t\tconst updateContenteditableAttribute = () => {\n\t\t\tthis._writer.setAttribute( 'contenteditable', !viewRoot.isReadOnly, viewRoot );\n\n\t\t\tif ( viewRoot.isReadOnly ) {\n\t\t\t\tthis._writer.addClass( 'ck-read-only', viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.removeClass( 'ck-read-only', viewRoot );\n\t\t\t}\n\t\t};\n\n\t\t// Set initial value.\n\t\tupdateContenteditableAttribute();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.markToSync( 'attributes', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\t\tviewRoot.on( 'change:isReadOnly', () => this.change( updateContenteditableAttribute ) );\n\n\t\tviewRoot.on( 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Detaches a DOM root element from the view element and restores its attributes to the state before\n\t * {@link #attachDomRoot `attachDomRoot()`}.\n\t *\n\t * @param {String} name Name of the root to detach.\n\t */\n\tdetachDomRoot( name ) {\n\t\tconst domRoot = this.domRoots.get( name );\n\n\t\t// Remove all root attributes so the DOM element is \"bare\".\n\t\tArray.from( domRoot.attributes ).forEach( ( { name } ) => domRoot.removeAttribute( name ) );\n\n\t\tconst initialDomRootAttributes = this._initialDomRootAttributes.get( domRoot );\n\n\t\t// Revert all view root attributes back to the state before attachDomRoot was called.\n\t\tfor ( const attribute in initialDomRootAttributes ) {\n\t\t\tdomRoot.setAttribute( attribute, initialDomRootAttributes[ attribute ] );\n\t\t}\n\n\t\tthis.domRoots.delete( name );\n\t\tthis.domConverter.unbindDomElement( domRoot );\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.forceRender();\n\t\t\t} else {\n\t\t\t\t// Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t// Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t// when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t//\n\t\t\t\t// @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n\t * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n\t * to nest calls one inside another and still performs a single rendering after all those changes are made.\n\t * It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this.isRenderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #forceRender} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #forceRender} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behavior and inconsistency between the DOM and the view.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\tif ( this._ongoingChange ) {\n\t\t\treturn callback( this._writer );\n\t\t}\n\n\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t// event for all nested calls.\n\t\tthis._ongoingChange = true;\n\t\tconst callbackResult = callback( this._writer );\n\t\tthis._ongoingChange = false;\n\n\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all changes.\n\t\t// Also, we don't need to render anything if there're no changes since last rendering.\n\t\tif ( !this._renderingDisabled && this._hasChangedSinceTheLastRendering ) {\n\t\t\tthis._postFixersInProgress = true;\n\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\tthis._postFixersInProgress = false;\n\n\t\t\tthis.fire( 'render' );\n\t\t}\n\n\t\treturn callbackResult;\n\t}\n\n\t/**\n\t * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n\t * block and the view will automatically check whether it needs to render DOM or not.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\tforceRender() {\n\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.document.destroy();\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n\t * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n\t *\n\t * @protected\n\t * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n\t */\n\t_disableRendering( flag ) {\n\t\tthis._renderingDisabled = flag;\n\n\t\tif ( flag == false ) {\n\t\t\t// Render when you stop blocking rendering.\n\t\t\tthis.change( () => {} );\n\t\t}\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis.isRenderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis.isRenderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/tomap\n */\n\nimport objectToMap from './objecttomap';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n *\t\tmap = toMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n *\t\tmap = toMap( anotherMap );\n *\n * @param {Object|Iterable} data Object or iterable to transform.\n * @returns {Map} Map created from data.\n */\nexport default function toMap( data ) {\n\tif ( isPlainObject( data ) ) {\n\t\treturn objectToMap( data );\n\t} else {\n\t\treturn new Map( data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/node\n */\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node {\n\t/**\n\t * Creates a model node.\n\t *\n\t * This is an abstract class, so this constructor should not be used directly.\n\t *\n\t * @abstract\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( attrs ) {\n\t\t/**\n\t\t * Parent of this node. It could be {@link module:engine/model/element~Element}\n\t\t * or {@link module:engine/model/documentfragment~DocumentFragment}.\n\t\t * Equals to `null` if the node has no parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * Attributes set on this node.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/node~Node#_attrs\n\t\t */\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Index of this node in it's parent or `null` if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n\t * of all it's previous siblings. Equals to `null` if node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget startOffset() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildStartOffset( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n\t * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n\t * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n\t * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n\t * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n\t * Equals to `null` if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget endOffset() {\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.startOffset + this.offsetSize;\n\t}\n\n\t/**\n\t * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n\t * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\n\t * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\t// This is a top element of a sub-tree.\n\t\tif ( this.root == this ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Root may be `DocumentFragment` which does not have document property.\n\t\treturn this.root.document || null;\n\t}\n\n\t/**\n\t * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n\t * create {@link module:engine/model/position~Position Position} instance.\n\t *\n\t *\t\tconst abc = new Text( 'abc' );\n\t *\t\tconst foo = new Text( 'foo' );\n\t *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n\t *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.startOffset );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/model/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Checks if the node has an attribute with given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Converts `Node` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = {};\n\n\t\t// Serializes attributes to the object.\n\t\t// attributes = { a: 'foo', b: 1, c: true }.\n\t\tif ( this._attrs.size ) {\n\t\t\tjson.attributes = Array.from( this._attrs ).reduce( ( result, attr ) => {\n\t\t\t\tresult[ attr[ 0 ] ] = attr[ 1 ];\n\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing model objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/model/documentfragment~DocumentFragment} or a {@link module:engine/model/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of view objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tmodelElement.is( 'model:element' ); // -> true\n\t *\t\tmodelElement.is( 'view:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timageElement.is( 'image' ); // -> true\n\t *\t\timageElement.is( 'element', 'image' ); // -> same as above\n\t *\t\timageElement.is( 'model:element', 'image' ); // -> same as above, but more precise\n\t *\n\t * The list of model objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/model/node~Node#is `Node#is()`}\n\t * * {@link module:engine/model/text~Text#is `Text#is()`}\n\t * * {@link module:engine/model/element~Element#is `Element#is()`}\n\t * * {@link module:engine/model/rootelement~RootElement#is `RootElement#is()`}\n\t * * {@link module:engine/model/position~Position#is `Position#is()`}\n\t * * {@link module:engine/model/liveposition~LivePosition#is `LivePosition#is()`}\n\t * * {@link module:engine/model/range~Range#is `Range#is()`}\n\t * * {@link module:engine/model/liverange~LiveRange#is `LiveRange#is()`}\n\t * * {@link module:engine/model/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/model/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/model/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/model/markercollection~Marker#is `Marker#is()`}\n\t * * {@link module:engine/model/textproxy~TextProxy#is `TextProxy#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'model:node';\n\t}\n\n\t/**\n\t * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n\t */\n\t_clone() {\n\t\treturn new Node( this._attrs );\n\t}\n\n\t/**\n\t * Removes this node from it's parent.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._attrs.set( key, value );\n\t}\n\n\t/**\n\t * Removes all attributes from the node and sets given attributes.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttributes\n\t * @protected\n\t * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\t_setAttributesTo( attrs ) {\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#removeAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to remove.\n\t * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n\t */\n\t_removeAttribute( key ) {\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Removes all attributes from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#clearAttributes\n\t * @protected\n\t */\n\t_clearAttributes() {\n\t\tthis._attrs.clear();\n\t}\n}\n\n/**\n * The node's parent does not contain this node.\n *\n * This error may be thrown from corrupted trees.\n *\n * @error model-node-not-found-in-parent\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'model:text' || super.is( type );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n\t * starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Text node which part is represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/text~Text}\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `offsetInText` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `length` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-length: Given length value is incorrect.', this );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset at which this text proxy starts in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#startOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget startOffset() {\n\t\treturn this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n\t}\n\n\t/**\n\t * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n\t *\n\t * @see module:engine/model/node~Node#offsetSize\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Offset at which this text proxy ends in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#endOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget endOffset() {\n\t\treturn this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.offsetSize !== this.textNode.offsetSize;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\n\t * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttextProxy.is( 'textProxy' ); // -> true\n\t *\t\ttextProxy.is( 'model:textProxy' ); // -> true\n\t *\n\t *\t\ttextProxy.is( 'view:textProxy' ); // -> false\n\t *\t\ttextProxy.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy' || type == 'model:textProxy';\n\t}\n\n\t/**\n\t * Gets path to this text proxy.\n\t *\n\t * @see module:engine/model/node~Node#getPath\n\t * @returns {Array.<Number>}\n\t */\n\tgetPath() {\n\t\tconst path = this.textNode.getPath();\n\n\t\tif ( path.length > 0 ) {\n\t\t\tpath[ path.length - 1 ] += this.offsetInText;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Checks if this text proxy has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this.textNode.hasAttribute( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this.textNode.getAttribute( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n\t * items. First one is attribute key and second is attribute value.\n\t *\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this.textNode.getAttributes();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this.textNode.getAttributeKeys();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.', this );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\toffset,\n\t\t\t\t\tnodeList: this\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/element\n */\n\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a model element.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n\t *\n\t * @protected\n\t * @param {String} name Element's name.\n\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * One or more nodes to be inserted as children of created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Element name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/model/element~Element#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * List of children nodes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Number of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'model:element' ); // -> true\n\t *\t\telement.is( 'model:node' ); // -> true\n\t *\n\t *\t\telement.is( 'view:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'image' ); // -> true if this is an <image> element\n\t *\t\telement.is( 'element', 'image' ); // -> same as above\n\t *\t\ttext.is( 'image' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^model:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this element's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's index in this element.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst divElement = new Element( [ textNode, pElement ] );\n\t *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number}\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n\t *\n\t * @returns {Object} `Element` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.name = this.name;\n\n\t\tif ( this._children.length > 0 ) {\n\t\t\tjson.children = [];\n\n\t\t\tfor ( const node of this._children ) {\n\t\t\t\tjson.children.push( node.toJSON() );\n\t\t\t}\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any child.\n\t */\n\t_clone( deep = false ) {\n\t\tconst children = deep ? Array.from( this._children ).map( node => node._clone( true ) ) : null;\n\n\t\treturn new Element( this.name, this.getAttributes(), children );\n\t}\n\n\t/**\n\t * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n\t *\n\t * @see module:engine/model/writer~Writer#append\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n\t */\n\t_appendChild( nodes ) {\n\t\tthis._insertChild( this.childCount, nodes );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this element.\n\t *\n\t * @see module:engine/model/writer~Writer#insert\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index and sets\n\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `Element` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `Element`.\n\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tlet children = null;\n\n\t\tif ( json.children ) {\n\t\t\tchildren = [];\n\n\t\t\tfor ( const child of json.children ) {\n\t\t\t\tif ( child.name ) {\n\t\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Element( json.name, json.attributes, children );\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/treewalker\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Element from './element';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} [options={}] Object with configuration.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\n\t * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\n\t * {@link module:engine/model/textproxy~TextProxy} (`false`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n\t\t\t *\n\t\t\t * @error model-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.',\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tconst direction = options.direction || 'forward';\n\n\t\tif ( direction != 'forward' && direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\toptions,\n\t\t\t\t{ direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. This is always static position, even if the initial position was a\n\t\t * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n\t\t * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n\t\t * is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = options.startPosition.clone();\n\t\t} else {\n\t\t\tthis.position = Position._createAt( this.boundaries[ this.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t// Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Flag indicating whether all consecutive characters with the same attributes should be\n\t\t * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\n\t\t * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\n\t\t * be returned once, while if the option is `false` they might be returned twice:\n\t\t * for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\n\t\t/**\n\t\t * Parent of the most recently visited node. Cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/treewalker~TreeWalker#_visitedParent\n\t\t */\n\t\tthis._visitedParent = this.position.parent;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t * \t\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n\t * \t\twalker.skip( () => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition, prevVisitedParent;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\t\t\tprevVisitedParent = this._visitedParent;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t\tthis._visitedParent = prevVisitedParent;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.maxOffset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tconst node = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\t// Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n\t\t\t\tposition.path.push( 0 );\n\t\t\t\tthis._visitedParent = node;\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.endOffset;\n\n\t\t\t\tif ( this._boundaryEndParent == parent && this.boundaries.end.offset < offset ) {\n\t\t\t\t\toffset = this.boundaries.end.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = offset - position.offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode, charactersCount );\n\n\t\t\tposition.offset += charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tposition.offset++;\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position\n\t\tconst node = position.textNode ? position.textNode : position.nodeBefore;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tposition.offset--;\n\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition.path.push( node.maxOffset );\n\t\t\t\tthis.position = position;\n\t\t\t\tthis._visitedParent = node;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.startOffset;\n\n\t\t\t\tif ( this._boundaryStartParent == parent && this.boundaries.start.offset > offset ) {\n\t\t\t\t\toffset = this.boundaries.start.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = position.offset - offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode - charactersCount, charactersCount );\n\n\t\t\tposition.offset -= charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\treturn formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n}\n\nfunction formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\treturn {\n\t\tdone: false,\n\t\tvalue: {\n\t\t\ttype,\n\t\t\titem,\n\t\t\tpreviousPosition,\n\t\t\tnextPosition,\n\t\t\tlength\n\t\t}\n\t};\n}\n\n/**\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\n *\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\n *\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\nimport { last } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-root-invalid: Position root invalid.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect-format\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-path-incorrect-format: Position path must be an array with at least one item.',\n\t\t\t\troot,\n\t\t\t\t{ path }\n\t\t\t);\n\t\t}\n\n\t\t// Normalize the root and path (if element was passed).\n\t\tpath = root.getPath().concat( path );\n\t\troot = root.root;\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn last( this.path );\n\t}\n\n\t/**\n\t * @param {Number} newOffset\n\t */\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\n\t\t\tif ( !parent ) {\n\t\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t\t}\n\t\t}\n\n\t\tif ( parent.is( 'text' ) ) {\n\t\t\t/**\n\t\t\t * The position's path is incorrect. This means that a position does not point to\n\t\t\t * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n\t\t\t *\n\t\t\t * **Note**: Unlike DOM and view positions, in the model, the\n\t\t\t * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n\t\t\t * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element where\n\t\t\t * this position points.\n\t\t\t *\n\t\t\t * Read more about model positions and offsets in\n\t\t\t * the {@glink framework/guides/architecture/editing-engine#indexes-and-offsets Editing engine architecture guide}.\n\t\t\t *\n\t\t\t * @error position-incorrect-path\n\t\t\t * @param {module:engine/model/position~Position} position The incorrect position.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\tconst node = this.parent.getChild( this.index );\n\n\t\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {Node}\n\t */\n\tget nodeBefore() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn this.path[ result ] < otherPosition.path[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = this.clone();\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position._createAt( this );\n\t\t\t\tright = Position._createAt( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position._createAt( otherPosition );\n\t\t\t\tright = Position._createAt( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'model:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'view:position' ); // -> false\n\t *\t\tposition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'model:position';\n\t}\n\n\t/**\n\t * Checks if two positions are in the same parent.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position Position to compare with.\n\t * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n\t */\n\thasSameParentAs( position ) {\n\t\tif ( this.root !== position.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisParentPath = this.getParentPath();\n\t\tconst posParentPath = position.getParentPath();\n\n\t\treturn compareArrays( thisParentPath, posParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Returns a copy of this position that is transformed by given `operation`.\n\t *\n\t * The new position's parameters are updated accordingly to the effect of the `operation`.\n\t *\n\t * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n\t * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tlet result;\n\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\tresult = this._getTransformedByInsertOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\tresult = this._getTransformedByMoveOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'split':\n\t\t\t\tresult = this._getTransformedBySplitOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'merge':\n\t\t\t\tresult = this._getTransformedByMergeOperation( operation );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = Position._createAt( this );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by an insert operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByInsertOperation( operation ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a move operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMoveOperation( operation ) {\n\t\treturn this._getTransformedByMove( operation.sourcePosition, operation.targetPosition, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a split operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\n\t\tconst isContained = movedRange.containsPosition( this ) ||\n\t\t\t( movedRange.start.isEqual( this ) && this.stickiness == 'toNext' );\n\n\t\tif ( isContained ) {\n\t\t\treturn this._getCombined( operation.splitPosition, operation.moveTargetPosition );\n\t\t} else {\n\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\treturn this._getTransformedByMove( operation.graveyardPosition, operation.insertionPosition, 1 );\n\t\t\t} else {\n\t\t\t\treturn this._getTransformedByInsertion( operation.insertionPosition, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by merge operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\t\tconst isContained = movedRange.containsPosition( this ) || movedRange.start.isEqual( this );\n\n\t\tlet pos;\n\n\t\tif ( isContained ) {\n\t\t\tpos = this._getCombined( operation.sourcePosition, operation.targetPosition );\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Above happens during OT when the merged element is moved before the merged-to element.\n\t\t\t\tpos = pos._getTransformedByDeletion( operation.deletionPosition, 1 );\n\t\t\t}\n\t\t} else if ( this.isEqual( operation.deletionPosition ) ) {\n\t\t\tpos = Position._createAt( operation.deletionPosition );\n\t\t} else {\n\t\t\tpos = this._getTransformedByMove( operation.deletionPosition, operation.graveyardPosition, 1 );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && this.stickiness != 'toPrevious' ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\t// Update target position, as it could be affected by nodes removal.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( sourcePosition.isEqual( targetPosition ) ) {\n\t\t\t// If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n\t\t\treturn Position._createAt( this );\n\t\t}\n\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tconst transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tconst isMoved = transformed === null ||\n\t\t\t( sourcePosition.isEqual( this ) && this.stickiness == 'toNext' ) ||\n\t\t\t( sourcePosition.getShiftedBy( howMany ).isEqual( this ) && this.stickiness == 'toPrevious' );\n\n\t\tif ( isMoved ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\treturn this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t//\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\treturn transformed._getTransformedByInsertion( targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n\t *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position._createAt( target );\n\t\tcombined.stickiness = this.stickiness;\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\troot: this.root.toJSON(),\n\t\t\tpath: Array.from( this.path ),\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new position that is equal to current position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.root, this.path, this.stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/position~Position._createBefore},\n\t * * {@link module:engine/model/position~Position._createAfter}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @protected\n\t */\n\tstatic _createAt( itemOrPosition, offset, stickiness = 'toNone' ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new Position( itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node, stickiness );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node, stickiness );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a model item.\n\t\t\t\t *\n\t\t\t\t * @error model-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-createPositionAt-offset-required: ' +\n\t\t\t\t\t'Model#createPositionAt() requires the offset when the first parameter is a model item.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !node.is( 'element' ) && !node.is( 'documentFragment' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t\t *\n\t\t\t\t * @error model-position-parent-incorrect\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-position-parent-incorrect: Position parent have to be a element or document fragment.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst path = node.getPath();\n\n\t\t\tpath.push( offset );\n\n\t\t\treturn new this( node.root, path, stickiness );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createAfter( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-after-root: You cannot make a position after root.',\n\t\t\t\t[ this, item ],\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.endOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createBefore( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-before-root: You cannot make a position before root.',\n\t\t\t\titem,\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.startOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\tconst pos = new Position( doc.graveyard, json.path );\n\t\t\tpos.stickiness = json.stickiness;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\n\t\t\t\tdoc,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new Position( doc.getRoot( json.root ), json.path, json.stickiness );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.start = Position._createAt( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.end = end ? Position._createAt( end ) : Position._createAt( start );\n\n\t\t// If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n\t\t// In other case, make the boundaries stick to the \"inside\" of the range.\n\t\tthis.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n\t\tthis.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\n\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n\t *\n\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n\t * and `ignoreElementEnd` option set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is if {@link #start} and\n\t * {@link #end} positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link #start} position and\n\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\tconst startParentPath = this.start.getParentPath();\n\t\tconst endParentPath = this.end.getParentPath();\n\n\t\treturn compareArrays( startParentPath, endParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n\t * in this range,`false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link ~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n\t *\n\t * @param {module:engine/model/item~Item} item Model item to check.\n\t */\n\tcontainsItem( item ) {\n\t\tconst pos = Position._createBefore( item );\n\n\t\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'model:range' ); // -> true\n\t *\n\t *\t\trange.is( 'view:range' ); // -> false\n\t *\t\trange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'model:range';\n\t}\n\n\t/**\n\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n\t * Returned array contains zero, one or two {@link ~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( new Range( this.start, this.end ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n\t *\n\t * See an example of a model structure (`[` and `]` are range boundaries):\n\t *\n\t *\t\troot                                                            root\n\t *\t\t |- element DIV                         DIV             P2              P3             DIV\n\t *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n\t *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n\t *\t\t |   |- element P1\n\t *\t\t |   |   |- \"lorem\"                                              ||\n\t *\t\t |- element P2                                                   ||\n\t *\t\t |   |- \"foo\"                                                    VV\n\t *\t\t |- element P3\n\t *\t\t |   |- \"bar\"                                                   root\n\t *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n\t *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n\t *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n\t *\t\t |   |- element P4\n\t *\t\t |   |   |- \"ipsum\"\n\t *\n\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n\t * We are looking for minimal set of flat ranges that contains the same nodes.\n\t *\n\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n\t *\n\t *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n\t *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n\t *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n\t *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n\t *\n\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n\t * were omitted. Only their parts that were wholly in the range were returned.\n\t *\n\t * **Note:** this method is not returning flat ranges that contain no nodes.\n\t *\n\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n\t */\n\tgetMinimalFlatRanges() {\n\t\tconst ranges = [];\n\t\tconst diffAt = this.start.getCommonPath( this.end ).length;\n\n\t\tconst pos = Position._createAt( this.start );\n\t\tlet posParent = pos.parent;\n\n\t\t// Go up.\n\t\twhile ( pos.path.length > diffAt + 1 ) {\n\t\t\tconst howMany = posParent.maxOffset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.path = pos.path.slice( 0, -1 );\n\t\t\tpos.offset++;\n\t\t\tposParent = posParent.parent;\n\t\t}\n\n\t\t// Go down.\n\t\twhile ( pos.path.length <= this.end.path.length ) {\n\t\t\tconst offset = this.end.path[ pos.path.length - 1 ];\n\t\t\tconst howMany = offset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.offset = offset;\n\t\t\tpos.path.push( 0 );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * For example, to iterate over all items in the entire document root:\n\t *\n\t *\t\t// Create a range spanning over the entire root content:\n\t *\t\tconst range = editor.model.createRangeIn( editor.model.document.getRoot() );\n\t *\n\t *\t\t// Iterate over all items in this range:\n\t *\t\tfor ( const value of range.getWalker() ) {\n\t *\t\t\tconsole.log( value.item );\n\t *\t\t}\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @param {module:engine/model/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @method getItems\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by given `operation`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treturn this._getTransformedByInsertOperation( operation );\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\treturn this._getTransformedByMoveOperation( operation );\n\t\t\tcase 'split':\n\t\t\t\treturn [ this._getTransformedBySplitOperation( operation ) ];\n\t\t\tcase 'merge':\n\t\t\t\treturn [ this._getTransformedByMergeOperation( operation ) ];\n\t\t}\n\n\t\treturn [ new Range( this.start, this.end ) ];\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by multiple `operations`.\n\t *\n\t * @see ~Range#getTransformedByOperation\n\t * @param {Iterable.<module:engine/model/operation/operation~Operation>} operations Operations to transform the range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperations( operations ) {\n\t\tconst ranges = [ new Range( this.start, this.end ) ];\n\n\t\tfor ( const operation of operations ) {\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\tconst result = ranges[ i ].getTransformedByOperation( operation );\n\n\t\t\t\tranges.splice( i, 1, ...result );\n\t\t\t\ti += result.length - 1;\n\t\t\t}\n\t\t}\n\n\t\t// It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n\t\t// \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n\t\t// because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n\t\t// are inside other ranges and we simply remove them.\n\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\tconst range = ranges[ i ];\n\n\t\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t\tconst next = ranges[ j ];\n\n\t\t\t\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\n\t\t\t\t\tranges.splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Converts `Range` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\tstart: this.start.toJSON(),\n\t\t\tend: this.end.toJSON()\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new range that is equal to current range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by insert operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByInsertOperation( operation, spread = false ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by move operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByMoveOperation( operation, spread = false ) {\n\t\tconst sourcePosition = operation.sourcePosition;\n\t\tconst howMany = operation.howMany;\n\t\tconst targetPosition = operation.targetPosition;\n\n\t\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by split operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst start = this.start._getTransformedBySplitOperation( operation );\n\t\tlet end = this.end._getTransformedBySplitOperation( operation );\n\n\t\tif ( this.end.isEqual( operation.insertionPosition ) ) {\n\t\t\tend = this.end.getShiftedBy( 1 );\n\t\t}\n\n\t\t// Below may happen when range contains graveyard element used by split operation.\n\t\tif ( start.root != end.root ) {\n\t\t\t// End position was next to the moved graveyard element and was moved with it.\n\t\t\t// Fix it by using old `end` which has proper `root`.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by merge operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\t// Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n\t\t// transformations, especially when a content of a few block elements were removed. For example:\n\t\t//\n\t\t// {} is the transformed range, [] is the removed range.\n\t\t// <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n\t\t//\n\t\t// <p>Fo{o</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p>}<p>z</p>\n\t\t// <p>F{}z</p>\n\t\t//\n\t\tif ( this.start.isEqual( operation.targetPosition ) && this.end.isEqual( operation.deletionPosition ) ) {\n\t\t\treturn new Range( this.start );\n\t\t}\n\n\t\tlet start = this.start._getTransformedByMergeOperation( operation );\n\t\tlet end = this.end._getTransformedByMergeOperation( operation );\n\n\t\tif ( start.root != end.root ) {\n\t\t\t// This happens when the end position was next to the merged (deleted) element.\n\t\t\t// Then, the end position was moved to the graveyard root. In this case we need to fix\n\t\t\t// the range cause its boundaries would be in different roots.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\tif ( start.isAfter( end ) ) {\n\t\t\t// This happens in three following cases:\n\t\t\t//\n\t\t\t// Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n\t\t\t//         This means that start can be moved before the end of the range.\n\t\t\t//\n\t\t\t// Before: <p>a{a</p><p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>b}b</p><p>cca{a</p>\n\t\t\t// Fix:    <p>{b}b</p><p>ccaa</p>\n\t\t\t//\n\t\t\t// Case 2: Range start is before merged node but not directly.\n\t\t\t//         Result should include all nodes that were in the original range.\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{bb</p><p>cc</p>}\n\t\t\t//\n\t\t\t//         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n\t\t\t//\n\t\t\t// Case 3: Range start is directly before merged node.\n\t\t\t//         Resulting range should include only nodes from the merged element:\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{b}b</p><p>cc</p>\n\t\t\t//\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Case 1.\n\t\t\t\tstart = Position._createAt( end );\n\t\t\t\tstart.offset = 0;\n\t\t\t} else {\n\t\t\t\tif ( !operation.deletionPosition.isEqual( start ) ) {\n\t\t\t\t\t// Case 2.\n\t\t\t\t\tend = operation.deletionPosition;\n\t\t\t\t}\n\n\t\t\t\t// In both case 2 and 3 start is at the end of the merge-to element.\n\t\t\t\tstart = operation.targetPosition;\n\t\t\t}\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n\t *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n\t *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n\t *\t\t// transformed array has one range, which is equal to original range\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n\t * was inside the range. Defaults to `false`.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, spread = false ) {\n\t\tif ( spread && this.containsPosition( insertPosition ) ) {\n\t\t\t// Range has to be spread. The first part is from original start to the spread point.\n\t\t\t// The other part is from spread point to the original end, but transformed by\n\t\t\t// insertion to reflect insertion changes.\n\n\t\t\treturn [\n\t\t\t\tnew Range( this.start, insertPosition ),\n\t\t\t\tnew Range(\n\t\t\t\t\tinsertPosition.getShiftedBy( howMany ),\n\t\t\t\t\tthis.end._getTransformedByInsertion( insertPosition, howMany )\n\t\t\t\t)\n\t\t\t];\n\t\t} else {\n\t\t\tconst range = new Range( this.start, this.end );\n\n\t\t\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany );\n\t\t\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany );\n\n\t\t\treturn [ range ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n\t * @param {Number} howMany How many nodes are moved.\n\t * @param {Boolean} [spread=false] Whether the range should be spread if the move points inside the range.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany, spread = false ) {\n\t\t// Special case for transforming a collapsed range. Just transform it like a position.\n\t\tif ( this.isCollapsed ) {\n\t\t\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\treturn [ new Range( newPos ) ];\n\t\t}\n\n\t\t// Special case for transformation when a part of the range is moved towards the range.\n\t\t//\n\t\t// Examples:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n\t\t// <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n\t\t//\n\t\t// Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n\t\t//\n\t\t// This special case is applied only if the range is to be kept together (not spread).\n\t\tconst moveRange = Range._createFromPositionAndShift( sourcePosition, howMany );\n\t\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( this.containsPosition( targetPosition ) && !spread ) {\n\t\t\tif ( moveRange.containsPosition( this.start ) || moveRange.containsPosition( this.end ) ) {\n\t\t\t\tconst start = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\t\t\t\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\t\t}\n\n\t\t// Default algorithm.\n\t\tlet result;\n\n\t\tconst differenceSet = this.getDifference( moveRange );\n\t\tlet difference = null;\n\n\t\tconst common = this.getIntersection( moveRange );\n\n\t\tif ( differenceSet.length == 1 ) {\n\t\t\t// `moveRange` and this range may intersect but may be separate.\n\t\t\tdifference = new Range(\n\t\t\t\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\n\t\t\t\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} else if ( differenceSet.length == 2 ) {\n\t\t\t// `moveRange` is inside this range.\n\t\t\tdifference = new Range(\n\t\t\t\tthis.start,\n\t\t\t\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} // else, `moveRange` contains this range.\n\n\t\tif ( difference ) {\n\t\t\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null || spread );\n\t\t} else {\n\t\t\tresult = [];\n\t\t}\n\n\t\tif ( common ) {\n\t\t\tconst transformedCommon = new Range(\n\t\t\t\tcommon.start._getCombined( moveRange.start, insertPosition ),\n\t\t\t\tcommon.end._getCombined( moveRange.start, insertPosition )\n\t\t\t);\n\n\t\t\tif ( result.length == 2 ) {\n\t\t\t\tresult.splice( 1, 0, transformedCommon );\n\t\t\t} else {\n\t\t\t\tresult.push( transformedCommon );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n\t *\n\t * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n\t *\n\t * If the deleted range contains transformed range, `null` will be returned.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletionPosition Position from which nodes are removed.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/range~Range|null} Result of the transformation.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tlet newStart = this.start._getTransformedByDeletion( deletePosition, howMany );\n\t\tlet newEnd = this.end._getTransformedByDeletion( deletePosition, howMany );\n\n\t\tif ( newStart == null && newEnd == null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( newStart == null ) {\n\t\t\tnewStart = deletePosition;\n\t\t}\n\n\t\tif ( newEnd == null ) {\n\t\t\tnewEnd = deletePosition;\n\t\t}\n\n\t\treturn new Range( newStart, newEnd );\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn new this( Position._createAt( element, 0 ), Position._createAt( element, element.maxOffset ) );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), item.offsetSize );\n\t}\n\n\t/**\n\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n\t * Passed ranges must not have common parts.\n\t *\n\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n\t * the reference range, they get combined into one range.\n\t *\n\t *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n\t *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n\t *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n\t *\t                                           [  ]  // The result of the function if the last range was a reference range.\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n\t * @returns {module:engine/model/range~Range} Combined range.\n\t */\n\tstatic _createFromRanges( ranges ) {\n\t\tif ( ranges.length === 0 ) {\n\t\t\t/**\n\t\t\t * At least one range has to be passed to\n\t\t\t * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n\t\t\t *\n\t\t\t * @error range-create-from-ranges-empty-array\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'range-create-from-ranges-empty-array: At least one range has to be passed.',\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if ( ranges.length == 1 ) {\n\t\t\treturn ranges[ 0 ].clone();\n\t\t}\n\n\t\t// 1. Set the first range in `ranges` array as a reference range.\n\t\t// If we are going to return just a one range, one of the ranges need to be the reference one.\n\t\t// Other ranges will be stuck to that range, if possible.\n\t\tconst ref = ranges[ 0 ];\n\n\t\t// 2. Sort all the ranges so it's easier to process them.\n\t\tranges.sort( ( a, b ) => {\n\t\t\treturn a.start.isAfter( b.start ) ? 1 : -1;\n\t\t} );\n\n\t\t// 3. Check at which index the reference range is now.\n\t\tconst refIndex = ranges.indexOf( ref );\n\n\t\t// 4. At this moment we don't need the original range.\n\t\t// We are going to modify the result and we need to return a new instance of Range.\n\t\t// We have to create a copy of the reference range.\n\t\tconst result = new this( ref.start, ref.end );\n\n\t\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tif ( refIndex > 0 ) {\n\t\t\tfor ( let i = refIndex - 1; true; i++ ) {\n\t\t\t\tif ( ranges[ i ].end.isEqual( result.start ) ) {\n\t\t\t\t\tresult.start = Position._createAt( ranges[ i ].start );\n\t\t\t\t} else {\n\t\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\n\t\t\tif ( ranges[ i ].start.isEqual( result.end ) ) {\n\t\t\t\tresult.end = Position._createAt( ranges[ i ].end );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Range`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/mapper\n */\n\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\n\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Maps elements, positions and markers between {@link module:engine/view/document~Document the view} and\n * {@link module:engine/model/model the model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper {\n\t/**\n\t * Creates an instance of the mapper.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Model element to view element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._modelToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View element to model element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._viewToModelMapping = new WeakMap();\n\n\t\t/**\n\t\t * A map containing callbacks between view element names and functions evaluating length of view elements\n\t\t * in model.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._viewToModelLengthCallbacks = new Map();\n\n\t\t/**\n\t\t * Model marker name to view elements mapping.\n\t\t *\n\t\t * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n\t\t * One marker (name) can be mapped to multiple elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._markerNameToElements = new Map();\n\n\t\t/**\n\t\t * View element to model marker names mapping.\n\t\t *\n\t\t * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._elementToMarkerNames = new Map();\n\n\t\t/**\n\t\t * Stores marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t\t * has been removed, moved or renamed).\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/markercollection~Marker>}\n\t\t */\n\t\tthis._unboundMarkerNames = new Set();\n\n\t\t// Default mapper algorithm for mapping model position to view position.\n\t\tthis.on( 'modelToViewPosition', ( evt, data ) => {\n\t\t\tif ( data.viewPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\n\n\t\t\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\n\t\t}, { priority: 'low' } );\n\n\t\t// Default mapper algorithm for mapping view position to model position.\n\t\tthis.on( 'viewToModelPosition', ( evt, data ) => {\n\t\t\tif ( data.modelPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewBlock = this.findMappedViewAncestor( data.viewPosition );\n\t\t\tconst modelParent = this._viewToModelMapping.get( viewBlock );\n\t\t\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\n\n\t\t\tdata.modelPosition = ModelPosition._createAt( modelParent, modelOffset );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n\t * The information that elements are bound is also used to translate positions.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t */\n\tbindElements( modelElement, viewElement ) {\n\t\tthis._modelToViewMapping.set( modelElement, viewElement );\n\t\tthis._viewToModelMapping.set( viewElement, modelElement );\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n\t *\n\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n\t * will be removed only if model element is still bound to passed `viewElement`.\n\t *\n\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n\t * when the previously bound view element is unbound.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\n\t */\n\tunbindViewElement( viewElement ) {\n\t\tconst modelElement = this.toModelElement( viewElement );\n\n\t\tthis._viewToModelMapping.delete( viewElement );\n\n\t\tif ( this._elementToMarkerNames.has( viewElement ) ) {\n\t\t\tfor ( const markerName of this._elementToMarkerNames.get( viewElement ) ) {\n\t\t\t\tthis._unboundMarkerNames.add( markerName );\n\t\t\t}\n\t\t}\n\n\t\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\n\t\t\tthis._modelToViewMapping.delete( modelElement );\n\t\t}\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n\t *\n\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n\t * will be removed only if view element is still bound to passed `modelElement`.\n\t *\n\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n\t * when the previously bound model element is unbound.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n\t */\n\tunbindModelElement( modelElement ) {\n\t\tconst viewElement = this.toViewElement( modelElement );\n\n\t\tthis._modelToViewMapping.delete( modelElement );\n\n\t\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\n\t\t\tthis._viewToModelMapping.delete( viewElement );\n\t\t}\n\t}\n\n\t/**\n\t * Binds given marker name with given {@link module:engine/view/element~Element view element}. The element\n\t * will be added to the current set of elements bound with given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to bind.\n\t * @param {String} name Marker name.\n\t */\n\tbindElementToMarker( element, name ) {\n\t\tconst elements = this._markerNameToElements.get( name ) || new Set();\n\t\telements.add( element );\n\n\t\tconst names = this._elementToMarkerNames.get( element ) || new Set();\n\t\tnames.add( name );\n\n\t\tthis._markerNameToElements.set( name, elements );\n\t\tthis._elementToMarkerNames.set( element, names );\n\t}\n\n\t/**\n\t * Unbinds an element from given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unbind.\n\t * @param {String} name Marker name.\n\t */\n\tunbindElementFromMarkerName( element, name ) {\n\t\tconst nameToElements = this._markerNameToElements.get( name );\n\n\t\tif ( nameToElements ) {\n\t\t\tnameToElements.delete( element );\n\n\t\t\tif ( nameToElements.size == 0 ) {\n\t\t\t\tthis._markerNameToElements.delete( name );\n\t\t\t}\n\t\t}\n\n\t\tconst elementToNames = this._elementToMarkerNames.get( element );\n\n\t\tif ( elementToNames ) {\n\t\t\telementToNames.delete( name );\n\n\t\t\tif ( elementToNames.size == 0 ) {\n\t\t\t\tthis._elementToMarkerNames.delete( element );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tflushUnboundMarkerNames() {\n\t\tconst markerNames = Array.from( this._unboundMarkerNames );\n\n\t\tthis._unboundMarkerNames.clear();\n\n\t\treturn markerNames;\n\t}\n\n\t/**\n\t * Removes all model to view and view to model bindings.\n\t */\n\tclearBindings() {\n\t\tthis._modelToViewMapping = new WeakMap();\n\t\tthis._viewToModelMapping = new WeakMap();\n\t\tthis._markerNameToElements = new Map();\n\t\tthis._elementToMarkerNames = new Map();\n\t\tthis._unboundMarkerNames = new Set();\n\t}\n\n\t/**\n\t * Gets the corresponding model element.\n\t *\n\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n\t */\n\ttoModelElement( viewElement ) {\n\t\treturn this._viewToModelMapping.get( viewElement );\n\t}\n\n\t/**\n\t * Gets the corresponding view element.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n\t */\n\ttoViewElement( modelElement ) {\n\t\treturn this._modelToViewMapping.get( modelElement );\n\t}\n\n\t/**\n\t * Gets the corresponding model range.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {module:engine/model/range~Range} Corresponding model range.\n\t */\n\ttoModelRange( viewRange ) {\n\t\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding view range.\n\t *\n\t * @param {module:engine/model/range~Range} modelRange Model range.\n\t * @returns {module:engine/view/range~Range} Corresponding view range.\n\t */\n\ttoViewRange( modelRange ) {\n\t\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding model position.\n\t *\n\t * @fires viewToModelPosition\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {module:engine/model/position~Position} Corresponding model position.\n\t */\n\ttoModelPosition( viewPosition ) {\n\t\tconst data = {\n\t\t\tviewPosition,\n\t\t\tmapper: this\n\t\t};\n\n\t\tthis.fire( 'viewToModelPosition', data );\n\n\t\treturn data.modelPosition;\n\t}\n\n\t/**\n\t * Gets the corresponding view position.\n\t *\n\t * @fires modelToViewPosition\n\t * @param {module:engine/model/position~Position} modelPosition Model position.\n\t * @param {Object} [options] Additional options for position mapping process.\n\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\n\t * @returns {module:engine/view/position~Position} Corresponding view position.\n\t */\n\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\n\t\tconst data = {\n\t\t\tmodelPosition,\n\t\t\tmapper: this,\n\t\t\tisPhantom: options.isPhantom\n\t\t};\n\n\t\tthis.fire( 'modelToViewPosition', data );\n\n\t\treturn data.viewPosition;\n\t}\n\n\t/**\n\t * Gets all view elements bound to the given marker name.\n\t *\n\t * @param {String} name Marker name.\n\t * @returns {Set.<module:engine/view/element~Element>|null} View elements bound with given marker name or `null`\n\t * if no elements are bound to given marker name.\n\t */\n\tmarkerNameToElements( name ) {\n\t\tconst boundElements = this._markerNameToElements.get( name );\n\n\t\tif ( !boundElements ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = new Set();\n\n\t\tfor ( const element of boundElements ) {\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tfor ( const clone of element.getElementsWithSameId() ) {\n\t\t\t\t\telements.add( clone );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements.add( element );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Registers a callback that evaluates the length in the model of a view element with given name.\n\t *\n\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n\t * a number representing the length of view element in model.\n\t *\n\t *\t\t// List item in view may contain nested list, which have other list items. In model though,\n\t *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n\t *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n\t *\n\t *\t\tfunction getViewListItemLength( element ) {\n\t *\t\t\tlet length = 1;\n\t *\n\t *\t\t\tfor ( let child of element.getChildren() ) {\n\t *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n\t *\t\t\t\t\t\tlength += getViewListItemLength( item );\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn length;\n\t *\t\t}\n\t *\n\t *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t *\n\t * @param {String} viewElementName Name of view element for which callback is registered.\n\t * @param {Function} lengthCallback Function return a length of view element instance in model.\n\t */\n\tregisterViewToModelLength( viewElementName, lengthCallback ) {\n\t\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\n\t}\n\n\t/**\n\t * For given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n\t * the model.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition Position for which mapped ancestor should be found.\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tfindMappedViewAncestor( viewPosition ) {\n\t\tlet parent = viewPosition.parent;\n\n\t\twhile ( !this._viewToModelMapping.has( parent ) ) {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Calculates model offset based on the view position and the block element.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n\t *\n\t * Is a sum of:\n\t *\n\t *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Position parent.\n\t * @param {Number} viewOffset Position offset.\n\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n\t * @returns {Number} Offset in the model.\n\t */\n\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\n\t\tif ( viewBlock != viewParent ) {\n\t\t\t// See example.\n\t\t\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\n\t\t\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\n\n\t\t\treturn offsetToParentStart + offsetInParent;\n\t\t}\n\n\t\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\n\n\t\t// If the position is a text it is simple (\"ba|r\" -> 2).\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn viewOffset;\n\t\t}\n\n\t\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\t\tlet modelOffset = 0;\n\n\t\tfor ( let i = 0; i < viewOffset; i++ ) {\n\t\t\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\n\t\t}\n\n\t\treturn modelOffset;\n\t}\n\n\t/**\n\t * Gets the length of the view element in the model.\n\t *\n\t * The length is calculated as follows:\n\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n\t * {@link module:engine/view/text~Text#data data},\n\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n\t *\n\t * Examples:\n\t *\n\t *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n\t *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n\t *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n\t *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n\t *\n\t * @param {module:engine/view/element~Element} viewNode View node.\n\t * @returns {Number} Length of the node in the tree model.\n\t */\n\tgetModelLength( viewNode ) {\n\t\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\n\t\t\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\n\n\t\t\treturn callback( viewNode );\n\t\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\n\t\t\treturn 1;\n\t\t} else if ( viewNode.is( 'text' ) ) {\n\t\t\treturn viewNode.data.length;\n\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tlet len = 0;\n\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tlen += this.getModelLength( child );\n\t\t\t}\n\n\t\t\treturn len;\n\t\t}\n\t}\n\n\t/**\n\t * Finds the position in the view node (or its children) with the expected model offset.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n\t *\n\t *\t\t_findPositionIn( p, 4 ):\n\t *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n\t *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n\t *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n\t *\n\t *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n\t *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n\t *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n\t *\n\t *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n\t *\t\tWe are in the text node so we can simple find the offset.\n\t *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n\t * @param {Number} expectedOffset Expected offset.\n\t * @returns {module:engine/view/position~Position} Found position.\n\t */\n\t_findPositionIn( viewParent, expectedOffset ) {\n\t\t// Last scanned view node.\n\t\tlet viewNode;\n\t\t// Length of the last scanned view node.\n\t\tlet lastLength = 0;\n\n\t\tlet modelOffset = 0;\n\t\tlet viewOffset = 0;\n\n\t\t// In the text node it is simple: offset in the model equals offset in the text.\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn new ViewPosition( viewParent, expectedOffset );\n\t\t}\n\n\t\t// In other cases we add lengths of child nodes to find the proper offset.\n\n\t\t// If it is smaller we add the length.\n\t\twhile ( modelOffset < expectedOffset ) {\n\t\t\tviewNode = viewParent.getChild( viewOffset );\n\t\t\tlastLength = this.getModelLength( viewNode );\n\t\t\tmodelOffset += lastLength;\n\t\t\tviewOffset++;\n\t\t}\n\n\t\t// If it equals we found the position.\n\t\tif ( modelOffset == expectedOffset ) {\n\t\t\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\n\t\t}\n\t\t// If it is higher we need to enter last child.\n\t\telse {\n\t\t\t// ( modelOffset - lastLength ) is the offset to the child we enter,\n\t\t\t// so we subtract it from the expected offset to fine the offset in the child.\n\t\t\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\n\t\t}\n\t}\n\n\t/**\n\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n\t * if it was next to it.\n\t *\n\t *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n\t *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n\t *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n\t * @returns {module:engine/view/position~Position} Position in text node if possible.\n\t */\n\t_moveViewPositionToTextNode( viewPosition ) {\n\t\t// If the position is just after text node, put it at the end of that text node.\n\t\t// If the position is just before text node, put it at the beginning of that text node.\n\t\tconst nodeBefore = viewPosition.nodeBefore;\n\t\tconst nodeAfter = viewPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\n\t\t} else if ( nodeAfter instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeAfter, 0 );\n\t\t}\n\n\t\t// Otherwise, just return the given position.\n\t\treturn viewPosition;\n\t}\n\n\t/**\n\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n\t * value in `data` object that is passed as one of parameters to the event callback.\n\t *\n\t * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n\t * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n\t * \t\t// <span> element.\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = modelPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n\t *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n\t *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n\t *\n\t *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n\t *\n\t *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\n\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n\t * handle such situation, check `data.isPhantom` flag:\n\t *\n\t * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n\t * \t\t// to the inside of the view element bound to \"customElement\".\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tif ( data.isPhantom ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\t// Below line might crash for phantom position that does not exist in model.\n\t *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n\t *\n\t *\t\t\t// Check if this is the element we are interested in.\n\t *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n\t *\n\t *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n\t *\n\t *\t\t\tevt.stop();\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event modelToViewPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n\n\t/**\n\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n\t *\n\t * \t\t// See example in `modelToViewPosition` event description.\n\t * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n\t *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = viewPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n\t *\t\t\t\tconst viewImg = positionParent.previousSibling;\n\t *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n\t *\n\t *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event viewToModelPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n}\n\nmix( Mapper, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\n\nimport TextProxy from '../model/textproxy';\n\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n\t/**\n\t * Creates an empty consumables list.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Contains list of consumable values.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n\t\t */\n\t\tthis._consumable = new Map();\n\n\t\t/**\n\t\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n\t\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n\t\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n\t\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n\t\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n\t\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n\t\t */\n\t\tthis._textProxyRegistry = new Map();\n\t}\n\n\t/**\n\t * Adds a consumable value to the consumables list and links it with given model item.\n\t *\n\t *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n\t *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n\t *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection that has the consumable.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t */\n\tadd( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( !this._consumable.has( item ) ) {\n\t\t\tthis._consumable.set( item, new Map() );\n\t\t}\n\n\t\tthis._consumable.get( item ).set( type, true );\n\t}\n\n\t/**\n\t * Removes given consumable value from given model item.\n\t *\n\t *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n\t *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n\t *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection from which consumable will be consumed.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n\t */\n\tconsume( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( this.test( item, type ) ) {\n\t\t\tthis._consumable.get( item ).set( type, false );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Tests whether there is a consumable value of given type connected with given model item.\n\t *\n\t *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n\t *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n\t *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be tested.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n\t * already consumed or `true` if it was added and not consumed yet.\n\t */\n\ttest( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst itemConsumables = this._consumable.get( item );\n\n\t\tif ( itemConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst value = itemConsumables.get( type );\n\n\t\tif ( value === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Reverts consuming of consumable value.\n\t *\n\t *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n\t *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n\t *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be reverted.\n\t * @param {String} type Consumable type.\n\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n\t * never been added.\n\t */\n\trevert( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst test = this.test( item, type );\n\n\t\tif ( test === false ) {\n\t\t\tthis._consumable.get( item ).set( type, true );\n\n\t\t\treturn true;\n\t\t} else if ( test === true ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n\t * have same parent, same start index and same end index will get the same symbol.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n\t */\n\t_getSymbolForTextProxy( textProxy ) {\n\t\tlet symbol = null;\n\n\t\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\n\n\t\tif ( startMap ) {\n\t\t\tconst endMap = startMap.get( textProxy.endOffset );\n\n\t\t\tif ( endMap ) {\n\t\t\t\tsymbol = endMap.get( textProxy.parent );\n\t\t\t}\n\t\t}\n\n\t\tif ( !symbol ) {\n\t\t\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\n\t\t}\n\n\t\treturn symbol;\n\t}\n\n\t/**\n\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {Number} startIndex Text proxy start index in it's parent.\n\t * @param {Number} endIndex Text proxy end index in it's parent.\n\t * @param {module:engine/model/element~Element} parent Text proxy parent.\n\t * @returns {Symbol} Symbol generated for given properties.\n\t */\n\t_addSymbolForTextProxy( start, end, parent ) {\n\t\tconst symbol = Symbol( 'textProxySymbol' );\n\t\tlet startMap, endMap;\n\n\t\tstartMap = this._textProxyRegistry.get( start );\n\n\t\tif ( !startMap ) {\n\t\t\tstartMap = new Map();\n\t\t\tthis._textProxyRegistry.set( start, startMap );\n\t\t}\n\n\t\tendMap = startMap.get( end );\n\n\t\tif ( !endMap ) {\n\t\t\tendMap = new Map();\n\t\t\tstartMap.set( end, endMap );\n\t\t}\n\n\t\tendMap.set( parent, symbol );\n\n\t\treturn symbol;\n\t}\n}\n\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType( type ) {\n\tconst parts = type.split( ':' );\n\n\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { extend } from 'lodash-es';\n\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a `DowncastDispatcher` instance.\n\t *\n\t * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n\t * @param {Object} conversionApi Additional properties for interface that will be passed to events fired\n\t * by `DowncastDispatcher`.\n\t */\n\tconstructor( conversionApi ) {\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastConversionApi}\n\t\t */\n\t\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\n\t}\n\n\t/**\n\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertChanges( differ, markers, writer ) {\n\t\t// Before the view is updated, remove markers which have changed.\n\t\tfor ( const change of differ.getMarkersToRemove() ) {\n\t\t\tthis.convertMarkerRemove( change.name, change.range, writer );\n\t\t}\n\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\tthis.convertInsert( Range._createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else {\n\t\t\t\t// entry.type == 'attribute'.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const markerName of this.conversionApi.mapper.flushUnboundMarkerNames() ) {\n\t\t\tconst markerRange = markers.get( markerName ).getRange();\n\n\t\t\tthis.convertMarkerRemove( markerName, markerRange, writer );\n\t\t\tthis.convertMarkerAdd( markerName, markerRange, writer );\n\t\t}\n\n\t\t// After the view is updated, convert markers which have changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n\t * {@link #event:attribute attribute event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange\n\t\t\t};\n\n\t\t\tthis._testAndFire( 'insert', data );\n\n\t\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tdata.attributeKey = key;\n\t\t\t\tdata.attributeOldValue = null;\n\t\t\t\tdata.attributeNewValue = item.getAttribute( key );\n\n\t\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts conversion of attribute change on given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts model selection conversion.\n\t *\n\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey + ':$text', data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t//\n\t\t// First, fire an event for the whole marker.\n\t\t//\n\t\tconst consumable = new Consumable();\n\t\tconsumable.add( markerRange, eventName );\n\n\t\tthis.conversionApi.consumable = consumable;\n\n\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t//\n\t\t// Do not fire events for each item inside the range if the range got consumed.\n\t\t//\n\t\tif ( !consumable.test( markerRange, eventName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Then, fire an event for each item inside the marker range.\n\t\t//\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range._createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = data.item.name || '$text';\n\n\t\tthis.fire( type + ':' + name, data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n\t * @param {Number} data.length Offset size of the removed node.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired in the following cases:\n\t *\n\t * * when an attribute has been added, changed, or removed from a node,\n\t * * when a node with an attribute is inserted,\n\t * * when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * `conversionApi.consumable` includes each item of the marker range and the consumable value is same as event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes marker range with event name.\n\t *\n\t * If selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes selection instance with event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/downcastdispatcher~DowncastConversionApi\n */\n\n/**\n * The {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} instance.\n *\n * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #dispatcher\n */\n\n/**\n * Stores information about what parts of processed model item are still waiting to be handled. After a piece of model item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/modelconsumable~ModelConsumable} #consumable\n */\n\n/**\n * The {@link module:engine/conversion/mapper~Mapper} instance.\n *\n * @member {module:engine/conversion/mapper~Mapper} #mapper\n */\n\n/**\n * The {@link module:engine/view/downcastwriter~DowncastWriter} instance used to manipulate data during conversion.\n *\n * @member {module:engine/view/downcastwriter~DowncastWriter} #writer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Element from './element';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\t[ this, selectable ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set the selection to the given place.\n\t\t\t *\n\t\t\t * Invalid parameters were specified when setting the selection. Common issues:\n\t\t\t *\n\t\t\t * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n\t\t\t * a real {@link module:engine/model/text~Text}.\n\t\t\t * * View nodes were passed instead of model nodes.\n\t\t\t * * `null`/`undefined` was passed.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setTo-not-selectable: Cannot set the selection to the given place.',\n\t\t\t\t[ this, selectable ]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range: ' +\n\t\t\t\t\t'Selection range set to an object that is not an instance of model.Range.',\n\t\t\t\t\t[ this, newRanges ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\t[ this, itemOrPosition ]\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'model:selection';\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedBlockContainer( value.item, visited ) ) {\n\t\t\t\t\tyield value.item;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns blocks that aren't nested in other selected blocks.\n\t *\n\t * In this case the method will return blocks A, B and E because C & D are children of block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * **Note:** To get all selected blocks use {@link #getSelectedBlocks `getSelectedBlocks()`}.\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getTopMostBlocks() {\n\t\tconst selected = Array.from( this.getSelectedBlocks() );\n\n\t\tfor ( const block of selected ) {\n\t\t\tconst parentBlock = findAncestorBlock( block );\n\n\t\t\t// Filter out blocks that are nested in other selected blocks (like paragraphs in tables).\n\t\t\tif ( !parentBlock || !selected.includes( parentBlock ) ) {\n\t\t\t\tyield block;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.',\n\t\t\t\t\t[ this, range ],\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlockContainer( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst schema = position.parent.document.model.schema;\n\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tlet hasParentLimit = false;\n\n\tconst block = ancestors.find( element => {\n\t\t// Stop searching after first parent node that is limit element.\n\t\tif ( hasParentLimit ) {\n\t\t\treturn false;\n\t\t}\n\n\t\thasParentLimit = schema.isLimit( element );\n\n\t\treturn !hasParentLimit && isUnvisitedBlockContainer( element, visited );\n\t} );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n\n// Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\nfunction findAncestorBlock( node ) {\n\tconst schema = node.document.model.schema;\n\n\tlet parent = node.parent;\n\n\twhile ( parent ) {\n\t\tif ( schema.isBlock( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liverange\n */\n\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends Range {\n\t/**\n\t * Creates a live range.\n\t *\n\t * @see module:engine/model/range~Range\n\t */\n\tconstructor( start, end ) {\n\t\tsuper( start, end );\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tliveRange.is( 'range' ); // -> true\n\t *\t\tliveRange.is( 'model:range' ); // -> true\n\t *\t\tliveRange.is( 'liveRange' ); // -> true\n\t *\t\tliveRange.is( 'model:liveRange' ); // -> true\n\t *\n\t *\t\tliveRange.is( 'view:range' ); // -> false\n\t *\t\tliveRange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'liveRange' || type == 'model:liveRange' || super.is( type );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\ttoRange() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Creates a `LiveRange` instance that is equal to the given range.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\tstatic fromRange( range ) {\n\t\treturn new LiveRange( range.start, range.end );\n\t}\n\n\t/**\n\t * @see module:engine/model/range~Range._createIn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createIn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createOn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createOn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createFromPositionAndShift\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createFromPositionAndShift\n\t * @param {module:engine/model/position~Position} position\n\t * @param {Number} shift\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have changed due to changes in the\n\t * {@link module:engine/model/document~Document document}.\n\t *\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\n\t * range before it got changed.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {module:engine/model/position~Position|null} data.deletionPosition Source position for remove and merge changes.\n\t * Available if the range was moved to the graveyard root, `null` otherwise.\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\n\t * but the change took place inside the range, effectively changing its content.\n\t *\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\n\t * change range.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {null} data.deletionPosition Due to the nature of this event, this property is always set to `null`. It is passed\n\t * for compatibility with the {@link module:engine/model/liverange~LiveRange#event:change:range} event.\n\t */\n}\n\n// Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\t// Transform the range by the operation. Join the result ranges if needed.\n\tconst ranges = this.getTransformedByOperation( operation );\n\tconst result = Range._createFromRanges( ranges );\n\n\tconst boundariesChanged = !result.isEqual( this );\n\tconst contentChanged = doesOperationChangeRangeContent( this, operation );\n\n\tlet deletionPosition = null;\n\n\tif ( boundariesChanged ) {\n\t\t// If range boundaries have changed, fire `change:range` event.\n\t\t//\n\t\tif ( result.root.rootName == '$graveyard' ) {\n\t\t\t// If the range was moved to the graveyard root, set `deletionPosition`.\n\t\t\tif ( operation.type == 'remove' ) {\n\t\t\t\tdeletionPosition = operation.sourcePosition;\n\t\t\t} else {\n\t\t\t\t// Merge operation.\n\t\t\t\tdeletionPosition = operation.deletionPosition;\n\t\t\t}\n\t\t}\n\n\t\tconst oldRange = this.toRange();\n\n\t\tthis.start = result.start;\n\t\tthis.end = result.end;\n\n\t\tthis.fire( 'change:range', oldRange, { deletionPosition } );\n\t} else if ( contentChanged ) {\n\t\t// If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n\t\tthis.fire( 'change:content', this.toRange(), { deletionPosition } );\n\t}\n}\n\n// Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\nfunction doesOperationChangeRangeContent( range, operation ) {\n\tswitch ( operation.type ) {\n\t\tcase 'insert':\n\t\t\treturn range.containsPosition( operation.position );\n\t\tcase 'move':\n\t\tcase 'remove':\n\t\tcase 'reinsert':\n\t\tcase 'merge':\n\t\t\treturn range.containsPosition( operation.sourcePosition ) ||\n\t\t\t\trange.start.isEqual( operation.sourcePosition ) ||\n\t\t\t\trange.containsPosition( operation.targetPosition );\n\t\tcase 'split':\n\t\t\treturn range.containsPosition( operation.splitPosition ) || range.containsPosition( operation.insertionPosition );\n\t}\n\n\treturn false;\n}\n\nmix( LiveRange, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @returns {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * A collection of selection markers.\n\t * Marker is a selection marker when selection range is inside the marker range.\n\t *\n\t * @readonly\n\t * @type {module:utils/collection~Collection.<module:engine/model/markercollection~Marker>}\n\t */\n\tget markers() {\n\t\treturn this._selection.markers;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns blocks that aren't nested in other selected blocks.\n\t *\n\t * In this case the method will return blocks A, B and E because C & D are children of block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * **Note:** To get all selected blocks use {@link #getSelectedBlocks `getSelectedBlocks()`}.\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetTopMostBlocks() {\n\t\treturn this._selection.getTopMostBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Refreshes selection attributes and markers according to the current position in the model.\n\t */\n\trefresh() {\n\t\tthis._selection._updateMarkers();\n\t\tthis._selection._updateAttributes( false );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'documentSelection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\t\tselection.is( 'model:documentSelection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'model:selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'model:documentSelection';\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from the left to the right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n\t * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\t_overrideGravity() {\n\t\treturn this._selection.overrideGravity();\n\t}\n\n\t/**\n\t * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n\t */\n\t_restoreGravity( uid ) {\n\t\tthis._selection.restoreGravity( uid );\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// List of selection markers.\n\t\t// Marker is a selection marker when selection range is inside the marker range.\n\t\t//\n\t\t// @type {module:utils/collection~Collection}\n\t\tthis.markers = new Collection( { idProperty: 'name' } );\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Contains data required to fix ranges which have been moved to the graveyard.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\t\tthis._fixGraveyardRangesData = [];\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity adds an UID to the set and each removal removes it.\n\t\t// Gravity is overridden when there's at least one UID in the set.\n\t\t// Gravity is restored when the set is empty.\n\t\t// This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._overriddenGravityRegister = new Set();\n\n\t\t// Ensure selection is correct after each operation.\n\t\tthis.listenTo( this._model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( this._fixGraveyardRangesData.length ) {\n\t\t\t\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\n\n\t\t\t\tthis._fixGraveyardSelection( liveRange, sourcePosition );\n\t\t\t}\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Ensure selection is correct and up to date after each range change.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Update markers data stored by the selection after each marker change.\n\t\tthis.listenTo( this._model.markers, 'update', () => this._updateMarkers() );\n\n\t\t// Ensure selection is up to date after each change block.\n\t\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\n\t\t\tclearAttributesStoredInElement( this._model, batch );\n\t\t} );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn !!this._overriddenGravityRegister.size;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\n\t\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\n\t\tthis._updateAttributes( true );\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._updateAttributes( true );\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity() {\n\t\tconst overrideUid = uid();\n\n\t\t// Remember that another overriding has been requested. It will need to be removed\n\t\t// before the gravity is to be restored.\n\t\tthis._overriddenGravityRegister.add( overrideUid );\n\n\t\tif ( this._overriddenGravityRegister.size === 1 ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\n\t\treturn overrideUid;\n\t}\n\n\trestoreGravity( uid ) {\n\t\tif ( !this._overriddenGravityRegister.has( uid ) ) {\n\t\t\t/**\n\t\t\t * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n\t\t\t * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n\t\t\t *\n\t\t\t * @error document-selection-gravity-wrong-restore\n\t\t\t * @param {String} uid The unique identifier returned by\n\t\t\t * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.',\n\t\t\t\tthis,\n\t\t\t\t{ uid }\n\t\t\t);\n\t\t}\n\n\t\tthis._overriddenGravityRegister.delete( uid );\n\n\t\t// Restore gravity only when all overriding have been restored.\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t// @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._fixGraveyardRangesData.push( {\n\t\t\t\t\tliveRange,\n\t\t\t\t\tsourcePosition: data.deletionPosition\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t_updateMarkers() {\n\t\tconst markers = [];\n\n\t\tfor ( const marker of this._model.markers ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tfor ( const selectionRange of this.getRanges() ) {\n\t\t\t\tif ( markerRange.containsRange( selectionRange, !selectionRange.isCollapsed ) ) {\n\t\t\t\t\tmarkers.push( marker );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of markers ) {\n\t\t\tif ( !this.markers.has( marker ) ) {\n\t\t\t\tthis.markers.add( marker );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of Array.from( this.markers ) ) {\n\t\t\tif ( !markers.includes( marker ) ) {\n\t\t\t\tthis.markers.remove( marker );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n\t// be changed according to `directChange` parameter.\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( value.type == 'text' ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes a selection range after it ends up in graveyard root.\n\t//\n\t// @private\n\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\n\t\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\n\t\t// This is a good candidate for a fixed selection range.\n\t\tconst positionCandidate = removedRangeStart.clone();\n\n\t\t// Find a range that is a correct selection range and is closest to the start of removed range.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\n\n\t\t// Remove the old selection range before preparing and adding new selection range. This order is important,\n\t\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\t\tconst index = this._ranges.indexOf( liveRange );\n\t\tthis._ranges.splice( index, 1 );\n\t\tliveRange.detach();\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tconst newRange = this._prepareRange( selectionRange );\n\n\t\t\t// Add new range in the place of old range.\n\t\t\tthis._ranges.splice( index, 0, newRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found - just removing the old range is fine.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\nfunction clearAttributesStoredInElement( model, batch ) {\n\tconst differ = model.document.differ;\n\n\tfor ( const entry of differ.getChanges() ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst changeParent = entry.position.parent;\n\t\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n\t\tif ( isNoLongerEmpty ) {\n\t\t\tmodel.enqueueChange( batch, writer => {\n\t\t\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\n\t\t\t\t\t.filter( key => key.startsWith( storePrefix ) );\n\n\t\t\t\tfor ( const key of storedAttributes ) {\n\t\t\t\t\twriter.removeAttribute( key, changeParent );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversionhelpers\n */\n\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n\t/**\n\t * Creates a conversion helpers instance.\n\t *\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n\t */\n\tconstructor( dispatchers ) {\n\t\tthis._dispatchers = dispatchers;\n\t}\n\n\t/**\n\t * Registers a conversion helper.\n\t *\n\t * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n\t * method description.\n\t *\n\t * @param {Function} conversionHelper The function to be called on event.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tadd( conversionHelper ) {\n\t\tfor ( const dispatcher of this._dispatchers ) {\n\t\t\tconversionHelper( dispatcher );\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\n\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\n\nimport ViewAttributeElement from '../view/attributeelement';\nimport DocumentSelection from '../model/documentselection';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Downcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class DowncastHelpers extends ConversionHelpers {\n\t/**\n\t * Model element to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'div',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: ( modelElement, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model element to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n\t * as parameters and returns a view container element.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( downcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view element conversion helper.\n\t *\n\t * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n\t * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'b',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'invert',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'font-light', 'bg-dark' ]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'font-weight:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'color',\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'color:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n\t * of `String`s with possible values if the model attribute is an enumerable.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n\t * that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n\t * as parameters and returns a view attribute element. If `config.model.values` is\n\t * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToElement( config ) {\n\t\treturn this.add( downcastAttributeToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view attribute conversion helper.\n\t *\n\t * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n\t * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'href',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'source'\n\t *\t\t\t},\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'styled',\n\t *\t\t\t\tvalues: [ 'dark', 'light' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tdark: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n\t *\t\t\t\t},\n\t *\t\t\t\tlight: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'styled',\n\t *\t\t\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n\t * the attribute key, possible values and, optionally, an element name to convert from.\n\t * @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n\t * the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n\t * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n\t * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n\t * `{ key, value }` objects or a functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( downcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * Model marker to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n\t * is collapsed, only one element is created. For example, model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n\t * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'marker-search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'search-result',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: ( markerData, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createUIElement( 'span', {\n\t *\t\t\t\t\t'data-marker': 'search',\n\t *\t\t\t\t\t'data-start': markerData.isOpening\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n\t * receives the `data` object as a parameter and should return an instance of the\n\t * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n\t * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` to\n\t * the marker end boundary element.\n\t *\n\t * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model marker data as a parameter and returns a view UI element.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToElement( config ) {\n\t\treturn this.add( downcastMarkerToElement( config ) );\n\t}\n\n\t/**\n\t * Model marker to highlight conversion helper.\n\t *\n\t * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n\t *\n\t * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n\t * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n\t * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n\t *\n\t * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n\t * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n\t * For example, a model marker set like this: `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n\t * in the view.\n\t *\n\t * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n\t * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n\t * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: { classes: 'new-comment' },\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\t// Assuming that the marker name is in a form of comment:commentType.\n\t *\t\t\t\tconst commentType = data.markerName.split( ':' )[ 1 ];\n\t *\n\t *\t\t\t\treturn {\n\t *\t\t\t\t\tclasses: [ 'comment', 'comment-' + commentType ]\n\t *\t\t\t\t};\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n\t * receives the `data` object as a parameter and should return a\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n\t * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToHighlight\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n\t * that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToHighlight( config ) {\n\t\treturn this.add( downcastMarkerToHighlight( config ) );\n\t}\n}\n\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\nexport function insertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\t\tconst viewText = viewWriter.createText( data.item.data );\n\n\t\tviewWriter.insert( viewPosition, viewText );\n\t};\n}\n\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\nexport function remove() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Find view range start position by mapping model position at which the remove happened.\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\tconst viewRange = conversionApi.writer.createRange( viewStart, viewEnd );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\n\n\t\t// After the range is removed, unbind all view elements from the model.\n\t\t// Range inside view document fragment is used to unbind deeply.\n\t\tfor ( const child of conversionApi.writer.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\t};\n}\n\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If a priority\n * is not provided in the descriptor, the default priority will be used.\n *\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createViewElementFromHighlightDescriptor( descriptor ) {\n\tconst viewElement = new ViewAttributeElement( 'span', descriptor.attributes );\n\n\tif ( descriptor.classes ) {\n\t\tviewElement._addClass( descriptor.classes );\n\t}\n\n\tif ( descriptor.priority ) {\n\t\tviewElement._priority = descriptor.priority;\n\t}\n\n\tviewElement._id = descriptor.id;\n\n\treturn viewElement;\n}\n\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\nexport function convertRangeSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( range );\n\t\t\tviewRanges.push( viewRange );\n\t\t}\n\n\t\tconversionApi.writer.setSelection( viewRanges, { backward: selection.isBackward } );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\nexport function convertCollapsedSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelPosition = selection.getFirstPosition();\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\t\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\n\n\t\tviewWriter.setSelection( brokenPosition );\n\t};\n}\n\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\nexport function clearAttributes() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t// Not collapsed selection should not have artifacts.\n\t\t\tif ( range.isCollapsed ) {\n\t\t\t\t// Position might be in the node removed by the view writer.\n\t\t\t\tif ( range.end.parent.document ) {\n\t\t\t\t\tconversionApi.writer.mergeAttributes( range.start );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tviewWriter.setSelection( null );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, viewWriter ) => {\n *\t\t\treturn viewWriter.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element that will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\nexport function wrap( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n\t\t// or the attribute was removed.\n\t\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi.writer );\n\n\t\t// Create node to wrap with.\n\t\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi.writer );\n\n\t\tif ( !oldViewElement && !newViewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\t// Selection attribute conversion.\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\n\t\t} else {\n\t\t\t// Node attribute conversion.\n\t\t\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\n\n\t\t\t// First, unwrap the range from current wrapper.\n\t\t\tif ( data.attributeOldValue !== null && oldViewElement ) {\n\t\t\t\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\n\t\t\t}\n\n\t\t\tif ( data.attributeNewValue !== null && newViewElement ) {\n\t\t\t\tviewWriter.wrap( viewRange, newViewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and binds the model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, viewWriter ) => {\n *\t\t\t\tconst text = viewWriter.createText( 'myText' );\n *\t\t\t\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = elementCreator( data.item, conversionApi.writer );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n\t\tconversionApi.writer.insert( viewPosition, viewElement );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @protected\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator A view UI element or a function returning the view element\n * that will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\n\t\t// If marker is collapsed, only \"opening\" element will be inserted.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi.writer );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi.writer );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\t// Marker that is collapsed has consumable build differently that non-collapsed one.\n\t\t// For more information see `addMarker` event description.\n\t\t// If marker's range is collapsed - check if it can be consumed.\n\t\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If marker's range is not collapsed - consume all items inside.\n\t\tfor ( const value of markerRange ) {\n\t\t\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst mapper = conversionApi.mapper;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Add \"opening\" element.\n\t\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\n\t\tconversionApi.mapper.bindElementToMarker( viewStartElement, data.markerName );\n\n\t\t// Add \"closing\" element only if range is not collapsed.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\n\t\t\tconversionApi.mapper.bindElementToMarker( viewEndElement, data.markerName );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n// basing on marker remove change.\n//\n// This converter unbinds elements from the marker name.\n//\n// @returns {Function} Removed UI element converter.\nfunction removeUIElement() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\t\t\tconversionApi.writer.clear( conversionApi.writer.createRangeOn( element ), element );\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n//\n// Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n// a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n// attributes on a one-to-one basis.\n//\n// *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n//\n// The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n// {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n//\n//\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n//\t\t\t// Change attribute key from `customAttr` to `class` in the view.\n//\t\t\tconst key = 'class';\n//\t\t\tlet value = data.attributeNewValue;\n//\n//\t\t\t// Force attribute value to 'empty' if the model element is empty.\n//\t\t\tif ( data.item.childCount === 0 ) {\n//\t\t\t\tvalue = 'empty';\n//\t\t\t}\n//\n//\t\t\t// Return the key-value pair.\n//\t\t\treturn { key, value };\n//\t\t} ) );\n//\n// @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n// represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n// The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n// @returns {Function} Set/change attribute converter.\nfunction changeAttribute( attributeCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst oldAttribute = attributeCreator( data.attributeOldValue, data );\n\t\tconst newAttribute = attributeCreator( data.attributeNewValue, data );\n\n\t\tif ( !oldAttribute && !newAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n\t\t// Only elements can have attributes in a view so do not proceed for anything else (#1587).\n\t\tif ( !viewElement ) {\n\t\t\t/**\n\t\t\t * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n\t\t\t * by {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n\t\t\t * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\t *\t\t\tmodel: 'attribute-name',\n\t\t\t *\t\t\tview: 'attribute-name'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * and given attribute is used on text node, for example:\n\t\t\t *\n\t\t\t *\t\tmodel.change( writer => {\n\t\t\t *\t\t\twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n\t\t\t * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n\t\t\t * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n\t\t\t * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\t *\t\t\tmodel: {\n\t\t\t *\t\t\t\tkey: 'attribute-name',\n\t\t\t *\t\t\t\tname: '$text'\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tview: ( value, writer ) => {\n\t\t\t *\t\t\t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tconverterPriority: 'high'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * @error conversion-attribute-to-attribute-on-text\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-attribute-to-attribute-on-text: ' +\n\t\t\t\t'Trying to convert text node\\'s attribute with attribute-to-attribute converter.',\n\t\t\t\t[ data, conversionApi ]\n\t\t\t);\n\t\t}\n\n\t\t// First remove the old attribute if there was one.\n\t\tif ( data.attributeOldValue !== null && oldAttribute ) {\n\t\t\tif ( oldAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( oldAttribute.value ) ? oldAttribute.value : [ oldAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.removeClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( oldAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( oldAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.removeStyle( key, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\n\t\t\t}\n\t\t}\n\n\t\t// Then set the new attribute.\n\t\tif ( data.attributeNewValue !== null && newAttribute ) {\n\t\t\tif ( newAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( newAttribute.value ) ? newAttribute.value : [ newAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.addClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( newAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( newAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n// {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n// See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n//\n// It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n// created and the selection will be put inside it.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n// using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightText( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( 'textProxy' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = createViewElementFromHighlightDescriptor( descriptor );\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\n\t\t} else {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\n\t\t\tconst rangeAfterWrap = viewWriter.wrap( viewRange, viewElement );\n\n\t\t\tfor ( const element of rangeAfterWrap.getItems() ) {\n\t\t\t\tif ( element.is( 'attributeElement' ) && element.isSimilar( viewElement ) ) {\n\t\t\t\t\tconversionApi.mapper.bindElementToMarker( element, data.markerName );\n\n\t\t\t\t\t// One attribute element is enough, because all of them are bound together by the view writer.\n\t\t\t\t\t// Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n//\n// The converter checks if an element has the `addHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n// In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n//\n// When the `addHighlight` custom property is not present, the element is not converted in any special way.\n// This means that converters will proceed to convert the element's child nodes.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n// the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightElement( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\n\t\t\t// Consume element itself.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t// Consume all children nodes.\n\t\t\tfor ( const value of ModelRange._createIn( data.item ) ) {\n\t\t\t\tconversionApi.consumable.consume( value.item, evt.name );\n\t\t\t}\n\n\t\t\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\n\n\t\t\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the removing model marker to the view.\n//\n// Both text nodes and elements are handled by this converter but they are handled a bit differently.\n//\n// Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n// provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n//\n// For elements, the converter checks if an element has the `removeHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n// In such case, the children of that element will not be converted.\n//\n// When `removeHighlight` is not present, the element is not converted in any special way.\n// The converter will proceed to convert the element's child nodes instead.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter unbinds elements from the marker name.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction removeHighlight( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This conversion makes sense only for non-collapsed range.\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// View element that will be used to unwrap `AttributeElement`s.\n\t\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( descriptor );\n\n\t\t// Get all elements bound with given marker name.\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tconversionApi.writer.unwrap( conversionApi.writer.createRangeOn( element ), viewHighlightElement );\n\t\t\t} else {\n\t\t\t\t// if element.is( 'containerElement' ).\n\t\t\t\telement.getCustomProperty( 'removeHighlight' )( element, descriptor.id, conversionApi.writer );\n\t\t\t}\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Model element to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model element to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view container element.\n// @returns {Function} Conversion helper.\nfunction downcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'container' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n// of `String`s with possible values if the model attribute is an enumerable.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n// that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view attribute element. If `config.model.values` is\n// given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToElementConfig( config.view, 'attribute' );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, wrap( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view attribute conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n// the attribute key, possible values and, optionally, an element name to convert from.\n// @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n// the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n// array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n// If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n// `{ key, value }` objects or a functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToAttributeConfig( config.view[ modelValue ] );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToAttributeConfig( config.view );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model marker data as a parameter and returns a view UI element.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'ui' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to highlight conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n// that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToHighlight( config ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accept only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\nfunction normalizeToElementConfig( view, viewElementType ) {\n\tif ( typeof view == 'function' ) {\n\t\t// If `view` is already a function, don't do anything.\n\t\treturn view;\n\t}\n\n\treturn ( modelData, viewWriter ) => createViewElementFromDefinition( view, viewWriter, viewElementType );\n}\n\n// Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\nfunction createViewElementFromDefinition( viewElementDefinition, viewWriter, viewElementType ) {\n\tif ( typeof viewElementDefinition == 'string' ) {\n\t\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n\t\tviewElementDefinition = { name: viewElementDefinition };\n\t}\n\n\tlet element;\n\tconst attributes = Object.assign( {}, viewElementDefinition.attributes );\n\n\tif ( viewElementType == 'container' ) {\n\t\telement = viewWriter.createContainerElement( viewElementDefinition.name, attributes );\n\t} else if ( viewElementType == 'attribute' ) {\n\t\tconst options = {\n\t\t\tpriority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n\t\t};\n\n\t\telement = viewWriter.createAttributeElement( viewElementDefinition.name, attributes, options );\n\t} else {\n\t\t// 'ui'.\n\t\telement = viewWriter.createUIElement( viewElementDefinition.name, attributes );\n\t}\n\n\tif ( viewElementDefinition.styles ) {\n\t\tconst keys = Object.keys( viewElementDefinition.styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tviewWriter.setStyle( key, viewElementDefinition.styles[ key ], element );\n\t\t}\n\t}\n\n\tif ( viewElementDefinition.classes ) {\n\t\tconst classes = viewElementDefinition.classes;\n\n\t\tif ( typeof classes == 'string' ) {\n\t\t\tviewWriter.addClass( classes, element );\n\t\t} else {\n\t\t\tfor ( const className of classes ) {\n\t\t\t\tviewWriter.addClass( className, element );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction getFromAttributeCreator( config ) {\n\tif ( config.model.values ) {\n\t\treturn ( modelAttributeValue, viewWriter ) => {\n\t\t\tconst view = config.view[ modelAttributeValue ];\n\n\t\t\tif ( view ) {\n\t\t\t\treturn view( modelAttributeValue, viewWriter );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t} else {\n\t\treturn config.view;\n\t}\n}\n\n// Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n// for generating a view attribute.\n//\n// @param {Object} view View configuration.\nfunction normalizeToAttributeConfig( view ) {\n\tif ( typeof view == 'string' ) {\n\t\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\n\t} else if ( typeof view == 'object' ) {\n\t\t// { key, value, ... }\n\t\tif ( view.value ) {\n\t\t\treturn () => view;\n\t\t}\n\t\t// { key, ... }\n\t\telse {\n\t\t\treturn modelAttributeValue => ( { key: view.key, value: modelAttributeValue } );\n\t\t}\n\t} else {\n\t\t// function.\n\t\treturn view;\n\t}\n}\n\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\nfunction prepareDescriptor( highlightDescriptor, data, conversionApi ) {\n\t// If passed descriptor is a creator function, call it. If not, just use passed value.\n\tconst descriptor = typeof highlightDescriptor == 'function' ?\n\t\thighlightDescriptor( data, conversionApi ) :\n\t\thighlightDescriptor;\n\n\tif ( !descriptor ) {\n\t\treturn null;\n\t}\n\n\t// Apply default descriptor priority.\n\tif ( !descriptor.priority ) {\n\t\tdescriptor.priority = 10;\n\t}\n\n\t// Default descriptor id is marker name.\n\tif ( !descriptor.id ) {\n\t\tdescriptor.id = data.markerName;\n\t}\n\n\treturn descriptor;\n}\n\n/**\n * An object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `<span>`\n * {@link module:engine/view/attributeelement~AttributeElement view attribute element} with CSS class(es), attributes and a priority\n * described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement container element} can handle displaying the highlight\n * separately by providing the `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * The `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element.\n *  * The descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight with the\n *  given ID from the element.\n *\n * @typedef {Object} module:engine/conversion/downcasthelpers~HighlightDescriptor\n *\n * @property {String|Array.<String>} classes A CSS class or an array of classes to set. If the descriptor is used to\n * create an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these classes will be set\n * on that attribute element. If the descriptor is applied to an element, usually these classes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, it defaults to the converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, it defaults to `10`. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority priority}. If the descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these attributes will be set on that\n * attribute element. If the descriptor is applied to an element, usually these attributes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Matcher from '../view/matcher';\nimport ModelRange from '../model/range';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport ModelSelection from '../model/selection';\n\n/**\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcasthelpers\n */\n\n/**\n * Upcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class UpcastHelpers extends ConversionHelpers {\n\t/**\n\t * View element to model element conversion helper.\n\t *\n\t * This conversion results in creating a model element. For example,\n\t * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n\t *\n\t * Keep in mind that the element will be inserted only if it is allowed\n\t * by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: 'p',\n\t *\t\t\tmodel: 'paragraph'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: 'p',\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t},\n\t *\t\t\tmodel: 'fancyParagraph'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t * \t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'heading'\n\t * \t\t\t},\n\t * \t\t\tmodel: ( viewElement, modelWriter ) => {\n\t * \t\t\t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n\t * \t\t\t}\n\t * \t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n\t * set, the converter will fire for every view element.\n\t * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n\t * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( upcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * View element to model attribute conversion helper.\n\t *\n\t * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n\t * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n\t *\n\t * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n\t *\n\t *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n\t *\n\t * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n\t * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n\t * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.\n\t *\n\t * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: 'strong',\n\t *\t\t\tmodel: 'bold'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: 'strong',\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t},\n\t *\t\t\tmodel: 'bold'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'styled', 'styled-dark' ]\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled',\n\t *\t\t\t\tvalue: 'dark'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * \t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tstyles: {\n\t *\t\t\t\t\t'font-size': /[\\s\\S]+/\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalue: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\t\t\t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n\t *\n\t *\t\t\t\t\tif ( value <= 10 ) {\n\t *\t\t\t\t\t\treturn 'small';\n\t *\t\t\t\t\t} else if ( value > 12 ) {\n\t *\t\t\t\t\t\treturn 'big';\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n\t * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n\t * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n\t * If `String` is given, the model attribute value will be set to `true`.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToAttribute( config ) {\n\t\treturn this.add( upcastElementToAttribute( config ) );\n\t}\n\n\t/**\n\t * View attribute to model attribute conversion helper.\n\t *\n\t * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n\t * `<image source=\"foo.jpg\"></image>` in the model.\n\t *\n\t * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n\t * is set only on the corresponding model node:\n\t *\n\t *\t\t<div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n\t *\n\t * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrary to\n\t * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for\n\t * all the children in the model:\n\t *\n\t *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n\t *\n\t * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n\t * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n\t *\n\t * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: 'src',\n\t *\t\t\tmodel: 'source'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: { key: 'src' },\n\t *\t\t\tmodel: 'source'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: { key: 'src' },\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tconverterPriority: 'normal'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tkey: 'data-style',\n\t *\t\t\t\tvalue: /[\\s\\S]+/\n\t *\t\t\t},\n\t *\t\t\tmodel: 'styled'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'img',\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: 'styled-dark'\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled',\n\t *\t\t\t\tvalue: 'dark'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: /styled-[\\S]+/\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled'\n\t *\t\t\t\tvalue: viewElement => {\n\t *\t\t\t\t\tconst regexp = /styled-([\\S]+)/;\n\t *\t\t\t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n\t *\n\t *\t\t\t\t\treturn match[ 1 ];\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n\t * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n\t * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n\t * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n\t * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n\t * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n\t * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n\t * If `String` is given, the model attribute value will be same as view attribute value.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( upcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * View element to model marker conversion helper.\n\t *\n\t * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n\t * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n\t * after the conversion is done, the marker will be available in\n\t * {@link module:engine/model/model~Model#markers model document markers}.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: 'search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tmodel: 'search'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToMarker\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n\t * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n\t * a model marker name.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToMarker( config ) {\n\t\treturn this.add( upcastElementToMarker( config ) );\n\t}\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n\t\tif ( !data.modelRange && conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\t\tconst { modelRange, modelCursor } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n\n\t\t\tdata.modelRange = modelRange;\n\t\t\tdata.modelCursor = modelCursor;\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( conversionApi.schema.checkChild( data.modelCursor, '$text' ) ) {\n\t\t\tif ( conversionApi.consumable.consume( data.viewItem ) ) {\n\t\t\t\tconst text = conversionApi.writer.createText( data.viewItem.data );\n\n\t\t\t\tconversionApi.writer.insert( text, data.modelCursor );\n\n\t\t\t\tdata.modelRange = ModelRange._createFromPositionAndShift( data.modelCursor, text.offsetSize );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n *\t\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n *\n * @param {module:engine/model/model~Model} model Data model.\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange( model, mapper ) {\n\treturn ( evt, data ) => {\n\t\tconst viewSelection = data.newSelection;\n\t\tconst modelSelection = new ModelSelection();\n\n\t\tconst ranges = [];\n\n\t\tfor ( const viewRange of viewSelection.getRanges() ) {\n\t\t\tranges.push( mapper.toModelRange( viewRange ) );\n\t\t}\n\n\t\tmodelSelection.setTo( ranges, { backward: viewSelection.isBackward } );\n\n\t\tif ( !modelSelection.isEqual( model.document.selection ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( modelSelection );\n\t\t\t} );\n\t\t}\n\t};\n}\n\n// View element to model element conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToElement `.elementToElement()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n// set, the converter will fire for every view element.\n// @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n// instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst converter = prepareToElementConverter( config );\n\n\tconst elementName = getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// View element to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToAttribute `.elementToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be set to `true`.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tnormalizeModelAttributeConfig( config );\n\n\tconst converter = prepareToAttributeConverter( config, false );\n\n\tconst elementName = getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n// View attribute to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#attributeToAttribute `.attributeToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n// attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n// specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n// property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n// a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be same as view attribute value.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tlet viewKey = null;\n\n\tif ( typeof config.view == 'string' || config.view.key ) {\n\t\tviewKey = normalizeViewAttributeKeyValueConfig( config );\n\t}\n\n\tnormalizeModelAttributeConfig( config, viewKey );\n\n\tconst converter = prepareToAttributeConverter( config, true );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element', converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n// View element to model marker conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToMarker `.elementToMarker()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n// a model marker name.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToMarker( config ) {\n\tconfig = cloneDeep( config );\n\n\tnormalizeToMarkerConfig( config );\n\n\treturn upcastElementToElement( config );\n}\n\n// Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n// and if so, returns it.\n//\n// @param {Object} config Conversion config.\n// @returns {String|null} View element name or `null` if name is not directly set.\nfunction getViewElementNameFromConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\treturn config.view;\n\t}\n\n\tif ( typeof config.view == 'object' && typeof config.view.name == 'string' ) {\n\t\treturn config.view.name;\n\t}\n\n\treturn null;\n}\n\n// Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n//\n// @param {Object} config Conversion configuration.\n// @returns {Function} View to model converter.\nfunction prepareToElementConverter( config ) {\n\tconst matcher = config.view ? new Matcher( config.view ) : null;\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tlet match = {};\n\n\t\t// If `config.view` has not been passed do not try matching. In this case, the converter should fire for all elements.\n\t\tif ( matcher ) {\n\t\t\t// This will be usually just one pattern but we support matchers with many patterns too.\n\t\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\t\t// If there is no match, this callback should not do anything.\n\t\t\tif ( !matcherResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmatch = matcherResult.match;\n\t\t}\n\n\t\t// Force consuming element's name.\n\t\tmatch.name = true;\n\n\t\t// Create model element basing on config.\n\t\tconst modelElement = getModelElement( config.model, data.viewItem, conversionApi.writer );\n\n\t\t// Do not convert if element building function returned falsy value.\n\t\tif ( !modelElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When element was already consumed then skip it.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find allowed parent for element that we are going to insert.\n\t\t// If current parent does not allow to insert element but one of the ancestors does\n\t\t// then split nodes to allowed parent.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( modelElement, data.modelCursor );\n\n\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Insert element on allowed position.\n\t\tconversionApi.writer.insert( modelElement, splitResult.position );\n\n\t\t// Convert children and insert to element.\n\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelElement, 0 ) );\n\n\t\t// Consume appropriate value from consumable values list.\n\t\tconversionApi.consumable.consume( data.viewItem, match );\n\n\t\tconst parts = conversionApi.getSplitParts( modelElement );\n\n\t\t// Set conversion result range.\n\t\tdata.modelRange = new ModelRange(\n\t\t\tconversionApi.writer.createPositionBefore( modelElement ),\n\t\t\tconversionApi.writer.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t);\n\n\t\t// Now we need to check where the `modelCursor` should be.\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed>foo</notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\n\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise just continue after inserted element.\n\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t};\n}\n\n// Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n// and a writer instance and returns a model element instance to be inserted in the model.\n//\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\n// @param {module:engine/view/node~Node} input The converted view node.\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\nfunction getModelElement( model, input, writer ) {\n\tif ( model instanceof Function ) {\n\t\treturn model( input, writer );\n\t} else {\n\t\treturn writer.createElement( model );\n\t}\n}\n\n// Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n// {@link module:engine/view/matcher~MatcherPattern}.\n//\n// @param {Object} config Conversion config.\n// @returns {String} Key of the converted view attribute.\nfunction normalizeViewAttributeKeyValueConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\tconfig.view = { key: config.view };\n\t}\n\n\tconst key = config.view.key;\n\tlet normalized;\n\n\tif ( key == 'class' || key == 'style' ) {\n\t\tconst keyName = key == 'class' ? 'classes' : 'styles';\n\n\t\tnormalized = {\n\t\t\t[ keyName ]: config.view.value\n\t\t};\n\t} else {\n\t\tconst value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n\n\t\tnormalized = {\n\t\t\tattributes: {\n\t\t\t\t[ key ]: value\n\t\t\t}\n\t\t};\n\t}\n\n\tif ( config.view.name ) {\n\t\tnormalized.name = config.view.name;\n\t}\n\n\tconfig.view = normalized;\n\n\treturn key;\n}\n\n// Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n// `config.model` is an `Object` with `key` and `value` properties.\n//\n// @param {Object} config Conversion config.\n// @param {String} viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n// will be equal to view attribute value.\nfunction normalizeModelAttributeConfig( config, viewAttributeKeyToCopy = null ) {\n\tconst defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute( viewAttributeKeyToCopy );\n\n\tconst key = typeof config.model != 'object' ? config.model : config.model.key;\n\tconst value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n\n\tconfig.model = { key, value };\n}\n\n// Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n// a proper converter function.\n//\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\nfunction prepareToAttributeConverter( config, shallow ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelKey = config.model.key;\n\t\tconst modelValue = typeof config.model.value == 'function' ? config.model.value( data.viewItem ) : config.model.value;\n\n\t\t// Do not convert if attribute building function returned falsy value.\n\t\tif ( modelValue === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( onlyViewNameIsDefined( config ) ) {\n\t\t\tmatch.match.name = true;\n\t\t} else {\n\t\t\t// Do not test or consume `name` consumable.\n\t\t\tdelete match.match.name;\n\t\t}\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are converting to attribute we need an range on which we will set the attribute.\n\t\t// If the range is not created yet, we will create it.\n\t\tif ( !data.modelRange ) {\n\t\t\t// Convert children and set conversion result as a current data.\n\t\t\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\t// Set attribute on current `output`. `Schema` is checked inside this helper function.\n\t\tconst attributeWasSet = setAttributeOn( data.modelRange, { key: modelKey, value: modelValue }, shallow, conversionApi );\n\n\t\tif ( attributeWasSet ) {\n\t\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\t\t}\n\t};\n}\n\n// Helper function that checks if element name should be consumed in attribute converters.\n//\n// @param {Object} config Conversion config.\n// @returns {Boolean}\nfunction onlyViewNameIsDefined( config ) {\n\tif ( typeof config.view == 'object' && !getViewElementNameFromConfig( config ) ) {\n\t\treturn false;\n\t}\n\n\treturn !config.view.classes && !config.view.attributes && !config.view.styles;\n}\n\n// Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n// to ensure proper model structure.\n//\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\n// @param {Object} modelAttribute Model attribute to set.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion API.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\nfunction setAttributeOn( modelRange, modelAttribute, shallow, conversionApi ) {\n\tlet result = false;\n\n\t// Set attribute on each item in range according to Schema.\n\tfor ( const node of Array.from( modelRange.getItems( { shallow } ) ) ) {\n\t\tif ( conversionApi.schema.checkAttribute( node, modelAttribute.key ) ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttribute.key, modelAttribute.value, node );\n\n\t\t\tresult = true;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n// function and converts it to a format that is supported by `_upcastElementToElement()` function.\n//\n// @param {Object} config Conversion configuration.\nfunction normalizeToMarkerConfig( config ) {\n\tconst oldModel = config.model;\n\n\tconfig.model = ( viewElement, modelWriter ) => {\n\t\tconst markerName = typeof oldModel == 'string' ? oldModel : oldModel( viewElement );\n\n\t\treturn modelWriter.createElement( '$marker', { 'data-name': markerName } );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertText, remove } from '../conversion/downcasthelpers';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * Editor model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View();\n\n\t\t/**\n\t\t * Mapper which describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\t// When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n\t\t// model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n\t\t// is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n\t\t//\n\t\t// See  https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\t\tthis.listenTo( this.model, '_beforeChanges', () => {\n\t\t\tthis.view._disableRendering( true );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this.model, '_afterChanges', () => {\n\t\t\tthis.view._disableRendering( false );\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n\t\t// Do it on 'low' priority, so changes are converted after other listeners did their job.\n\t\t// Also convert model selection.\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, markers, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from the view to the model when it changes in the view.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tviewRoot._document = this.view.document;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugincollection\n */\n\n/* globals console */\n\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the PluginCollection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#init} is used with plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t */\n\tconstructor( editor, availablePlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\n\t\t */\n\t\tthis._editor = editor;\n\n\t\t/**\n\t\t * Map of plugin constructors which can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\t/**\n\t\t * @protected\n\t\t * @member {Map} module:core/plugin~PluginCollection#_plugins\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tthis._availablePlugins.set( PluginConstructor, PluginConstructor );\n\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Get clipboard plugin instance\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n\t *\t\t\t\t// Do something on clipboard input.\n\t *\t\t\t} );\n\t *\t\t}\n\t *\n\t * **Note**: This method will throw error if plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n\t * to check if plugin is available.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\tconst plugin = this._plugins.get( key );\n\n\t\tif ( !plugin ) {\n\t\t\t/**\n\t\t\t * The plugin is not loaded and could not be obtained.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n\t\t\t * the plugin collection.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n\t\t\t * to check if plugin was loaded.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-loaded\n\t\t\t * @param {String} plugin The name of the plugin which is not loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-loaded: The requested plugin is not loaded.';\n\n\t\t\tlet pluginName = key;\n\n\t\t\tif ( typeof key == 'function' ) {\n\t\t\t\tpluginName = key.pluginName || key.name;\n\t\t\t}\n\n\t\t\tthrow new CKEditorError( errorMsg, this._editor, { plugin: pluginName } );\n\t\t}\n\n\t\treturn plugin;\n\t}\n\n\t/**\n\t * Checks if plugin is loaded.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Now use clipboard plugin instance:\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {Boolean}\n\t */\n\thas( key ) {\n\t\treturn this._plugins.has( key );\n\t}\n\n\t/**\n\t * Initializes a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) works only if\n\t * `availablePlugins` were passed to the {@link #constructor}.\n\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which gets resolved once all plugins are loaded\n\t * and available in the collection.\n\t */\n\tinit( plugins, removePlugins = [] ) {\n\t\tconst that = this;\n\t\tconst editor = this._editor;\n\t\tconst loading = new Set();\n\t\tconst loaded = [];\n\n\t\tconst pluginConstructors = mapToAvailableConstructors( plugins );\n\t\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\n\t\tconst missingPlugins = getMissingPluginNames( plugins );\n\n\t\tif ( missingPlugins ) {\n\t\t\t/**\n\t\t\t * Some plugins are not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n\t\t\t * that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\n\n\t\t\t// Log the error so it's more visible on the console. Hopefully, for better DX.\n\t\t\tconsole.error( attachLinkToDocumentation( errorMsg ), { plugins: missingPlugins } );\n\n\t\t\treturn Promise.reject( new CKEditorError( errorMsg, this._editor, { plugins: missingPlugins } ) );\n\t\t}\n\n\t\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\n\t\t\t.then( () => initPlugins( loaded, 'init' ) )\n\t\t\t.then( () => initPlugins( loaded, 'afterInit' ) )\n\t\t\t.then( () => loaded );\n\n\t\tfunction loadPlugin( PluginConstructor ) {\n\t\t\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The plugin is already loaded or being loaded - do nothing.\n\t\t\tif ( that._plugins.has( PluginConstructor ) || loading.has( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn instantiatePlugin( PluginConstructor )\n\t\t\t\t.catch( err => {\n\t\t\t\t\t/**\n\t\t\t\t\t * It was not possible to load the plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * This is a generic error logged to the console when a JavaSript error is thrown during the initialization\n\t\t\t\t\t * of one of the plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * If you correctly handled the promise returned by the editor's `create()` method (like shown below)\n\t\t\t\t\t * you will find the original error logged to the console, too:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n\t\t\t\t\t *\t\t\t.then( editor => {\n\t\t\t\t\t *\t\t\t\t// ...\n\t\t\t\t\t * \t\t\t} )\n\t\t\t\t\t *\t\t\t.catch( error => {\n\t\t\t\t\t *\t\t\t\tconsole.error( error );\n\t\t\t\t\t *\t\t\t} );\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-load\n\t\t\t\t\t * @param {String} plugin The name of the plugin that could not be loaded.\n\t\t\t\t\t */\n\t\t\t\t\tconsole.error( attachLinkToDocumentation(\n\t\t\t\t\t\t'plugincollection-load: It was not possible to load the plugin.'\n\t\t\t\t\t), { plugin: PluginConstructor } );\n\n\t\t\t\t\tthrow err;\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction initPlugins( loadedPlugins, method ) {\n\t\t\treturn loadedPlugins.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\n\t\tfunction instantiatePlugin( PluginConstructor ) {\n\t\t\treturn new Promise( resolve => {\n\t\t\t\tloading.add( PluginConstructor );\n\n\t\t\t\tif ( PluginConstructor.requires ) {\n\t\t\t\t\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\n\t\t\t\t\t\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\n\n\t\t\t\t\t\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-required\n\t\t\t\t\t\t\t * @param {Function} plugin The required plugin.\n\t\t\t\t\t\t\t * @param {Function} requiredBy The parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\n\t\t\t\t\t\t\t\t'the `removePlugins` option.',\n\t\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor, requiredBy: PluginConstructor }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadPlugin( RequiredPluginConstructor );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst plugin = new PluginConstructor( editor );\n\t\t\t\tthat._add( PluginConstructor, plugin );\n\t\t\t\tloaded.push( plugin );\n\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructor( PluginConstructorOrName ) {\n\t\t\tif ( typeof PluginConstructorOrName == 'function' ) {\n\t\t\t\treturn PluginConstructorOrName;\n\t\t\t}\n\n\t\t\treturn that._availablePlugins.get( PluginConstructorOrName );\n\t\t}\n\n\t\tfunction getMissingPluginNames( plugins ) {\n\t\t\tconst missingPlugins = [];\n\n\t\t\tfor ( const pluginNameOrConstructor of plugins ) {\n\t\t\t\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\n\t\t\t\t\tmissingPlugins.push( pluginNameOrConstructor );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn missingPlugins.length ? missingPlugins : null;\n\t\t}\n\n\t\tfunction mapToAvailableConstructors( plugins ) {\n\t\t\treturn plugins\n\t\t\t\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\n\t\t\t\t.filter( PluginConstructor => !!PluginConstructor );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = Array.from( this )\n\t\t\t.map( ( [ , pluginInstance ] ) => pluginInstance )\n\t\t\t.filter( pluginInstance => typeof pluginInstance.destroy == 'function' )\n\t\t\t.map( pluginInstance => pluginInstance.destroy() );\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\n\t\t\t\tnull,\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t}\n\n\t\tthis._plugins.set( pluginName, plugin );\n\t}\n}\n\nmix( PluginCollection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/commandcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n\t/**\n\t * Creates collection instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Command map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._commands = new Map();\n\t}\n\n\t/**\n\t * Registers a new command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {module:core/command~Command} command\n\t */\n\tadd( commandName, command ) {\n\t\tthis._commands.set( commandName, command );\n\t}\n\n\t/**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @returns {module:core/command~Command}\n\t */\n\tget( commandName ) {\n\t\treturn this._commands.get( commandName );\n\t}\n\n\t/**\n\t * Executes a command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( commandName, ...args ) {\n\t\tconst command = this.get( commandName );\n\n\t\tif ( !command ) {\n\t\t\t/**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param {String} commandName Name of the command.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'commandcollection-command-not-found: Command does not exist.', this, { commandName } );\n\t\t}\n\n\t\tcommand.execute( ...args );\n\t}\n\n\t/**\n\t * Returns iterator of command names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._commands.keys();\n\t}\n\n\t/**\n\t * Returns iterator of command instances.\n\t *\n\t * @returns {Iterable.<module:core/command~Command>}\n\t */\n\t* commands() {\n\t\tyield* this._commands.values();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._commands[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Destroys all collection commands.\n\t */\n\tdestroy() {\n\t\tfor ( const command of this.commands() ) {\n\t\t\tcommand.destroy();\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif ( !window.CKEDITOR_TRANSLATIONS ) {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\nexport function add( language, translations ) {\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n\n\tObject.assign( dictionary, translations );\n}\n\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\nexport function translate( language, translationKey ) {\n\tconst numberOfLanguages = getNumberOfLanguages();\n\n\tif ( numberOfLanguages === 1 ) {\n\t\t// Override the language to the only supported one.\n\t\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n\t\tlanguage = Object.keys( window.CKEDITOR_TRANSLATIONS )[ 0 ];\n\t}\n\n\tif ( numberOfLanguages === 0 || !hasTranslation( language, translationKey ) ) {\n\t\treturn translationKey.replace( / \\[context: [^\\]]+\\]$/, '' );\n\t}\n\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ];\n\n\t// In case of missing translations we still need to cut off the `[context: ]` parts.\n\treturn dictionary[ translationKey ].replace( / \\[context: [^\\]]+\\]$/, '' );\n}\n\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation( language, translationKey ) {\n\treturn (\n\t\t( language in window.CKEDITOR_TRANSLATIONS ) &&\n\t\t( translationKey in window.CKEDITOR_TRANSLATIONS[ language ] )\n\t);\n}\n\nfunction getNumberOfLanguages() {\n\treturn Object.keys( window.CKEDITOR_TRANSLATIONS ).length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\n\nimport { translate } from './translation-service';\n\nconst RTL_LANGUAGE_CODES = [ 'ar', 'fa', 'he', 'ku', 'ug' ];\n\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n\t/**\n\t * Creates a new instance of the Locale class. Learn more about\n\t * {@glink features/ui-language configuring language of the editor}.\n\t *\n\t * @param {Object} [options] Locale configuration.\n\t * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n\t * @param {String} [options.contentLanguage] The editor content language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n\t * See {@link #contentLanguage}.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n\t\t * it also defines the language of the content.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguage = options.uiLanguage || 'en';\n\n\t\t/**\n\t\t * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * Usually the same as {@link #uiLanguage editor language}, it can be customized by passing an optional\n\t\t * argument to the `Locale` constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguage = options.contentLanguage || this.uiLanguage;\n\n\t\t/**\n\t\t * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguageDirection = getLanguageDirection( this.uiLanguage );\n\n\t\t/**\n\t\t * Text direction of the {@link #contentLanguage editor content language}.\n\t\t *\n\t\t * If the content language was passed directly to the `Locale` constructor, this property represents the\n\t\t * direction of that language.\n\t\t *\n\t\t * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n\t\t * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n\t\t *\n\t\t * The value is either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguageDirection = getLanguageDirection( this.contentLanguage );\n\n\t\t/**\n\t\t * Translates the given string to the {@link #uiLanguage}. This method is also available in\n\t\t * {@link module:core/editor/editor~Editor#t} and {@link module:ui/view~View#t}.\n\t\t *\n\t\t * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\n\t\t * `<index>` is the index in the `values` array.\n\t\t *\n\t\t *\t\teditor.t( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n\t\t *\n\t\t * This method's context is statically bound to Locale instance,\n\t\t * so it can be called as a function:\n\t\t *\n\t\t *\t\tconst t = this.t;\n\t\t *\t\tt( 'Label' );\n\t\t *\n\t\t * @method #t\n\t\t * @param {String} str The string to translate.\n\t\t * @param {String[]} [values] Values that should be used to interpolate the string.\n\t\t */\n\t\tthis.t = ( ...args ) => this._t( ...args );\n\t}\n\n\t/**\n\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t *\n\t * **Note**: This property has been deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n\t * properties instead.\n\t *\n\t * @deprecated\n\t * @member {String}\n\t */\n\tget language() {\n\t\t/**\n\t\t * The {@link module:utils/locale~Locale#language `Locale#language`} property has been deprecated and will\n\t\t * be removed in the near future. Please use {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n\t\t *\n\t\t * @error locale-deprecated-language-property\n\t\t */\n\t\tconsole.warn(\n\t\t\t'locale-deprecated-language-property: ' +\n\t\t\t'The Locale#language property has been deprecated and will be removed in the near future. ' +\n\t\t\t'Please use #uiLanguage and #contentLanguage properties instead.' );\n\n\t\treturn this.uiLanguage;\n\t}\n\n\t/**\n\t * Base for the {@link #t} method.\n\t *\n\t * @private\n\t */\n\t_t( str, values ) {\n\t\tlet translatedString = translate( this.uiLanguage, str );\n\n\t\tif ( values ) {\n\t\t\ttranslatedString = translatedString.replace( /%(\\d+)/g, ( match, index ) => {\n\t\t\t\treturn ( index < values.length ) ? values[ index ] : match;\n\t\t\t} );\n\t\t}\n\n\t\treturn translatedString;\n\t}\n}\n\n// Helps determine whether a language is LTR or RTL.\n//\n// @param {String} language The ISO 639-1 language code.\n// @returns {String} 'ltr' or 'rtl\nfunction getLanguageDirection( languageCode ) {\n\treturn RTL_LANGUAGE_CODES.includes( languageCode ) ? 'rtl' : 'ltr';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\n\nimport { isArray } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\nexport default class ViewConsumable {\n\t/**\n\t * Creates new ViewConsumable.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n\t\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n\t\t * For {@link module:engine/view/text~Text text nodes} and\n\t\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n\t\t*/\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n\t *\n\t *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n\t *\t\tviewConsumable.add( p, { attributes: 'name' } ); // Adds element's attribute.\n\t *\t\tviewConsumable.add( p, { classes: 'foobar' } ); // Adds element's class.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // Adds element's style\n\t *\t\tviewConsumable.add( p, { attributes: 'name', styles: 'color' } ); // Adds attribute and style.\n\t *\t\tviewConsumable.add( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n\t *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n\t *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing actual style/class.\n\t *\n\t *\t\tviewConsumable.add( p, { attributes: 'style' } ); // This call will throw an exception.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // This is properly handled style.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\tadd( element, consumables ) {\n\t\tlet elementConsumables;\n\n\t\t// For text nodes and document fragments just mark them as consumable.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\tthis._consumables.set( element, true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// For elements create new ViewElementConsumables or update already existing one.\n\t\tif ( !this._consumables.has( element ) ) {\n\t\t\telementConsumables = new ViewElementConsumables();\n\t\t\tthis._consumables.set( element, elementConsumables );\n\t\t} else {\n\t\t\telementConsumables = this._consumables.get( element );\n\t\t}\n\n\t\telementConsumables.add( consumables );\n\t}\n\n\t/**\n\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n\t * first already consumed item is found and `null` when first non-consumable item is found.\n\t *\n\t *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n\t *\t\tviewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n\t *\t\tviewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n\t *\t\tviewConsumable.test( p, { styles: 'color' } ); // Tests style.\n\t *\t\tviewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n\t *\t\tviewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n\t *\t\tviewConsumable.test( textNode ); // Tests text node.\n\t *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n\t *\n\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n\t *\t\tviewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n\t * when first already consumed item is found and `null` when first non-consumable item is found.\n\t */\n\ttest( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// For text nodes and document fragments return stored boolean value.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\treturn elementConsumables;\n\t\t}\n\n\t\t// For elements test consumables object.\n\t\treturn elementConsumables.test( consumables );\n\t}\n\n\t/**\n\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n\t *\n\t *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n\t *\t\tviewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n\t *\t\tviewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n\t *\t\tviewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n\t *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n\t *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n\t *\n\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n\t *\t\tviewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n\t * otherwise returns `false`.\n\t */\n\tconsume( element, consumables ) {\n\t\tif ( this.test( element, consumables ) ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments set value to false.\n\t\t\t\tthis._consumables.set( element, false );\n\t\t\t} else {\n\t\t\t\t// For elements - consume consumables object.\n\t\t\t\tthis._consumables.get( element ).consume( consumables );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n\t * Method does not revert items that were never previously added for consumption, even if they are included in\n\t * method's call.\n\t *\n\t *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n\t *\t\tviewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n\t *\t\tviewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n\t *\t\tviewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n\t *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n\t *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n\t *\n\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n\t * consumption.\n\t *\n\t *\t\tviewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n\t *\t\tviewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\trevert( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables !== undefined ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments - set consumable to true.\n\t\t\t\tthis._consumables.set( element, true );\n\t\t\t} else {\n\t\t\t\t// For elements - revert items from consumables object.\n\t\t\t\telementConsumables.revert( consumables );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n\t * element's name and all its attributes, classes and styles.\n\t *\n\t * @static\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Object} consumables\n\t */\n\tstatic consumablesFromElement( element ) {\n\t\tconst consumables = {\n\t\t\tname: true,\n\t\t\tattributes: [],\n\t\t\tclasses: [],\n\t\t\tstyles: []\n\t\t};\n\n\t\tconst attributes = element.getAttributeKeys();\n\n\t\tfor ( const attribute of attributes ) {\n\t\t\t// Skip classes and styles - will be added separately.\n\t\t\tif ( attribute == 'style' || attribute == 'class' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumables.attributes.push( attribute );\n\t\t}\n\n\t\tconst classes = element.getClassNames();\n\n\t\tfor ( const className of classes ) {\n\t\t\tconsumables.classes.push( className );\n\t\t}\n\n\t\tconst styles = element.getStyleNames();\n\n\t\tfor ( const style of styles ) {\n\t\t\tconsumables.styles.push( style );\n\t\t}\n\n\t\treturn consumables;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n\t *\n\t * @static\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewConsumable` will be created.\n\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n\t * to add all consumables. It will be returned instead of a new instance.\n\t */\n\tstatic createFrom( from, instance ) {\n\t\tif ( !instance ) {\n\t\t\tinstance = new ViewConsumable();\n\t\t}\n\n\t\tif ( from.is( 'text' ) ) {\n\t\t\tinstance.add( from );\n\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add `from` itself, if it is an element.\n\t\tif ( from.is( 'element' ) ) {\n\t\t\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\n\t\t}\n\n\t\tif ( from.is( 'documentFragment' ) ) {\n\t\t\tinstance.add( from );\n\t\t}\n\n\t\tfor ( const child of from.getChildren() ) {\n\t\t\tinstance = ViewConsumable.createFrom( child, instance );\n\t\t}\n\n\t\treturn instance;\n\t}\n}\n\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\nclass ViewElementConsumables {\n\t/**\n\t * Creates ViewElementConsumables instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if name of the element can be consumed.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._canConsumeName = null;\n\n\t\t/**\n\t\t * Contains maps of element's consumables: attributes, classes and styles.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._consumables = {\n\t\t\tattributes: new Map(),\n\t\t\tstyles: new Map(),\n\t\t\tclasses: new Map()\n\t\t};\n\t}\n\n\t/**\n\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n\t * styles still could be consumed):\n\t *\n\t *\t\tconsumables.add( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n\t *\n\t * @param {Object} consumables Object describing which parts of the element can be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to add as consumable.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to add as consumable.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to add as consumable.\n\t */\n\tadd( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._add( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n\t *\n\t * Element's name can be tested:\n\t *\n\t *\t\tconsumables.test( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be tested.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to test.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to test.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to test.\n\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n\t * was never marked for consumption and `false` when even one of the items was already consumed.\n\t */\n\ttest( consumables ) {\n\t\t// Check if name can be consumed.\n\t\tif ( consumables.name && !this._canConsumeName ) {\n\t\t\treturn this._canConsumeName;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tconst value = this._test( type, consumables[ type ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return true only if all can be consumed.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n\t * is already consumed - it consumes all consumable items provided.\n\t * Element's name can be consumed:\n\t *\n\t *\t\tconsumables.consume( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to consume.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to consume.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to consume.\n\t */\n\tconsume( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = false;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._consume( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n\t * Element's name can be reverted:\n\t *\n\t *\t\tconsumables.revert( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be reverted.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to revert.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to revert.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to revert.\n\t */\n\trevert( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._revert( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that adds consumables of a given type: attribute, class or style.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * type is provided - it should be handled separately by providing actual style/class type.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_add( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Class and style attributes should be handled separately in\n\t\t\t\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n\t\t\t\t *\n\t\t\t\t * What you have done is trying to use:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n\t\t\t\t *\n\t\t\t\t * While each class and style should be registered separately:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n\t\t\t\t *\n\t\t\t\t * @error viewconsumable-invalid-attribute\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.', this );\n\t\t\t}\n\n\t\t\tconsumables.set( name, true );\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that tests consumables of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n\t * consumed and `false` when one of the items is already consumed.\n\t */\n\t_test( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// Check all classes/styles if class/style attribute is tested.\n\t\t\t\tconst value = this._test( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\t\t\t\t// Return null if attribute is not found.\n\t\t\t\tif ( value === undefined ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( !value ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper method that consumes items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_consume( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for consumption - consume them all.\n\t\t\t\tthis._consume( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconsumables.set( name, false );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that reverts items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or , `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_revert( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for reverting - revert them all.\n\t\t\t\tthis._revert( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\n\t\t\t\tif ( value === false ) {\n\t\t\t\t\tconsumables.set( name, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\t/**\n\t\t * A dictionary containing attribute properties.\n\t\t *\n\t\t * @private\n\t\t * @member {Object.<String,String>}\n\t\t */\n\t\tthis._attributeProperties = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * A single item cannot be registered twice in the schema.\n\t\t\t *\n\t\t\t * This situation may happen when:\n\t\t\t *\n\t\t\t * * Two or more plugins called {@link #register `register()`} with the same name. This will usually mean that\n\t\t\t * there is a collision between plugins which try to use the same element in the model. Unfortunately,\n\t\t\t * the only way to solve this is by modifying one of these plugins to use a unique model element name.\n\t\t\t * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n\t\t\t * and usually means one or more of the following issues:\n\t\t\t *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n\t\t\t *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n\t\t\t *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n\t\t\t *\n\t\t\t * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element that is being registered twice.\n\t\t\t * @error schema-cannot-register-item-twice\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\titemName\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * Cannot extend an item which was not registered yet.\n\t\t\t *\n\t\t\t * This error happens when a plugin tries to extend the schema definition of an item which was not\n\t\t\t * {@link #register registered} yet.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element which is being extended.\n\t\t\t * @error schema-cannot-extend-missing-item\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', this, {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n\t * (all objects are also limits).\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isLimit( 'image' ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!( def.isLimit || def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an inline element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n\t *\n\t *\t\tschema.isInline( 'paragraph' ); // -> false\n\t *\t\tschema.isInline( 'softBreak' ); // -> true\n\t *\n\t *\t\tconst text = writer.createText('foo' );\n\t *\t\tschema.isInline( text ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisInline( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isInline );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * Note: When verifying whether the given node can be a child of the given context, the\n\t * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n\t * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n\t * It happens if one of the context's elements does not allow its child.\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n\t * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-before: The node before the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-after: The node after the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * This method allows assigning additional metadata to the model attributes. For example,\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n\t * used to mark formatting attributes (like `bold` or `italic`).\n\t *\n\t *\t\t// Mark bold as a formatting attribute.\n\t *\t\tschema.setAttributeProperties( 'bold', {\n\t *\t\t\tisFormatting: true\n\t *\t\t} );\n\t *\n\t *\t\t// Override code not to be considered a formatting markup.\n\t *\t\tschema.setAttributeProperties( 'code', {\n\t *\t\t\tisFormatting: false\n\t *\t\t} );\n\t *\n\t * Properties are not limited to members defined in the\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tcustomProperty: 'value'\n\t *\t\t} );\n\t *\n\t * Subsequent calls with the same attribute will extend its custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tone: 1\n\t *\t\t} );\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\ttwo: 2\n\t *\t\t} );\n\t *\n\t *\t\tconsole.log( schema.getAttributeProperties( 'blockQuote' ) );\n\t *\t\t// Logs: { one: 1, two: 2 }\n\t *\n\t * @param {String} attributeName A name of the attribute to receive the properties.\n\t * @param {module:engine/model/schema~AttributeProperties} properties A dictionary of properties.\n\t */\n\tsetAttributeProperties( attributeName, properties ) {\n\t\tthis._attributeProperties[ attributeName ] = Object.assign( this.getAttributeProperties( attributeName ), properties );\n\t}\n\n\t/**\n\t * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n\t *\n\t * @param {String} attributeName A name of the attribute.\n\t * @returns {module:engine/model/schema~AttributeProperties}\n\t */\n\tgetAttributeProperties( attributeName ) {\n\t\treturn this._attributeProperties[ attributeName ] || {};\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection/range/position or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n\t * The selection/range/position to check.\n\t * @returns {module:engine/model/element~Element} The lowest limit element containing\n\t * the entire `selectionOrRangeOrPosition`.\n\t */\n\tgetLimitElement( selectionOrRangeOrPosition ) {\n\t\tlet element;\n\n\t\tif ( selectionOrRangeOrPosition instanceof Position ) {\n\t\t\telement = selectionOrRangeOrPosition.parent;\n\t\t} else {\n\t\t\tconst ranges = selectionOrRangeOrPosition instanceof Range ?\n\t\t\t\t[ selectionOrRangeOrPosition ] :\n\t\t\t\tArray.from( selectionOrRangeOrPosition.getRanges() );\n\n\t\t\t// Find the common ancestor for all selection's ranges.\n\t\t\telement = ranges\n\t\t\t\t.reduce( ( element, range ) => {\n\t\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t\t}, null );\n\t\t}\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\t\t\tconst context = [\n\t\t\t\t...firstPosition.getAncestors(),\n\t\t\t\tnew Text( '', selection.getAttributes() )\n\t\t\t];\n\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( context, attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* getValidRanges( ranges, attribute ) {\n\t\tranges = convertToMinimalFlatRanges( ranges );\n\n\t\tfor ( const range of ranges ) {\n\t\t\tyield* this._getValidRangesForRange( range, attribute );\n\t\t}\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n\t * the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for the nearest correct selection range can be specified as:\n\t *\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( { startPosition: position } );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range._createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @params {module:engine/model/node~Node|String} node Node for which allowed parent should be found or its name.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( position, node ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements.\n\t\t\tif ( this.isLimit( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\t\t\tif ( !this.checkAttribute( node, attribute ) ) {\n\t\t\t\t\twriter.removeAttribute( attribute, node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( node.is( 'element' ) ) {\n\t\t\t\tthis.removeDisallowedAttributes( node.getChildren(), writer );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an instance of the schema context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t * @returns {module:engine/model/schema~SchemaContext}\n\t */\n\tcreateContext( context ) {\n\t\treturn new SchemaContext( context );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n\t * inside the given range on which the attribute can be applied.\n\t *\n\t * This is a helper function for {@link ~Schema#getValidRanges}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Range to process.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* _getValidRangesForRange( range, attribute ) {\n\t\tlet start = range.start;\n\t\tlet end = range.start;\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tyield* this._getValidRangesForRange( Range._createIn( item ), attribute );\n\t\t\t}\n\n\t\t\tif ( !this.checkAttribute( item, attribute ) ) {\n\t\t\t\tif ( !start.isEqual( end ) ) {\n\t\t\t\t\tyield new Range( start, end );\n\t\t\t\t}\n\n\t\t\t\tstart = Position._createAfter( item );\n\t\t\t}\n\n\t\t\tend = Position._createAfter( item );\n\t\t}\n\n\t\tif ( !start.isEqual( end ) ) {\n\t\t\tyield new Range( start, end );\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`, `isInline`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`} returns `true` for object elements automatically.\n * * `isInline` &ndash; Whether an item is \"text-like\" and should be treated as an inline node. Examples of inline elements:\n * `$text`, `softBreak` (`<br>`), etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block',\n *\t\t\tisInline: true\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@glink framework/guides/deep-dive/schema Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * The number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns a new schema context instance with an additional item.\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n\t * (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n\t * to the current context.\n\t * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\n/**\n * A structure containing additional metadata describing the attribute.\n *\n * See {@link module:engine/model/schema~Schema#setAttributeProperties `Schema#setAttributeProperties()`} for usage examples.\n *\n * @typedef {Object} module:engine/model/schema~AttributeProperties\n * @property {Boolean} [isFormatting] Indicates that the attribute should be considered as a visual formatting, like `bold`, `italic` or\n * `fontSize` rather than semantic attribute (such as `src`, `listType`, etc.). For example, it is used by the \"Remove format\" feature.\n * @property {Boolean} [copyOnEnter] Indicates that given text attribute should be copied to the next block when enter is pressed.\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterable.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\nfunction* convertToMinimalFlatRanges( ranges ) {\n\tfor ( const range of ranges ) {\n\t\tyield* range.getMinimalFlatRanges();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\n\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element} into another structure.\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\n *\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \"converters\" should listen to\n * `UpcastDispatcher` for those events.\n *\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\n *\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\n * which provides additional tools for converters.\n *\n * Examples of providing callbacks for `UpcastDispatcher`:\n *\n *\t\t// Converter for links (<a>).\n *\t\teditor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why we need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert <p>'s font-size style.\n *\t\t// Note: You should use a low-priority observer in order to ensure that\n *\t\t// it's executed after the element-to-element converter.\n *\t\teditor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n *\t\t\tconst { consumable, schema, writer } = conversionApi;\n *\n *\t\t\tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n *\t\t\t// Don't go for the model element after data.modelCursor because it might happen\n *\t\t\t// that a single view element was converted to multiple model elements. Get all of them.\n *\t\t\tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n *\t\t\t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n *\t\t\t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n *\t\t\t\t}\n *\t\t\t}\n *\t\t}, { priority: 'low' } );\n *\n *\t\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\n *  \teditor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n *  \t \t// When element is already consumed by higher priority converters then do nothing.\n *  \t \tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *  \t \t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *  \t \t\t\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\n *  \t \t\t\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\n *  \t \t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n *\n *  \t \t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n *  \t \t\t\tif ( splitResult ) {\n *  \t \t\t\t\t// Insert paragraph in allowed position.\n *  \t \t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n *\n *  \t \t\t\t\t// Convert children to paragraph.\n *  \t \t\t\t\tconst { modelRange } = conversionApi.convertChildren(\n *  \t \t\t\t\t\tdata.viewItem,\n *  \t \t\t\t\t\tconversionApi.writer.createPositionAt( paragraph, 0 )\n *  \t \t\t\t\t);\n *\n * \t\t\t\t\t\t// Set as conversion result, attribute converters may use this property.\n *  \t \t\t\t\tdata.modelRange = conversionApi.writer.createRange(\n *  \t \t\t\t\t\tconversionApi.writer.createPositionBefore( paragraph ),\n *  \t \t\t\t\t\tmodelRange.end\n *  \t \t\t\t\t);\n *\n *  \t \t\t\t\t// Continue conversion inside paragraph.\n *  \t \t\t\t\tdata.modelCursor = data.modelRange.end;\n *  \t \t\t\t}\n *  \t \t\t}\n *  \t \t}\n *  \t }, { priority: 'low' } );\n *\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\n * event which can be used to prepare tree view for conversion.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher {\n\t/**\n\t * Creates a `UpcastDispatcher` that operates using passed API.\n\t *\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n\t * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\n\t * by `UpcastDispatcher`.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * List of the elements that were created during splitting.\n\t\t *\n\t\t * After conversion process the list is cleared.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:engine/model/element~Element,Array.<module:engine/model/element~Element>>}\n\t\t */\n\t\tthis._splitParts = new Map();\n\n\t\t/**\n\t\t * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\n\t\t * the target position where the content will be inserted. This property is build based on the context parameter of the\n\t\t * convert method.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position|null}\n\t\t */\n\t\tthis._modelCursor = null;\n\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( {}, conversionApi );\n\n\t\t// `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\n\t\t// instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\n\t\tthis.conversionApi.convertItem = this._convertItem.bind( this );\n\t\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\n\t\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\n\t\tthis.conversionApi.getSplitParts = this._getSplitParts.bind( this );\n\t}\n\n\t/**\n\t * Starts the conversion process. The entry point for the conversion.\n\t *\n\t * @fires element\n\t * @fires text\n\t * @fires documentFragment\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n\t * Part of the view to be converted.\n\t * @param {module:engine/model/writer~Writer} writer Instance of model writer.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\n\t * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t */\n\tconvert( viewItem, writer, context = [ '$root' ] ) {\n\t\tthis.fire( 'viewCleanup', viewItem );\n\n\t\t// Create context tree and set position in the top element.\n\t\t// Items will be converted according to this position.\n\t\tthis._modelCursor = createContextTree( context, writer );\n\n\t\t// Store writer in conversion as a conversion API\n\t\t// to be sure that conversion process will use the same batch.\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create consumable values list for conversion process.\n\t\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\n\n\t\t// Custom data stored by converter for conversion process.\n\t\tthis.conversionApi.store = {};\n\n\t\t// Do the conversion.\n\t\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\n\n\t\t// Conversion result is always a document fragment so let's create it.\n\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t// When there is a conversion result.\n\t\tif ( modelRange ) {\n\t\t\t// Remove all empty elements that were create while splitting.\n\t\t\tthis._removeEmptyElements();\n\n\t\t\t// Move all items that were converted in context tree to the document fragment.\n\t\t\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\n\t\t\t\twriter.append( item, documentFragment );\n\t\t\t}\n\n\t\t\t// Extract temporary markers elements from model and set as static markers collection.\n\t\t\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\n\t\t}\n\n\t\t// Clear context position.\n\t\tthis._modelCursor = null;\n\n\t\t// Clear split elements lists.\n\t\tthis._splitParts.clear();\n\n\t\t// Clear conversion API.\n\t\tthis.conversionApi.writer = null;\n\t\tthis.conversionApi.store = null;\n\n\t\t// Return fragment as conversion result.\n\t\treturn documentFragment;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n\t */\n\t_convertItem( viewItem, modelCursor ) {\n\t\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\n\n\t\tif ( viewItem.is( 'element' ) ) {\n\t\t\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\n\t\t} else if ( viewItem.is( 'text' ) ) {\n\t\t\tthis.fire( 'text', data, this.conversionApi );\n\t\t} else {\n\t\t\tthis.fire( 'documentFragment', data, this.conversionApi );\n\t\t}\n\n\t\t// Handle incorrect conversion result.\n\t\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\n\t\t\t/**\n\t\t\t * Incorrect conversion result was dropped.\n\t\t\t *\n\t\t\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\n\t\t\t *\n\t\t\t * @error view-conversion-dispatcher-incorrect-result\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.', this );\n\t\t}\n\n\t\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n\t */\n\t_convertChildren( viewItem, modelCursor ) {\n\t\tconst modelRange = new ModelRange( modelCursor );\n\t\tlet nextModelCursor = modelCursor;\n\n\t\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\n\t\t\tconst result = this._convertItem( viewChild, nextModelCursor );\n\n\t\t\tif ( result.modelRange instanceof ModelRange ) {\n\t\t\t\tmodelRange.end = result.modelRange.end;\n\t\t\t\tnextModelCursor = result.modelCursor;\n\t\t\t}\n\t\t}\n\n\t\treturn { modelRange, modelCursor: nextModelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n\t */\n\t_splitToAllowedParent( node, modelCursor ) {\n\t\t// Try to find allowed parent.\n\t\tconst allowedParent = this.conversionApi.schema.findAllowedParent( modelCursor, node );\n\n\t\t// When there is no parent that allows to insert node then return `null`.\n\t\tif ( !allowedParent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When current position parent allows to insert node then return this position.\n\t\tif ( allowedParent === modelCursor.parent ) {\n\t\t\treturn { position: modelCursor };\n\t\t}\n\n\t\t// When allowed parent is in context tree.\n\t\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Split element to allowed parent.\n\t\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\n\n\t\t// Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n\t\t//\n\t\t// The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n\t\t// that got split) to the beginning of the other part of that element:\n\t\t//\n\t\t// <limit><a><b><c>X[]Y</c></b><a></limit> ->\n\t\t// <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n\t\t//\n\t\t// After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n\t\t// Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n\t\t// Also, since we split all those elements, each of them has to have the other part.\n\t\t//\n\t\t// With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n\t\t// them with \"opening tags\" in the reverse order. For that we can use a stack.\n\t\tconst stack = [];\n\n\t\tfor ( const treeWalkerValue of splitResult.range.getWalker() ) {\n\t\t\tif ( treeWalkerValue.type == 'elementEnd' ) {\n\t\t\t\tstack.push( treeWalkerValue.item );\n\t\t\t} else {\n\t\t\t\t// There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n\t\t\t\tconst originalPart = stack.pop();\n\t\t\t\tconst splitPart = treeWalkerValue.item;\n\n\t\t\t\tthis._registerSplitPair( originalPart, splitPart );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: splitResult.position,\n\t\t\tcursorParent: splitResult.range.end.parent\n\t\t};\n\t}\n\n\t/**\n\t * Registers that `splitPart` element is a split part of the `originalPart` element.\n\t *\n\t * Data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} originalPart\n\t * @param {module:engine/model/element~Element} splitPart\n\t */\n\t_registerSplitPair( originalPart, splitPart ) {\n\t\tif ( !this._splitParts.has( originalPart ) ) {\n\t\t\tthis._splitParts.set( originalPart, [ originalPart ] );\n\t\t}\n\n\t\tconst list = this._splitParts.get( originalPart );\n\n\t\tthis._splitParts.set( splitPart, list );\n\t\tlist.push( splitPart );\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n\t */\n\t_getSplitParts( element ) {\n\t\tlet parts;\n\n\t\tif ( !this._splitParts.has( element ) ) {\n\t\t\tparts = [ element ];\n\t\t} else {\n\t\t\tparts = this._splitParts.get( element );\n\t\t}\n\n\t\treturn parts;\n\t}\n\n\t/**\n\t * Checks if there are any empty elements created while splitting and removes them.\n\t *\n\t * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n\t * as some elements might have become empty after other empty elements were removed from them.\n\t *\n\t * @private\n\t */\n\t_removeEmptyElements() {\n\t\tlet anyRemoved = false;\n\n\t\tfor ( const element of this._splitParts.keys() ) {\n\t\t\tif ( element.isEmpty ) {\n\t\t\t\tthis.conversionApi.writer.remove( element );\n\t\t\t\tthis._splitParts.delete( element );\n\n\t\t\t\tanyRemoved = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( anyRemoved ) {\n\t\t\tthis._removeEmptyElements();\n\t\t}\n\t}\n\n\t/**\n\t * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\n\t *\n\t * @event viewCleanup\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n\t * viewItem Part of the view to be converted.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/element~Element} is converted.\n\t *\n\t * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\n\t * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\n\t * all elements conversion or to conversion of specific elements.\n\t *\n\t * @event element\n\t * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\n\t * callbacks that will be called. This means that callbacks can override values if needed, and those values will\n\t * be available in other callbacks.\n\t * @param {module:engine/view/item~Item} data.viewItem Converted item.\n\t * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\n\t * Change this value for the next converter to tell where the conversion should continue.\n\t * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\n\t * converted element should be reflected by setting or modifying this property.\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion utilities to be used by callback.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/text~Text} is converted.\n\t *\n\t * @event text\n\t * @see #event:element\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n\t *\n\t * @event documentFragment\n\t * @see #event:element\n\t */\n}\n\nmix( UpcastDispatcher, EmitterMixin );\n\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\n\tconst markerElements = new Set();\n\tconst markers = new Map();\n\n\t// Create ModelTreeWalker.\n\tconst range = ModelRange._createIn( modelItem ).getItems();\n\n\t// Walk through DocumentFragment and collect marker elements.\n\tfor ( const item of range ) {\n\t\t// Check if current element is a marker.\n\t\tif ( item.name == '$marker' ) {\n\t\t\tmarkerElements.add( item );\n\t\t}\n\t}\n\n\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\tfor ( const markerElement of markerElements ) {\n\t\tconst markerName = markerElement.getAttribute( 'data-name' );\n\t\tconst currentPosition = writer.createPositionBefore( markerElement );\n\n\t\t// When marker of given name is not stored it means that we have found the beginning of the range.\n\t\tif ( !markers.has( markerName ) ) {\n\t\t\tmarkers.set( markerName, new ModelRange( currentPosition.clone() ) );\n\t\t// Otherwise is means that we have found end of the marker range.\n\t\t} else {\n\t\t\tmarkers.get( markerName ).end = currentPosition.clone();\n\t\t}\n\n\t\t// Remove marker element from DocumentFragment.\n\t\twriter.remove( markerElement );\n\t}\n\n\treturn markers;\n}\n\n// Creates model fragment according to given context and returns position in the bottom (the deepest) element.\nfunction createContextTree( contextDefinition, writer ) {\n\tlet position;\n\n\tfor ( const item of new SchemaContext( contextDefinition ) ) {\n\t\tconst attributes = {};\n\n\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\tattributes[ key ] = item.getAttribute( key );\n\t\t}\n\n\t\tconst current = writer.createElement( item.name, attributes );\n\n\t\tif ( position ) {\n\t\t\twriter.append( current, position );\n\t\t}\n\n\t\tposition = ModelPosition._createAt( current, 0 );\n\t}\n\n\treturn position;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/upcastdispatcher~UpcastConversionApi\n */\n\n/**\n * Starts conversion of given item by firing an appropriate event.\n *\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Starts conversion of all children of given item by firing appropriate events for all those children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Element which children should be converted.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\n * When no children was converted then range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\n * split nodes to allowed parent.\n *\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\n *\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\n *\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *  \t-> split for `<image>` ->\n *\n *  \t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\n * @param {module:engine/model/node~Node} node Node to insert.\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\n * @returns {module:engine/model/position~Position} position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\n * continue conversion. When element is not defined it means that there was no split.\n */\n\n/**\n * Returns all the split parts of given `element` that were created during upcasting through using {@link #splitToAllowedParent}.\n * It enables you to easily track those elements and continue processing them after they are split during their children conversion.\n *\n *\t\t<paragraph>Foo<image />bar<image />baz</paragraph> ->\n *\t\t<paragraph>Foo</paragraph><image /><paragraph>bar</paragraph><image /><paragraph>baz</paragraph>\n *\n * For a reference to any of above paragraphs, the function will return all three paragraphs (the original element included),\n * sorted in the order of their creation (the original element is the first one).\n *\n * If given `element` was not split, an array with single element is returned.\n *\n * Example of a usage in a converter code:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\t// Children conversion may split `myElement`.\n *\t\tconversionApi.convertChildren( myElement, modelCursor );\n *\n *\t\tconst splitParts = conversionApi.getSplitParts( myElement );\n *\t\tconst lastSplitPart = splitParts[ splitParts.length - 1 ];\n *\n *\t\t// Setting `data.modelRange` basing on split parts:\n *\t\tdata.modelRange = conversionApi.writer.createRange(\n *\t\t\tconversionApi.writer.createPositionBefore( myElement ),\n *\t\t\tconversionApi.writer.createPositionAfter( lastSplitPart )\n *\t\t);\n *\n *\t\t// Setting `data.modelCursor` to continue after the last split element:\n *\t\tdata.modelCursor = conversionApi.writer.createPositionAfter( lastSplitPart );\n *\n * **Tip:** if you are unable to get a reference to the original element (for example because the code is split into multiple converters\n * or even classes) but it was already converted, you might want to check first element in `data.modelRange`. This is a common situation\n * if an attribute converter is separated from an element converter.\n *\n * @method #getSplitParts\n * @param {module:engine/model/element~Element} element\n * @returns {Array.<module:engine/model/element~Element>}\n */\n\n/**\n * Stores information about what parts of processed view item are still waiting to be handled. After a piece of view item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/viewconsumable~ViewConsumable} #consumable\n */\n\n/**\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @member {Object} #store\n */\n\n/**\n * The model's schema instance.\n *\n * @member {module:engine/model/schema~Schema} #schema\n */\n\n/**\n * The {@link module:engine/model/writer~Writer} instance used to manipulate data during conversion.\n *\n * @member {module:engine/model/writer~Writer} #writer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/datacontroller\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport Mapper from '../conversion/mapper';\n\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText } from '../conversion/downcasthelpers';\n\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcasthelpers';\n\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewDowncastWriter from '../view/downcastwriter';\n\nimport ModelRange from '../model/range';\n\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * An instance of the data controller is always available in the {@link module:core/editor/editor~Editor#data `editor.data`}\n * property:\n *\n *\t\teditor.data.get( { rootName: 'customRoot' } ); // -> '<p>Hello!</p>'\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class DataController {\n\t/**\n\t * Creates a data controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model.\n\t * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\n\t * by the controller.\n\t */\n\tconstructor( model, dataProcessor ) {\n\t\t/**\n\t\t * Data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Data processor used during the conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/dataprocessor/dataprocessor~DataProcessor}\n\t\t */\n\t\tthis.processor = dataProcessor;\n\n\t\t/**\n\t\t * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\n\t\t * cleared directly after the data are converted. However, the mapper is defined as a class property, because\n\t\t * it needs to be passed to the `DowncastDispatcher` as a conversion API.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\n\t\t/**\n\t\t * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t\t */\n\t\tthis.upcastDispatcher = new UpcastDispatcher( {\n\t\t\tschema: model.schema\n\t\t} );\n\n\t\t// Define default converters for text and elements.\n\t\t//\n\t\t// Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n\t\t// converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\n\t\t// element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\n\t\tthis.upcastDispatcher.on( 'text', convertText(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'element', convertToModelFragment(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'documentFragment', convertToModelFragment(), { priority: 'lowest' } );\n\n\t\tthis.decorate( 'init' );\n\n\t\t// Fire `ready` event when initialisation has completed. Such low level listener gives possibility\n\t\t// to plug into initialisation pipeline without interrupting the initialisation flow.\n\t\tthis.on( 'init', () => {\n\t\t\tthis.fire( 'ready' );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n\t * formatted by the {@link #processor data processor}.\n\t *\n\t * @param {Object} [options]\n\t * @param {String} [options.rootName='main'] Root name.\n\t * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `empty` by default,\n\t * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely\n\t * use `'none'`. In such cases exact content will be returned (for example `<p>&nbsp;</p>` for an empty editor).\n\t * @returns {String} Output data.\n\t */\n\tget( options ) {\n\t\tconst { rootName = 'main', trim = 'empty' } = options || {};\n\n\t\tif ( !this._checkIfRootsExists( [ rootName ] ) ) {\n\t\t\t/**\n\t\t\t * Cannot get data from a non-existing root. This error is thrown when {@link #get DataController#get() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #get} like:\n\t\t\t *\n\t\t\t *\t\tdata.get( { rootName: 'root2' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-get-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-get-non-existent-root: Attempting to get data from a non-existing root.', this );\n\t\t}\n\n\t\tconst root = this.model.document.getRoot( rootName );\n\n\t\tif ( trim === 'empty' && !this.model.hasContent( root, { ignoreWhitespaces: true } ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn this.stringify( root );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n\t * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element whose content will be stringified.\n\t * @returns {String} Output data.\n\t */\n\tstringify( modelElementOrFragment ) {\n\t\t// Model -> view.\n\t\tconst viewDocumentFragment = this.toView( modelElementOrFragment );\n\n\t\t// View -> data.\n\t\treturn this.processor.toData( viewDocumentFragment );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n\t * converters attached to {@link #downcastDispatcher} to a\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\n\t */\n\ttoView( modelElementOrFragment ) {\n\t\t// Clear bindings so the call to this method gives correct results.\n\t\tthis.mapper.clearBindings();\n\n\t\t// First, convert elements.\n\t\tconst modelRange = ModelRange._createIn( modelElementOrFragment );\n\n\t\tconst viewDocumentFragment = new ViewDocumentFragment();\n\n\t\t// Create separate ViewDowncastWriter just for data conversion purposes.\n\t\t// We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\n\t\tconst viewWriter = new ViewDowncastWriter( new ViewDocument() );\n\t\tthis.mapper.bindElements( modelElementOrFragment, viewDocumentFragment );\n\n\t\tthis.downcastDispatcher.convertInsert( modelRange, viewWriter );\n\n\t\tif ( !modelElementOrFragment.is( 'documentFragment' ) ) {\n\t\t\t// Then, if a document element is converted, convert markers.\n\t\t\t// From all document markers, get those, which \"intersect\" with the converter element.\n\t\t\tconst markers = _getMarkersRelativeToElement( modelElementOrFragment );\n\n\t\t\tfor ( const [ name, range ] of markers ) {\n\t\t\t\tthis.downcastDispatcher.convertMarkerAdd( name, range, viewWriter );\n\t\t\t}\n\t\t}\n\n\t\treturn viewDocumentFragment;\n\t}\n\n\t/**\n\t * Sets initial input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * Initial data can be set only to document that {@link module:engine/model/document~Document#version} is equal 0.\n\t *\n\t * **Note** This method is {@link module:utils/observablemixin~ObservableMixin#decorate decorated} which is\n\t * used by e.g. collaborative editing plugin that syncs remote data on init.\n\t *\n\t * When data is passed as a string it is initialized on a default `main` root:\n\t *\n\t *\t\tdataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root.\n\t *\n\t * To initialize data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n\t *\n\t *\t\tdataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on the `main` and `title` roots.\n\t *\n\t * @fires init\n\t * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n\t * pairs to initialize data on multiple roots at once.\n\t * @returns {Promise} Promise that is resolved after the data is set on the editor.\n\t */\n\tinit( data ) {\n\t\tif ( this.model.document.version ) {\n\t\t\t/**\n\t\t\t * Cannot set initial data to not empty {@link module:engine/model/document~Document}.\n\t\t\t * Initial data should be set once, during {@link module:core/editor/editor~Editor} initialization,\n\t\t\t * when the {@link module:engine/model/document~Document#version} is equal 0.\n\t\t\t *\n\t\t\t * @error datacontroller-init-document-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-document-not-empty: Trying to set initial data to not empty document.', this );\n\t\t}\n\n\t\tlet initialData = {};\n\t\tif ( typeof data === 'string' ) {\n\t\t\tinitialData.main = data; // Default root is 'main'. To initiate data on a different root, object should be passed.\n\t\t} else {\n\t\t\tinitialData = data;\n\t\t}\n\n\t\tif ( !this._checkIfRootsExists( Object.keys( initialData ) ) ) {\n\t\t\t/**\n\t\t\t * Cannot init data on a non-existing root. This error is thrown when {@link #init DataController#init() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #init} like:\n\t\t\t *\n\t\t\t * \t\tdata.init( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-init-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-non-existent-root: Attempting to init data on a non-existing root.', this );\n\t\t}\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\tfor ( const rootName of Object.keys( initialData ) ) {\n\t\t\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\t\t\t\twriter.insert( this.parse( initialData[ rootName ], modelRoot ), modelRoot, 0 );\n\t\t\t}\n\t\t} );\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Sets input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * This method can be used any time to replace existing editor data by the new one without clearing the\n\t * {@link module:engine/model/document~Document#history document history}.\n\t *\n\t * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n\t * the {@link #parse} method.\n\t *\n\t * When data is passed as a string it is set on a default `main` root:\n\t *\n\t *\t\tdataController.set( '<p>Foo</p>' ); // Sets data on the `main` root.\n\t *\n\t * To set data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n\t *\n\t *\t\tdataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots.\n\t *\n\t * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n\t * pairs to set data on multiple roots at once.\n\t */\n\tset( data ) {\n\t\tlet newData = {};\n\n\t\tif ( typeof data === 'string' ) {\n\t\t\tnewData.main = data; // Default root is 'main'. To set data on a different root, object should be passed.\n\t\t} else {\n\t\t\tnewData = data;\n\t\t}\n\n\t\tif ( !this._checkIfRootsExists( Object.keys( newData ) ) ) {\n\t\t\t/**\n\t\t\t * Cannot set data on a non-existing root. This error is thrown when {@link #set DataController#set() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #set} like:\n\t\t\t *\n\t\t\t * \t\tdata.set( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-set-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-set-non-existent-root: Attempting to set data on a non-existing root.', this );\n\t\t}\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\twriter.setSelection( null );\n\t\t\twriter.removeSelectionAttribute( this.model.document.selection.getAttributeKeys() );\n\n\t\t\tfor ( const rootName of Object.keys( newData ) ) {\n\t\t\t\t// Save to model.\n\t\t\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\n\t\t\t\twriter.remove( writer.createRangeIn( modelRoot ) );\n\t\t\t\twriter.insert( this.parse( newData[ rootName ], modelRoot ), modelRoot, 0 );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n\t * attached to the {@link #upcastDispatcher}.\n\t *\n\t * @see #set\n\t * @param {String} data Data to parse.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\n\t */\n\tparse( data, context = '$root' ) {\n\t\t// data -> view\n\t\tconst viewDocumentFragment = this.processor.toView( data );\n\n\t\t// view -> model\n\t\treturn this.toModel( viewDocumentFragment, context );\n\t}\n\n\t/**\n\t * Returns the result of the given {@link module:engine/view/element~Element view element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n\t * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n\t *\n\t * When marker elements were converted during the conversion process, it will be set as a document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\n\t */\n\ttoModel( viewElementOrFragment, context = '$root' ) {\n\t\treturn this.model.change( writer => {\n\t\t\treturn this.upcastDispatcher.convert( viewElementOrFragment, writer, context );\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners set by the DataController.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks if all provided root names are existing editor roots.\n\t *\n\t * @private\n\t * @param {Array.<String>} rootNames Root names to check.\n\t * @returns {Boolean} Whether all provided root names are existing editor roots.\n\t */\n\t_checkIfRootsExists( rootNames ) {\n\t\tfor ( const rootName of rootNames ) {\n\t\t\tif ( !this.model.document.getRootNames().includes( rootName ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Event fired once data initialisation has finished.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Event fired after {@link #init init() method} has been run. It can be {@link #listenTo listened to} to adjust/modify\n\t * the initialisation flow. However, if the `init` event is stopped or prevented, the {@link #event:ready ready event}\n\t * should be fired manually.\n\t *\n\t * The `init` event is fired by decorated {@link #init} method.\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * @event init\n\t */\n}\n\nmix( DataController, ObservableMixin );\n\n// Helper function for downcast conversion.\n//\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\nfunction _getMarkersRelativeToElement( element ) {\n\tconst result = [];\n\tconst doc = element.root.document;\n\n\tif ( !doc ) {\n\t\treturn [];\n\t}\n\n\tconst elementRange = ModelRange._createIn( element );\n\n\tfor ( const marker of doc.model.markers ) {\n\t\tconst intersection = elementRange.getIntersection( marker.getRange() );\n\n\t\tif ( intersection ) {\n\t\t\tresult.push( [ marker.name, intersection ] );\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversion\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\n\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\nexport default class Conversion {\n\t/**\n\t * Creates a new conversion instance.\n\t *\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher>} downcastDispatchers\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastDispatcher|\n\t * Array.<module:engine/conversion/upcastdispatcher~UpcastDispatcher>} upcastDispatchers\n\t */\n\tconstructor( downcastDispatchers, upcastDispatchers ) {\n\t\t/**\n\t\t * Maps dispatchers group name to ConversionHelpers instances.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,module:engine/conversion/conversionhelpers~ConversionHelpers>}\n\t\t */\n\t\tthis._helpers = new Map();\n\n\t\t// Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n\t\tthis._downcast = Array.isArray( downcastDispatchers ) ? downcastDispatchers : [ downcastDispatchers ];\n\t\tthis._createConversionHelpers( { name: 'downcast', dispatchers: this._downcast, isDowncast: true } );\n\n\t\tthis._upcast = Array.isArray( upcastDispatchers ) ? upcastDispatchers : [ upcastDispatchers ];\n\t\tthis._createConversionHelpers( { name: 'upcast', dispatchers: this._upcast, isDowncast: false } );\n\t}\n\n\t/**\n\t * Define an alias for registered dispatcher.\n\t *\n\t *\t\tconst conversion = new Conversion(\n\t *\t\t\t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n\t *\t\t\tupcastDispatcher\n\t *\t\t);\n\t *\n\t *\t\tconversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n\t *\n\t * @param {String} alias An alias of a dispatcher.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher} dispatcher Dispatcher which should have an alias.\n\t */\n\taddAlias( alias, dispatcher ) {\n\t\tconst isDowncast = this._downcast.includes( dispatcher );\n\t\tconst isUpcast = this._upcast.includes( dispatcher );\n\n\t\tif ( !isUpcast && !isDowncast ) {\n\t\t\t/**\n\t\t\t * Trying to register and alias for a dispatcher that nas not been registered.\n\t\t\t *\n\t\t\t * @error conversion-add-alias-dispatcher-not-registered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-add-alias-dispatcher-not-registered: ' +\n\t\t\t\t'Trying to register and alias for a dispatcher that nas not been registered.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._createConversionHelpers( { name: alias, dispatchers: [ dispatcher ], isDowncast } );\n\t}\n\n\t/**\n\t * Provides a chainable API to assign converters to conversion dispatchers group.\n\t *\n\t * If the given group name has not been registered, the\n\t * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n\t *\n\t * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n\t * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n\t *\n\t * # Using bulit-in conversion helpers\n\t *\n\t * The `for()` chain comes with a set of conversion helpers which you can use like this:\n\t *\n\t *\t\teditor.conversion.for( 'downcast' )\n\t *\t\t\t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n\t *\t\t\t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' )\n\t *\t\t\t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n\t *\n\t * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n\t *\n\t * * downcast (model-to-view) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n\t *\n\t * * upcast (view-to-model) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n\t *\n\t * # Using custom conversion helpers\n\t *\n\t * If you need to implement a nontypical converter, you can do so by calling:\n\t *\n\t *\t\teditor.conversion.for( direction ).add( customHelper );\n\t *\n\t * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n\t * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n\t *\n\t * Example:\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t *\t\t\tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n\t *\t\t\t\t// Do something with a view <a> element.\n\t *\t\t\t} );\n\t *\t\t} );\n\t *\n\t * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n\t * custom converters.\n\t *\n\t * @param {String} groupName The name of dispatchers group to add the converters to.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tfor( groupName ) {\n\t\tif ( !this._helpers.has( groupName ) ) {\n\t\t\t/**\n\t\t\t * Trying to add a converter to an unknown dispatchers group.\n\t\t\t *\n\t\t\t * @error conversion-for-unknown-group\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.', this );\n\t\t}\n\n\t\treturn this._helpers.get( groupName );\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n\t * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'div',\n\t *\t\t\t\t{\n\t *\t\t\t\t\t// Any element with the `display: block` style.\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\tdisplay: 'block'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: 'h2',\n\t *\t\t\t// Convert \"headling-like\" paragraphs to headings.\n\t *\t\t\tupcastAlso: viewElement => {\n\t *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\tif ( size > 26 ) {\n\t *\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` is a `String` with a model element name to convert from or to.\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\telementToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).elementToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToElement( {\n\t\t\t\t\tmodel,\n\t\t\t\t\tview,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n\t * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n\t *\t\t// The same attribute on different elements may then be handled by a different converter.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'textDecoration',\n\t *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tunderline: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'underline'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tlineThrough: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'line-through'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'b',\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tclasses: 'bold'\n\t *\t\t\t\t},\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-weight': 'bold'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tviewElement => {\n\t *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn {\n\t *\t\t\t\t\t\t\tname: true,\n\t *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n\t *\t\t\t\t\t\t};\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tbig: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size > 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size < 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n\t * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\tattributeToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa).\n\t * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n\t * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n\t * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n\t * should be set up.\n\t *\n\t *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n\t *\t\teditor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n\t *\n\t *\t\t// Attribute values are strictly specified.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Set the style attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'style',\n\t *\t\t\t\t\tvalue: {\n\t *\t\t\t\t\t\tfloat: 'right',\n\t *\t\t\t\t\t\twidth: '50%',\n\t *\t\t\t\t\t\tmargin: '5px'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'align',\n\t *\t\t\t\tvalues: [ 'right', 'center' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-right'\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-center'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'right'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'center'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from and to.\n\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n\t * The `key` property is the model attribute key to convert from and to.\n\t * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n\t * view attribute value.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t *\n\t * The `definition.view` parameter specifies which view attribute should be converted from and to.\n\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n\t * The `key` property is the view attribute key to convert from and to.\n\t * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n\t * the same as the model attribute value.\n\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n\t * If `key` is `'style'`, `value` is an object with key-value pairs.\n\t * In other cases, `value` is a `String`.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n\t * to `{ key, value, [ name ] }` objects.\n\t *\n\t * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n\t *\n\t * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n\t * be given in both parameters.\n\t *\n\t * @param {Object} definition The converter definition.\n\t * @param {String|Object} definition.model The model attribute to convert from and to.\n\t * @param {String|Object} definition.view The view attribute to convert from and to.\n\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n\t * is used only if `config.model.values` is specified.\n\t */\n\tattributeToAttribute( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToAttribute( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.attributeToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and caches conversion helpers for given dispatchers group.\n\t *\n\t * @private\n\t * @param {Object} options\n\t * @param {String} options.name Group name.\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} options.dispatchers\n\t * @param {Boolean} options.isDowncast\n\t */\n\t_createConversionHelpers( { name, dispatchers, isDowncast } ) {\n\t\tif ( this._helpers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to register a group name that has already been registered.\n\t\t\t *\n\t\t\t * @error conversion-group-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-group-exists: Trying to register a group name that has already been registered.', this );\n\t\t}\n\n\t\tconst helpers = isDowncast ? new DowncastHelpers( dispatchers ) : new UpcastHelpers( dispatchers );\n\n\t\tthis._helpers.set( name, helpers );\n\t}\n}\n\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\nfunction* _getAllUpcastDefinitions( definition ) {\n\tif ( definition.model.values ) {\n\t\tfor ( const value of definition.model.values ) {\n\t\t\tconst model = { key: definition.model.key, value };\n\t\t\tconst view = definition.view[ value ];\n\t\t\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\n\n\t\t\tyield* _getUpcastDefinition( model, view, upcastAlso );\n\t\t}\n\t} else {\n\t\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\n\t}\n}\n\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\n\tyield { model, view };\n\n\tif ( upcastAlso ) {\n\t\tupcastAlso = Array.isArray( upcastAlso ) ? upcastAlso : [ upcastAlso ];\n\n\t\tfor ( const upcastAlsoItem of upcastAlso ) {\n\t\t\tyield { model, view: upcastAlsoItem };\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of operations that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/operation/operation~Operation>}\n\t\t */\n\t\tthis.operations = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n\t * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const op of this.operations ) {\n\t\t\tif ( op.baseVersion !== null ) {\n\t\t\t\treturn op.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds an operation to the batch instance.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n\t * @returns {module:engine/model/operation/operation~Operation} The added operation.\n\t */\n\taddOperation( operation ) {\n\t\toperation.batch = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nexport default class Operation {\n\t/**\n\t * Base operation constructor.\n\t *\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( baseVersion ) {\n\t\t/**\n\t\t * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n\t\t * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n\t\t * {@link module:engine/model/document~Document#version document version} the\n\t\t * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @member {Number}\n\t\t */\n\t\tthis.baseVersion = baseVersion;\n\n\t\t/**\n\t\t * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isDocumentOperation\n\t\t */\n\t\tthis.isDocumentOperation = this.baseVersion !== null;\n\n\t\t/**\n\t\t * {@link module:engine/model/batch~Batch Batch} to which the operation is added or `null` if the operation is not\n\t\t * added to any batch yet.\n\t\t *\n\t\t * @member {module:engine/model/batch~Batch|null} #batch\n\t\t */\n\t\tthis.batch = null;\n\n\t\t/**\n\t\t * Operation type.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #type\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns an operation that has the same parameters as this operation.\n\t\t *\n\t\t * @method #clone\n\t\t * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns a reverse operation. Reverse operation when executed right after\n\t\t * the original operation will bring back tree model state to the point before the original\n\t\t * operation execution. In other words, it reverses changes done by the original operation.\n\t\t *\n\t\t * Keep in mind that tree model state may change since executing the original operation,\n\t\t * so reverse operation will be \"outdated\". In that case you will need to transform it by\n\t\t * all operations that were executed after the original operation.\n\t\t *\n\t\t * @method #getReversed\n\t\t * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n\t\t */\n\n\t\t/**\n\t\t * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n\t\t *\n\t\t * @protected\n\t\t * @method #_execute\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n\t * an error if operation is not valid.\n\t *\n\t * @protected\n\t * @method #_validate\n\t */\n\t_validate() {\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @method #toJSON\n\t * @returns {Object} Clone of this object with the operation property replaced with string.\n\t */\n\ttoJSON() {\n\t\t// This method creates only a shallow copy, all nested objects should be defined separately.\n\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n\t\tconst json = Object.assign( {}, this );\n\n\t\tjson.__className = this.constructor.className;\n\n\t\t// Remove reference to the parent `Batch` to avoid circular dependencies.\n\t\tdelete json.batch;\n\n\t\t// Only document operations are shared with other clients so it is not necessary to keep this information.\n\t\tdelete json.isDocumentOperation;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Name of the operation class used for serialization.\n\t *\n\t * @type {String}\n\t */\n\tstatic get className() {\n\t\treturn 'Operation';\n\t}\n\n\t/**\n\t * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/operation~Operation}\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new this( json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/model/documentfragment\n */\n\nimport NodeList from './nodelist';\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates an empty `DocumentFragment`.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * Nodes to be contained inside the `DocumentFragment`.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n\t\t * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n\t\t * when DocumentFragment will be inserted to the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\n\t\t */\n\t\tthis.markers = new Map();\n\n\t\t/**\n\t\t * List of nodes contained inside the document fragment.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all nodes contained inside this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this.getChildren();\n\t}\n\n\t/**\n\t * Number of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocFrag.is( 'documentFragment' ); // -> true\n\t *\t\tdocFrag.is( 'model:documentFragment' ); // -> true\n\t *\n\t *\t\tdocFrag.is( 'view:documentFragment' ); // -> false\n\t *\t\tdocFrag.is( 'element' ); // -> false\n\t *\t\tdocFrag.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment' || type == 'model:documentFragment';\n\t}\n\n\t/**\n\t * Gets the child at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node|null} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this document fragment's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n\t *\n\t * @returns {Array}\n\t */\n\tgetPath() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts offset \"position\" to index \"position\".\n\t *\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\n\t *\t\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdocFrag.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdocFrag.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Converts `DocumentFragment` instance to plain object and returns it.\n\t * Takes care of converting all of this document fragment's children.\n\t *\n\t * @returns {Object} `DocumentFragment` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = [];\n\n\t\tfor ( const node of this._children ) {\n\t\t\tjson.push( node.toJSON() );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `DocumentFragment` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `DocumentFragment`.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_appendChild( items ) {\n\t\tthis._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this document fragment.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index\n\t * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/utils\n */\n\nimport Node from '../node';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport Range from '../range';\nimport DocumentFragment from '../documentfragment';\nimport NodeList from '../nodelist';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\n *\n * @protected\n * @namespace utils\n */\n\n/**\n * Inserts given nodes at given position.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.insert\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\n */\nexport function _insert( position, nodes ) {\n\tnodes = _normalizeNodes( nodes );\n\n\t// We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n\tconst offset = nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\tconst parent = position.parent;\n\n\t// Insertion might be in a text node, we should split it if that's the case.\n\t_splitNodeAtPosition( position );\n\tconst index = position.index;\n\n\t// Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n\t// using basic `Element` API.\n\tparent._insertChild( index, nodes );\n\n\t// Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n\t_mergeNodesAtIndex( parent, index + nodes.length );\n\t_mergeNodesAtIndex( parent, index );\n\n\treturn new Range( position, position.getShiftedBy( offset ) );\n}\n\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._remove\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\n * @returns {Array.<module:engine/model/node~Node>}\n */\nexport function _remove( range ) {\n\tif ( !range.isFlat ) {\n\t\t/**\n\t\t * Trying to remove a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-remove-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'operation-utils-remove-range-not-flat: ' +\n\t\t\t'Trying to remove a range which starts and ends in different element.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tconst parent = range.start.parent;\n\n\t// Range may be inside text nodes, we have to split them if that's the case.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Remove the text nodes using basic `Element` API.\n\tconst removed = parent._removeChildren( range.start.index, range.end.index - range.start.index );\n\n\t// Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n\t// touching at the position equal to the removed range beginning. We check merging possibility there.\n\t_mergeNodesAtIndex( parent, range.start.index );\n\n\treturn removed;\n}\n\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.move\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\n */\nexport function _move( sourceRange, targetPosition ) {\n\tif ( !sourceRange.isFlat ) {\n\t\t/**\n\t\t * Trying to move a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-move-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'operation-utils-move-range-not-flat: ' +\n\t\t\t'Trying to move a range which starts and ends in different element.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tconst nodes = _remove( sourceRange );\n\n\t// We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n\t// that change might have an impact on `targetPosition`.\n\ttargetPosition = targetPosition._getTransformedByDeletion( sourceRange.start, sourceRange.end.offset - sourceRange.start.offset );\n\n\treturn _insert( targetPosition, nodes );\n}\n\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._setAttribute\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param {String} key Key of attribute to set.\n * @param {*} value Attribute value.\n */\nexport function _setAttribute( range, key, value ) {\n\t// Range might start or end in text nodes, so we have to split them.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Iterate over all items in the range.\n\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t// Iterator will return `TextProxy` instances but we know that those text proxies will\n\t\t// always represent full text nodes (this is guaranteed thanks to splitting we did before).\n\t\t// So, we can operate on those text proxies' text nodes.\n\t\tconst node = item.is( 'textProxy' ) ? item.textNode : item;\n\n\t\tif ( value !== null ) {\n\t\t\tnode._setAttribute( key, value );\n\t\t} else {\n\t\t\tnode._removeAttribute( key );\n\t\t}\n\n\t\t// After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n\t\t_mergeNodesAtIndex( node.parent, node.index );\n\t}\n\n\t// Try to merge last changed node with it's previous sibling (not covered by the loop above).\n\t_mergeNodesAtIndex( range.end.parent, range.end.index );\n}\n\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.normalizeNodes\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\n */\nexport function _normalizeNodes( nodes ) {\n\tconst normalized = [];\n\n\tif ( !( nodes instanceof Array ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Convert instances of classes other than Node.\n\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\tif ( typeof nodes[ i ] == 'string' ) {\n\t\t\tnormalized.push( new Text( nodes[ i ] ) );\n\t\t} else if ( nodes[ i ] instanceof TextProxy ) {\n\t\t\tnormalized.push( new Text( nodes[ i ].data, nodes[ i ].getAttributes() ) );\n\t\t} else if ( nodes[ i ] instanceof DocumentFragment || nodes[ i ] instanceof NodeList ) {\n\t\t\tfor ( const child of nodes[ i ] ) {\n\t\t\t\tnormalized.push( child );\n\t\t\t}\n\t\t} else if ( nodes[ i ] instanceof Node ) {\n\t\t\tnormalized.push( nodes[ i ] );\n\t\t}\n\t\t// Skip unrecognized type.\n\t}\n\n\t// Merge text nodes.\n\tfor ( let i = 1; i < normalized.length; i++ ) {\n\t\tconst node = normalized[ i ];\n\t\tconst prev = normalized[ i - 1 ];\n\n\t\tif ( node instanceof Text && prev instanceof Text && _haveSameAttributes( node, prev ) ) {\n\t\t\t// Doing this instead changing `prev.data` because `data` is readonly.\n\t\t\tnormalized.splice( i - 1, 2, new Text( prev.data + node.data, prev.getAttributes() ) );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn normalized;\n}\n\n// Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n// merges them into one node if they have same attributes.\n//\n// Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n//\n// @private\n// @param {module:engine/model/element~Element} element Parent element of nodes to merge.\n// @param {Number} index Index between nodes to merge.\nfunction _mergeNodesAtIndex( element, index ) {\n\tconst nodeBefore = element.getChild( index - 1 );\n\tconst nodeAfter = element.getChild( index );\n\n\t// Check if both of those nodes are text objects with same attributes.\n\tif ( nodeBefore && nodeAfter && nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) && _haveSameAttributes( nodeBefore, nodeAfter ) ) {\n\t\t// Append text of text node after index to the before one.\n\t\tconst mergedNode = new Text( nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes() );\n\n\t\t// Remove separate text nodes.\n\t\telement._removeChildren( index - 1, 2 );\n\n\t\t// Insert merged text node.\n\t\telement._insertChild( index - 1, mergedNode );\n\t}\n}\n\n// Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n// containing a part of original text node.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position at which node should be split.\nfunction _splitNodeAtPosition( position ) {\n\tconst textNode = position.textNode;\n\tconst element = position.parent;\n\n\tif ( textNode ) {\n\t\tconst offsetDiff = position.offset - textNode.startOffset;\n\t\tconst index = textNode.index;\n\n\t\telement._removeChildren( index, 1 );\n\n\t\tconst firstPart = new Text( textNode.data.substr( 0, offsetDiff ), textNode.getAttributes() );\n\t\tconst secondPart = new Text( textNode.data.substr( offsetDiff ), textNode.getAttributes() );\n\n\t\telement._insertChild( index, [ firstPart, secondPart ] );\n\t}\n}\n\n// Checks whether two given nodes have same attributes.\n//\n// @private\n// @param {module:engine/model/node~Node} nodeA Node to check.\n// @param {module:engine/model/node~Node} nodeB Node to check.\n// @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\nfunction _haveSameAttributes( nodeA, nodeB ) {\n\tconst iteratorA = nodeA.getAttributes();\n\tconst iteratorB = nodeB.getAttributes();\n\n\tfor ( const attr of iteratorA ) {\n\t\tif ( attr[ 1 ] !== nodeB.getAttribute( attr[ 0 ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\titeratorB.next();\n\t}\n\n\treturn iteratorB.next().done;\n}\n\n/**\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\n *\n * Non-arrays are normalized as follows:\n * * {@link module:engine/model/node~Node Node} is left as is,\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\n * * children.\n *\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\n * merged if they have same attributes.\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\n * module:engine/model/node~NodeSet\n */\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes.\n\t *\n\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n\t * have an attribute with the same key as the added attribute.\n\t *\n\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n\t * must have an attribute with that key added.\n\t *\n\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n\t * operation's ranges must already have an attribute with given key and `oldValue` as value\n\t *\n\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( range, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Range on which operation should be applied.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.range = range.clone();\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null`, if attribute was not set before.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue === undefined ? null : oldValue;\n\n\t\t/**\n\t\t * New value of the attribute with given key or `null`, if operation should remove attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue === undefined ? null : newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeAttribute';\n\t\t} else {\n\t\t\treturn 'changeAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.range = this.range.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( !this.range.isFlat ) {\n\t\t\t/**\n\t\t\t * The range to change is not flat.\n\t\t\t *\n\t\t\t * @error attribute-operation-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'attribute-operation-range-not-flat: The range to change is not flat.', this );\n\t\t}\n\n\t\tfor ( const item of this.range.getItems( { shallow: true } ) ) {\n\t\t\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\n\t\t\t\t/**\n\t\t\t\t * Changed node has different attribute value than operation's old attribute value.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-wrong-old-value\n\t\t\t\t * @param {module:engine/model/item~Item} item\n\t\t\t\t * @param {String} key\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t\t'old attribute value.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ item, key: this.key, value: this.oldValue }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\n\t\t\t\t/**\n\t\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-attribute-exists\n\t\t\t\t * @param {module:engine/model/node~Node} node\n\t\t\t\t * @param {String} key\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ node: item, key: this.key }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// If value to set is same as old value, don't do anything.\n\t\tif ( !isEqual( this.oldValue, this.newValue ) ) {\n\t\t\t// Execution.\n\t\t\t_setAttribute( this.range, this.key, this.newValue );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'AttributeOperation';\n\t}\n\n\t/**\n\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class DetachOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t */\n\tconstructor( sourcePosition, howMany ) {\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} #howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'detach';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Cannot detach document node.\n\t\t\t *\n\t\t\t * @error detach-operation-on-document-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'detach-operation-on-document-node: Cannot detach document node.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_remove( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'DetachOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/moveoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n\t/**\n\t * Creates a move operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n\t\tthis.sourcePosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which moved nodes will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\tthis.targetPosition.stickiness = 'toNone';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.targetPosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'remove';\n\t\t} else if ( this.sourcePosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'reinsert';\n\t\t}\n\n\t\treturn 'move';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * Returns the start position of the moved range after it got moved. This may be different than\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n\t * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n\t * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n\t *\n\t *\t\t vv              vv\n\t *\t\tabcdefg ===> adefbcg\n\t *\t\t     ^          ^\n\t *\t\t     targetPos\tmovedRangeStart\n\t *\t\t     offset 6\toffset 4\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetMovedRangeStart() {\n\t\treturn this.targetPosition._getTransformedByDeletion( this.sourcePosition, this.howMany );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\treturn new this.constructor( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\t\tconst sourceOffset = this.sourcePosition.offset;\n\t\tconst targetOffset = this.targetPosition.offset;\n\n\t\t// Validate whether move operation has correct parameters.\n\t\t// Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n\t\t// We expect that many errors might be connected with one of scenarios described below.\n\t\tif ( sourceOffset + this.howMany > sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * The nodes which should be moved do not exist.\n\t\t\t *\n\t\t\t * @error move-operation-nodes-do-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.', this\n\t\t\t);\n\t\t} else if ( sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany ) {\n\t\t\t/**\n\t\t\t * Trying to move a range of nodes into the middle of that range.\n\t\t\t *\n\t\t\t * @error move-operation-range-into-itself\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.', this\n\t\t\t);\n\t\t} else if ( this.sourcePosition.root == this.targetPosition.root ) {\n\t\t\tif ( compareArrays( this.sourcePosition.getParentPath(), this.targetPosition.getParentPath() ) == 'prefix' ) {\n\t\t\t\tconst i = this.sourcePosition.path.length - 1;\n\n\t\t\t\tif ( this.targetPosition.path[ i ] >= sourceOffset && this.targetPosition.path[ i ] < sourceOffset + this.howMany ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Trying to move a range of nodes into one of nodes from that range.\n\t\t\t\t\t *\n\t\t\t\t\t * @error move-operation-node-into-itself\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.', this\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_move( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ), this.targetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\t\tjson.targetPosition = this.targetPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MoveOperation';\n\t}\n\n\t/**\n\t * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\n\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n\t/**\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n\t * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( name, oldRange, newRange, markers, affectsData, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Marker name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Marker range before the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.oldRange = oldRange ? oldRange.clone() : null;\n\n\t\t/**\n\t\t * Marker range after the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.newRange = newRange ? newRange.clone() : null;\n\n\t\t/**\n\t\t * Specifies whether the marker operation affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.affectsData = affectsData;\n\n\t\t/**\n\t\t * Marker collection on which change should be executed.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markers = markers;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tgetReversed() {\n\t\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst type = this.newRange ? '_set' : '_remove';\n\n\t\tthis._markers[ type ]( this.name, this.newRange, true, this.affectsData );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tif ( this.oldRange ) {\n\t\t\tjson.oldRange = this.oldRange.toJSON();\n\t\t}\n\n\t\tif ( this.newRange ) {\n\t\t\tjson.newRange = this.newRange.toJSON();\n\t\t}\n\n\t\tdelete json._markers;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MarkerOperation';\n\t}\n\n\t/**\n\t * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new MarkerOperation(\n\t\t\tjson.name,\n\t\t\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\n\t\t\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\n\t\t\tdocument.model.markers,\n\t\t\tjson.affectsData,\n\t\t\tjson.baseVersion\n\t\t);\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\n\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n\t/**\n\t * Creates an operation that changes element's name.\n\t *\n\t * @param {module:engine/model/position~Position} position Position before an element to change.\n\t * @param {String} oldName Current name of the element.\n\t * @param {String} newName New name for the element.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, oldName, newName, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before an element to change.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n\t\t */\n\t\tthis.position = position;\n\t\t// This position sticks to the next node because it is a position before the node that we want to change.\n\t\tthis.position.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Current name of the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n\t\t */\n\t\tthis.oldName = oldName;\n\n\t\t/**\n\t\t * New name for the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n\t\t */\n\t\tthis.newName = newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RenameOperation( this.position.clone(), this.oldName, this.newName, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RenameOperation( this.position.clone(), this.newName, this.oldName, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Given position is invalid or node after it is not instance of Element.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t} else if ( element.name !== this.oldName ) {\n\t\t\t/**\n\t\t\t * Element to change has different name than operation's old name.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-name: Element to change has different name than operation\\'s old name.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\telement.name = this.newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RenameOperation';\n\t}\n\n\t/**\n\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\n\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes on root element.\n\t *\n\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\n\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( root, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Root element to change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/rootelement~RootElement}\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null` if adding a new attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue;\n\n\t\t/**\n\t\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addRootAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeRootAttribute';\n\t\t} else {\n\t\t\treturn 'changeRootAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * The element to change is not a root element.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-not-a-root\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-not-a-root: The element to change is not a root element.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\n\t\t\t/**\n\t\t\t * The attribute which should be removed does not exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-wrong-old-value\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t'old attribute value.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\n\t\t\t/**\n\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-attribute-exists\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tif ( this.newValue !== null ) {\n\t\t\tthis.root._setAttribute( this.key, this.newValue );\n\t\t} else {\n\t\t\tthis.root._removeAttribute( this.key );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.root = this.root.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RootAttributeOperation';\n\t}\n\n\t/**\n\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tif ( !document.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error rootattributeoperation-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.',\n\t\t\t\tthis,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\n\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MergeOperation extends Operation {\n\t/**\n\t * Creates a merge operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n\t * element after that position will be moved to {@link ~#targetPosition}.\n\t * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n\t * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// This is, and should always remain, the first position in its parent.\n\t\tthis.sourcePosition.stickiness = 'toPrevious';\n\n\t\t/**\n\t\t * Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position which the nodes from the merged elements will be moved to.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\t// Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n\t\t// this is, and should always remain, the last position in its parent.\n\t\tthis.targetPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Position in graveyard to which the merged element will be moved.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition.clone();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position before the merged element (which will be deleted).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget deletionPosition() {\n\t\treturn new Position( this.sourcePosition.root, this.sourcePosition.path.slice( 0, -1 ) );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n\t * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.sourcePosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.sourcePosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tgetReversed() {\n\t\t// Positions in this method are transformed by this merge operation because the split operation bases on\n\t\t// the context after this merge operation happened (because split operation reverses it).\n\t\t// So we need to acknowledge that the merge operation happened and those positions changed a little.\n\t\tconst targetPosition = this.targetPosition._getTransformedByMergeOperation( this );\n\n\t\tconst path = this.sourcePosition.path.slice( 0, -1 );\n\t\tconst insertionPosition = new Position( this.sourcePosition.root, path )._getTransformedByMergeOperation( this );\n\n\t\tconst split = new SplitOperation( targetPosition, this.howMany, this.graveyardPosition, this.baseVersion + 1 );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\n\t\t// Validate whether merge operation has correct parameters.\n\t\tif ( !sourceElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge source position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-source-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-source-position-invalid: Merge source position is invalid.', this );\n\t\t} else if ( !targetElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge target position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-target-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-target-position-invalid: Merge target position is invalid.', this );\n\t\t} else if ( this.howMany != sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * Merge operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error merge-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst mergedElement = this.sourcePosition.parent;\n\t\tconst sourceRange = Range._createIn( mergedElement );\n\n\t\t_move( sourceRange, this.targetPosition );\n\t\t_move( Range._createOn( mergedElement ), this.graveyardPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = json.sourcePosition.toJSON();\n\t\tjson.targetPosition = json.targetPosition.toJSON();\n\t\tjson.graveyardPosition = json.graveyardPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MergeOperation';\n\t}\n\n\t/**\n\t * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\t\tconst graveyardPosition = Position.fromJSON( json.graveyardPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = SplitOperation.getInsertionPosition( splitPosition );\n\t\tthis.insertionPosition.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst split = new this.constructor( this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion );\n\t\tsplit.insertionPosition = this.insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid: Split position is invalid.', this );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root: Cannot split root element.', this );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.', this );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid: Graveyard position invalid.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\tconst split = new this( splitPosition, json.howMany, graveyardPosition, json.baseVersion );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( doc, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._doc = doc;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._doc;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootElement.is( 'rootElement' ); // -> true\n\t *\t\trootElement.is( 'element' ); // -> true\n\t *\t\trootElement.is( 'node' ); // -> true\n\t *\t\trootElement.is( 'model:rootElement' ); // -> true\n\t *\t\trootElement.is( 'model:element' ); // -> true\n\t *\t\trootElement.is( 'model:node' ); // -> true\n\t *\n\t *\t\trootElement.is( 'view:element' ); // -> false\n\t *\t\trootElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\trootElement.is( '$root' ); // -> true if this is a $root element\n\t *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n\t *\t\ttext.is( '$root' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name ) {\n\t\tconst cutType = type.replace( 'model:', '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/writer\n */\n\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport SplitOperation from './operation/splitoperation';\nimport MergeOperation from './operation/mergeoperation';\n\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/guides/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n\t/**\n\t * Creates a writer instance.\n\t *\n\t * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n\t * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/model~Model} model\n\t * @param {module:engine/model/batch~Batch} batch\n\t */\n\tconstructor( model, batch ) {\n\t\t/**\n\t\t * Instance of the model on which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The batch to which this writer will add changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis.batch = batch;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\t\twriter.createText( 'foo', { bold: true } );\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @returns {module:engine/model/text~Text} Created text node.\n\t */\n\tcreateText( data, attributes ) {\n\t\treturn new Text( data, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/element~Element element}.\n\t *\n\t *\t\twriter.createElement( 'paragraph' );\n\t *\t\twriter.createElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/model/element~Element} Created element.\n\t */\n\tcreateElement( name, attributes ) {\n\t\treturn new Element( name, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n\t */\n\tcreateDocumentFragment() {\n\t\treturn new DocumentFragment();\n\t}\n\n\t/**\n\t * Inserts item on given position.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, position );\n\t *\n\t * Instead of using position you can use parent and offset:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 5 );\n\t *\n\t * You can also use `end` instead of the offset to insert at the end:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 'end' );\n\t *\n\t * Or insert before or after another element:\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n\t * `model-writer-insert-forbidden-move` is thrown.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * **Note:** For a paste-like content insertion mechanism see\n\t * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n\t * fragment to insert.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsert( item, itemOrPosition, offset = 0 ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( item instanceof Text && item.data == '' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// If item has a parent already.\n\t\tif ( item.parent ) {\n\t\t\t// We need to check if item is going to be inserted within the same document.\n\t\t\tif ( isSameTree( item.root, position.root ) ) {\n\t\t\t\t// If it's we just need to move it.\n\t\t\t\tthis.move( Range._createOn( item ), position );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If it isn't the same root.\n\t\t\telse {\n\t\t\t\tif ( item.root.document ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Cannot move a node from a document to a different tree.\n\t\t\t\t\t * It is forbidden to move a node that was already in a document outside of it.\n\t\t\t\t\t *\n\t\t\t\t\t * @error model-writer-insert-forbidden-move\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'model-writer-insert-forbidden-move: ' +\n\t\t\t\t\t\t'Cannot move a node from a document to a different tree. ' +\n\t\t\t\t\t\t'It is forbidden to move a node that was already in a document outside of it.',\n\t\t\t\t\t\tthis\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move between two different document fragments or from document fragment to a document is possible.\n\t\t\t\t\t// In that case, remove the item from it's original parent.\n\t\t\t\t\tthis.remove( item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst version = position.root.document ? position.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( position, item, version );\n\n\t\tif ( item instanceof Text ) {\n\t\t\tinsert.shouldReceiveAttributes = true;\n\t\t}\n\n\t\tthis.batch.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\t// When element is a DocumentFragment we need to move its markers to Document#markers.\n\t\tif ( item instanceof DocumentFragment ) {\n\t\t\tfor ( const [ markerName, markerRange ] of item.markers ) {\n\t\t\t\t// We need to migrate marker range from DocumentFragment to Document.\n\t\t\t\tconst rangeRootPosition = Position._createAt( markerRange.root, 0 );\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tmarkerRange.start._getCombined( rangeRootPosition, position ),\n\t\t\t\t\tmarkerRange.end._getCombined( rangeRootPosition, position )\n\t\t\t\t);\n\n\t\t\t\tconst options = { range, usingOperation: true, affectsData: true };\n\n\t\t\t\tif ( this.model.markers.has( markerName ) ) {\n\t\t\t\t\tthis.updateMarker( markerName, options );\n\t\t\t\t} else {\n\t\t\t\t\tthis.addMarker( markerName, options );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts text on given position. You can optionally set text attributes:\n\t *\n\t *\t\twriter.insertText( 'foo', position );\n\t *\t\twriter.insertText( 'foo', { bold: true }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts 'foo' in paragraph, at offset 5:\n\t *\t\twriter.insertText( 'foo', paragraph, 5 );\n\t *\t\t// Inserts 'foo' at the end of a paragraph:\n\t *\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t// Inserts 'foo' after an image:\n\t *\t\twriter.insertText( 'foo', image, 'after' );\n\t *\n\t * These parameters work in the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertText( text, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createText( text ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts element on given position. You can optionally set attributes:\n\t *\n\t *\t\twriter.insertElement( 'paragraph', position );\n\t *\t\twriter.insertElement( 'paragraph', { alignment: 'center' }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts paragraph in the root at offset 5:\n\t *\t\twriter.insertElement( 'paragraph', root, 5 );\n\t *\t\t// Inserts paragraph at the end of a blockquote:\n\t *\t\twriter.insertElement( 'paragraph', blockquote, 'end' );\n\t *\t\t// Inserts after an image:\n\t *\t\twriter.insertElement( 'paragraph', image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertElement( name, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts item at the end of the given parent.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.append( paragraph, root );\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n\t * item Item or document fragment to insert.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappend( item, parent ) {\n\t\tthis.insert( item, parent, 'end' );\n\t}\n\n\t/**\n\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n\t *\n\t *\t\twriter.appendText( 'foo', paragraph );\n\t *\t\twriter.appendText( 'foo', { bold: true }, paragraph );\n\t *\n\t * @param {String} text Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendText( text, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createText( text ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n\t *\n\t *\t\twriter.appendElement( 'paragraph', root );\n\t *\t\twriter.appendElement( 'paragraph', { alignment: 'center' }, root );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendElement( name, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {*} value Attribute new value.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attribute will be set.\n\t */\n\tsetAttribute( key, value, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, value, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, value, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t *\t\twriter.setAttributes( {\n\t *\t\t\tbold: true,\n\t *\t\t\titalic: true\n\t *\t\t}, range );\n\t *\n\t * @param {Object} attributes Attributes keys and values.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attributes will be set.\n\t */\n\tsetAttributes( attributes, itemOrRange ) {\n\t\tfor ( const [ key, val ] of toMap( attributes ) ) {\n\t\t\tthis.setAttribute( key, val, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n\t * or from a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which the attribute will be removed.\n\t */\n\tremoveAttribute( key, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, null, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, null, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from all elements in the range or from the given item.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which all attributes will be removed.\n\t */\n\tclearAttributes( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst removeAttributesFromItem = item => {\n\t\t\tfor ( const attribute of item.getAttributeKeys() ) {\n\t\t\t\tthis.removeAttribute( attribute, item );\n\t\t\t}\n\t\t};\n\n\t\tif ( !( itemOrRange instanceof Range ) ) {\n\t\t\tremoveAttributesFromItem( itemOrRange );\n\t\t} else {\n\t\t\tfor ( const item of itemOrRange.getItems() ) {\n\t\t\t\tremoveAttributesFromItem( item );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves all items in the source range to the target position.\n\t *\n\t *\t\twriter.move( sourceRange, targetPosition );\n\t *\n\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\n\t * or before or after chosen item:\n\t *\n\t *\t\t// Moves all items in the range to the paragraph at offset 5:\n\t *\t\twriter.move( sourceRange, paragraph, 5 );\n\t *\t\t// Moves all items in the range to the end of a blockquote:\n\t *\t\twriter.move( sourceRange, blockquote, 'end' );\n\t *\t\t// Moves all items in the range to a position after an image:\n\t *\t\twriter.move( sourceRange, image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\n\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n\t * but you can not move items from document fragment to the document or from one detached element to another. Use\n\t * {@link module:engine/model/writer~Writer#insert} in such cases.\n\t *\n\t * @param {module:engine/model/range~Range} range Source range.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tmove( range, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Invalid range to move.\n\t\t\t *\n\t\t\t * @error writer-move-invalid-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.', this );\n\t\t}\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to move is not flat.\n\t\t\t *\n\t\t\t * @error writer-move-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.', this );\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// Do not move anything if the move target is same as moved range start.\n\t\tif ( position.isEqual( range.start ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'move', range );\n\n\t\tif ( !isSameTree( range.root, position.root ) ) {\n\t\t\t/**\n\t\t\t * Range is going to be moved within not the same document. Please use\n\t\t\t * {@link module:engine/model/writer~Writer#insert insert} instead.\n\t\t\t *\n\t\t\t * @error writer-move-different-document\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.', this );\n\t\t}\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\t\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\n\n\t\tthis.batch.addOperation( operation );\n\t\tthis.model.applyOperation( operation );\n\t}\n\n\t/**\n\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n\t */\n\tremove( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn( itemOrRange );\n\t\tconst ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n\n\t\tfor ( const flat of ranges ) {\n\t\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\t\tthis._addOperationForAffectedMarkers( 'move', flat );\n\n\t\t\tapplyRemoveOperation( flat.start, flat.end.offset - flat.start.offset, this.batch, this.model );\n\t\t}\n\t}\n\n\t/**\n\t * Merges two siblings at the given position.\n\t *\n\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n\t * `writer-merge-no-element-after` error will be thrown.\n\t *\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\tmerge( position ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'merge', position );\n\n\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node before merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-before\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node after merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-after\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !position.root.document ) {\n\t\t\tthis._mergeDetached( position );\n\t\t} else {\n\t\t\tthis._merge( position );\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn this.model.createPositionFromPath( root, path, stickiness );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn this.model.createPositionAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn this.model.createPositionAfter( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn this.model.createPositionBefore( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn this.model.createRange( start, end );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn this.model.createRangeIn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( element ) {\n\t\treturn this.model.createRangeOn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createSelection `Model#createSelection()`}.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn this.model.createSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Performs merge action in a detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_mergeDetached( position ) {\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tthis.move( Range._createIn( nodeAfter ), Position._createAt( nodeBefore, 'end' ) );\n\t\tthis.remove( nodeAfter );\n\t}\n\n\t/**\n\t * Performs merge action in a non-detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_merge( position ) {\n\t\tconst targetPosition = Position._createAt( position.nodeBefore, 'end' );\n\t\tconst sourcePosition = Position._createAt( position.nodeAfter, 0 );\n\n\t\tconst graveyard = position.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\tconst version = position.root.document.version;\n\n\t\tconst merge = new MergeOperation( sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version );\n\n\t\tthis.batch.addOperation( merge );\n\t\tthis.model.applyOperation( merge );\n\t}\n\n\t/**\n\t * Renames the given element.\n\t *\n\t * @param {module:engine/model/element~Element} element The element to rename.\n\t * @param {String} newName New element name.\n\t */\n\trename( element, newName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Trying to rename an object which is not an instance of Element.\n\t\t\t *\n\t\t\t * @error writer-rename-not-element-instance\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst version = element.root.document ? element.root.document.version : null;\n\t\tconst renameOperation = new RenameOperation( Position._createBefore( element ), element.name, newName, version );\n\n\t\tthis.batch.addOperation( renameOperation );\n\t\tthis.model.applyOperation( renameOperation );\n\t}\n\n\t/**\n\t * Splits elements starting from the given position and going to the top of the model tree as long as given\n\t * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n\t *\n\t * The element needs to have a parent. It cannot be a root element nor a document fragment.\n\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of split.\n\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n\t * @returns {Object} result Split result.\n\t * @returns {module:engine/model/position~Position} result.position Position between split elements.\n\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ends\n\t * at the beginning of the first copy element.\n\t */\n\tsplit( position, limitElement ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet splitElement = position.parent;\n\n\t\tif ( !splitElement.parent ) {\n\t\t\t/**\n\t\t\t * Element with no parent can not be split.\n\t\t\t *\n\t\t\t * @error writer-split-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.', this );\n\t\t}\n\n\t\t// When limit element is not defined lets set splitElement parent as limit.\n\t\tif ( !limitElement ) {\n\t\t\tlimitElement = splitElement.parent;\n\t\t}\n\n\t\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\n\t\t\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.', this );\n\t\t}\n\n\t\t// We need to cache elements that will be created as a result of the first split because\n\t\t// we need to create a range from the end of the first split element to the beginning of the\n\t\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\t\tlet firstSplitElement, firstCopyElement;\n\n\t\tdo {\n\t\t\tconst version = splitElement.root.document ? splitElement.root.document.version : null;\n\t\t\tconst howMany = splitElement.maxOffset - position.offset;\n\t\t\tconst split = new SplitOperation( position, howMany, null, version );\n\n\t\t\tthis.batch.addOperation( split );\n\t\t\tthis.model.applyOperation( split );\n\n\t\t\t// Cache result of the first split.\n\t\t\tif ( !firstSplitElement && !firstCopyElement ) {\n\t\t\t\tfirstSplitElement = splitElement;\n\t\t\t\tfirstCopyElement = position.parent.nextSibling;\n\t\t\t}\n\n\t\t\tposition = this.createPositionAfter( position.parent );\n\t\t\tsplitElement = position.parent;\n\t\t} while ( splitElement !== limitElement );\n\n\t\treturn {\n\t\t\tposition,\n\t\t\trange: new Range( Position._createAt( firstSplitElement, 'end' ), Position._createAt( firstCopyElement, 0 ) )\n\t\t};\n\t}\n\n\t/**\n\t * Wraps the given range with the given element or with a new element (if a string was passed).\n\t *\n\t * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n\t * If not, an error will be thrown.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to wrap.\n\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n\t */\n\twrap( range, elementOrString ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to wrap is not flat.\n\t\t\t *\n\t\t\t * @error writer-wrap-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.', this );\n\t\t}\n\n\t\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\n\n\t\tif ( element.childCount > 0 ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is not empty.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.', this );\n\t\t}\n\n\t\tif ( element.parent !== null ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is already attached to a tree model.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-attached\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.', this );\n\t\t}\n\n\t\tthis.insert( element, range.start );\n\n\t\t// Shift the range-to-wrap because we just inserted an element before that range.\n\t\tconst shiftedRange = new Range( range.start.getShiftedBy( 1 ), range.end.getShiftedBy( 1 ) );\n\n\t\tthis.move( shiftedRange, Position._createAt( element, 0 ) );\n\t}\n\n\t/**\n\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n\t * Throws error if you try to unwrap an element which does not have a parent.\n\t *\n\t * @param {module:engine/model/element~Element} element Element to unwrap.\n\t */\n\tunwrap( element ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( element.parent === null ) {\n\t\t\t/**\n\t\t\t * Trying to unwrap an element which has no parent.\n\t\t\t *\n\t\t\t * @error writer-unwrap-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.', this );\n\t\t}\n\n\t\tthis.move( Range._createIn( element ), this.createPositionAfter( element ) );\n\t\tthis.remove( element );\n\t}\n\n\t/**\n\t * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes.\n\t *\n\t * As the first parameter you can set marker name.\n\t *\n\t * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by the\n\t * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Create marker directly base on marker's name:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false } );\n\t *\n\t * Create marker using operation:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Create marker that affects the editor data:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false, affectsData: true } );\n\t *\n\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String} name Name of a marker to create - must be unique.\n\t * @param {Object} options\n\t * @param {Boolean} options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {module:engine/model/range~Range} options.range Marker range.\n\t * @param {Boolean} [options.affectsData=false] Flag indicating that the marker changes the editor data.\n\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n\t */\n\taddMarker( name, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !options || typeof options.usingOperation != 'boolean' ) {\n\t\t\t/**\n\t\t\t * The `options.usingOperation` parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-usingOperation\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst usingOperation = options.usingOperation;\n\t\tconst range = options.range;\n\t\tconst affectsData = options.affectsData === undefined ? false : options.affectsData;\n\n\t\tif ( this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Marker with provided name already exists.\n\t\t\t *\n\t\t\t * @error writer-addMarker-marker-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-addMarker-marker-exists: Marker with provided name already exists.', this );\n\t\t}\n\n\t\tif ( !range ) {\n\t\t\t/**\n\t\t\t * Range parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-range: Range parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( !usingOperation ) {\n\t\t\treturn this.model.markers._set( name, range, usingOperation, affectsData );\n\t\t}\n\n\t\tapplyMarkerOperation( this, name, null, range, affectsData );\n\n\t\treturn this.model.markers.get( name );\n\t}\n\n\t/**\n\t * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n\t * marker's range directly using this method.\n\t *\n\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n\t * name is created and returned.\n\t *\n\t * As the second parameter you can set the new marker data or leave this parameter as empty which will just refresh\n\t * the marker by triggering downcast conversion for it. Refreshing the marker is useful when you want to change\n\t * the marker {@link module:engine/view/element~Element view element} without changing any marker data.\n\t *\n\t * \t\tlet isCommentActive = false;\n\t *\n\t * \t\tmodel.conversion.markerToHighlight( {\n\t * \t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\tconst classes = [ 'comment-marker' ];\n\t *\n\t *\t\t\t\tif ( isCommentActive ) {\n\t *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn { classes };\n\t *\t\t\t}\n\t * \t\t} );\n\t *\n\t * \t\t// Change the property that indicates if marker is displayed as active or not.\n\t * \t\tisCommentActive = true;\n\t *\n\t * \t\t// And refresh the marker to convert it with additional class.\n\t * \t\tmodel.change( writer => writer.updateMarker( 'comment' ) );\n\t *\n\t * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by\n\t * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Update marker directly base on marker's name:\n\t *\n\t *\t\tupdateMarker( markerName, { range } );\n\t *\n\t * Update marker using operation:\n\t *\n\t *\t\tupdateMarker( marker, { range, usingOperation: true } );\n\t *\t\tupdateMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Change marker's option (start using operations to manage it):\n\t *\n\t *\t\tupdateMarker( marker, { usingOperation: true } );\n\t *\n\t * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n\t *\n\t *\t\tupdateMarker( markerName, { affectsData: false } );\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n\t * @param {Object} [options] If options object is not defined then marker will be refreshed by triggering\n\t * downcast conversion for this marker with the same data.\n\t * @param {module:engine/model/range~Range} [options.range] Marker range to update.\n\t * @param {Boolean} [options.usingOperation] Flag indicated whether the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {Boolean} [options.affectsData] Flag indicating that the marker changes the editor data.\n\t */\n\tupdateMarker( markerOrName, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !currentMarker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-updateMarker-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tif ( !options ) {\n\t\t\tthis.model.markers._refresh( currentMarker );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n\t\tconst affectsDataDefined = typeof options.affectsData == 'boolean';\n\n\t\t// Use previously defined marker's affectsData if the property is not provided.\n\t\tconst affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n\n\t\tif ( !hasUsingOperationDefined && !options.range && !affectsDataDefined ) {\n\t\t\t/**\n\t\t\t * One of the options is required - provide range, usingOperations or affectsData.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-wrong-options\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst currentRange = currentMarker.getRange();\n\t\tconst updatedRange = options.range ? options.range : currentRange;\n\n\t\tif ( hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations ) {\n\t\t\t// The marker type is changed so it's necessary to create proper operations.\n\t\t\tif ( options.usingOperation ) {\n\t\t\t\t// If marker changes to a managed one treat this as synchronizing existing marker.\n\t\t\t\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n\t\t\t\tapplyMarkerOperation( this, markerName, null, updatedRange, affectsData );\n\t\t\t} else {\n\t\t\t\t// If marker changes to a marker that do not use operations then we need to create additional operation\n\t\t\t\t// that removes that marker first.\n\t\t\t\tapplyMarkerOperation( this, markerName, currentRange, null, affectsData );\n\n\t\t\t\t// Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n\t\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Marker's type doesn't change so update it accordingly.\n\t\tif ( currentMarker.managedUsingOperations ) {\n\t\t\tapplyMarkerOperation( this, markerName, currentRange, updatedRange, affectsData );\n\t\t} else {\n\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n\t * it will be destroyed using operation.\n\t *\n\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n\t */\n\tremoveMarker( markerOrName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n\t\tif ( !this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove marker which does not exist.\n\t\t\t *\n\t\t\t * @error writer-removeMarker-no-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.', this );\n\t\t}\n\n\t\tconst marker = this.model.markers.get( name );\n\n\t\tif ( !marker.managedUsingOperations ) {\n\t\t\tthis.model.markers._remove( name );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldRange = marker.getRange();\n\n\t\tapplyMarkerOperation( this, name, oldRange, null, marker.affectsData );\n\t}\n\n\t/**\n\t * Sets the document's selection (ranges and direction) to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable} or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\twriter.setSelection( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPosition( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * Using key and value pair:\n\t *\n\t * \twriter.setSelectionAttribute( 'italic', true );\n\t *\n\t * Using key-value object:\n\t *\n\t * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n\t *\n\t * Using iterable object:\n\t *\n\t * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n\t *\n\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n\t * or object / iterable of key => value attribute pairs.\n\t * @param {*} [value] Attribute value.\n\t */\n\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrObjectOrIterable === 'string' ) {\n\t\t\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\n\t\t} else {\n\t\t\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\n\t\t\t\tthis._setSelectionAttribute( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute(s) with given key(s) from the selection.\n\t *\n\t * Remove one attribute:\n\t *\n\t *\t\twriter.removeSelectionAttribute( 'italic' );\n\t *\n\t * Remove multiple attributes:\n\t *\n\t *\t\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n\t *\n\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n\t */\n\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrIterableOfKeys === 'string' ) {\n\t\t\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\n\t\t} else {\n\t\t\tfor ( const key of keyOrIterableOfKeys ) {\n\t\t\t\tthis._removeSelectionAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n\t * of the selection from left to right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * For the following model fragment:\n\t *\n\t *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n\t *\n\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n\t * * Overridden gravity: selection will have `bold` attribute.\n\t *\n\t * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\toverrideSelectionGravity() {\n\t\treturn this.model.document.selection._overrideGravity();\n\t}\n\n\t/**\n\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @param {String} uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n\t */\n\trestoreSelectionGravity( uid ) {\n\t\tthis.model.document.selection._restoreGravity( uid );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t * @param {*} value Attribute value.\n\t */\n\t_setSelectionAttribute( key, value ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Store attribute in parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.setAttribute( storeKey, value, selection.anchor.parent );\n\t\t}\n\n\t\tselection._setAttribute( key, value );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeSelectionAttribute( key ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.removeAttribute( storeKey, selection.anchor.parent );\n\t\t}\n\n\t\tselection._removeAttribute( key );\n\t}\n\n\t/**\n\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n\t *\n\t * @private\n\t */\n\t_assertWriterUsedCorrectly() {\n\t\t/**\n\t\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()` or\n\t\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n\t\t *\n\t\t * The writer can only be used inside these blocks which ensures that the model\n\t\t * can only be changed during such \"sessions\".\n\t\t *\n\t\t * @error writer-incorrect-use\n\t\t */\n\t\tif ( this.model._currentWriter !== this ) {\n\t\t\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.', this );\n\t\t}\n\t}\n\n\t/**\n\t * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n\t * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n\t * can be later correctly processed during undo.\n\t *\n\t * @private\n\t * @param {'move'|'merge'} type Writer action type.\n\t * @param {module:engine/model/position~Position|module:engine/model/range~Range} positionOrRange Position or range\n\t * where the writer action happens.\n\t */\n\t_addOperationForAffectedMarkers( type, positionOrRange ) {\n\t\tfor ( const marker of this.model.markers ) {\n\t\t\tif ( !marker.managedUsingOperations ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst markerRange = marker.getRange();\n\t\t\tlet isAffected = false;\n\n\t\t\tif ( type == 'move' ) {\n\t\t\t\tisAffected =\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.start.isEqual( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\tpositionOrRange.end.isEqual( markerRange.end );\n\t\t\t} else {\n\t\t\t\t// if type == 'merge'.\n\t\t\t\tconst elementBefore = positionOrRange.nodeBefore;\n\t\t\t\tconst elementAfter = positionOrRange.nodeAfter;\n\n\t\t\t\t//               Start:  <p>Foo[</p><p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd;\n\n\t\t\t\t//               Start:  <p>[Foo</p><p>]Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0;\n\n\t\t\t\t//               Start:  <p>[Foo</p>]<p>Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter;\n\n\t\t\t\t//               Start:  <p>Foo</p>[<p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n\n\t\t\t\tisAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n\t\t\t}\n\n\t\t\tif ( isAffected ) {\n\t\t\t\tthis.updateMarker( marker.name, { range: markerRange } );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// Given `range` must be flat.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\nfunction setAttributeOnRange( writer, key, value, range ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\t// Position of the last split, the beginning of the new range.\n\tlet lastSplitPosition = range.start;\n\n\t// Currently position in the scanning range. Because we need value after the position, it is not a current\n\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\tlet position;\n\n\t// Value before the currently position.\n\tlet valueBefore;\n\n\t// Value after the currently position.\n\tlet valueAfter;\n\n\tfor ( const val of range.getWalker( { shallow: true } ) ) {\n\t\tvalueAfter = val.item.getAttribute( key );\n\n\t\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n\t\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\t\tif ( position && valueBefore != valueAfter ) {\n\t\t\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n\t\t\tif ( valueBefore != value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tlastSplitPosition = position;\n\t\t}\n\n\t\tposition = val.nextPosition;\n\t\tvalueBefore = valueAfter;\n\t}\n\n\t// Because position in the loop is not the iterator position (see let position comment), the last position in\n\t// the while loop will be last but one position in the range. We need to check the last position manually.\n\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\n\t\taddOperation();\n\t}\n\n\tfunction addOperation() {\n\t\tconst range = new Range( lastSplitPosition, position );\n\t\tconst version = range.root.document ? doc.version : null;\n\t\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\nfunction setAttributeOnItem( writer, key, value, item ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst previousValue = item.getAttribute( key );\n\tlet range, operation;\n\n\tif ( previousValue != value ) {\n\t\tconst isRootChanged = item.root === item;\n\n\t\tif ( isRootChanged ) {\n\t\t\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\n\t\t\tconst version = item.document ? doc.version : null;\n\n\t\t\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\n\t\t} else {\n\t\t\trange = new Range( Position._createBefore( item ), writer.createPositionAfter( item ) );\n\n\t\t\tconst version = range.root.document ? doc.version : null;\n\n\t\t\toperation = new AttributeOperation( range, key, previousValue, value, version );\n\t\t}\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\n// @param {Boolean} affectsData\nfunction applyMarkerOperation( writer, name, oldRange, newRange, affectsData ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, affectsData, doc.version );\n\n\twriter.batch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given operation instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {Batch} batch Batch to which the operation will be added.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\nfunction applyRemoveOperation( position, howMany, batch, model ) {\n\tlet operation;\n\n\tif ( position.root.document ) {\n\t\tconst doc = model.document;\n\t\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\n\n\t\toperation = new MoveOperation( position, howMany, graveyardPosition, doc.version );\n\t} else {\n\t\toperation = new DetachOperation( position, howMany );\n\t}\n\n\tbatch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\nfunction isSameTree( rootA, rootB ) {\n\t// If it is the same root this is the same tree.\n\tif ( rootA === rootB ) {\n\t\treturn true;\n\t}\n\n\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\n\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/differ\n */\n\nimport Position from './position';\nimport Range from './range';\n\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n\t/**\n\t * Creates a `Differ` instance.\n\t *\n\t * @param {module:engine/model/markercollection~MarkerCollection} markerCollection Model's marker collection.\n\t */\n\tconstructor( markerCollection ) {\n\t\t/**\n\t\t * Reference to the model's marker collection.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markerCollection = markerCollection;\n\n\t\t/**\n\t\t * A map that stores changes that happened in a given element.\n\t\t *\n\t\t * The keys of the map are references to the model elements.\n\t\t * The values of the map are arrays with changes that were done on this element.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changesInElement = new Map();\n\n\t\t/**\n\t\t * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n\t\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n\t\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._elementSnapshots = new Map();\n\n\t\t/**\n\t\t * A map that stores all changed markers.\n\t\t *\n\t\t * The keys of the map are marker names.\n\t\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n\t\t * state before and after the change.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changedMarkers = new Map();\n\n\t\t/**\n\t\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n\t\t * when changes are sorted.\n\t\t *\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._changeCount = 0;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n\t\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores those changes that did not take place in graveyard root.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChanges = null;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n\t\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChangesWithGraveyard = null;\n\t}\n\n\t/**\n\t * Informs whether there are any changes buffered in `Differ`.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n\t}\n\n\t/**\n\t * Marks given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted in the differ changes\n\t * set, so it will be effectively re-converted when differ changes will be handled by a dispatcher.\n\t *\n\t * @param {module:engine/model/item~Item} item Item to refresh.\n\t */\n\trefreshItem( item ) {\n\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._markRemove( item.parent, item.startOffset, item.offsetSize );\n\t\tthis._markInsert( item.parent, item.startOffset, item.offsetSize );\n\n\t\tconst range = Range._createOn( item );\n\n\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers the given operation. An operation has to be buffered before it is executed.\n\t *\n\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n\t * in the state before the operation is executed.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n\t */\n\tbufferOperation( operation ) {\n\t\t// Below we take an operation, check its type, then use its parameters in marking (private) methods.\n\t\t// The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n\t\t// Marking changes in them would cause a \"double\" changing then.\n\t\t//\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'addAttribute':\n\t\t\tcase 'removeAttribute':\n\t\t\tcase 'changeAttribute': {\n\t\t\t\tfor ( const item of operation.range.getItems( { shallow: true } ) ) {\n\t\t\t\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._markAttribute( item );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'remove':\n\t\t\tcase 'move':\n\t\t\tcase 'reinsert': {\n\t\t\t\t// When range is moved to the same position then not mark it as a change.\n\t\t\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n\t\t\t\tif (\n\t\t\t\t\toperation.sourcePosition.isEqual( operation.targetPosition ) ||\n\t\t\t\t\toperation.sourcePosition.getShiftedBy( operation.howMany ).isEqual( operation.targetPosition )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\n\t\t\t\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\n\n\t\t\t\tif ( !sourceParentInserted ) {\n\t\t\t\t\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tif ( !targetParentInserted ) {\n\t\t\t\t\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'rename': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\n\n\t\t\t\tconst range = Range._createFromPositionAndShift( operation.position, 1 );\n\n\t\t\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\t\t\tconst markerRange = marker.getRange();\n\n\t\t\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'split': {\n\t\t\t\tconst splitElement = operation.splitPosition.parent;\n\n\t\t\t\t// Mark that children of the split element were removed.\n\t\t\t\tif ( !this._isInInsertedElement( splitElement ) ) {\n\t\t\t\t\tthis._markRemove( splitElement, operation.splitPosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the new element (split copy) was inserted.\n\t\t\t\tif ( !this._isInInsertedElement( operation.insertionPosition.parent ) ) {\n\t\t\t\t\tthis._markInsert( operation.insertionPosition.parent, operation.insertionPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n\t\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\t\tthis._markRemove( operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'merge': {\n\t\t\t\t// Mark that the merged element was removed.\n\t\t\t\tconst mergedElement = operation.sourcePosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedElement.parent ) ) {\n\t\t\t\t\tthis._markRemove( mergedElement.parent, mergedElement.startOffset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the merged element was inserted into graveyard.\n\t\t\t\tconst graveyardParent = operation.graveyardPosition.parent;\n\n\t\t\t\tthis._markInsert( graveyardParent, operation.graveyardPosition.offset, 1 );\n\n\t\t\t\t// Mark that children of merged element were inserted at new parent.\n\t\t\t\tconst mergedIntoElement = operation.targetPosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedIntoElement ) ) {\n\t\t\t\t\tthis._markInsert( mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers a marker change.\n\t *\n\t * @param {String} markerName The name of the marker that changed.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n\t * been created.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n\t * @param {Boolean} affectsData Flag indicating whether marker affects the editor data.\n\t */\n\tbufferMarkerChange( markerName, oldRange, newRange, affectsData ) {\n\t\tconst buffered = this._changedMarkers.get( markerName );\n\n\t\tif ( !buffered ) {\n\t\t\tthis._changedMarkers.set( markerName, {\n\t\t\t\toldRange,\n\t\t\t\tnewRange,\n\t\t\t\taffectsData\n\t\t\t} );\n\t\t} else {\n\t\t\tbuffered.newRange = newRange;\n\t\t\tbuffered.affectsData = affectsData;\n\n\t\t\tif ( buffered.oldRange == null && buffered.newRange == null ) {\n\t\t\t\t// The marker is going to be removed (`newRange == null`) but it did not exist before the first buffered change\n\t\t\t\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n\t\t\t\tthis._changedMarkers.delete( markerName );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all markers that should be removed as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToRemove() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.oldRange != null ) {\n\t\t\t\tresult.push( { name, range: change.oldRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which should be added as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToAdd() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.newRange != null ) {\n\t\t\t\tresult.push( { name, range: change.newRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which changed.\n\t *\n\t * @returns {Array.<Object>}\n\t */\n\tgetChangedMarkers() {\n\t\treturn Array.from( this._changedMarkers ).map( item => (\n\t\t\t{\n\t\t\t\tname: item[ 0 ],\n\t\t\t\tdata: {\n\t\t\t\t\toldRange: item[ 1 ].oldRange,\n\t\t\t\t\tnewRange: item[ 1 ].newRange\n\t\t\t\t}\n\t\t\t}\n\t\t) );\n\t}\n\n\t/**\n\t * Checks whether some of the buffered changes affect the editor data.\n\t *\n\t * Types of changes which affect the editor data:\n\t *\n\t * * model structure changes,\n\t * * attribute changes,\n\t * * changes of markers which were defined as `affectingData`.\n\t *\n\t * @returns {Boolean}\n\t */\n\thasDataChanges() {\n\t\tfor ( const [ , change ] of this._changedMarkers ) {\n\t\t\tif ( change.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If markers do not affect the data, check whether there are some changes in elements.\n\t\treturn this._changesInElement.size > 0;\n\t}\n\n\t/**\n\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n\t *\n\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n\t * another one, it will be on an earlier index in the diff set.\n\t *\n\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n\t * previous {@link #getChanges} call, the next call will return the cached value.\n\t *\n\t * @param {Object} options Additional options.\n\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\n\t */\n\tgetChanges( options = { includeChangesInGraveyard: false } ) {\n\t\t// If there are cached changes, just return them instead of calculating changes again.\n\t\tif ( this._cachedChanges ) {\n\t\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\t\treturn this._cachedChangesWithGraveyard.slice();\n\t\t\t} else {\n\t\t\t\treturn this._cachedChanges.slice();\n\t\t\t}\n\t\t}\n\n\t\t// Will contain returned results.\n\t\tconst diffSet = [];\n\n\t\t// Check all changed elements.\n\t\tfor ( const element of this._changesInElement.keys() ) {\n\t\t\t// Get changes for this element and sort them.\n\t\t\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\n\t\t\t\tif ( a.offset === b.offset ) {\n\t\t\t\t\tif ( a.type != b.type ) {\n\t\t\t\t\t\t// If there are multiple changes at the same position, \"remove\" change should be first.\n\t\t\t\t\t\t// If the order is different, for example, we would first add some nodes and then removed them\n\t\t\t\t\t\t// (instead of the nodes that we should remove).\n\t\t\t\t\t\treturn a.type == 'remove' ? -1 : 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn a.offset < b.offset ? -1 : 1;\n\t\t\t} );\n\n\t\t\t// Get children of this element before any change was applied on it.\n\t\t\tconst snapshotChildren = this._elementSnapshots.get( element );\n\t\t\t// Get snapshot of current element's children.\n\t\t\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\n\n\t\t\t// Generate actions basing on changes done on element.\n\t\t\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\n\n\t\t\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\t\t\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n\n\t\t\t// Process every action.\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'i' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t} else if ( action === 'r' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\n\n\t\t\t\t\tj++;\n\t\t\t\t} else if ( action === 'a' ) {\n\t\t\t\t\t// Take attributes from saved and current children.\n\t\t\t\t\tconst elementAttributes = elementChildren[ i ].attributes;\n\t\t\t\t\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\n\t\t\t\t\tlet range;\n\n\t\t\t\t\tif ( elementChildren[ i ].name == '$text' ) {\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element, i + 1 ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index = element.offsetToIndex( i );\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element.getChild( index ), 0 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Generate diff items for this change (there might be multiple attributes changed and\n\t\t\t\t\t// there is a single diff for each of them) and insert them into the diff set.\n\t\t\t\t\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// `action` is 'equal'. Child not changed.\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, sort the changes by the position (change at position before other changes is first).\n\t\tdiffSet.sort( ( a, b ) => {\n\t\t\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\n\t\t\t// root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n\t\t\t// will be processed first.\n\t\t\tif ( a.position.root != b.position.root ) {\n\t\t\t\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If change happens at the same position...\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\t// Keep chronological order of operations.\n\t\t\t\treturn a.changeCount - b.changeCount;\n\t\t\t}\n\n\t\t\t// If positions differ, position \"on the left\" should be earlier in the result.\n\t\t\treturn a.position.isBefore( b.position ) ? -1 : 1;\n\t\t} );\n\n\t\t// Glue together multiple changes (mostly on text nodes).\n\t\tfor ( let i = 1; i < diffSet.length; i++ ) {\n\t\t\tconst prevDiff = diffSet[ i - 1 ];\n\t\t\tconst thisDiff = diffSet[ i ];\n\n\t\t\t// Glue remove changes if they happen on text on same position.\n\t\t\tconst isConsecutiveTextRemove =\n\t\t\t\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.isEqual( thisDiff.position );\n\n\t\t\t// Glue insert changes if they happen on text on consecutive fragments.\n\t\t\tconst isConsecutiveTextAdd =\n\t\t\t\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n\n\t\t\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\t\t\tconst isConsecutiveAttributeChange =\n\t\t\t\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\n\t\t\t\tprevDiff.attributeKey == thisDiff.attributeKey &&\n\t\t\t\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n\t\t\t\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n\t\t\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\n\t\t\t\tdiffSet[ i - 1 ].length++;\n\n\t\t\t\tif ( isConsecutiveAttributeChange ) {\n\t\t\t\t\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\n\t\t\t\t}\n\n\t\t\t\tdiffSet.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\t\tfor ( const item of diffSet ) {\n\t\t\tdelete item.changeCount;\n\n\t\t\tif ( item.type == 'attribute' ) {\n\t\t\t\tdelete item.position;\n\t\t\t\tdelete item.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._changeCount = 0;\n\n\t\t// Cache changes.\n\t\tthis._cachedChangesWithGraveyard = diffSet.slice();\n\t\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\n\n\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\treturn this._cachedChangesWithGraveyard;\n\t\t} else {\n\t\t\treturn this._cachedChanges;\n\t\t}\n\t}\n\n\t/**\n\t * Resets `Differ`. Removes all buffered changes.\n\t */\n\treset() {\n\t\tthis._changesInElement.clear();\n\t\tthis._elementSnapshots.clear();\n\t\tthis._changedMarkers.clear();\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Saves and handles an insert change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markInsert( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a remove change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markRemove( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\n\t\tthis._removeAllNestedChanges( parent, offset, howMany );\n\t}\n\n\t/**\n\t * Saves and handles an attribute change.\n\t *\n\t * @private\n\t * @param {module:engine/model/item~Item} item\n\t */\n\t_markAttribute( item ) {\n\t\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n\n\t\tthis._markChange( item.parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a model change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Object} changeItem\n\t */\n\t_markChange( parent, changeItem ) {\n\t\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\n\t\tthis._makeSnapshot( parent );\n\n\t\t// Then, get all changes that already were done on the element (empty array if this is the first change).\n\t\tconst changes = this._getChangesForElement( parent );\n\n\t\t// Then, look through all the changes, and transform them or the new change.\n\t\tthis._handleChange( changeItem, changes );\n\n\t\t// Add the new change.\n\t\tchanges.push( changeItem );\n\n\t\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\n\t\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\t\tfor ( let i = 0; i < changes.length; i++ ) {\n\t\t\tif ( changes[ i ].howMany < 1 ) {\n\t\t\t\tchanges.splice( i, 1 );\n\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of changes that have already been saved for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {Array.<Object>}\n\t */\n\t_getChangesForElement( element ) {\n\t\tlet changes;\n\n\t\tif ( this._changesInElement.has( element ) ) {\n\t\t\tchanges = this._changesInElement.get( element );\n\t\t} else {\n\t\t\tchanges = [];\n\n\t\t\tthis._changesInElement.set( element, changes );\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * Saves a children snapshot for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_makeSnapshot( element ) {\n\t\tif ( !this._elementSnapshots.has( element ) ) {\n\t\t\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\n\t\t}\n\t}\n\n\t/**\n\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n\t * change and/or the old change.\n\t *\n\t * @private\n\t * @param {Object} inc Incoming (new) change.\n\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\n\t */\n\t_handleChange( inc, changes ) {\n\t\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\n\t\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n\t\t// needs to be differentiated.\n\t\t//\n\t\t// This comes up when there are multiple changes that are affected by `inc` change item.\n\t\t//\n\t\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n\t\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n\t\t//\n\t\t// Then, we:\n\t\t// - \"forget\" about first insert change (it is \"eaten\" by remove),\n\t\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n\t\t// - but still we have to change offset of the second insert change from `5` to `3`!\n\t\t//\n\t\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n\t\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n\t\tinc.nodesToHandle = inc.howMany;\n\n\t\tfor ( const old of changes ) {\n\t\t\tconst incEnd = inc.offset + inc.howMany;\n\t\t\tconst oldEnd = old.offset + old.howMany;\n\n\t\t\tif ( inc.type == 'insert' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t// This case is more complicated, because attribute change has to be split into two.\n\t\t\t\t\t\t// Example (assume that uppercase and lowercase letters mean different attributes):\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// initial state:\t\tabcxyz\n\t\t\t\t\t\t// attribute change:\taBCXYz\n\t\t\t\t\t\t// incoming insert:\t\taBCfooXYz\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Change ranges cannot intersect because each item has to be described exactly (it was either\n\t\t\t\t\t\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\n\t\t\t\t\t\t// change has to be split and both parts has to be handled separately from now on.\n\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: incEnd,\n\t\t\t\t\t\t\thowMany: howMany - old.howMany,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'remove' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( incEnd <= oldEnd ) {\n\t\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\t\told.offset = inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= inc.nodesToHandle;\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\t\tinc.nodesToHandle -= old.howMany;\n\t\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t\tconst intersectionLength = oldEnd - inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tinc.nodesToHandle += old.howMany;\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd <= oldEnd ) {\n\t\t\t\t\t\t\t// On first sight in this case we don't need to split attribute operation into two.\n\t\t\t\t\t\t\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n\t\t\t\t\t\t\t// For that reason, no two changes may intersect.\n\t\t\t\t\t\t\t// So we cannot have an attribute change that \"contains\" remove change.\n\t\t\t\t\t\t\t// Attribute change needs to be split.\n\t\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n\n\t\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: inc.offset,\n\t\t\t\t\t\t\t\thowMany: howManyAfter,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= oldEnd - inc.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'attribute' ) {\n\t\t\t\t// In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\t// This case is similar to a case described when incoming change was insert and old change was attribute.\n\t\t\t\t\t\t\t// See comment above.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// This time incoming change is attribute. We need to split incoming change in this case too.\n\t\t\t\t\t\t\t// However this time, the second part of the attribute change needs to be processed further\n\t\t\t\t\t\t\t// because there might be other changes that it collides with.\n\t\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: oldEnd,\n\t\t\t\t\t\t\t\thowMany: incEnd - oldEnd,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\t\tchanges.push( attributePart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\tinc.nodesToHandle = incEnd - oldEnd;\n\t\t\t\t\t\t\tinc.offset = oldEnd;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\t// This is a case when attribute change \"contains\" remove change.\n\t\t\t\t\t// The attribute change needs to be split into two because changes cannot intersect.\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: old.offset,\n\t\t\t\t\t\t\thowMany: incEnd - old.offset,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\tchanges.push( attributePart );\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\t// There are only two conflicting scenarios possible here:\n\t\t\t\t\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\n\t\t\t\t\t\t// `old` change includes `inc` change, or they are the same.\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\tinc.howMany = 0;\n\t\t\t\t\t\tinc.offset = 0;\n\t\t\t\t\t} else if ( inc.offset <= old.offset && incEnd >= oldEnd ) {\n\t\t\t\t\t\t// `inc` change includes `old` change.\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinc.howMany = inc.nodesToHandle;\n\t\tdelete inc.nodesToHandle;\n\t}\n\n\t/**\n\t * Returns an object with a single insert change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getInsertDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'insert',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an object with a single remove change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getRemoveDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'remove',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an array of objects where each one is a single attribute change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The range where the change happened.\n\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n\t * @returns {Array.<Object>} An array containing one or more diff items.\n\t */\n\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\n\t\t// Results holder.\n\t\tconst diffs = [];\n\n\t\t// Clone new attributes as we will be performing changes on this object.\n\t\tnewAttributes = new Map( newAttributes );\n\n\t\t// Look through old attributes.\n\t\tfor ( const [ key, oldValue ] of oldAttributes ) {\n\t\t\t// Check what is the new value of the attribute (or if it was removed).\n\t\t\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\n\n\t\t\t// If values are different (or attribute was removed)...\n\t\t\tif ( newValue !== oldValue ) {\n\t\t\t\t// Add diff item.\n\t\t\t\tdiffs.push( {\n\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\tposition: range.start,\n\t\t\t\t\trange: range.clone(),\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tattributeKey: key,\n\t\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\t\tattributeNewValue: newValue,\n\t\t\t\t\tchangeCount: this._changeCount++\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Prevent returning two diff items for the same change.\n\t\t\tnewAttributes.delete( key );\n\t\t}\n\n\t\t// Look through new attributes that weren't handled above.\n\t\tfor ( const [ key, newValue ] of newAttributes ) {\n\t\t\t// Each of them is a new attribute. Add diff item.\n\t\t\tdiffs.push( {\n\t\t\t\ttype: 'attribute',\n\t\t\t\tposition: range.start,\n\t\t\t\trange: range.clone(),\n\t\t\t\tlength: 1,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: newValue,\n\t\t\t\tchangeCount: this._changeCount++\n\t\t\t} );\n\t\t}\n\n\t\treturn diffs;\n\t}\n\n\t/**\n\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element Element to check.\n\t * @returns {Boolean}\n\t */\n\t_isInInsertedElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( !parent ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst changes = this._changesInElement.get( parent );\n\t\tconst offset = element.startOffset;\n\n\t\tif ( changes ) {\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._isInInsertedElement( parent );\n\t}\n\n\t/**\n\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n\t * and `howMany`.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_removeAllNestedChanges( parent, offset, howMany ) {\n\t\tconst range = new Range( Position._createAt( parent, offset ), Position._createAt( parent, offset + howMany ) );\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tthis._elementSnapshots.delete( item );\n\t\t\t\tthis._changesInElement.delete( item );\n\n\t\t\t\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\nfunction _getChildrenSnapshot( children ) {\n\tconst snapshot = [];\n\n\tfor ( const child of children ) {\n\t\tif ( child.is( 'text' ) ) {\n\t\t\tfor ( let i = 0; i < child.data.length; i++ ) {\n\t\t\t\tsnapshot.push( {\n\t\t\t\t\tname: '$text',\n\t\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tsnapshot.push( {\n\t\t\t\tname: child.name,\n\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn snapshot;\n}\n\n// Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\n\tconst actions = [];\n\n\tlet offset = 0;\n\tlet oldChildrenHandled = 0;\n\n\t// Go through all buffered changes.\n\tfor ( const change of changes ) {\n\t\t// First, fill \"holes\" between changes with \"equal\" actions.\n\t\tif ( change.offset > offset ) {\n\t\t\tfor ( let i = 0; i < change.offset - offset; i++ ) {\n\t\t\t\tactions.push( 'e' );\n\t\t\t}\n\n\t\t\toldChildrenHandled += change.offset - offset;\n\t\t}\n\n\t\t// Then, fill up actions accordingly to change type.\n\t\tif ( change.type == 'insert' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'i' );\n\t\t\t}\n\n\t\t\t// The last handled offset is after inserted range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t} else if ( change.type == 'remove' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'r' );\n\t\t\t}\n\n\t\t\t// The last handled offset is at the position where the nodes were removed.\n\t\t\toffset = change.offset;\n\t\t\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t} else {\n\t\t\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is at the position after the changed range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t}\n\t}\n\n\t// Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n\t// has not been changed / removed at the end of their parent.\n\tif ( oldChildrenHandled < oldChildrenLength ) {\n\t\tfor ( let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++ ) {\n\t\t\tactions.push( 'e' );\n\t\t}\n\t}\n\n\treturn actions;\n}\n\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\nfunction _changesInGraveyardFilter( entry ) {\n\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n\n\treturn !posInGy && !rangeInGy;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/history\n */\n\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n\t/**\n\t * Creates an empty History instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Operations added to the history.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_operations\n\t\t */\n\t\tthis._operations = [];\n\n\t\t/**\n\t\t * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n\t\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t\t *\n\t\t * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n\t\t * value is an operation that has been undone by the \"undoing operation\".\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/history~History#_undoPairs\n\t\t */\n\t\tthis._undoPairs = new Map();\n\n\t\t/**\n\t\t * Holds all undone operations.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_undoneOperations\n\t\t */\n\t\tthis._undoneOperations = new Set();\n\t}\n\n\t/**\n\t * Adds an operation to the history.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to add.\n\t */\n\taddOperation( operation ) {\n\t\tif ( this._operations.includes( operation ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._operations.push( operation );\n\t}\n\n\t/**\n\t * Returns operations added to the history.\n\t *\n\t * @param {Number} [from=0] Base version from which operations should be returned (inclusive). Defaults to `0`, which means\n\t * that operations from the first one will be returned.\n\t * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which operations should be returned (exclusive).\n\t * Defaults to `Number.POSITIVE_INFINITY` which means that operations up to the last one will be returned.\n\t * @returns {Iterable.<module:engine/model/operation/operation~Operation>} Operations added to the history.\n\t */\n\tgetOperations( from = 0, to = Number.POSITIVE_INFINITY ) {\n\t\tif ( from < 0 ) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this._operations.slice( from, to );\n\t}\n\n\t/**\n\t * Returns operation from the history that bases on given `baseVersion`.\n\t *\n\t * @param {Number} baseVersion Base version of the operation to get.\n\t * @returns {module:engine/model/operation/operation~Operation|null} Operation with given base version or `null` if\n\t * there is no such operation in history.\n\t */\n\tgetOperation( baseVersion ) {\n\t\treturn this._operations[ baseVersion ];\n\t}\n\n\t/**\n\t * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n\t * history is keeping more context information about operations, which helps in operational transformation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoneOperation Operation which is undone by `undoingOperation`.\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation Operation which undoes `undoneOperation`.\n\t */\n\tsetOperationAsUndone( undoneOperation, undoingOperation ) {\n\t\tthis._undoPairs.set( undoingOperation, undoneOperation );\n\t\tthis._undoneOperations.add( undoneOperation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` is undoing any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` is undoing any other operation, `false` otherwise.\n\t */\n\tisUndoingOperation( operation ) {\n\t\treturn this._undoPairs.has( operation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` has been undone by any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` has been undone any other operation, `false` otherwise.\n\t */\n\tisUndoneOperation( operation ) {\n\t\treturn this._undoneOperations.has( operation );\n\t}\n\n\t/**\n\t * For given `undoingOperation`, returns the operation which has been undone by it.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation\n\t * @returns {module:engine/model/operation/operation~Operation|undefined} Operation that has been undone by given\n\t * `undoingOperation` or `undefined` if given `undoingOperation` is not undoing any other operation.\n\t */\n\tgetUndoneOperation( undoingOperation ) {\n\t\treturn this._undoPairs.get( undoingOperation );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark( character ) {\n\treturn !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\ud800-\\udbff]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\udc00-\\udfff]/.test( character );\n}\n\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair( string, offset ) {\n\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\n}\n\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol( string, offset ) {\n\treturn isCombiningMark( string.charAt( offset ) );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/document\n */\n\nimport Differ from './differ';\nimport RootElement from './rootelement';\nimport History from './history';\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport { clone } from 'lodash-es';\n\nconst graveyardName = '$graveyard';\n\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/guides/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n *\t\tmodel.document.getRoot(); // -> returns the main root\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Document {\n\t/**\n\t * Creates an empty document instance with no {@link #roots} (other than\n\t * the {@link #graveyard graveyard root}).\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * The {@link module:engine/model/model~Model model} that the document is a part of.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\n\t\t * operations are applied on a proper document version.\n\t\t *\n\t\t * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n\t\t * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The document's history.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/history~History}\n\t\t */\n\t\tthis.history = new History( this );\n\n\t\t/**\n\t\t * The selection in this document.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = new DocumentSelection( this );\n\n\t\t/**\n\t\t * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\n\t\t * {@link #getRoot} to manipulate it.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/differ~Differ}\n\t\t */\n\t\tthis.differ = new Differ( model.markers );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the model document.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<Function>}\n\t\t */\n\t\tthis._postFixers = new Set();\n\n\t\t/**\n\t\t * A boolean indicates whether the selection has changed until\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasSelectionChangedFromTheLastChangeBlock = false;\n\n\t\t// Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n\t\tthis.createRoot( '$root', graveyardName );\n\n\t\t// First, if the operation is a document operation check if it's base version is correct.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation && operation.baseVersion !== this.version ) {\n\t\t\t\t/**\n\t\t\t\t * Only operations with matching versions can be applied.\n\t\t\t\t *\n\t\t\t\t * @error document-applyOperation-wrong-version\n\t\t\t\t * @param {module:engine/model/operation/operation~Operation} operation\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ operation }\n\t\t\t\t);\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\t// Then, still before an operation is applied on model, buffer the change in differ.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.differ.bufferOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// After the operation is applied, bump document's version and add the operation to the history.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.version++;\n\t\t\t\tthis.history.addOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Listen to selection changes. If selection changed, mark it.\n\t\tthis.listenTo( this.selection, 'change', () => {\n\t\t\tthis._hasSelectionChangedFromTheLastChangeBlock = true;\n\t\t} );\n\n\t\t// Buffer marker changes.\n\t\t// This is not covered in buffering operations because markers may change outside of them (when they\n\t\t// are modified using `model.markers` collection, not through `MarkerOperation`).\n\t\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\n\t\t\t// Whenever marker is updated, buffer that change.\n\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, newRange, marker.affectsData );\n\n\t\t\tif ( oldRange === null ) {\n\t\t\t\t// If this is a new marker, add a listener that will buffer change whenever marker changes.\n\t\t\t\tmarker.on( 'change', ( evt, oldRange ) => {\n\t\t\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, marker.getRange(), marker.affectsData );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n\t *\n\t * @readonly\n\t * @member {module:engine/model/rootelement~RootElement}\n\t */\n\tget graveyard() {\n\t\treturn this.getRoot( graveyardName );\n\t}\n\n\t/**\n\t * Creates a new root.\n\t *\n\t * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\n\t * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n\t * @param {String} [rootName='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement} The created root.\n\t */\n\tcreateRoot( elementName = '$root', rootName = 'main' ) {\n\t\tif ( this.roots.get( rootName ) ) {\n\t\t\t/**\n\t\t\t * A root with the specified name already exists.\n\t\t\t *\n\t\t\t * @error model-document-createRoot-name-exists\n\t\t\t * @param {module:engine/model/document~Document} doc\n\t\t\t * @param {String} name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-document-createRoot-name-exists: Root with specified name already exists.',\n\t\t\t\tthis,\n\t\t\t\t{ name: rootName }\n\t\t\t);\n\t\t}\n\n\t\tconst root = new RootElement( this, elementName, rootName );\n\t\tthis.roots.add( root );\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * Removes all event listeners set by the document instance.\n\t */\n\tdestroy() {\n\t\tthis.selection.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns a root by its name.\n\t *\n\t * @param {String} [name='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or `null` when\n\t * there is no root with the given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\n\t *\n\t * @returns {Array.<String>} Roots names.\n\t */\n\tgetRootNames() {\n\t\treturn Array.from( this.roots, root => root.rootName ).filter( name => name != graveyardName );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features\n\t * will operate on a correct model state.\n\t *\n\t * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n\t * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n\t * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n\t * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n\t * for the user.\n\t *\n\t * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n\t * callback should add an empty paragraph so that the editor is never empty:\n\t *\n\t *\t\tdocument.registerPostFixer( writer => {\n\t *\t\t\tconst changes = document.differ.getChanges();\n\t *\n\t *\t\t\t// Check if the changes lead to an empty root in the editor.\n\t *\t\t\tfor ( const entry of changes ) {\n\t *\t\t\t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n\t *\t\t\t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n\t *\n\t *\t\t\t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n\t *\t\t\t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n\t *\t\t\t\t\treturn true;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * A custom `toJSON()` method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} A clone of this object with the document property changed to a string.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tjson.selection = '[engine.model.DocumentSelection]';\n\t\tjson.model = '[engine.model.Model]';\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Check if there were any changes done on document, and if so, call post-fixers,\n\t * fire `change` event for features and conversion and then reset the differ.\n\t * Fire `change:data` event when at least one operation or buffered marker changes the data.\n\t *\n\t * @protected\n\t * @fires change\n\t * @fires change:data\n\t * @param {module:engine/model/writer~Writer} writer The writer on which post-fixers will be called.\n\t */\n\t_handleChangeBlock( writer ) {\n\t\tif ( this._hasDocumentChangedFromTheLastChangeBlock() ) {\n\t\t\tthis._callPostFixers( writer );\n\n\t\t\t// Refresh selection attributes according to the final position in the model after the change.\n\t\t\tthis.selection.refresh();\n\n\t\t\tif ( this.differ.hasDataChanges() ) {\n\t\t\t\tthis.fire( 'change:data', writer.batch );\n\t\t\t} else {\n\t\t\t\tthis.fire( 'change', writer.batch );\n\t\t\t}\n\n\t\t\t// Theoretically, it is not necessary to refresh selection after change event because\n\t\t\t// post-fixers are the last who should change the model, but just in case...\n\t\t\tthis.selection.refresh();\n\n\t\t\tthis.differ.reset();\n\t\t}\n\n\t\tthis._hasSelectionChangedFromTheLastChangeBlock = false;\n\t}\n\n\t/**\n\t * Returns whether there is a buffered change or if the selection has changed from the last\n\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}\n\t * or {@link module:engine/model/model~Model#change `change()` block}.\n\t *\n\t * @protected\n\t * @returns {Boolean} Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.\n\t */\n\t_hasDocumentChangedFromTheLastChangeBlock() {\n\t\treturn !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;\n\t}\n\n\t/**\n\t * Returns the default root for this document which is either the first root that was added to the document using\n\t * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\n\t */\n\t_getDefaultRoot() {\n\t\tfor ( const root of this.roots ) {\n\t\t\tif ( root !== this.graveyard ) {\n\t\t\t\treturn root;\n\t\t\t}\n\t\t}\n\n\t\treturn this.graveyard;\n\t}\n\n\t/**\n\t * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n\t * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getDefaultRange() {\n\t\tconst defaultRoot = this._getDefaultRoot();\n\t\tconst model = this.model;\n\t\tconst schema = model.schema;\n\n\t\t// Find the first position where the selection can be put.\n\t\tconst position = model.createPositionFromPath( defaultRoot, [ 0 ] );\n\t\tconst nearestRange = schema.getNearestSelectionRange( position );\n\n\t\t// If valid selection range is not found - return range collapsed at the beginning of the root.\n\t\treturn nearestRange || model.createRange( position );\n\t}\n\n\t/**\n\t * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n\t * the {@link #selection document's selection}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range A range to check.\n\t * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\n\t */\n\t_validateSelectionRange( range ) {\n\t\treturn validateTextNodePosition( range.start ) && validateTextNodePosition( range.end );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer The writer on which post-fixer callbacks will be called.\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\t// Ensure selection attributes are up to date before each post-fixer.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1673.\n\t\t\t\t//\n\t\t\t\t// It might be good to refresh the selection after each operation but at the moment it leads\n\t\t\t\t// to losing attributes for composition or and spell checking\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-typing/issues/188\n\t\t\t\tthis.selection.refresh();\n\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Fired after each {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block} or the outermost\n\t * {@link module:engine/model/model~Model#change `change()` block} was executed and the document was changed\n\t * during that block's execution.\n\t *\n\t * The changes which this event will cover include:\n\t *\n\t * * document structure changes,\n\t * * selection changes,\n\t * * marker changes.\n\t *\n\t * If you want to be notified about all these changes, then simply listen to this event like this:\n\t *\n\t *\t\tmodel.document.on( 'change', () => {\n\t *\t\t\tconsole.log( 'The document has changed!' );\n\t *\t\t} );\n\t *\n\t * If, however, you only want to be notified about the data changes, then use the\n\t * {@link module:engine/model/document~Document#event:change:data change:data} event,\n\t * which is fired for document structure changes and marker changes (which affects the data).\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * @event change\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n\n\t/**\n\t * It is a narrower version of the {@link #event:change} event. It is fired for changes which\n\t * affect the editor data. This is:\n\t *\n\t * * document structure changes,\n\t * * marker changes (which affects the data).\n\t *\n\t * If you want to be notified about the data changes, then listen to this event:\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * If you would like to listen to all document changes, then check out the\n\t * {@link module:engine/model/document~Document#event:change change} event.\n\t *\n\t * @event change:data\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n}\n\nmix( Document, EmitterMixin );\n\n// Checks whether given range boundary position is valid for document selection, meaning that is not between\n// unicode surrogate pairs or base character and combining marks.\nfunction validateTextNodePosition( rangeBoundary ) {\n\tconst textNode = rangeBoundary.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tconst offset = rangeBoundary.offset - textNode.startOffset;\n\n\t\treturn !isInsideSurrogatePair( data, offset ) && !isInsideCombinedSymbol( data, offset );\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if marker with given `markerName` is in the collection.\n\t *\n\t * @param {String} markerName Marker name.\n\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n\t */\n\thas( markerName ) {\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false, affectsData = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.fromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData ) {\n\t\t\t\toldMarker._affectsData = affectsData;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations, affectsData );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n\t * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n\t * conversion} for the marker.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to refresh.\n\t */\n\t_refresh( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst marker = this._markers.get( markerName );\n\n\t\tif ( !marker ) {\n\t\t\tthrow new CKEditorError( 'markercollection-refresh-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tconst range = marker.getRange();\n\n\t\tthis.fire( 'update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersIntersectingRange( range ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().getIntersection( range ) !== null ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t */\n\tconstructor( name, liveRange, managedUsingOperations, affectsData ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/liverange~LiveRange}\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Specifies whether the marker affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._affectsData = affectsData;\n\t}\n\n\t/**\n\t * A value indicating if the marker is managed using operations.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#addMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * A value indicating if the marker changes the data.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget affectsData() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._affectsData;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.start.clone();\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.end.clone();\n\t}\n\n\t/**\n\t * Returns a range that represents the current state of the marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.toRange();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tmarker.is( 'marker' ); // -> true\n\t *\t\tmarker.is( 'model:marker' ); // -> true\n\t *\n\t *\t\tmarker.is( 'view:element' ); // -> false\n\t *\t\tmarker.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'marker' || type == 'model:marker';\n\t}\n\n\t/**\n\t * Binds new live range to the marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\n\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends Position {\n\t/**\n\t * Creates a live position.\n\t *\n\t * @see module:engine/model/position~Position\n\t * @param {module:engine/model/rootelement~RootElement} root\n\t * @param {Array.<Number>} path\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tsuper( root, path, stickiness );\n\n\t\tif ( !this.root.is( 'rootElement' ) ) {\n\t\t\t/**\n\t\t\t * LivePosition's root has to be an instance of RootElement.\n\t\t\t *\n\t\t\t * @error liveposition-root-not-rootelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-liveposition-root-not-rootelement: LivePosition\\'s root has to be an instance of RootElement.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tlivePosition.is( 'position' ); // -> true\n\t *\t\tlivePosition.is( 'model:position' ); // -> true\n\t *\t\tlivePosition.is( 'liveposition' ); // -> true\n\t *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n\t *\n\t *\t\tlivePosition.is( 'view:position' ); // -> false\n\t *\t\tlivePosition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'livePosition' || type == 'model:livePosition' || super.is( type );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\ttoPosition() {\n\t\treturn new Position( this.root, this.path.slice(), this.stickiness );\n\t}\n\n\t/**\n\t * Creates a `LivePosition` instance that is equal to position.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic fromPosition( position, stickiness ) {\n\t\treturn new this( position.root, position.path.slice(), stickiness ? stickiness : position.stickiness );\n\t}\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAfter\n\t * @see module:engine/model/position~Position._createAfter\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createBefore\n\t * @see module:engine/model/position~Position._createBefore\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAt\n\t * @see module:engine/model/position~Position._createAt\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset]\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n\t *\n\t * @event module:engine/model/liveposition~LivePosition#change\n\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n\t */\n}\n\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\tconst result = this.getTransformedByOperation( operation );\n\n\tif ( !this.isEqual( result ) ) {\n\t\tconst oldPosition = this.toPosition();\n\n\t\tthis.path = result.path;\n\t\tthis.root = result.root;\n\n\t\tthis.fire( 'change', oldPosition );\n\t}\n}\n\nmix( LivePosition, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\n\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\nimport Selection from '../selection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste\n * functionality to work.\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * Selection into which the content should be inserted.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertContent( model, content, selectable, placeOrOffset ) {\n\treturn model.change( writer => {\n\t\tlet selection;\n\n\t\tif ( !selectable ) {\n\t\t\tselection = model.document.selection;\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tselection = selectable;\n\t\t} else {\n\t\t\tselection = writer.createSelection( selectable, placeOrOffset );\n\t\t}\n\n\t\tconst insertionPosition = selection.getFirstPosition();\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tmodel.deleteContent( selection, { doNotAutoparagraph: true } );\n\t\t}\n\n\t\tconst insertion = new Insertion( model, writer, insertionPosition );\n\n\t\tlet nodesToInsert;\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tnodesToInsert = content.getChildren();\n\t\t} else {\n\t\t\tnodesToInsert = [ content ];\n\t\t}\n\n\t\tinsertion.handleNodes( nodesToInsert, {\n\t\t\t// The set of children being inserted is the only set in this context\n\t\t\t// so it's the first and last (it's a hack ;)).\n\t\t\tisFirst: true,\n\t\t\tisLast: true\n\t\t} );\n\n\t\tconst newRange = insertion.getSelectionRange();\n\n\t\t/* istanbul ignore else */\n\t\tif ( newRange ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\twriter.setSelection( newRange );\n\t\t\t} else {\n\t\t\t\tselection.setTo( newRange );\n\t\t\t}\n\t\t} else {\n\t\t\t// We are not testing else because it's a safe check for unpredictable edge cases:\n\t\t\t// an insertion without proper range to select.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n\t\t}\n\n\t\tconst affectedRange = insertion.getAffectedRange() || model.createRange( insertionPosition );\n\n\t\tinsertion.destroy();\n\n\t\treturn affectedRange;\n\t} );\n}\n\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\nclass Insertion {\n\tconstructor( model, writer, position ) {\n\t\t/**\n\t\t * The model in context of which the insertion should be performed.\n\t\t *\n\t\t * @member {module:engine/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Batch to which operations will be added.\n\t\t *\n\t\t * @member {module:engine/controller/writer~Batch} #writer\n\t\t */\n\t\tthis.writer = writer;\n\n\t\t/**\n\t\t * The position at which (or near which) the next node will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Elements with which the inserted elements can be merged.\n\t\t *\n\t\t *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n\t\t *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n\t\t *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n\t\t *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n\t\t *\n\t\t *\n\t\t * @member {Set} #canMergeWith\n\t\t */\n\t\tthis.canMergeWith = new Set( [ this.position.parent ] );\n\n\t\t/**\n\t\t * Schema of the model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema} #schema\n\t\t */\n\t\tthis.schema = model.schema;\n\n\t\tthis._filterAttributesOf = [];\n\n\t\t/**\n\t\t * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedStart\n\t\t */\n\t\tthis._affectedStart = null;\n\n\t\t/**\n\t\t * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedEnd\n\t\t */\n\t\tthis._affectedEnd = null;\n\t}\n\n\t/**\n\t * Handles insertion of a set of nodes.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n\t * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\n\t * If the parent context is passed it means that the parent element was stripped (was not allowed).\n\t */\n\thandleNodes( nodes, parentContext ) {\n\t\tnodes = Array.from( nodes );\n\n\t\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\t\tconst node = nodes[ i ];\n\n\t\t\tthis._handleNode( node, {\n\t\t\t\tisFirst: i === 0 && parentContext.isFirst,\n\t\t\t\tisLast: ( i === ( nodes.length - 1 ) ) && parentContext.isLast\n\t\t\t} );\n\t\t}\n\n\t\t// TMP this will become a post-fixer.\n\t\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Returns range to be selected after insertion.\n\t * Returns `null` if there is no valid range to select after insertion.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetSelectionRange() {\n\t\tif ( this.nodeToSelect ) {\n\t\t\treturn Range._createOn( this.nodeToSelect );\n\t\t}\n\n\t\treturn this.model.schema.getNearestSelectionRange( this.position );\n\t}\n\n\t/**\n\t * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n\t * before the insertion. Returns `null` if no changes were done.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetAffectedRange() {\n\t\tif ( !this._affectedStart ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Range( this._affectedStart, this._affectedEnd );\n\t}\n\n\t/**\n\t * Destroys `Insertion` instance.\n\t */\n\tdestroy() {\n\t\tif ( this._affectedStart ) {\n\t\t\tthis._affectedStart.detach();\n\t\t}\n\n\t\tif ( this._affectedEnd ) {\n\t\t\tthis._affectedEnd.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Handles insertion of a single node.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @param {Object} context\n\t * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\n\t * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\n\t */\n\t_handleNode( node, context ) {\n\t\t// Let's handle object in a special way.\n\t\t// * They should never be merged with other elements.\n\t\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n\t\tif ( this.schema.isObject( node ) ) {\n\t\t\tthis._handleObject( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to find a place for the given node.\n\t\t// Split the position.parent's branch up to a point where the node can be inserted.\n\t\t// If it isn't allowed in the whole branch, then of course don't split anything.\n\t\tconst isAllowed = this._checkAndSplitToAllowedPosition( node, context );\n\n\t\tif ( !isAllowed ) {\n\t\t\tthis._handleDisallowedNode( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._insert( node );\n\n\t\t// After the node was inserted we may try to merge it with its siblings.\n\t\t// This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\n\t\t// and only if the selection was in those elements initially.\n\t\t//\n\t\t// E.g.:\n\t\t// <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n\t\t// and:\n\t\t// <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n\t\t// but:\n\t\t// <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\n\t\t// <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deleteContents\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t it's exactly the same case as above)\n\t\tthis._mergeSiblingsOf( node, context );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/element~Element} node The object element.\n\t * @param {Object} context\n\t */\n\t_handleObject( node, context ) {\n\t\t// Try finding it a place in the tree.\n\t\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\n\t\t\tthis._insert( node );\n\t\t}\n\t\t// Try autoparagraphing.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n\t * @param {Object} context\n\t */\n\t_handleDisallowedNode( node, context ) {\n\t\t// If the node is an element, try inserting its children (strip the parent).\n\t\tif ( node.is( 'element' ) ) {\n\t\t\tthis.handleNodes( node.getChildren(), context );\n\t\t}\n\t\t// If text is not allowed, try autoparagraphing it.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to insert.\n\t */\n\t_insert( node ) {\n\t\t/* istanbul ignore if */\n\t\tif ( !this.schema.checkChild( this.position, node ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\n\t\t\t/**\n\t\t\t * Given node cannot be inserted on the given position.\n\t\t\t *\n\t\t\t * @error insertcontent-wrong-position\n\t\t\t * @param {module:engine/model/node~Node} node Node to insert.\n\t\t\t * @param {module:engine/model/position~Position} position Position to insert the node at.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insertcontent-wrong-position: Given node cannot be inserted on the given position.',\n\t\t\t\tthis,\n\t\t\t\t{ node, position: this.position }\n\t\t\t);\n\t\t}\n\n\t\tconst livePos = LivePosition.fromPosition( this.position, 'toNext' );\n\n\t\tthis._setAffectedBoundaries( this.position );\n\t\tthis.writer.insert( node, this.position );\n\n\t\tthis.position = livePos.toPosition();\n\t\tlivePos.detach();\n\n\t\t// The last inserted object should be selected because we can't put a collapsed selection after it.\n\t\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\n\t\t\tthis.nodeToSelect = node;\n\t\t} else {\n\t\t\tthis.nodeToSelect = null;\n\t\t}\n\n\t\tthis._filterAttributesOf.push( node );\n\t}\n\n\t/**\n\t * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n\t * mark the affected range.\n\t *\n\t * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n\t * during merging, but the logic there is more complicated so it is left out of this function.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_setAffectedBoundaries( position ) {\n\t\t// Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n\t\t// <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n\t\t// This is why it cannot be a range but two separate positions.\n\t\tif ( !this._affectedStart ) {\n\t\t\tthis._affectedStart = LivePosition.fromPosition( position, 'toPrevious' );\n\t\t}\n\n\t\t// If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n\t\t// inserted into the parent but the next node is moved-out of that parent:\n\t\t// (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n\t\t// (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n\t\tif ( !this._affectedEnd || this._affectedEnd.isBefore( position ) ) {\n\t\t\tif ( this._affectedEnd ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t}\n\n\t\t\tthis._affectedEnd = LivePosition.fromPosition( position, 'toNext' );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t */\n\t_mergeSiblingsOf( node, context ) {\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergeLeft = this._canMergeLeft( node, context );\n\t\tconst mergeRight = this._canMergeRight( node, context );\n\t\tconst mergePosLeft = LivePosition._createBefore( node );\n\t\tmergePosLeft.stickiness = 'toNext';\n\t\tconst mergePosRight = LivePosition._createAfter( node );\n\t\tmergePosRight.stickiness = 'toNext';\n\n\t\tif ( mergeLeft ) {\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position );\n\t\t\tlivePosition.stickiness = 'toNext';\n\n\t\t\t// If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n\t\t\t// removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n\t\t\t// by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n\t\t\t// shown as `][`).\n\t\t\t//\n\t\t\t// Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n\t\t\t//\n\t\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n\t\t\t//\n\t\t\t// Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n\t\t\tif ( this._affectedStart.isEqual( mergePosLeft ) ) {\n\t\t\t\tthis._affectedStart.detach();\n\t\t\t\tthis._affectedStart = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toPrevious' );\n\t\t\t}\n\n\t\t\tthis.writer.merge( mergePosLeft );\n\n\t\t\t// If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n\t\t\t//\n\t\t\t// Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n\t\t\t//\n\t\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n\t\t\tif ( mergePosLeft.isEqual( this._affectedEnd ) && context.isLast ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toNext' );\n\t\t\t}\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeRight ) {\n\t\t\t/* istanbul ignore if */\n\t\t\tif ( !this.position.isEqual( mergePosRight ) ) {\n\t\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t\t// At this point the insertion position should be after the node we'll merge. If it isn't,\n\t\t\t\t// it should need to be secured as in the left merge case.\n\t\t\t\t/**\n\t\t\t\t * An internal error occured during merging insertion content with siblings.\n\t\t\t\t * The insertion position should equal to the merge position.\n\t\t\t\t *\n\t\t\t\t * @error insertcontent-invalid-insertion-position\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'insertcontent-invalid-insertion-position', this );\n\t\t\t}\n\n\t\t\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\n\t\t\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\t\t\tthis.position = Position._createAt( mergePosRight.nodeBefore, 'end' );\n\n\t\t\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n\t\t\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position, 'toPrevious' );\n\n\t\t\t// See comment above on moving `_affectedStart`.\n\t\t\tif ( this._affectedEnd.isEqual( mergePosRight ) ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosRight.nodeBefore, 'end', 'toNext' );\n\t\t\t}\n\n\t\t\tthis.writer.merge( mergePosRight );\n\n\t\t\t// See comment above on moving `_affectedStart`.\n\t\t\tif ( mergePosRight.getShiftedBy( -1 ).isEqual( this._affectedStart ) && context.isFirst ) {\n\t\t\t\tthis._affectedStart.detach();\n\t\t\t\tthis._affectedStart = LivePosition._createAt( mergePosRight.nodeBefore, 0, 'toPrevious' );\n\t\t\t}\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeLeft || mergeRight ) {\n\t\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t\t// we need to mark the new container.\n\t\t\tthis._filterAttributesOf.push( this.position.parent );\n\t\t}\n\n\t\tmergePosLeft.detach();\n\t\tmergePosRight.detach();\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with previous sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeLeft( node, context ) {\n\t\tconst previousSibling = node.previousSibling;\n\n\t\treturn context.isFirst &&\n\t\t\t( previousSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( previousSibling ) &&\n\t\t\tthis.model.schema.checkMerge( previousSibling, node );\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with next sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeRight( node, context ) {\n\t\tconst nextSibling = node.nextSibling;\n\n\t\treturn context.isLast &&\n\t\t\t( nextSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( nextSibling ) &&\n\t\t\tthis.model.schema.checkMerge( node, nextSibling );\n\t}\n\n\t/**\n\t * Tries wrapping the node in a new paragraph and inserting it this way.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n\t * @param {Object} context\n\t */\n\t_tryAutoparagraphing( node, context ) {\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\t// Do not autoparagraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\n\t\t\tparagraph._appendChild( node );\n\t\t\tthis._handleNode( paragraph, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n\t */\n\t_checkAndSplitToAllowedPosition( node ) {\n\t\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\n\n\t\tif ( !allowedIn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( allowedIn != this.position.parent ) {\n\t\t\t// If a parent which we'd need to leave is a limit element, break.\n\t\t\tif ( this.schema.isLimit( this.position.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.position.isAtStart ) {\n\t\t\t\t// If insertion position is at the beginning of the parent, move it out instead of splitting.\n\t\t\t\t// <p>^Foo</p> -> ^<p>Foo</p>\n\t\t\t\tconst parent = this.position.parent;\n\n\t\t\t\tthis.position = this.writer.createPositionBefore( parent );\n\n\t\t\t\t// Special case – parent is empty (<p>^</p>).\n\t\t\t\t//\n\t\t\t\t// 1. parent.isEmpty\n\t\t\t\t// We can remove the element after moving insertion position out of it.\n\t\t\t\t//\n\t\t\t\t// 2. parent.parent === allowedIn\n\t\t\t\t// However parent should remain in place when allowed element is above limit element in document tree.\n\t\t\t\t// For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n\t\t\t\t// content allowed in $root.\n\t\t\t\tif ( parent.isEmpty && parent.parent === allowedIn ) {\n\t\t\t\t\tthis.writer.remove( parent );\n\t\t\t\t}\n\t\t\t} else if ( this.position.isAtEnd ) {\n\t\t\t\t// If insertion position is at the end of the parent, move it out instead of splitting.\n\t\t\t\t// <p>Foo^</p> -> <p>Foo</p>^\n\t\t\t\tthis.position = this.writer.createPositionAfter( this.position.parent );\n\t\t\t} else {\n\t\t\t\tconst tempPos = this.writer.createPositionAfter( this.position.parent );\n\n\t\t\t\tthis._setAffectedBoundaries( this.position );\n\t\t\t\tthis.writer.split( this.position );\n\n\t\t\t\tthis.position = tempPos;\n\n\t\t\t\tthis.canMergeWith.add( this.position.nodeAfter );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to check.\n\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getAllowedIn( node, element ) {\n\t\tif ( this.schema.checkChild( element, node ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\tif ( element.parent ) {\n\t\t\treturn this._getAllowedIn( node, element.parent );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\n\nimport LivePosition from '../liveposition';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {module:engine/model/batch~Batch} batch Batch to which the operations will be added.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n *\n * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n */\nexport default function deleteContent( model, selection, options = {} ) {\n\tif ( selection.isCollapsed ) {\n\t\treturn;\n\t}\n\n\tconst selRange = selection.getFirstRange();\n\n\t// If the selection is already removed, don't do anything.\n\tif ( selRange.root.rootName == '$graveyard' ) {\n\t\treturn;\n\t}\n\n\tconst schema = model.schema;\n\n\tmodel.change( writer => {\n\t\t// 1. Replace the entire content with paragraph.\n\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n\t\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\n\t\t\treplaceEntireContentWithParagraph( writer, selection, schema );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst startPos = selRange.start;\n\t\tconst endPos = LivePosition.fromPosition( selRange.end, 'toNext' );\n\n\t\t// 2. Remove the content if there is any.\n\t\tif ( !selRange.start.isTouching( selRange.end ) ) {\n\t\t\twriter.remove( selRange );\n\t\t}\n\n\t\t// 3. Merge elements in the right branch to the elements in the left branch.\n\t\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n\t\t//\n\t\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n\t\t//\n\t\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n\t\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n\t\t// want to override that behavior anyway.\n\t\tif ( !options.leaveUnmerged ) {\n\t\t\tmergeBranches( writer, startPos, endPos );\n\n\t\t\t// TMP this will be replaced with a postfixer.\n\t\t\t// We need to check and strip disallowed attributes in all nested nodes because after merge\n\t\t\t// some attributes could end up in a path where are disallowed.\n\t\t\t//\n\t\t\t// e.g. bold is disallowed for <H1>\n\t\t\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\t\t\tschema.removeDisallowedAttributes( startPos.parent.getChildren(), writer );\n\t\t}\n\n\t\tcollapseSelectionAt( writer, selection, startPos );\n\n\t\t// 4. Add a paragraph to set selection in it.\n\t\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\t\tif ( shouldAutoparagraph( schema, startPos ) ) {\n\t\t\t// If auto-paragraphing is off, find the closest valid selection range and collapse the selection there.\n\t\t\t// If there is no valid selection range, create paragraph anyway and set selection there.\n\t\t\tconst validSelectionRange = schema.getNearestSelectionRange( startPos );\n\n\t\t\tif ( options.doNotAutoparagraph && validSelectionRange ) {\n\t\t\t\tcollapseSelectionAt( writer, selection, validSelectionRange );\n\t\t\t} else {\n\t\t\t\tinsertParagraph( writer, startPos, selection );\n\t\t\t}\n\t\t}\n\n\t\tendPos.detach();\n\t} );\n}\n\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\nfunction mergeBranches( writer, startPos, endPos ) {\n\tconst startParent = startPos.parent;\n\tconst endParent = endPos.parent;\n\n\t// If both positions ended up in the same parent, then there's nothing more to merge:\n\t// <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\n\tif ( startParent == endParent ) {\n\t\treturn;\n\t}\n\n\t// If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n\tif ( writer.model.schema.isLimit( startParent ) || writer.model.schema.isLimit( endParent ) ) {\n\t\treturn;\n\t}\n\n\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\n\t// E.g., we can't merge endParent into startParent in this case:\n\t// <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\n\tif ( !checkCanBeMerged( startPos, endPos, writer.model.schema ) ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge. For example:\n\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t// will become:\n\t// <a><b>xy</b>[]</a><c>{}</c>\n\tstartPos = writer.createPositionAfter( startParent );\n\tendPos = writer.createPositionBefore( endParent );\n\n\tif ( !endPos.isEqual( startPos ) ) {\n\t\t// In this case, before we merge, we need to move `endParent` to the `startPos`:\n\t\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t\t// becomes:\n\t\t// <a><b>x</b>[]<d>y</d></a><c>{}</c>\n\t\twriter.insert( endParent, startPos );\n\t}\n\n\t// Merge two siblings:\n\t// <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\n\t// <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \"move parent\" case shown above)\n\twriter.merge( startPos );\n\n\t// Remove empty end ancestors:\n\t// <a>fo[o</a><b><a><c>bar]</c></a></b>\n\t// becomes:\n\t// <a>fo[]</a><b><a>{}</a></b>\n\t// So we can remove <a> and <b>.\n\twhile ( endPos.parent.isEmpty ) {\n\t\tconst parentToRemove = endPos.parent;\n\n\t\tendPos = writer.createPositionBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Continue merging next level.\n\tmergeBranches( writer, startPos, endPos );\n}\n\nfunction shouldAutoparagraph( schema, position ) {\n\tconst isTextAllowed = schema.checkChild( position, '$text' );\n\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\n\n\treturn !isTextAllowed && isParagraphAllowed;\n}\n\n// Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\nfunction checkCanBeMerged( leftPos, rightPos, schema ) {\n\tconst rangeToCheck = new Range( leftPos, rightPos );\n\n\tfor ( const value of rangeToCheck.getWalker() ) {\n\t\tif ( schema.isLimit( value.item ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction insertParagraph( writer, position, selection ) {\n\tconst paragraph = writer.createElement( 'paragraph' );\n\n\twriter.insert( paragraph, position );\n\n\tcollapseSelectionAt( writer, selection, writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction replaceEntireContentWithParagraph( writer, selection ) {\n\tconst limitElement = writer.model.schema.getLimitElement( selection );\n\n\twriter.remove( writer.createRangeIn( limitElement ) );\n\tinsertParagraph( writer, writer.createPositionAt( limitElement, 0 ), selection );\n}\n\n// We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\n\tconst limitElement = schema.getLimitElement( selection );\n\n\tif ( !selection.containsEntireContent( limitElement ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\n\tif ( range.start.parent == range.end.parent ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( limitElement, 'paragraph' );\n}\n\n// Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n// uses a different method to set it.\nfunction collapseSelectionAt( writer, selection, positionOrRange ) {\n\tif ( selection instanceof DocumentSelection ) {\n\t\twriter.setSelection( positionOrRange );\n\t} else {\n\t\tselection.setTo( positionOrRange );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/modifyselection\n */\n\nimport Position from '../position';\nimport TreeWalker from '../treewalker';\nimport Range from '../range';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport DocumentSelection from '../documentselection';\n\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection to modify.\n * @param {Object} [options]\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n */\nexport default function modifySelection( model, selection, options = {} ) {\n\tconst schema = model.schema;\n\tconst isForward = options.direction != 'backward';\n\tconst unit = options.unit ? options.unit : 'character';\n\n\tconst focus = selection.focus;\n\n\tconst walker = new TreeWalker( {\n\t\tboundaries: getSearchRange( focus, isForward ),\n\t\tsingleCharacters: true,\n\t\tdirection: isForward ? 'forward' : 'backward'\n\t} );\n\n\tconst data = { walker, schema, isForward, unit };\n\n\tlet next;\n\n\twhile ( ( next = walker.next() ) ) {\n\t\tif ( next.done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = tryExtendingTo( data, next.value );\n\n\t\tif ( position ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelectionFocus( position );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tselection.setFocus( position );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Checks whether the selection can be extended to the the walker's next value (next position).\n// @param {{ walker, unit, isForward, schema }} data\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\nfunction tryExtendingTo( data, value ) {\n\t// If found text, we can certainly put the focus in it. Let's just find a correct position\n\t// based on the unit.\n\tif ( value.type == 'text' ) {\n\t\tif ( data.unit === 'word' ) {\n\t\t\treturn getCorrectWordBreakPosition( data.walker, data.isForward );\n\t\t}\n\n\t\treturn getCorrectPosition( data.walker, data.unit, data.isForward );\n\t}\n\n\t// Entering an element.\n\tif ( value.type == ( data.isForward ? 'elementStart' : 'elementEnd' ) ) {\n\t\t// If it's an object, we can select it now.\n\t\tif ( data.schema.isObject( value.item ) ) {\n\t\t\treturn Position._createAt( value.item, data.isForward ? 'after' : 'before' );\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n\t// Leaving an element.\n\telse {\n\t\t// If leaving a limit element, stop.\n\t\tif ( data.schema.isLimit( value.item ) ) {\n\t\t\t// NOTE: Fast-forward the walker until the end.\n\t\t\tdata.walker.skip( () => true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n}\n\n// Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {String} unit The unit by which selection should be modified.\nfunction getCorrectPosition( walker, unit ) {\n\tconst textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( isInsideSurrogatePair( data, offset ) || ( unit == 'character' && isInsideCombinedSymbol( data, offset ) ) ) {\n\t\t\twalker.next();\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\n// Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction getCorrectWordBreakPosition( walker, isForward ) {\n\tlet textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( !isAtWordBoundary( textNode.data, offset, isForward ) && !isAtNodeBoundary( textNode, offset, isForward ) ) {\n\t\t\twalker.next();\n\n\t\t\t// Check of adjacent text nodes with different attributes (like BOLD).\n\t\t\t// Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n\t\t\t// should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n\t\t\tconst nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n\n\t\t\t// Scan only text nodes. Ignore inline elements (like `<softBreak>`).\n\t\t\tif ( nextNode && nextNode.is( 'text' ) ) {\n\t\t\t\t// Check boundary char of an adjacent text node.\n\t\t\t\tconst boundaryChar = nextNode.data.charAt( isForward ? 0 : nextNode.data.length - 1 );\n\n\t\t\t\t// Go to the next node if the character at the boundary of that node belongs to the same word.\n\t\t\t\tif ( !wordBoundaryCharacters.includes( boundaryChar ) ) {\n\t\t\t\t\t// If adjacent text node belongs to the same word go to it & reset values.\n\t\t\t\t\twalker.next();\n\n\t\t\t\t\ttextNode = walker.position.textNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\nfunction getSearchRange( start, isForward ) {\n\tconst root = start.root;\n\tconst searchEnd = Position._createAt( root, isForward ? 'end' : 0 );\n\n\tif ( isForward ) {\n\t\treturn new Range( start, searchEnd );\n\t} else {\n\t\treturn new Range( searchEnd, start );\n\t}\n}\n\n// Checks if selection is on word boundary.\n//\n// @param {String} data The text node value to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtWordBoundary( data, offset, isForward ) {\n\t// The offset to check depends on direction.\n\tconst offsetToCheck = offset + ( isForward ? 0 : -1 );\n\n\treturn wordBoundaryCharacters.includes( data.charAt( offsetToCheck ) );\n}\n\n// Checks if selection is on node boundary.\n//\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtNodeBoundary( textNode, offset, isForward ) {\n\treturn offset === ( isForward ? textNode.endOffset : 0 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/getselectedcontent\n */\n\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection of which content will be returned.\n * @returns {module:engine/model/documentfragment~DocumentFragment}\n */\nexport default function getSelectedContent( model, selection ) {\n\treturn model.change( writer => {\n\t\tconst frag = writer.createDocumentFragment();\n\t\tconst range = selection.getFirstRange();\n\n\t\tif ( !range || range.isCollapsed ) {\n\t\t\treturn frag;\n\t\t}\n\n\t\tconst root = range.start.root;\n\t\tconst commonPath = range.start.getCommonPath( range.end );\n\t\tconst commonParent = root.getNodeByPath( commonPath );\n\n\t\t// ## 1st step\n\t\t//\n\t\t// First, we'll clone a fragment represented by a minimal flat range\n\t\t// containing the original range to be cloned.\n\t\t// E.g. let's consider such a range:\n\t\t//\n\t\t// <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n\t\t//\n\t\t// A minimal flat range containing this one is:\n\t\t//\n\t\t// <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n\t\t//\n\t\t// We can easily clone this structure, preserving e.g. the <quote> element.\n\t\tlet flatSubtreeRange;\n\n\t\tif ( range.start.parent == range.end.parent ) {\n\t\t\t// The original range is flat, so take it.\n\t\t\tflatSubtreeRange = range;\n\t\t} else {\n\t\t\tflatSubtreeRange = writer.createRange(\n\t\t\t\twriter.createPositionAt( commonParent, range.start.path[ commonPath.length ] ),\n\t\t\t\twriter.createPositionAt( commonParent, range.end.path[ commonPath.length ] + 1 )\n\t\t\t);\n\t\t}\n\n\t\tconst howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n\n\t\t// Clone the whole contents.\n\t\tfor ( const item of flatSubtreeRange.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\twriter.appendText( item.data, item.getAttributes(), frag );\n\t\t\t} else {\n\t\t\t\twriter.append( item._clone( true ), frag );\n\t\t\t}\n\t\t}\n\n\t\t// ## 2nd step\n\t\t//\n\t\t// If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n\t\t//\n\t\t// For example, for the range shown in the 1st step comment, we need to remove these pieces:\n\t\t//\n\t\t// <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n\t\t//\n\t\t// So this will be the final copied content:\n\t\t//\n\t\t// <quote><h>st</h></quote><p>se</p>\n\t\t//\n\t\t// In order to do that, we remove content from these two ranges:\n\t\t//\n\t\t// [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n\t\tif ( flatSubtreeRange != range ) {\n\t\t\t// Find the position of the original range in the cloned fragment.\n\t\t\tconst newRange = range._getTransformedByMove( flatSubtreeRange.start, writer.createPositionAt( frag, 0 ), howMany )[ 0 ];\n\n\t\t\tconst leftExcessRange = writer.createRange( writer.createPositionAt( frag, 0 ), newRange.start );\n\t\t\tconst rightExcessRange = writer.createRange( newRange.end, writer.createPositionAt( frag, 'end' ) );\n\n\t\t\tremoveRangeContent( rightExcessRange, writer );\n\t\t\tremoveRangeContent( leftExcessRange, writer );\n\t\t}\n\n\t\treturn frag;\n\t} );\n}\n\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent( range, writer ) {\n\tconst parentsToCheck = [];\n\n\tArray.from( range.getItems( { direction: 'backward' } ) )\n\t\t// We should better store ranges because text proxies will lose integrity\n\t\t// with the text nodes when we'll start removing content.\n\t\t.map( item => writer.createRangeOn( item ) )\n\t\t// Filter only these items which are fully contained in the passed range.\n\t\t//\n\t\t// E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n\t\t// the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n\t\t.filter( itemRange => {\n\t\t\t// We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n\t\t\tconst contained =\n\t\t\t\t( itemRange.start.isAfter( range.start ) || itemRange.start.isEqual( range.start ) ) &&\n\t\t\t\t( itemRange.end.isBefore( range.end ) || itemRange.end.isEqual( range.end ) );\n\n\t\t\treturn contained;\n\t\t} )\n\t\t.forEach( itemRange => {\n\t\t\tparentsToCheck.push( itemRange.start.parent );\n\n\t\t\twriter.remove( itemRange );\n\t\t} );\n\n\t// Remove ancestors of the removed items if they turned to be empty now\n\t// (their whole content was contained in the range).\n\tparentsToCheck.forEach( parentToCheck => {\n\t\tlet parent = parentToCheck;\n\n\t\twhile ( parent.parent && parent.isEmpty ) {\n\t\t\tconst removeRange = writer.createRangeOn( parent );\n\n\t\t\tparent = parent.parent;\n\n\t\t\twriter.remove( removeRange );\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\tif ( correctedRange ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\t// The above algorithm might create ranges that intersects each other when selection contains more then one range.\n\t\t// This is case happens mostly on Firefox which creates multiple ranges for selected table.\n\t\tlet fixedRanges = ranges;\n\n\t\t// Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n\t\t// we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\t\tif ( ranges.length > 1 ) {\n\t\t\tconst selectionStart = ranges[ 0 ].start;\n\t\t\tconst selectionEnd = ranges[ ranges.length - 1 ].end;\n\n\t\t\tfixedRanges = [ new Range( selectionStart, selectionEnd ) ];\n\t\t}\n\n\t\twriter.setSelection( fixedRanges, { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\t// Check single node selection (happens in tables).\n\tif ( fixedPosition.nodeAfter && schema.isLimit( fixedPosition.nodeAfter ) ) {\n\t\treturn new Range( fixedPosition, Position._createAfter( fixedPosition.nodeAfter ) );\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst start = range.start;\n\tconst end = range.end;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\t// - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst isStartObject = start.nodeAfter && schema.isObject( start.nodeAfter );\n\t\t\tconst fixedStart = isStartObject ? null : schema.getNearestSelectionRange( start, 'forward' );\n\n\t\t\tconst isEndObject = end.nodeBefore && schema.isObject( end.nodeBefore );\n\t\t\tconst fixedEnd = isEndObject ? null : schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\t// The schema.getNearestSelectionRange might return null - if that happens use original position.\n\t\t\tconst rangeStart = fixedStart ? fixedStart.start : start;\n\t\t\tconst rangeEnd = fixedEnd ? fixedEnd.start : end;\n\n\t\t\treturn new Range( rangeStart, rangeEnd );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\tconst bothInSameParent = ( start.nodeAfter && end.nodeBefore ) && start.nodeAfter.parent === end.nodeBefore.parent;\n\n\t\tconst expandStart = isStartInLimit && ( !bothInSameParent || !isInObject( start.nodeAfter, schema ) );\n\t\tconst expandEnd = isEndInLimit && ( !bothInSameParent || !isInObject( end.nodeBefore, schema ) );\n\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tlet fixedStart = start;\n\t\tlet fixedEnd = end;\n\n\t\tif ( expandStart ) {\n\t\t\tfixedStart = Position._createBefore( findOutermostLimitAncestor( startLimitElement, schema ) );\n\t\t}\n\n\t\tif ( expandEnd ) {\n\t\t\tfixedEnd = Position._createAfter( findOutermostLimitAncestor( endLimitElement, schema ) );\n\t\t}\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\nfunction findOutermostLimitAncestor( startingNode, schema ) {\n\tlet isLimitNode = startingNode;\n\tlet parent = isLimitNode;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tisLimitNode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\treturn isLimitNode;\n}\n\n// Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\t// We should fix such selection when one of those nodes needs fixing.\n\treturn startIsOnBlock || endIsOnBlock;\n}\n\n// Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isInObject( node, schema ) {\n\treturn node && schema.isObject( node );\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/model\n */\n\nimport Batch from './batch';\nimport Writer from './writer';\nimport Schema from './schema';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ModelElement from './element';\nimport ModelRange from './range';\nimport ModelPosition from './position';\nimport ModelSelection from './selection';\n\nimport insertContent from './utils/insertcontent';\nimport deleteContent from './utils/deletecontent';\nimport modifySelection from './utils/modifyselection';\nimport getSelectedContent from './utils/getselectedcontent';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer';\n\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/guides/architecture/editing-engine engine architecture guide}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\tconstructor() {\n\t\t/**\n\t\t * Model's marker collection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis.markers = new MarkerCollection();\n\n\t\t/**\n\t\t * Model's document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis.document = new Document( this );\n\n\t\t/**\n\t\t * Model's schema.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/schema~Schema}\n\t\t */\n\t\tthis.schema = new Schema();\n\n\t\t/**\n\t\t * All callbacks added by {@link module:engine/model/model~Model#change} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Function>}\n\t\t */\n\t\tthis._pendingChanges = [];\n\n\t\t/**\n\t\t * The last created and currently used writer instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/writer~Writer}\n\t\t */\n\t\tthis._currentWriter = null;\n\n\t\t[ 'insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation' ]\n\t\t\t.forEach( methodName => this.decorate( methodName ) );\n\n\t\t// Adding operation validation with `highest` priority, so it is called before any other feature would like\n\t\t// to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n\t\tthis.on( 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\toperation._validate();\n\t\t}, { priority: 'highest' } );\n\n\t\t// Register some default abstract entities.\n\t\tthis.schema.register( '$root', {\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.register( '$block', {\n\t\t\tallowIn: '$root',\n\t\t\tisBlock: true\n\t\t} );\n\t\tthis.schema.register( '$text', {\n\t\t\tallowIn: '$block',\n\t\t\tisInline: true\n\t\t} );\n\t\tthis.schema.register( '$clipboardHolder', {\n\t\t\tallowContentOf: '$root',\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.extend( '$text', { allowIn: '$clipboardHolder' } );\n\n\t\t// An element needed by the `upcastElementToMarker` converter.\n\t\t// This element temporarily represents a marker boundary during the conversion process and is removed\n\t\t// at the end of the conversion. `UpcastDispatcher` or at least `Conversion` class looks like a\n\t\t// better place for this registration but both know nothing about `Schema`.\n\t\tthis.schema.register( '$marker' );\n\t\tthis.schema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name === '$marker' ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} );\n\n\t\tinjectSelectionPostFixer( this );\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n\t * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n\t * the {@link module:engine/model/document~Document#selection document's selection}, and\n\t * {@link module:engine/model/model~Model#markers model markers}.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n\t * into a single undo step.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n\t *\n\t *\t\t\tmodel.change( writer => {\n\t *\t\t\t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n\t *\t\t} );\n\t *\n\t * The callback of the `change()` block is executed synchronously.\n\t *\n\t * You can also return a value from the change block.\n\t *\n\t *\t\tconst img = model.change( writer => {\n\t *\t\t\treturn writer.createElement( 'img' );\n\t *\t\t} );\n\t *\n\t * @see #enqueueChange\n\t * @param {Function} callback Callback function which may modify the model.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this._pendingChanges.length === 0 ) {\n\t\t\t// If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n\t\t\tthis._pendingChanges.push( { batch: new Batch(), callback } );\n\n\t\t\treturn this._runPendingChanges()[ 0 ];\n\t\t} else {\n\t\t\t// If this is not the outermost block, just execute the callback.\n\t\t\treturn callback( this._currentWriter );\n\t\t}\n\t}\n\n\t/**\n\t * The `enqueueChange()` method performs similar task as the {@link #change `change()` method}, with two major differences.\n\t *\n\t * First, the callback of `enqueueChange()` is executed when all other enqueued changes are done. It might be executed\n\t * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\n\t * it will be delayed and executed after the outermost block.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconsole.log( 1 );\n\t *\n\t *\t\t\tmodel.enqueueChange( writer => {\n\t *\t\t\t\tconsole.log( 2 );\n\t *\t\t\t} );\n\t *\n\t * \t\t\tconsole.log( 3 );\n\t *\t\t} ); // Will log: 1, 3, 2.\n\t *\n\t * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\n\t * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\n\t * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\n\t *\n\t * When using the `enqueueChange()` block you can also add some changes to the batch you used before.\n\t *\n\t *\t\tmodel.enqueueChange( batch, writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * The batch instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\n\t *\n\t * @param {module:engine/model/batch~Batch|'transparent'|'default'} batchOrType Batch or batch type should be used in the callback.\n\t * If not defined, a new batch will be created.\n\t * @param {Function} callback Callback function which may modify the model.\n\t */\n\tenqueueChange( batchOrType, callback ) {\n\t\tif ( typeof batchOrType === 'string' ) {\n\t\t\tbatchOrType = new Batch( batchOrType );\n\t\t} else if ( typeof batchOrType == 'function' ) {\n\t\t\tcallback = batchOrType;\n\t\t\tbatchOrType = new Batch();\n\t\t}\n\n\t\tthis._pendingChanges.push( { batch: batchOrType, callback } );\n\n\t\tif ( this._pendingChanges.length == 1 ) {\n\t\t\tthis._runPendingChanges();\n\t\t}\n\t}\n\n\t/**\n\t * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function for applying\n\t * {@link module:engine/model/operation/operation~Operation operations} to the model.\n\t *\n\t * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n\t * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n\t * See also {@glink framework/guides/architecture/editing-engine#changing-the-model Changing the model} section\n\t * of the {@glink framework/guides/architecture/editing-engine Editing architecture} guide.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation The operation to apply.\n\t */\n\tapplyOperation( operation ) {\n\t\toperation._execute();\n\t}\n\n\t/**\n\t * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n\t * functionality to work.\n\t *\n\t * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n\t * the content, clears the given selection's content before inserting nodes and moves the selection\n\t * to its target position at the end of the process.\n\t * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the\n\t * pasting feature should do.\n\t *\n\t * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n\t *\n\t * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n\t * inside a {@link #change `change()` block}.\n\t *\n\t * # Conversion and schema\n\t *\n\t * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n\t * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n\t * is only adding nodes to the model. Additionally, you need to define\n\t * {@glink framework/guides/architecture/editing-engine#conversion converters} between the model and view\n\t * and define those nodes in the {@glink framework/guides/architecture/editing-engine#schema schema}.\n\t *\n\t * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n\t * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n\t * unless converters are defined for all elements and attributes in that HTML.\n\t *\n\t * # Examples\n\t *\n\t * Using `insertContent()` with a manually created model structure:\n\t *\n\t *\t\t// Let's create a document fragment containing such content as:\n\t *\t\t//\n\t *\t\t// <paragrap>foo</paragraph>\n\t *\t\t// <blockQuote>\n\t *\t\t//    <paragraph>bar</paragraph>\n\t *\t\t// </blockQuote>\n\t *\t\tconst docFrag = editor.model.change( writer => {\n\t *\t\t\tconst p1 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst p2 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst blockQuote = writer.createElement( 'blockQuote' );\n\t *\t\t\tconst docFrag = writer.createDocumentFragment();\n\t *\n\t *\t\t\twriter.append( p1, docFrag );\n\t *\t\t\twriter.append( blockQuote, docFrag );\n\t *\t\t\twriter.append( p2, blockQuote );\n\t *\t\t\twriter.insertText( 'foo', p1 );\n\t *\t\t\twriter.insertText( 'bar', p2 );\n\t *\n\t *\t\t\treturn docFrag;\n\t *\t\t} );\n\t *\n\t *\t\t// insertContent() does not have to be used in a change() block. It can, though,\n\t *\t\t// so this code could be moved to the callback defined above.\n\t *\t\teditor.model.insertContent( docFrag );\n\t *\n\t * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n\t *\n\t *\t\t// You can create your own HtmlDataProcessor instance or use editor.data.processor\n\t *\t\t// if you have not overridden the default one (which is the HtmlDataProcessor instance).\n\t *\t\tconst htmlDP = new HtmlDataProcessor();\n\t *\n\t *\t\t// Convert an HTML string to a view document fragment:\n\t *\t\tconst viewFragment = htmlDP.toView( htmlString );\n\t *\n\t *\t\t// Convert the view document fragment to a model document fragment\n\t *\t\t// in the context of $root. This conversion takes the schema into\n\t *\t\t// account so if, for example, the view document fragment contained a bare text node,\n\t *\t\t// this text node cannot be a child of $root, so it will be automatically\n\t *\t\t// wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n\t *\t\t// and e.g. convert the content like it would happen in a <paragraph>.\n\t *\t\t// Note: The clipboard feature uses a custom context called $clipboardHolder\n\t *\t\t// which has a loosened schema.\n\t *\t\tconst modelFragment = editor.data.toModel( viewFragment );\n\t *\n\t *\t\teditor.model.insertContent( modelFragment );\n\t *\n\t * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n\t *\n\t *\t\t// Insert text at the current document selection position.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ) );\n\t *\t\t} );\n\t *\n\t *\t\t// Insert text at a given position - the document selection will not be modified.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n\t *\n\t *\t\t\t// Which is a shorthand for:\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n\t *\t\t} );\n\t *\n\t * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable`\n\t * it will be moved to the target position (where the document selection should be moved after the insertion).\n\t *\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\t// Insert text replacing the given selection instance.\n\t *\t\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), selection );\n\t *\n\t *\t\t\t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n\t *\t\t\t// Note: This is not necessary when you passed the document selection to insertContent().\n\t *\t\t\twriter.setSelection( selection );\n\t *\t\t} );\n\t *\n\t * @fires insertContent\n\t * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n\t * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n\t * The selection into which the content should be inserted. If not provided the current model document selection will be used.\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] To be used when a model item was passed as `selectable`.\n\t * This param defines a position in relation to that item.\n\t * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n\t * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n\t * at the insertion position.\n\t */\n\tinsertContent( content, selectable, placeOrOffset ) {\n\t\treturn insertContent( this, content, selectable, placeOrOffset );\n\t}\n\n\t/**\n\t * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n\t *\n\t * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n\t * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n\t * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n\t * then that behavior should be implemented in the view's listener. At the same time, the table feature\n\t * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n\t * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n\t * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n\t *\n\t * @fires deleteContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection of which the content should be deleted.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n\t *\n\t * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n\t *\n\t * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n\t * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n\t *\n\t * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n\t * elements will not be merged.\n\t *\n\t * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n\t * paragraph when the entire content was selected.\n\t *\n\t * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n\t *\n\t * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n\t * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n\t *\n\t * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n\t * to a place where text cannot be inserted.\n\t *\n\t * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n\t *\n\t * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n\t * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n\t *\n\t * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n\t *\n\t * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n\t */\n\tdeleteContent( selection, options ) {\n\t\tdeleteContent( this, selection, options );\n\t}\n\n\t/**\n\t * Modifies the selection. Currently, the supported modifications are:\n\t *\n\t * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n\t * Possible values for `unit` are:\n\t *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n\t *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n\t *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n\t *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n\t *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n\t *  why `'character'` value is most natural and common method of modifying selection.\n\t *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n\t *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n\t *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n\t *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n\t *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n\t *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n\t *  extension will include whole \"surrogate pair\".\n\t *  * `'word'` - moves selection by a whole word.\n\t *\n\t * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n\t *\n\t * @fires modifySelection\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection to modify.\n\t * @param {Object} [options]\n\t * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n\t * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n\t */\n\tmodifySelection( selection, options ) {\n\t\tmodifySelection( this, selection, options );\n\t}\n\n\t/**\n\t * Gets a clone of the selected content.\n\t *\n\t * For example, for the following selection:\n\t *\n\t * ```html\n\t * <paragraph>x</paragraph>\n\t * <blockQuote>\n\t *\t<paragraph>y</paragraph>\n\t *\t<heading1>fir[st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se]cond</paragraph>\n\t * <paragraph>z</paragraph>\n\t * ```\n\t *\n\t * It will return a document fragment with such a content:\n\t *\n\t * ```html\n\t * <blockQuote>\n\t *\t<heading1>st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se</paragraph>\n\t * ```\n\t *\n\t * @fires getSelectedContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection of which content will be returned.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetSelectedContent( selection ) {\n\t\treturn getSelectedContent( this, selection );\n\t}\n\n\t/**\n\t * Checks whether the given {@link module:engine/model/range~Range range} or\n\t * {@link module:engine/model/element~Element element} has any meaningful content.\n\t *\n\t * Meaningful content is:\n\t *\n\t * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain\n\t * any non-whitespace characters),\n\t * * or any {@link module:engine/model/schema~Schema#isObject object element},\n\t * * or any {@link module:engine/model/markercollection~Marker marker} which\n\t * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.\n\t *\n\t * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.\n\t * However, a range containing an `<image></image>` (which would normally be marked in the schema as an object element)\n\t * is considered non-empty.\n\t *\n\t * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.ignoreWhitespaces] Whether text node with whitespaces only should be considered empty.\n\t * @returns {Boolean}\n\t */\n\thasContent( rangeOrElement, options ) {\n\t\tconst range = rangeOrElement instanceof ModelElement ? ModelRange._createIn( rangeOrElement ) : rangeOrElement;\n\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if there are any markers which affects data in this given range.\n\t\tfor ( const intersectingMarker of this.markers.getMarkersIntersectingRange( range ) ) {\n\t\t\tif ( intersectingMarker.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst { ignoreWhitespaces = false } = options || {};\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\tif ( !ignoreWhitespaces ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if ( item.data.search( /\\S/ ) !== -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if ( this.schema.isObject( item ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates a position from the given root and path in that root.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn new ModelPosition( root, path, stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * a parent element and offset in that element,\n\t * * a parent element and `'end'` (the position will be set at the end of that element),\n\t * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n\t * (the position will be set before or after the given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n\t * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn ModelPosition._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn ModelPosition._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn ModelPosition._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from the `start` position to the `end` position.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRange( start, end );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, the range will be collapsed\n\t * to the `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new ModelRange( start, end );\n\t}\n\n\t/**\n\t * Creates a range inside the given element which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeIn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn ModelRange._createIn( element );\n\t}\n\n\t/**\n\t * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * Note: This method is also available on `writer` instance as\n\t * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeOn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn ModelRange._createOn( item );\n\t}\n\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createSelection `Writer#createSelection()`}.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Additional options (`'backward'`) can be specified as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new ModelSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/batch~Batch} instance.\n\t *\n\t * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n\t *\n\t * * {@link #change `change()`},\n\t * * {@link #enqueueChange `enqueueChange()`}.\n\t *\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t * @returns {module:engine/model/batch~Batch}\n\t */\n\tcreateBatch( type ) {\n\t\treturn new Batch( type );\n\t}\n\n\t/**\n\t * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n\t */\n\tdestroy() {\n\t\tthis.document.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n\t * which calls callbacks and returns array of values returned by these callbacks.\n\t *\n\t * @private\n\t * @returns {Array.<*>} Array of values returned by callbacks.\n\t */\n\t_runPendingChanges() {\n\t\tconst ret = [];\n\n\t\tthis.fire( '_beforeChanges' );\n\n\t\twhile ( this._pendingChanges.length ) {\n\t\t\t// Create a new writer using batch instance created for this chain of changes.\n\t\t\tconst currentBatch = this._pendingChanges[ 0 ].batch;\n\t\t\tthis._currentWriter = new Writer( this, currentBatch );\n\n\t\t\t// Execute changes callback and gather the returned value.\n\t\t\tconst callbackReturnValue = this._pendingChanges[ 0 ].callback( this._currentWriter );\n\t\t\tret.push( callbackReturnValue );\n\n\t\t\tthis.document._handleChangeBlock( this._currentWriter );\n\n\t\t\tthis._pendingChanges.shift();\n\t\t\tthis._currentWriter = null;\n\t\t}\n\n\t\tthis.fire( '_afterChanges' );\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Fired when entering the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _beforeChanges\n\t */\n\n\t/**\n\t * Fired when leaving the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _afterChanges\n\t */\n\n\t/**\n\t * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\n\t * using {@link #applyOperation}.\n\t *\n\t * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\n\t * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\n\t * be used.\n\t *\n\t * A few callbacks are already added to this event by engine internal classes:\n\t *\n\t * * with `highest` priority operation is validated,\n\t * * with `normal` priority operation is executed,\n\t * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\n\t * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\n\t * update themselves.\n\t *\n\t * @event applyOperation\n\t * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\n\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t */\n\n\t/**\n\t * Event fired when {@link #insertContent} method is called.\n\t *\n\t * The {@link #insertContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * **Note** The `selectable` parameter for the {@link #insertContent} is optional. When `undefined` value is passed the method uses\n\t * `model.document.selection`.\n\t *\n\t * @event insertContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #deleteContent} method is called.\n\t *\n\t * The {@link #deleteContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event deleteContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #modifySelection} method is called.\n\t *\n\t * The {@link #modifySelection default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event modifySelection\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #getSelectedContent} method is called.\n\t *\n\t * The {@link #getSelectedContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event getSelectedContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editor\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, then this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if the\n * the specific editor implements also the {@link module:core/editor/editorwithui~EditorWithUI} interface\n * (as most editor implementations do).\n *\n * @abstract\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Editor {\n\t/**\n\t * Creates a new instance of the Editor class.\n\t *\n\t * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n\t *\n\t * @param {Object} [config] The editor config.\n\t */\n\tconstructor( config ) {\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\t/**\n\t\t * Holds all configurations specific to this editor instance.\n\t\t *\n\t\t *\t\teditor.config.get( 'image.toolbar' );\n\t\t *\t\t// -> [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this editor instance.\n\t\t *\n\t\t *\t\teditor.plugins.get( 'Clipboard' ); // -> instance of the Clipboard plugin.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\t/**\n\t\t * Commands registered to the editor.\n\t\t *\n\t\t * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n\t\t *\n\t\t *\t\t// Execute the bold command:\n\t\t *\t\teditor.execute( 'bold' );\n\t\t *\n\t\t *\t\t// Check the state of the bold command:\n\t\t *\t\teditor.commands.get( 'bold' ).value;\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/commandcollection~CommandCollection}\n\t\t */\n\t\tthis.commands = new CommandCollection();\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * Indicates the editor life-cycle state.\n\t\t *\n\t\t * The editor is in one of the following states:\n\t\t *\n\t\t * * `initializing` - during the editor initialization (before {@link module:core/editor/editor~Editor.create `Editor.create()`})\n\t\t * finished its job,\n\t\t * * `ready` - after the promise returned by the {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t * method is resolved,\n\t\t * * `destroyed` - once the {@link #destroy `editor.destroy()`} method was called.\n\t\t *\n\t\t * @observable\n\t\t * @member {'initializing'|'ready'|'destroyed'} #state\n\t\t */\n\t\tthis.set( 'state', 'initializing' );\n\t\tthis.once( 'ready', () => ( this.state = 'ready' ), { priority: 'high' } );\n\t\tthis.once( 'destroy', () => ( this.state = 'destroyed' ), { priority: 'high' } );\n\n\t\t/**\n\t\t * Defines whether this editor is in read-only mode.\n\t\t *\n\t\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t\t * to modify the document by using them. Also, the editable element(s) become non-editable.\n\t\t *\n\t\t * In order to make the editor read-only, you can set this value directly:\n\t\t *\n\t\t *\t\teditor.isReadOnly = true;\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The editor's model.\n\t\t *\n\t\t * The central point of the editor's abstract data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = new Model();\n\n\t\t/**\n\t\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t\t * Used e.g. for setting and retrieving editor data.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/datacontroller~DataController}\n\t\t */\n\t\tthis.data = new DataController( this.model );\n\n\t\t/**\n\t\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t\t * Controls user input and rendering the content for editing.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController}\n\t\t */\n\t\tthis.editing = new EditingController( this.model );\n\t\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\n\n\t\t/**\n\t\t * Conversion manager through which you can register model to view and view to model converters.\n\t\t *\n\t\t * See {@link module:engine/conversion/conversion~Conversion}'s documentation to learn how to add converters.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/conversion~Conversion}\n\t\t */\n\t\tthis.conversion = new Conversion( [ this.editing.downcastDispatcher, this.data.downcastDispatcher ], this.data.upcastDispatcher );\n\t\tthis.conversion.addAlias( 'dataDowncast', this.data.downcastDispatcher );\n\t\tthis.conversion.addAlias( 'editingDowncast', this.editing.downcastDispatcher );\n\n\t\t/**\n\t\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t\t *\n\t\t * It allows setting simple keystrokes:\n\t\t *\n\t\t *\t\t// Execute the bold command on Ctrl+E:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', 'bold' );\n\t\t *\n\t\t *\t\t// Execute your own callback:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n\t\t *\t\t\tconsole.log( data.keyCode );\n\t\t *\n\t\t *\t\t\t// Prevent default (native) action and stop the underlying keydown event\n\t\t *\t\t\t// so no other editor feature will interfere.\n\t\t *\t\t\tcancel();\n\t\t *\t\t} );\n\t\t *\n\t\t * Note: Certain, typing oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n\t\t * by low level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n\t\t * To handle those specific keystrokes see the events fired by the\n\t\t * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new EditingKeystrokeHandler( this );\n\t\tthis.keystrokes.listenTo( this.editing.view.document );\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the config.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst config = this.config;\n\t\tconst plugins = config.get( 'plugins' ) || [];\n\t\tconst removePlugins = config.get( 'removePlugins' ) || [];\n\t\tconst extraPlugins = config.get( 'extraPlugins' ) || [];\n\n\t\treturn this.plugins.init( plugins.concat( extraPlugins ), removePlugins );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n\t * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n\t *\n\t * @fires destroy\n\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\tlet readyPromise = Promise.resolve();\n\n\t\tif ( this.state == 'initializing' ) {\n\t\t\treadyPromise = new Promise( resolve => this.once( 'ready', resolve ) );\n\t\t}\n\n\t\treturn readyPromise\n\t\t\t.then( () => {\n\t\t\t\tthis.fire( 'destroy' );\n\t\t\t\tthis.stopListening();\n\t\t\t\tthis.commands.destroy();\n\t\t\t} )\n\t\t\t.then( () => this.plugins.destroy() )\n\t\t\t.then( () => {\n\t\t\t\tthis.model.destroy();\n\t\t\t\tthis.data.destroy();\n\t\t\t\tthis.editing.destroy();\n\t\t\t\tthis.keystrokes.destroy();\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t *\t\teditor.commands.get( commandName ).execute( ... );\n\t *\n\t * @param {String} commandName Name of command to execute.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( ...args ) {\n\t\tthis.commands.execute( ...args );\n\t}\n\n\t/**\n\t * Creates and initializes a new editor instance.\n\t *\n\t * This is an abstract method. Every editor type needs to implement its own initialization logic.\n\t *\n\t * See the `create()` methods of the existing editor types to learn how to use them:\n\t *\n\t * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n\t * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n\t * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n\t * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n\t *\n\t * @abstract\n\t * @method module:core/editor/editor~Editor.create\n\t */\n}\n\nmix( Editor, ObservableMixin );\n\n/**\n * Fired when {@link module:engine/controller/datacontroller~DataController#event:ready data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event destroy\n */\n\n/**\n * This error is thrown when a user tries to use a `<textarea>` element to create a non-classic editor in it.\n *\n * Textarea element represents a plain-text and cannot be used as a editable root element with included CKEditor5.\n * Content of an editor should be nicely present to the user and show him how it's going to looks like. Textarea element\n * doesn't support such behavior.\n *\n * Only {@glink builds/guides/overview#classic-editor Classic Editor} has implemented a special system, which\n * **replace** DOM element and load data from it\n * ({@link module:editor-classic/classiceditor~ClassicEditor.create more information}). All other editors\n * use an existing element, load data from it and make this element editable. Details about behaviour of each editor\n * might be found in an associated description of a `create` method of each editor.\n *\n * @error editor-wrong-element\n */\n\n/**\n * An array of plugins built into this editor class.\n * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n * during the editor initialization.\n *\n * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n * unless `config.plugins` is passed.\n *\n *\t\t// Build some plugins into the editor class first.\n *\t\tClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.plugins.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Don't initialize this plugins (note: it's defined by a string):\n *\t\t\t\tremovePlugins: [ 'Foo' ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> undefined\n *\t\t\t\teditor.config.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Load only this plugin. Can also be define by a string if\n *\t\t\t\t// this plugin was built into the editor class.\n *\t\t\t\tplugins: [ FooPlugin ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.config.get( BarPlugin ); // -> undefined\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n *\n * @static\n * @member {Array.<Function>} module:core/editor/editor~Editor.builtinPlugins\n */\n\n/**\n * The default config which is built into the editor class.\n * It is used in CKEditor 5 builds to provide the default config options which are later used during editor initialization.\n *\n *\t\tClassicEditor.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the config passed to create().\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, { bar: 3 } )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.defaultConfig\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/utils/dataapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @mixin DataApiMixin\n * @implements module:core/editor/utils/dataapimixin~DataApi\n */\nconst DataApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tsetData( data ) {\n\t\tthis.data.set( data );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetData( options ) {\n\t\treturn this.data.get( options );\n\t}\n};\n\nexport default DataApiMixin;\n\n/**\n * Interface defining editor methods for setting and getting data to and from the editor's main root element\n * using the {@link module:core/editor/editor~Editor#data data pipeline}.\n *\n * This interface is not a part of the {@link module:core/editor/editor~Editor} class because one may want to implement\n * an editor with multiple root elements, in which case the methods for setting and getting data will need to be implemented\n * differently.\n *\n * @interface DataApi\n */\n\n/**\n * Sets the data in the editor.\n *\n *\t\teditor.setData( '<p>This is editor!</p>' );\n *\n * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `setData()`'s parameter does not\n * have to be a string either. You can e.g. accept an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #setData\n * @param {String} data Input data.\n */\n\n/**\n * Gets the data from the editor.\n *\n *\t\teditor.getData(); // -> '<p>This is editor!</p>'\n *\n * By default the editor outputs HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `getData()`'s return value does not\n * have to be a string either. You can e.g. return an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #getData\n * @param {Object} [options]\n * @param {String} [options.rootName='main'] Root name.\n * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `'empty'` by default,\n * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n * @returns {String} Output data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\n\n/**\n * @module core/editor/utils/elementapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n *\n * @mixin ElementApiMixin\n * @implements module:core/editor/utils/elementapimixin~ElementApi\n */\nconst ElementApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tupdateSourceElement() {\n\t\tif ( !this.sourceElement ) {\n\t\t\t/**\n\t\t\t * Cannot update the source element of a detached editor.\n\t\t\t *\n\t\t\t * The {@link ~ElementApi#updateSourceElement `updateSourceElement()`} method cannot be called if you did not\n\t\t\t * pass an element to `Editor.create()`.\n\t\t\t *\n\t\t\t * @error editor-missing-sourceelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'editor-missing-sourceelement: Cannot update the source element of a detached editor.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tsetDataInElement( this.sourceElement, this.data.get() );\n\t}\n};\n\nexport default ElementApiMixin;\n\n/**\n * Interface describing an editor that replaced a DOM element (was \"initialized on an element\").\n *\n * Such an editor should provide a method to\n * {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement update the replaced element with the current data}.\n *\n * @interface ElementApi\n */\n\n/**\n * The element on which the editor has been initialized.\n *\n * @readonly\n * @member {HTMLElement} #sourceElement\n */\n\n/**\n * Updates the {@link #sourceElement editor source element}'s content with the data.\n *\n * @method #updateSourceElement\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/setdatainelement\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * Sets data in a given element.\n *\n * @param {HTMLElement} el The element in which the data will be set.\n * @param {String} data The data string.\n */\nexport default function setDataInElement( el, data ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\tel.value = data;\n\t}\n\n\tel.innerHTML = data;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/basichtmlwriter\n */\n\n/* globals document */\n\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n *\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\n */\nexport default class BasicHtmlWriter {\n\t/**\n\t * Returns an HTML string created from the document fragment.\n\t *\n\t * @param {DocumentFragment} fragment\n\t * @returns {String}\n\t */\n\tgetHtml( fragment ) {\n\t\tconst doc = document.implementation.createHTMLDocument( '' );\n\t\tconst container = doc.createElement( 'div' );\n\t\tcontainer.appendChild( fragment );\n\n\t\treturn container.innerHTML;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\nimport { NBSP_FILLER } from '../view/filler';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/componentfactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n\t/**\n\t * Creates an instance of the factory.\n\t *\n\t * @constructor\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance that the factory belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Registered component factories.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._components = new Map();\n\t}\n\n\t/**\n\t * Returns an iterator of registered component names. Names are returned in lower case.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tfor ( const value of this._components.values() ) {\n\t\t\tyield value.originalName;\n\t\t}\n\t}\n\n\t/**\n\t * Registers a component factory function that will be used by the\n\t * {@link #create create} method and called with the\n\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n\t * allowing localization of the {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @param {Function} callback The callback that returns the component.\n\t */\n\tadd( name, callback ) {\n\t\tif ( this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The item already exists in the component factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-exists\n\t\t\t * @param {String} name The name of the component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-exists: The item already exists in the component factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\tthis._components.set( getNormalized( name ), { callback, originalName: name } );\n\t}\n\n\t/**\n\t * Creates an instance of a component registered in the factory under a specific name.\n\t *\n\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n\t * the previously {@link #add added} factory function, allowing localization of the\n\t * {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {module:ui/view~View} The instantiated component view.\n\t */\n\tcreate( name ) {\n\t\tif ( !this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The required component is not registered in the component factory. Please make sure\n\t\t\t * the provided name is correct and the component has been correctly\n\t\t\t * {@link #add added} to the factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-missing\n\t\t\t * @param {String} name The name of the missing component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-missing: The required component is not registered in the factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\treturn this._components.get( getNormalized( name ) ).callback( this.editor.locale );\n\t}\n\n\t/**\n\t * Checks if a component of a given name is registered in the factory.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\treturn this._components.has( getNormalized( name ) );\n\t}\n}\n\n//\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\nfunction getNormalized( name ) {\n\treturn String( name ).toLowerCase();\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global setTimeout, clearTimeout */\n\n/**\n * @module utils/focustracker\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\nimport mix from './mix';\n\n/**\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker {\n\tconstructor() {\n\t\t/**\n\t\t * True when one of the registered elements is focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The currently focused element.\n\t\t *\n\t\t * While {@link #isFocused `isFocused`} remains `true`, the focus can\n\t\t * move between different UI elements. This property tracks those\n\t\t * elements and tells which one is currently focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement|null}\n\t\t */\n\t\tthis.set( 'focusedElement', null );\n\n\t\t/**\n\t\t * List of registered elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<HTMLElement>}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Event loop timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._nextEventLoopTimeout = null;\n\t}\n\n\t/**\n\t * Starts tracking the specified element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tadd( element ) {\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthrow new CKEditorError( 'focusTracker-add-element-already-exist', this );\n\t\t}\n\n\t\tthis.listenTo( element, 'focus', () => this._focus( element ), { useCapture: true } );\n\t\tthis.listenTo( element, 'blur', () => this._blur(), { useCapture: true } );\n\t\tthis._elements.add( element );\n\t}\n\n\t/**\n\t * Stops tracking the specified element and stops listening on this element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tremove( element ) {\n\t\tif ( element === this.focusedElement ) {\n\t\t\tthis._blur( element );\n\t\t}\n\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthis.stopListening( element );\n\t\t\tthis._elements.delete( element );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the focus tracker by:\n\t * - Disabling all event listeners attached to tracked elements.\n\t * - Removing all tracked elements that were previously added.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Stores currently focused element and set {#isFocused} as `true`.\n\t *\n\t * @private\n\t * @param {HTMLElement} element Element which has been focused.\n\t */\n\t_focus( element ) {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis.focusedElement = element;\n\t\tthis.isFocused = true;\n\t}\n\n\t/**\n\t * Clears currently focused element and set {@link #isFocused} as `false`.\n\t * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n\t *\n\t * @private\n\t * @fires blur\n\t */\n\t_blur() {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis._nextEventLoopTimeout = setTimeout( () => {\n\t\t\tthis.focusedElement = null;\n\t\t\tthis.isFocused = false;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * @event focus\n\t */\n\n\t/**\n\t * @event blur\n\t */\n}\n\nmix( FocusTracker, DomEmitterMixin );\nmix( FocusTracker, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editorui\n */\n\n/* globals console */\n\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class EditorUI {\n\t/**\n\t * Creates an instance of the editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor that the UI belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n\t\t * to register factories of specific UI components.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n\t\t */\n\t\tthis.componentFactory = new ComponentFactory( editor );\n\n\t\t/**\n\t\t * Stores the information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Stores all editable elements used by the editor instance.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,HTMLElement>}\n\t\t */\n\t\tthis._editableElementsMap = new Map();\n\n\t\t// Informs UI components that should be refreshed after layout change.\n\t\tthis.listenTo( editor.editing.view.document, 'layoutChanged', () => this.update() );\n\t}\n\n\t/**\n\t * The main (outermost) DOM element of the editor UI.\n\t *\n\t * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n\t * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n\t * it is the editable element itself (as there is no other wrapper). However, in\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n\t * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n\t *\n\t * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n\t * considers to be its main DOM element.\n\t *\n\t * @readonly\n\t * @member {HTMLElement|null} #element\n\t */\n\tget element() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n\t *\n\t * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n\t * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n\t */\n\tupdate() {\n\t\tthis.fire( 'update' );\n\t}\n\n\t/**\n\t * Destroys the UI.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis.focusTracker.destroy();\n\n\t\t// Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n\t\tfor ( const domElement of this._editableElementsMap.values() ) {\n\t\t\tdomElement.ckeditorInstance = null;\n\t\t}\n\n\t\tthis._editableElementsMap = new Map();\n\t}\n\n\t/**\n\t * Store the native DOM editable element used by the editor under\n\t * a unique name.\n\t *\n\t * @param {String} rootName The unique name of the editable element.\n\t * @param {HTMLElement} domElement The native DOM editable element.\n\t */\n\tsetEditableElement( rootName, domElement ) {\n\t\tthis._editableElementsMap.set( rootName, domElement );\n\n\t\t// Put a reference to the CKEditor instance in the editable native DOM element.\n\t\t// It helps 3rd–party software (browser extensions, other libraries) access and recognize\n\t\t// CKEditor 5 instances (editing roots) and use their API (there is no global editor\n\t\t// instance registry).\n\t\tif ( !domElement.ckeditorInstance ) {\n\t\t\tdomElement.ckeditorInstance = this.editor;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the editable editor element with the given name or null if editable does not exist.\n\t *\n\t * @param {String} [rootName=main] The editable name.\n\t * @returns {HTMLElement|undefined}\n\t */\n\tgetEditableElement( rootName = 'main' ) {\n\t\treturn this._editableElementsMap.get( rootName );\n\t}\n\n\t/**\n\t * Returns array of names of all editor editable elements.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetEditableElementsNames() {\n\t\treturn this._editableElementsMap.keys();\n\t}\n\n\t/**\n\t * Stores all editable elements used by the editor instance.\n\t *\n\t * @protected\n\t * @deprecated\n\t * @member {Map.<String,HTMLElement>}\n\t */\n\tget _editableElements() {\n\t\t/**\n\t\t * The {@link module:core/editor/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n\t\t * deprecated and will be removed in the near future. Please use {@link #setEditableElement `setEditableElement()`} and\n\t\t * {@link #getEditableElement `getEditableElement()`} methods instead.\n\t\t *\n\t\t * @error editor-ui-deprecated-editable-elements\n\t\t * @param {module:core/editor/editorui~EditorUI} editorUI Editor UI instance the deprecated property belongs to.\n\t\t */\n\t\tconsole.warn(\n\t\t\t'editor-ui-deprecated-editable-elements: ' +\n\t\t\t'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.',\n\t\t\t{ editorUI: this } );\n\n\t\treturn this._editableElementsMap;\n\t}\n\n\t/**\n\t * Fired when the editor UI is ready.\n\t *\n\t * Fired before {@link module:engine/controller/datacontroller~DataController#event:ready}.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Fired whenever the UI (all related components) should be refreshed.\n\t *\n\t * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n\t * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n\t *\n\t * @event update\n\t */\n}\n\nmix( EditorUI, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/placeholder\n */\n\nimport '../../theme/placeholder.css';\n\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n */\nexport function enablePlaceholder( options ) {\n\tconst { view, element, text, isDirectHost = true } = options;\n\tconst doc = view.document;\n\n\t// Use a single a single post fixer per—document to update all placeholders.\n\tif ( !documentPlaceholders.has( doc ) ) {\n\t\tdocumentPlaceholders.set( doc, new Map() );\n\n\t\t// If a post-fixer callback makes a change, it should return `true` so other post–fixers\n\t\t// can re–evaluate the document again.\n\t\tdoc.registerPostFixer( writer => updateDocumentPlaceholders( doc, writer ) );\n\t}\n\n\t// Store information about the element placeholder under its document.\n\tdocumentPlaceholders.get( doc ).set( element, {\n\t\ttext,\n\t\tisDirectHost\n\t} );\n\n\t// Update the placeholders right away.\n\tview.change( writer => updateDocumentPlaceholders( doc, writer ) );\n}\n\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function disablePlaceholder( view, element ) {\n\tconst doc = element.document;\n\n\tview.change( writer => {\n\t\tif ( !documentPlaceholders.has( doc ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst placeholders = documentPlaceholders.get( doc );\n\t\tconst config = placeholders.get( element );\n\n\t\twriter.removeAttribute( 'data-placeholder', config.hostElement );\n\t\thidePlaceholder( writer, config.hostElement );\n\n\t\tplaceholders.delete( element );\n\t} );\n}\n\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder( writer, element ) {\n\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.addClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder( writer, element ) {\n\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean}\n */\nexport function needsPlaceholder( element ) {\n\tconst doc = element.document;\n\n\t// The element was removed from document.\n\tif ( !doc ) {\n\t\treturn false;\n\t}\n\n\t// The element is empty only as long as it contains nothing but uiElements.\n\tconst isEmptyish = !Array.from( element.getChildren() )\n\t\t.some( element => !element.is( 'uiElement' ) );\n\n\t// If the element is empty and the document is blurred.\n\tif ( !doc.isFocused && isEmptyish ) {\n\t\treturn true;\n\t}\n\n\tconst viewSelection = doc.selection;\n\tconst selectionAnchor = viewSelection.anchor;\n\n\t// If document is focused and the element is empty but the selection is not anchored inside it.\n\tif ( isEmptyish && selectionAnchor && selectionAnchor.parent !== element ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updateDocumentPlaceholders( doc, writer ) {\n\tconst placeholders = documentPlaceholders.get( doc );\n\tlet wasViewModified = false;\n\n\tfor ( const [ element, config ] of placeholders ) {\n\t\tif ( updatePlaceholder( writer, element, config ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t}\n\n\treturn wasViewModified;\n}\n\n// Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updatePlaceholder( writer, element, config ) {\n\tconst { text, isDirectHost } = config;\n\tconst hostElement = isDirectHost ? element : getChildPlaceholderHostSubstitute( element );\n\tlet wasViewModified = false;\n\n\t// When not a direct host, it could happen that there is no child element\n\t// capable of displaying a placeholder.\n\tif ( !hostElement ) {\n\t\treturn false;\n\t}\n\n\t// Cache the host element. It will be necessary for disablePlaceholder() to know\n\t// which element should have class and attribute removed because, depending on\n\t// the config.isDirectHost value, it could be the element or one of its descendants.\n\tconfig.hostElement = hostElement;\n\n\t// This may be necessary when updating the placeholder text to something else.\n\tif ( hostElement.getAttribute( 'data-placeholder' ) !== text ) {\n\t\twriter.setAttribute( 'data-placeholder', text, hostElement );\n\t\twasViewModified = true;\n\t}\n\n\tif ( needsPlaceholder( hostElement ) ) {\n\t\tif ( showPlaceholder( writer, hostElement ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t} else if ( hidePlaceholder( writer, hostElement ) ) {\n\t\twasViewModified = true;\n\t}\n\n\treturn wasViewModified;\n}\n\n// Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\nfunction getChildPlaceholderHostSubstitute( parent ) {\n\tif ( parent.childCount === 1 ) {\n\t\tconst firstChild = parent.getChild( 0 );\n\n\t\tif ( firstChild.is( 'element' ) && !firstChild.is( 'uiElement' ) ) {\n\t\t\treturn firstChild;\n\t\t}\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n\tconstructor() {\n\t\t/**\n\t\t * The elements replaced by {@link #replace} and their replacements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis._replacedElements = [];\n\t}\n\n\t/**\n\t * Hides the `element` and, if specified, inserts the the given element next to it.\n\t *\n\t * The effect of this method can be reverted by {@link #restore}.\n\t *\n\t * @param {HTMLElement} element The element to replace.\n\t * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n\t */\n\treplace( element, newElement ) {\n\t\tthis._replacedElements.push( { element, newElement } );\n\n\t\telement.style.display = 'none';\n\n\t\tif ( newElement ) {\n\t\t\telement.parentNode.insertBefore( newElement, element.nextSibling );\n\t\t}\n\t}\n\n\t/**\n\t * Restores what {@link #replace} did.\n\t */\n\trestore() {\n\t\tthis._replacedElements.forEach( ( { element, newElement } ) => {\n\t\t\telement.style.display = '';\n\n\t\t\tif ( newElement ) {\n\t\t\t\tnewElement.remove();\n\t\t\t}\n\t\t} );\n\n\t\tthis._replacedElements = [];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditorui\n */\n\nimport EditorUI from '@ckeditor/ckeditor5-core/src/editor/editorui';\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\nimport normalizeToolbarConfig from '@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport ElementReplacer from '@ckeditor/ckeditor5-utils/src/elementreplacer';\n\n/**\n * The classic editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\nexport default class ClassicEditorUI extends EditorUI {\n\t/**\n\t * Creates an instance of the classic editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The main (top–most) view of the editor UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A normalized `config.toolbar` object.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._toolbarConfig = normalizeToolbarConfig( editor.config.get( 'toolbar' ) );\n\n\t\t/**\n\t\t * The element replacer instance used to hide the editor's source element.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/elementreplacer~ElementReplacer}\n\t\t */\n\t\tthis._elementReplacer = new ElementReplacer();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget element() {\n\t\treturn this.view.element;\n\t}\n\n\t/**\n\t * Initializes the UI.\n\t *\n\t * @param {HTMLElement|null} replacementElement The DOM element that will be the source for the created editor.\n\t */\n\tinit( replacementElement ) {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editable = view.editable;\n\t\tconst editingRoot = editingView.document.getRoot();\n\n\t\t// The editable UI and editing root should share the same name. Then name is used\n\t\t// to recognize the particular editable, for instance in ARIA attributes.\n\t\teditable.name = editingRoot.rootName;\n\n\t\tview.render();\n\n\t\t// The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n\t\t// But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n\t\tconst editableElement = editable.element;\n\n\t\t// Register the editable UI view in the editor. A single editor instance can aggregate multiple\n\t\t// editable areas (roots) but the classic editor has only one.\n\t\tthis.setEditableElement( editable.name, editableElement );\n\n\t\t// Let the global focus tracker know that the editable UI element is focusable and\n\t\t// belongs to the editor. From now on, the focus tracker will sustain the editor focus\n\t\t// as long as the editable is focused (e.g. the user is typing).\n\t\tthis.focusTracker.add( editableElement );\n\n\t\t// Let the editable UI element respond to the changes in the global editor focus\n\t\t// tracker. It has been added to the same tracker a few lines above but, in reality, there are\n\t\t// many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n\t\t// as they have focus, the editable should act like it is focused too (although technically\n\t\t// it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n\t\t// Doing otherwise will result in editable focus styles disappearing, once e.g. the\n\t\t// toolbar gets focused.\n\t\tview.editable.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t// Bind the editable UI element to the editing view, making it an end– and entry–point\n\t\t// of the editor's engine. This is where the engine meets the UI.\n\t\teditingView.attachDomRoot( editableElement );\n\n\t\t// If an element containing the initial data of the editor was provided, replace it with\n\t\t// an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n\t\t// can be such element.\n\t\tif ( replacementElement ) {\n\t\t\tthis._elementReplacer.replace( replacementElement, this.element );\n\t\t}\n\n\t\tthis._initPlaceholder();\n\t\tthis._initToolbar();\n\t\tthis.fire( 'ready' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tconst view = this.view;\n\t\tconst editingView = this.editor.editing.view;\n\n\t\tthis._elementReplacer.restore();\n\t\teditingView.detachDomRoot( view.editable.name );\n\t\tview.destroy();\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Initializes the editor toolbar.\n\t *\n\t * @private\n\t */\n\t_initToolbar() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set–up the sticky panel with toolbar.\n\t\tview.stickyPanel.bind( 'isActive' ).to( this.focusTracker, 'isFocused' );\n\t\tview.stickyPanel.limiterElement = view.element;\n\n\t\tif ( this._toolbarConfig.viewportTopOffset ) {\n\t\t\tview.stickyPanel.viewportTopOffset = this._toolbarConfig.viewportTopOffset;\n\t\t}\n\n\t\tview.toolbar.fillFromConfig( this._toolbarConfig.items, this.componentFactory );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editingView,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar: view.toolbar\n\t\t} );\n\t}\n\n\t/**\n\t * Enable the placeholder text on the editing root, if any was configured.\n\t *\n\t * @private\n\t */\n\t_initPlaceholder() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editingRoot = editingView.document.getRoot();\n\t\tconst sourceElement = editor.sourceElement;\n\n\t\tconst placeholderText = editor.config.get( 'placeholder' ) ||\n\t\t\tsourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute( 'placeholder' );\n\n\t\tif ( placeholderText ) {\n\t\t\tenablePlaceholder( {\n\t\t\t\tview: editingView,\n\t\t\t\telement: editingRoot,\n\t\t\t\ttext: placeholderText,\n\t\t\t\tisDirectHost: false\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * \t\ttoolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n *\n * * or an `Object`:\n *\n *\t\ttoolbar: {\n *\t\t\titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n *\t\t\t...\n *\t\t}\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\n * @returns {Object} A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig( config ) {\n\tif ( Array.isArray( config ) ) {\n\t\treturn {\n\t\t\titems: config\n\t\t};\n\t}\n\n\tif ( !config ) {\n\t\treturn {\n\t\t\titems: []\n\t\t};\n\t}\n\n\treturn Object.assign( {\n\t\titems: []\n\t}, config );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/enabletoolbarkeyboardfocus\n */\n\n/**\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\n *\n * @param {Object} options Options of the utility.\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\n * `options.toolbar` is focused.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\n * handler to register `Alt+F10` keystroke.\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\n * for `options.origin`.\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\n * focus when `Alt+F10` is pressed.\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\n * upon the `Alt+F10` keystroke.\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\n * `Esc` keystroke but before the focus goes back to `options.origin`.\n */\nexport default function enableToolbarKeyboardFocus( {\n\torigin,\n\toriginKeystrokeHandler,\n\toriginFocusTracker,\n\ttoolbar,\n\tbeforeFocus,\n\tafterBlur\n} ) {\n\t// Because toolbar items can get focus, the overall state of the toolbar must\n\t// also be tracked.\n\toriginFocusTracker.add( toolbar.element );\n\n\t// Focus the toolbar on the keystroke, if not already focused.\n\toriginKeystrokeHandler.set( 'Alt+F10', ( data, cancel ) => {\n\t\tif ( originFocusTracker.isFocused && !toolbar.focusTracker.isFocused ) {\n\t\t\tif ( beforeFocus ) {\n\t\t\t\tbeforeFocus();\n\t\t\t}\n\n\t\t\ttoolbar.focus();\n\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// Blur the toolbar and bring the focus back to origin.\n\ttoolbar.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\tif ( toolbar.focusTracker.isFocused ) {\n\t\t\torigin.focus();\n\n\t\t\tif ( afterBlur ) {\n\t\t\t\tafterBlur();\n\t\t\t}\n\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/viewcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ViewCollection extends Collection {\n\t/**\n\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( {\n\t\t\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\n\t\t\tidProperty: 'viewUid'\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\t\tthis.on( 'add', ( evt, view, index ) => {\n\t\t\tif ( !view.isRendered ) {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tview.element.remove();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n\t\t * See the view {@link module:ui/view~View#locale locale} property.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * A parent element within which child views are rendered and managed in DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._parentElement = null;\n\t}\n\n\t/**\n\t * Destroys the view collection along with child views.\n\t * See the view {@link module:ui/view~View#destroy} method.\n\t */\n\tdestroy() {\n\t\tthis.map( view => view.destroy() );\n\t}\n\n\t/**\n\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n\t * {@link #remove removing} views in the collection synchronizes their\n\t * {@link module:ui/view~View#element elements} in the parent element.\n\t *\n\t * @param {HTMLElement} element A new parent element.\n\t */\n\tsetParent( elementOrDocFragment ) {\n\t\tthis._parentElement = elementOrDocFragment;\n\t}\n\n\t/**\n\t * Delegates selected events coming from within views in the collection to any\n\t * {@link module:utils/emittermixin~Emitter}.\n\t *\n\t * For the following views and collection:\n\t *\n\t *\t\tconst viewA = new View();\n\t *\t\tconst viewB = new View();\n\t *\t\tconst viewC = new View();\n\t *\n\t *\t\tconst views = parentView.createCollection();\n\t *\n\t *\t\tviews.delegate( 'eventX' ).to( viewB );\n\t *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n\t *\n\t *\t\tviews.add( viewA );\n\t *\n\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventX', customData );\n\t *\n\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventY', customData );\n\t *\n\t * See {@link module:utils/emittermixin~Emitter#delegate}.\n\t *\n\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n\t * {@link module:utils/emittermixin~Emitter}.\n\t * @returns {Object}\n\t * @returns {Function} return.to A function which accepts the destination of\n\t * {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n\t */\n\tdelegate( ...events ) {\n\t\tif ( !events.length || !isStringArray( events ) ) {\n\t\t\t/**\n\t\t\t * All event names must be strings.\n\t\t\t *\n\t\t\t * @error ui-viewcollection-delegate-wrong-events\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-viewcollection-delegate-wrong-events: All event names must be strings.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Selects destination for {@link module:utils/emittermixin~Emitter#delegate} events.\n\t\t\t *\n\t\t\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\n\t\t\t * @function module:ui/viewcollection~ViewCollection#delegate.to\n\t\t\t * @param {module:utils/emittermixin~Emitter} dest An `Emitter` instance which is\n\t\t\t * the destination for delegated events.\n\t\t\t */\n\t\t\tto: dest => {\n\t\t\t\t// Activate delegating on existing views in this collection.\n\t\t\t\tfor ( const view of this ) {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activate delegating on future views in this collection.\n\t\t\t\tthis.on( 'add', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t// Deactivate delegating when view is removed from this collection.\n\t\t\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.stopDelegating( evtName, dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\n\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n\t * in DOM, reflecting the order of the collection.\n\t *\n\t * See the {@link #add} method.\n\t *\n\t * @method #remove\n\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n\t * @returns {Object} The removed view.\n\t */\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport { isObject, cloneDeepWith } from 'lodash-es';\n\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Template {\n\t/**\n\t * Creates an instance of the {@link ~Template} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, normalize( clone( def ) ) );\n\n\t\t/**\n\t\t * Indicates whether this particular Template instance has been\n\t\t * {@link #render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isRendered = false;\n\n\t\t/**\n\t\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n\t\t * renders to an HTML element.\n\t\t *\n\t\t * @member {String} #tag\n\t\t */\n\n\t\t/**\n\t\t * The text of the template. It also indicates that the template renders to a DOM text node.\n\t\t *\n\t\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n\t\t */\n\n\t\t/**\n\t\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n\t\t * the attributes of an HTML element.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Object} #attributes\n\t\t */\n\n\t\t/**\n\t\t * The children of the template. They can be either:\n\t\t * * independent instances of {@link ~Template} (sub–templates),\n\t\t * * native DOM Nodes.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Array.<module:ui/template~Template|Node>} #children\n\t\t */\n\n\t\t/**\n\t\t * The DOM event listeners of the template.\n\t\t *\n\t\t * @member {Object} #eventListeners\n\t\t */\n\n\t\t/**\n\t\t * The data used by the {@link #revert} method to restore a node to its original state.\n\t\t *\n\t\t * See: {@link #apply}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/template~RenderData}\n\t\t */\n\t\tthis._revertData = null;\n\t}\n\n\t/**\n\t * Renders a DOM Node (an HTML element or text) out of the template.\n\t *\n\t *\t\tconst domNode = new Template( { ... } ).render();\n\t *\n\t * See: {@link #apply}.\n\t *\n\t * @returns {HTMLElement|Text}\n\t */\n\trender() {\n\t\tconst node = this._renderNode( {\n\t\t\tintoFragment: true\n\t\t} );\n\n\t\tthis._isRendered = true;\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Applies the template to an existing DOM Node, either HTML element or text.\n\t *\n\t * **Note:** No new DOM nodes will be created. Applying extends:\n\t *\n\t * {@link module:ui/template~TemplateDefinition attributes},\n\t * {@link module:ui/template~TemplateDefinition event listeners}, and\n\t * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n\t *\n\t * **Note:** Existing `class` and `style` attributes are extended when a template\n\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\n\t *\n\t * **Note:** The process of applying a template can be easily reverted using the\n\t * {@link module:ui/template~Template#revert} method.\n\t *\n\t *\t\tconst element = document.createElement( 'div' );\n\t *\t\tconst observable = new Model( { divClass: 'my-div' } );\n\t *\t\tconst emitter = Object.create( EmitterMixin );\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tid: 'first-div',\n\t *\t\t\t\tclass: bind.to( 'divClass' )\n\t *\t\t\t},\n\t *\t\t\ton: {\n\t *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t'Div text.'\n\t *\t\t\t]\n\t *\t\t} ).apply( element );\n\t *\n\t *\t\tconsole.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n\t *\n\t * @see module:ui/template~Template#render\n\t * @see module:ui/template~Template#revert\n\t * @param {Node} node Root node for the template to apply.\n\t */\n\tapply( node ) {\n\t\tthis._revertData = getEmptyRevertData();\n\n\t\tthis._renderNode( {\n\t\t\tnode,\n\t\t\tisApplying: true,\n\t\t\trevertData: this._revertData\n\t\t} );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n\t *\n\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n\t * same node used by {@link module:ui/template~Template#apply}.\n\t */\n\trevert( node ) {\n\t\tif ( !this._revertData ) {\n\t\t\t/**\n\t\t\t * Attempting to revert a template which has not been applied yet.\n\t\t\t *\n\t\t\t * @error ui-template-revert-not-applied\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.',\n\t\t\t\t[ this, node ]\n\t\t\t);\n\t\t}\n\n\t\tthis._revertTemplateFromNode( node, this._revertData );\n\t}\n\n\t/**\n\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n\t * instances and returns them one by one.\n\t *\n\t *\t\tconst viewFoo = new View();\n\t *\t\tconst viewBar = new View();\n\t *\t\tconst viewBaz = new View();\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'div',\n\t *\t\t\tchildren: [\n\t *\t\t\t\tviewFoo,\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'div',\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\tviewBar\n\t *\t\t\t\t\t]\n\t *\t\t\t\t},\n\t *\t\t\t\tviewBaz\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Logs: viewFoo, viewBar, viewBaz\n\t *\t\tfor ( const view of template.getViews() ) {\n\t *\t\t\tconsole.log( view );\n\t *\t\t}\n\t *\n\t * @returns {Iterable.<module:ui/view~View>}\n\t */\n\t* getViews() {\n\t\tfunction* search( def ) {\n\t\t\tif ( def.children ) {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isView( child ) ) {\n\t\t\t\t\t\tyield child;\n\t\t\t\t\t} else if ( isTemplate( child ) ) {\n\t\t\t\t\t\tyield* search( child );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tyield* search( this );\n\t}\n\n\t/**\n\t * An entry point to the interface which binds DOM nodes to\n\t * {@link module:utils/observablemixin~Observable observables}.\n\t * There are two types of bindings:\n\t *\n\t * * HTML element attributes or text `textContent` synchronized with attributes of an\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n\t * and {@link module:ui/template~BindChain#if}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n\t *\t\t\t\tclass: bind.to( 'classAttribute' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * * DOM events fired on HTML element propagated through\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\ton: {\n\t *\t\t\t\t// Will be fired by the observable.\n\t *\t\t\t\tclick: bind( 'elementClicked' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * Also see {@link module:ui/view~View#bindTemplate}.\n\t *\n\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n\t * @returns {module:ui/template~BindChain}\n\t */\n\tstatic bind( observable, emitter ) {\n\t\treturn {\n\t\t\tto( eventNameOrFunctionOrAttribute, callback ) {\n\t\t\t\treturn new TemplateToBinding( {\n\t\t\t\t\teventNameOrFunction: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tattribute: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tobservable, emitter, callback\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tif( attribute, valueIfTrue, callback ) {\n\t\t\t\treturn new TemplateIfBinding( {\n\t\t\t\t\tobservable, emitter, attribute, valueIfTrue, callback\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\n\t * from another {@link module:ui/template~TemplateDefinition}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'p',\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'a',\n\t *\t\t\t\tdata-x: bind.to( 'foo' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'span',\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'b'\n\t *\t\t\t\t\t},\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\t'Span'\n\t *\t\t\t\t\t]\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t } );\n\t *\n\t *\t\t// Instance-level extension.\n\t *\t\tTemplate.extend( template, {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'b',\n\t *\t\t\t\tdata-x: bind.to( 'bar' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'c'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Child extension.\n\t *\t\tTemplate.extend( template.children[ 0 ], {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'd'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * the `outerHTML` of `template.render()` is:\n\t *\n\t *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n\t *\t\t\t<span class=\"b c d\">Span</span>\n\t *\t\t</p>\n\t *\n\t * @param {module:ui/template~Template} template An existing template instance to be extended.\n\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n\t */\n\tstatic extend( template, def ) {\n\t\tif ( template._isRendered ) {\n\t\t\t/**\n\t\t\t * Extending a template after rendering may not work as expected. To make sure\n\t\t\t * the {@link module:ui/template~Template.extend extending} works for an element,\n\t\t\t * make sure it happens before {@link #render} is called.\n\t\t\t *\n\t\t\t * @error template-extend-render\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'template-extend-render: Attempting to extend a template which has already been rendered.',\n\t\t\t\t[ this, template ]\n\t\t\t);\n\t\t}\n\n\t\textendTemplate( template, normalize( clone( def ) ) );\n\t}\n\n\t/**\n\t * Renders a DOM Node (either an HTML element or text) out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderNode( data ) {\n\t\tlet isInvalid;\n\n\t\tif ( data.node ) {\n\t\t\t// When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n\t\t\tisInvalid = this.tag && this.text;\n\t\t} else {\n\t\t\t// When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n\t\t\tisInvalid = this.tag ? this.text : !this.text;\n\t\t}\n\n\t\tif ( isInvalid ) {\n\t\t\t/**\n\t\t\t * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n\t\t\t * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n\t\t\t *\n\t\t\t * @error ui-template-wrong-syntax\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( this.text ) {\n\t\t\treturn this._renderText( data );\n\t\t} else {\n\t\t\treturn this._renderElement( data );\n\t\t}\n\t}\n\n\t/**\n\t * Renders an HTML element out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElement( data ) {\n\t\tlet node = data.node;\n\n\t\tif ( !node ) {\n\t\t\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\n\t\t}\n\n\t\tthis._renderAttributes( data );\n\t\tthis._renderElementChildren( data );\n\t\tthis._setUpListeners( data );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders a text node out of {@link module:ui/template~Template#text}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderText( data ) {\n\t\tlet node = data.node;\n\n\t\t// Save the original textContent to revert it in #revert().\n\t\tif ( node ) {\n\t\t\tdata.revertData.text = node.textContent;\n\t\t} else {\n\t\t\tnode = data.node = document.createTextNode( '' );\n\t\t}\n\n\t\t// Check if this Text Node is bound to Observable. Cases:\n\t\t//\n\t\t//\t\ttext: [ Template.bind( ... ).to( ... ) ]\n\t\t//\n\t\t//\t\ttext: [\n\t\t//\t\t\t'foo',\n\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t//\t\t\t...\n\t\t//\t\t]\n\t\t//\n\t\tif ( hasTemplateBinding( this.text ) ) {\n\t\t\tthis._bindToObservable( {\n\t\t\t\tschema: this.text,\n\t\t\t\tupdater: getTextUpdater( node ),\n\t\t\t\tdata\n\t\t\t} );\n\t\t}\n\t\t// Simply set text. Cases:\n\t\t//\n\t\t//\t\ttext: [ 'all', 'are', 'static' ]\n\t\t//\n\t\t//\t\ttext: [ 'foo' ]\n\t\t//\n\t\telse {\n\t\t\tnode.textContent = this.text.join( '' );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderAttributes( data ) {\n\t\tlet attrName, attrValue, domAttrValue, attrNs;\n\n\t\tif ( !this.attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = data.node;\n\t\tconst revertData = data.revertData;\n\n\t\tfor ( attrName in this.attributes ) {\n\t\t\t// Current attribute value in DOM.\n\t\t\tdomAttrValue = node.getAttribute( attrName );\n\n\t\t\t// The value to be set.\n\t\t\tattrValue = this.attributes[ attrName ];\n\n\t\t\t// Save revert data.\n\t\t\tif ( revertData ) {\n\t\t\t\trevertData.attributes[ attrName ] = domAttrValue;\n\t\t\t}\n\n\t\t\t// Detect custom namespace:\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\n\n\t\t\t// Activate binding if one is found. Cases:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'bar',\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t\t//\t\t\t'baz'\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( attrValue ) ) {\n\t\t\t\t// Normalize attributes with additional data like namespace:\n\t\t\t\t//\n\t\t\t\t//\t\tclass: {\n\t\t\t\t//\t\t\tns: 'abc',\n\t\t\t\t//\t\t\tvalue: [ ... ]\n\t\t\t\t//\t\t}\n\t\t\t\t//\n\t\t\t\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\n\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && shouldExtend( attrName ) ) {\n\t\t\t\t\tvalueToBind.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: valueToBind,\n\t\t\t\t\tupdater: getAttributeUpdater( node, attrName, attrNs ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Style attribute could be an Object so it needs to be parsed in a specific way.\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\twidth: '100px',\n\t\t\t//\t\t\theight: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\n\t\t\t\tthis._renderStyleAttribute( attrValue[ 0 ], data );\n\t\t\t}\n\n\t\t\t// Otherwise simply set the static attribute:\n\t\t\t//\n\t\t\t//\t\tclass: [ 'foo' ]\n\t\t\t//\n\t\t\t//\t\tclass: [ 'all', 'are', 'static' ]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t{\n\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t//\t\t\t\tvalue: [ 'foo' ]\n\t\t\t//\t\t\t}\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\telse {\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\n\t\t\t\t\tattrValue.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tattrValue = attrValue\n\t\t\t\t\t// Retrieve \"values\" from:\n\t\t\t\t\t//\n\t\t\t\t\t//\t\tclass: [\n\t\t\t\t\t//\t\t\t{\n\t\t\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t\t\t//\t\t\t\tvalue: [ ... ]\n\t\t\t\t\t//\t\t\t}\n\t\t\t\t\t//\t\t]\n\t\t\t\t\t//\n\t\t\t\t\t.map( val => val ? ( val.value || val ) : val )\n\t\t\t\t\t// Flatten the array.\n\t\t\t\t\t.reduce( ( prev, next ) => prev.concat( next ), [] )\n\t\t\t\t\t// Convert into string.\n\t\t\t\t\t.reduce( arrayValueReducer, '' );\n\n\t\t\t\tif ( !isFalsy( attrValue ) ) {\n\t\t\t\t\tnode.setAttributeNS( attrNs, attrName, attrValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders the `style` attribute of an HTML element based on\n\t * {@link module:ui/template~Template#attributes}.\n\t *\n\t * A style attribute is an {Object} with static values:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: 'red'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * or values bound to {@link module:ui/model~Model} properties:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: bind.to( ... )\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n\t * needed.\n\t *\n\t * @private\n\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderStyleAttribute( styles, data ) {\n\t\tconst node = data.node;\n\n\t\tfor ( const styleName in styles ) {\n\t\t\tconst styleValue = styles[ styleName ];\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: bind.to( 'attribute' )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( styleValue ) ) {\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: [ styleValue ],\n\t\t\t\t\tupdater: getStyleUpdater( node, styleName ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: 'red'\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse {\n\t\t\t\tnode.style[ styleName ] = styleValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElementChildren( data ) {\n\t\tconst node = data.node;\n\t\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\n\t\tconst isApplying = data.isApplying;\n\t\tlet childIndex = 0;\n\n\t\tfor ( const child of this.children ) {\n\t\t\tif ( isViewCollection( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tchild.setParent( node );\n\n\t\t\t\t\t// Note: ViewCollection renders its children.\n\t\t\t\t\tfor ( const view of child ) {\n\t\t\t\t\t\tcontainer.appendChild( view.element );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isView( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tif ( !child.isRendered ) {\n\t\t\t\t\t\tchild.render();\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild( child.element );\n\t\t\t\t}\n\t\t\t} else if ( isNode( child ) ) {\n\t\t\t\tcontainer.appendChild( child );\n\t\t\t} else {\n\t\t\t\tif ( isApplying ) {\n\t\t\t\t\tconst revertData = data.revertData;\n\t\t\t\t\tconst childRevertData = getEmptyRevertData();\n\n\t\t\t\t\trevertData.children.push( childRevertData );\n\n\t\t\t\t\tchild._renderNode( {\n\t\t\t\t\t\tnode: container.childNodes[ childIndex++ ],\n\t\t\t\t\t\tisApplying: true,\n\t\t\t\t\t\trevertData: childRevertData\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tcontainer.appendChild( child.render() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( data.intoFragment ) {\n\t\t\tnode.appendChild( container );\n\t\t}\n\t}\n\n\t/**\n\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n\t * on an HTML element.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_setUpListeners( data ) {\n\t\tif ( !this.eventListeners ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const key in this.eventListeners ) {\n\t\t\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\n\t\t\t\tconst [ domEvtName, domSelector ] = key.split( '@' );\n\n\t\t\t\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\n\t\t\t} );\n\n\t\t\tif ( data.revertData ) {\n\t\t\t\tdata.revertData.bindings.push( revertBindings );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n\t * activates the binding and sets its initial value.\n\t *\n\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n\t * text node `textContent`.\n\t *\n\t * @protected\n\t * @param {Object} options Binding options.\n\t * @param {module:ui/template~TemplateValueSchema} options.schema\n\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n\t * @param {module:ui/template~RenderData} options.data Rendering data.\n\t */\n\t_bindToObservable( { schema, updater, data } ) {\n\t\tconst revertData = data.revertData;\n\n\t\t// Set initial values.\n\t\tsyncValueSchemaValue( schema, updater, data );\n\n\t\tconst revertBindings = schema\n\t\t\t// Filter \"falsy\" (false, undefined, null, '') value schema components out.\n\t\t\t.filter( item => !isFalsy( item ) )\n\t\t\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n\t\t\t.filter( item => item.observable )\n\t\t\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n\t\t\t// TODO: Reduce the number of listeners attached as many bindings may listen\n\t\t\t// to the same observable attribute.\n\t\t\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\n\n\t\tif ( revertData ) {\n\t\t\trevertData.bindings.push( revertBindings );\n\t\t}\n\t}\n\n\t/**\n\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n\t * return it to the original state.\n\t *\n\t * @protected\n\t * @param {HTMLElement|Text} node A node to be reverted.\n\t * @param {Object} revertData An object that stores information about what changes have been made by\n\t * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n\t */\n\t_revertTemplateFromNode( node, revertData ) {\n\t\tfor ( const binding of revertData.bindings ) {\n\t\t\t// Each binding may consist of several observable+observable#attribute.\n\t\t\t// like the following has 2:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'x',\n\t\t\t//\t\t\tbind.to( 'foo' ),\n\t\t\t//\t\t\t'y',\n\t\t\t//\t\t\tbind.to( 'bar' )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\tfor ( const revertBinding of binding ) {\n\t\t\t\trevertBinding();\n\t\t\t}\n\t\t}\n\n\t\tif ( revertData.text ) {\n\t\t\tnode.textContent = revertData.text;\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const attrName in revertData.attributes ) {\n\t\t\tconst attrValue = revertData.attributes[ attrName ];\n\n\t\t\t// When the attribute has **not** been set before #apply().\n\t\t\tif ( attrValue === null ) {\n\t\t\t\tnode.removeAttribute( attrName );\n\t\t\t} else {\n\t\t\t\tnode.setAttribute( attrName, attrValue );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < revertData.children.length; ++i ) {\n\t\t\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\n\t\t}\n\t}\n}\n\nmix( Template, EmitterMixin );\n\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\nexport class TemplateBinding {\n\t/**\n\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, def );\n\n\t\t/**\n\t\t * An observable instance of the binding. It either:\n\t\t *\n\t\t * * provides the attribute with the value,\n\t\t * * or passes the event when a corresponding DOM event is fired.\n\t\t *\n\t\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n\t\t */\n\n\t\t/**\n\t\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n\t\t *\n\t\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n\t\t * * or listen to the event in the DOM.\n\t\t *\n\t\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n\t\t */\n\n\t\t/**\n\t\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n\t\t *\n\t\t * @member {String} module:ui/template~TemplateBinding#attribute\n\t\t */\n\n\t\t/**\n\t\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n\t\t *\n\t\t * @member {Function} [module:ui/template~TemplateBinding#callback]\n\t\t */\n\t}\n\n\t/**\n\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n\t *\n\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}.\n\t */\n\tgetValue( node ) {\n\t\tconst value = this.observable[ this.attribute ];\n\n\t\treturn this.callback ? this.callback( value, node ) : value;\n\t}\n\n\t/**\n\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n\t * value of {@link module:ui/template~TemplateValueSchema}.\n\t *\n\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateAttributeListener( schema, updater, data ) {\n\t\tconst callback = () => syncValueSchemaValue( schema, updater, data );\n\n\t\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\nexport class TemplateToBinding extends TemplateBinding {\n\t/**\n\t * Activates the listener for the native DOM event, which when fired, is propagated by\n\t * the {@link module:ui/template~TemplateBinding#emitter}.\n\t *\n\t * @param {String} domEvtName The name of the native DOM event.\n\t * @param {String} domSelector The selector in the DOM to filter delegated events.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateDomEventListener( domEvtName, domSelector, data ) {\n\t\tconst callback = ( evt, domEvt ) => {\n\t\t\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\n\t\t\t\tif ( typeof this.eventNameOrFunction == 'function' ) {\n\t\t\t\t\tthis.eventNameOrFunction( domEvt );\n\t\t\t\t} else {\n\t\t\t\t\tthis.observable.fire( this.eventNameOrFunction, domEvt );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.emitter.listenTo( data.node, domEvtName, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( data.node, domEvtName, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\nexport class TemplateIfBinding extends TemplateBinding {\n\t/**\n\t * @inheritDoc\n\t */\n\tgetValue( node ) {\n\t\tconst value = super.getValue( node );\n\n\t\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\n\t}\n\n\t/**\n\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\n\t *\n\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n\t */\n}\n\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\nfunction hasTemplateBinding( schema ) {\n\tif ( !schema ) {\n\t\treturn false;\n\t}\n\n\t// Normalize attributes with additional data like namespace:\n\t//\n\t//\t\tclass: {\n\t//\t\t\tns: 'abc',\n\t//\t\t\tvalue: [ ... ]\n\t//\t\t}\n\t//\n\tif ( schema.value ) {\n\t\tschema = schema.value;\n\t}\n\n\tif ( Array.isArray( schema ) ) {\n\t\treturn schema.some( hasTemplateBinding );\n\t} else if ( schema instanceof TemplateBinding ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\nfunction getValueSchemaValue( schema, node ) {\n\treturn schema.map( schemaItem => {\n\t\t// Process {@link module:ui/template~TemplateBinding} bindings.\n\t\tif ( schemaItem instanceof TemplateBinding ) {\n\t\t\treturn schemaItem.getValue( node );\n\t\t}\n\n\t\t// All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\t\treturn schemaItem;\n\t} );\n}\n\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\nfunction syncValueSchemaValue( schema, updater, { node } ) {\n\tlet value = getValueSchemaValue( schema, node );\n\n\t// Check if schema is a single Template.bind.if, like:\n\t//\n\t//\t\tclass: Template.bind.if( 'foo' )\n\t//\n\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\n\t\tvalue = value[ 0 ];\n\t} else {\n\t\tvalue = value.reduce( arrayValueReducer, '' );\n\t}\n\n\tif ( isFalsy( value ) ) {\n\t\tupdater.remove();\n\t} else {\n\t\tupdater.set( value );\n\t}\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\nfunction getTextUpdater( node ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tnode.textContent = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tnode.textContent = '';\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\nfunction getAttributeUpdater( el, attrName, ns ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.setAttributeNS( ns, attrName, value );\n\t\t},\n\n\t\tremove() {\n\t\t\tel.removeAttributeNS( ns, attrName );\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\nfunction getStyleUpdater( el, styleName ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.style[ styleName ] = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tel.style[ styleName ] = null;\n\t\t}\n\t};\n}\n\n// Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\nfunction clone( def ) {\n\tconst clone = cloneDeepWith( def, value => {\n\t\t// Don't clone the `Template.bind`* bindings because of the references to Observable\n\t\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n\t\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n\t\t// along with the definition.\n\t\t//\n\t\t// Don't clone Template instances if provided as a child. They're simply #render()ed\n\t\t// and nothing should interfere.\n\t\t//\n\t\t// Also don't clone View instances if provided as a child of the Template. The template\n\t\t// instance will be extracted from the View during the normalization and there's no need\n\t\t// to clone it.\n\t\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\n\t\t\treturn value;\n\t\t}\n\t} );\n\n\treturn clone;\n}\n\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\nfunction normalize( def ) {\n\tif ( typeof def == 'string' ) {\n\t\tdef = normalizePlainTextDefinition( def );\n\t} else if ( def.text ) {\n\t\tnormalizeTextDefinition( def );\n\t}\n\n\tif ( def.on ) {\n\t\tdef.eventListeners = normalizeListeners( def.on );\n\n\t\t// Template mixes EmitterMixin, so delete #on to avoid collision.\n\t\tdelete def.on;\n\t}\n\n\tif ( !def.text ) {\n\t\tif ( def.attributes ) {\n\t\t\tnormalizeAttributes( def.attributes );\n\t\t}\n\n\t\tconst children = [];\n\n\t\tif ( def.children ) {\n\t\t\tif ( isViewCollection( def.children ) ) {\n\t\t\t\tchildren.push( def.children );\n\t\t\t} else {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\n\t\t\t\t\t\tchildren.push( child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchildren.push( new Template( child ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdef.children = children;\n\t}\n\n\treturn def;\n}\n\n// Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attributes\nfunction normalizeAttributes( attributes ) {\n\tfor ( const a in attributes ) {\n\t\tif ( attributes[ a ].value ) {\n\t\t\tattributes[ a ].value = [].concat( attributes[ a ].value );\n\t\t}\n\n\t\tarrayify( attributes, a );\n\t}\n}\n\n// Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\nfunction normalizeListeners( listeners ) {\n\tfor ( const l in listeners ) {\n\t\tarrayify( listeners, l );\n\t}\n\n\treturn listeners;\n}\n\n// Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\nfunction normalizePlainTextDefinition( def ) {\n\treturn {\n\t\ttext: [ def ]\n\t};\n}\n\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\nfunction normalizeTextDefinition( def ) {\n\tif ( !Array.isArray( def.text ) ) {\n\t\tdef.text = [ def.text ];\n\t}\n}\n\n// Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\nfunction arrayify( obj, key ) {\n\tif ( !Array.isArray( obj[ key ] ) ) {\n\t\tobj[ key ] = [ obj[ key ] ];\n\t}\n}\n\n// A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\nfunction arrayValueReducer( prev, cur ) {\n\tif ( isFalsy( cur ) ) {\n\t\treturn prev;\n\t} else if ( isFalsy( prev ) ) {\n\t\treturn cur;\n\t} else {\n\t\treturn `${ prev } ${ cur }`;\n\t}\n}\n\n// Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\nfunction extendObjectValueArray( obj, ext ) {\n\tfor ( const a in ext ) {\n\t\tif ( obj[ a ] ) {\n\t\t\tobj[ a ].push( ...ext[ a ] );\n\t\t} else {\n\t\t\tobj[ a ] = ext[ a ];\n\t\t}\n\t}\n}\n\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\n// @param {Object} Error context.\nfunction extendTemplate( template, def ) {\n\tif ( def.attributes ) {\n\t\tif ( !template.attributes ) {\n\t\t\ttemplate.attributes = {};\n\t\t}\n\n\t\textendObjectValueArray( template.attributes, def.attributes );\n\t}\n\n\tif ( def.eventListeners ) {\n\t\tif ( !template.eventListeners ) {\n\t\t\ttemplate.eventListeners = {};\n\t\t}\n\n\t\textendObjectValueArray( template.eventListeners, def.eventListeners );\n\t}\n\n\tif ( def.text ) {\n\t\ttemplate.text.push( ...def.text );\n\t}\n\n\tif ( def.children && def.children.length ) {\n\t\tif ( template.children.length != def.children.length ) {\n\t\t\t/**\n\t\t\t * The number of children in extended definition does not match.\n\t\t\t *\n\t\t\t * @error ui-template-extend-children-mismatch\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-extend-children-mismatch: The number of children in extended definition does not match.',\n\t\t\t\ttemplate\n\t\t\t);\n\t\t}\n\n\t\tlet childIndex = 0;\n\n\t\tfor ( const childDef of def.children ) {\n\t\t\textendTemplate( template.children[ childIndex++ ], childDef );\n\t\t}\n\t}\n}\n\n// Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isFalsy( value ) {\n\treturn !value && value !== 0;\n}\n\n// Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isView( item ) {\n\treturn item instanceof View;\n}\n\n// Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isTemplate( item ) {\n\treturn item instanceof Template;\n}\n\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isViewCollection( item ) {\n\treturn item instanceof ViewCollection;\n}\n\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\nfunction getEmptyRevertData() {\n\treturn {\n\t\tchildren: [],\n\t\tbindings: [],\n\t\tattributes: {}\n\t};\n}\n\n// Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\nfunction shouldExtend( attrName ) {\n\treturn attrName == 'class' || attrName == 'style';\n}\n\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/view\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\nimport '../theme/globals/globals.css';\n\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n *\t\tclass SampleView extends View {\n *\t\t\tconstructor( locale ) {\n *\t\t\t\tsuper( locale );\n *\n *\t\t\t\tconst bind = this.bindTemplate;\n *\n *\t\t\t\t// Views define their interface (state) using observable attributes.\n *\t\t\t\tthis.set( 'elementClass', 'bar' );\n *\n *\t\t\t\tthis.setTemplate( {\n *\t\t\t\t\ttag: 'p',\n *\n *\t\t\t\t\t// The element of the view can be defined with its children.\n *\t\t\t\t\tchildren: [\n *\t\t\t\t\t\t'Hello',\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\ttag: 'b',\n *\t\t\t\t\t\t\tchildren: [ 'world!' ]\n *\t\t\t\t\t\t}\n *\t\t\t\t\t],\n *\t\t\t\t\tattributes: {\n *\t\t\t\t\t\tclass: [\n *\t\t\t\t\t\t\t'foo',\n *\n *\t\t\t\t\t\t\t// Observable attributes control the state of the view in DOM.\n *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n *\t\t\t\t\t\t]\n *\t\t\t\t\t},\n *\t\t\t\t\ton: {\n *\t\t\t\t\t\t// Views listen to DOM events and propagate them.\n *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t\t\t}\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst view = new SampleView( locale );\n *\n *\t\tview.render();\n *\n *\t\t// Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n *\t\tdocument.body.appendChild( view.element );\n *\n *\t\t// Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n *\t\tview.elementClass = 'baz';\n *\n *\t\t// Respond to the \"click\" event in DOM by executing a custom action.\n *\t\tview.on( 'clicked', () => {\n *\t\t\tconsole.log( 'The view has been clicked!' );\n *\t\t} );\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * Creates an instance of the {@link module:ui/view~View} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\t/**\n\t\t * An HTML element of the view. `null` until {@link #render rendered}\n\t\t * from the {@link #template}.\n\t\t *\n\t\t *\t\tclass SampleView extends View {\n\t\t *\t\t\tconstructor() {\n\t\t *\t\t\t\tsuper();\n\t\t *\n\t\t *\t\t\t\t// A template instance the #element will be created from.\n\t\t *\t\t\t\tthis.setTemplate( {\n\t\t *\t\t\t\t\ttag: 'p'\n\t\t *\n\t\t *\t\t\t\t\t// ...\n\t\t *\t\t\t\t} );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\tconst view = new SampleView();\n\t\t *\n\t\t *\t\t// Renders the #template.\n\t\t *\t\tview.render();\n\t\t *\n\t\t *\t\t// Append the HTML element of the view to <body>.\n\t\t *\t\tdocument.body.appendChild( view.element );\n\t\t *\n\t\t * **Note**: The element of the view can also be assigned directly:\n\t\t *\n\t\t *\t\tview.element = document.querySelector( '#my-container' );\n\t\t *\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRendered\n\t\t */\n\t\tthis.isRendered = false;\n\n\t\t/**\n\t\t * A set of tools to localize the user interface.\n\t\t *\n\t\t * Also see {@link module:core/editor/editor~Editor#locale}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * Note: If {@link #locale} instance hasn't been passed to the view this method may not\n\t\t * be available.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis.t = locale && locale.t;\n\n\t\t/**\n\t\t * Collections registered with {@link #createCollection}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:ui/viewcollection~ViewCollection>}\n\t\t */\n\t\tthis._viewCollections = new Collection();\n\n\t\t/**\n\t\t * A collection of view instances, which have been added directly\n\t\t * into the {@link module:ui/template~Template#children}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._unboundChildren = this.createCollection();\n\n\t\t// Pass parent locale to its children.\n\t\tthis._viewCollections.on( 'add', ( evt, collection ) => {\n\t\t\tcollection.locale = locale;\n\t\t} );\n\n\t\t/**\n\t\t * Template of this view. It provides the {@link #element} representing\n\t\t * the view in DOM, which is {@link #render rendered}.\n\t\t *\n\t\t * @member {module:ui/template~Template} #template\n\t\t */\n\n\t\t/**\n\t\t * Cached {@link module:ui/template~BindChain bind chain} object created by the\n\t\t * {@link #template}. See {@link #bindTemplate}.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_bindTemplate\n\t\t */\n\n\t\tthis.decorate( 'render' );\n\t}\n\n\t/**\n\t * Shorthand for {@link module:ui/template~Template.bind}, a binding\n\t * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n\t *\n\t * It provides {@link module:ui/template~BindChain#to `to()`} and\n\t * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n\t * observable attributes and attach DOM listeners.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tconst bind = this.bindTemplate;\n\t *\n\t *\t\t\t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n\t *\t\t\t\t// the state of the view in DOM.\n\t *\t\t\t\tthis.set( {\n\t *\t\t\t\t\telementClass: 'foo',\n\t *\t\t\t\t \tisEnabled: true\n\t *\t\t\t\t } );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\t// The class HTML attribute will follow elementClass\n\t *\t\t\t\t\t\t// and isEnabled view attributes.\n\t *\t\t\t\t\t\tclass: [\n\t *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n\t *\t\t\t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n\t *\t\t\t\t\t\t]\n\t *\t\t\t\t\t},\n\t *\n\t *\t\t\t\t\ton: {\n\t *\t\t\t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n\t *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @method #bindTemplate\n\t */\n\tget bindTemplate() {\n\t\tif ( this._bindTemplate ) {\n\t\t\treturn this._bindTemplate;\n\t\t}\n\n\t\treturn ( this._bindTemplate = Template.bind( this, this ) );\n\t}\n\n\t/**\n\t * Creates a new collection of views, which can be used as\n\t * {@link module:ui/template~Template#children} of this view.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.items = this.createCollection();\n \t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\t// `items` collection will render here.\n\t *\t\t\t\t\tchildren: this.items\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\t\tconst child = new ChildView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// It will append <p></p> to the <body>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t *\t\t// From now on the child is nested under its parent, which is also reflected in DOM.\n\t *\t\t// <p><child#element></p>\n\t *\t\tview.items.add( child );\n\t *\n\t * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\n\t */\n\tcreateCollection() {\n\t\tconst collection = new ViewCollection();\n\n\t\tthis._viewCollections.add( collection );\n\n\t\treturn collection;\n\t}\n\n\t/**\n\t * Registers a new child view under the view instance. Once registered, a child\n\t * view is managed by its parent, including {@link #render rendering}\n\t * and {@link #destroy destruction}.\n\t *\n\t * To revert this, use {@link #deregisterChild}.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( { tag: 'p' } );\n\t *\n\t *\t\t\t\t// Register the children.\n\t *\t\t\t\tthis.registerChild( [ this.childA, this.childB ] );\n\t *\t\t\t}\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\tthis.element.appendChild( this.childA.element );\n\t *\t\t\t\tthis.element.appendChild( this.childB.element );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// Will append <p><childA#element><b></b><childB#element></p>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t * **Note**: There's no need to add child views if they're already referenced in the\n\t * {@link #template}:\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n \t *\t\t\t\t\t// These children will be added automatically. There's no\n \t *\t\t\t\t\t// need to call {@link #registerChild} for any of them.\n\t *\t\t\t\t\tchildren: [ this.childA, this.childB ]\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\n\t */\n\tregisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.add( child );\n\t\t}\n\t}\n\n\t/**\n\t * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n\t * Once removed, the child is no longer managed by its parent, e.g. it can safely\n\t * become a child of another parent view.\n\t *\n\t * @see #registerChild\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\n\t */\n\tderegisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.remove( child );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the {@link #template} of the view with with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tview.setTemplate( definition );\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\n\t */\n\tsetTemplate( definition ) {\n\t\tthis.template = new Template( definition );\n\t}\n\n\t/**\n\t * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n\t * with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tTemplate.extend( view.template, definition );\n\t *\n\t * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition which\n\t * extends the {@link #template}.\n\t */\n\textendTemplate( definition ) {\n\t\tTemplate.extend( this.template, definition );\n\t}\n\n\t/**\n\t * Recursively renders the view.\n\t *\n\t * Once the view is rendered:\n\t * * the {@link #element} becomes an HTML element out of {@link #template},\n\t * * the {@link #isRendered} flag is set `true`.\n\t *\n\t * **Note**: The children of the view:\n\t * * defined directly in the {@link #template}\n\t * * residing in collections created by the {@link #createCollection} method,\n\t * * and added by {@link #registerChild}\n\t * are also rendered in the process.\n\t *\n\t * In general, `render()` method is the right place to keep the code which refers to the\n\t * {@link #element} and should be executed at the very beginning of the view's life cycle.\n\t *\n\t * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n\t * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n\t * such references should be done in `render()`.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor() {\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\t// ...\n\t *\t\t\t\t} );\n\t *\t\t\t},\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\t// View#element becomes available.\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\t// The \"scroll\" listener depends on #element.\n\t *\t\t\t\tthis.listenTo( window, 'scroll', () => {\n\t *\t\t\t\t\t// A reference to #element would render the #template and make it non-extendable.\n\t *\t\t\t\t\tif ( window.scrollY > 0 ) {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 100;\n\t *\t\t\t\t\t} else {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 0;\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView();\n\t *\n\t *\t\t// Let's customize the view before it gets rendered.\n\t *\t\tview.extendTemplate( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: [\n\t *\t\t\t\t\t'additional-class'\n\t *\t\t\t\t]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Late rendering allows customization of the view.\n\t *\t\tview.render();\n\t */\n\trender() {\n\t\tif ( this.isRendered ) {\n\t\t\t/**\n\t\t\t * This View has already been rendered.\n\t\t\t *\n\t\t\t * @error ui-view-render-rendered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-view-render-already-rendered: This View has already been rendered.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t// Render #element of the view.\n\t\tif ( this.template ) {\n\t\t\tthis.element = this.template.render();\n\n\t\t\t// Auto–register view children from #template.\n\t\t\tthis.registerChild( this.template.getViews() );\n\t\t}\n\n\t\tthis.isRendered = true;\n\t}\n\n\t/**\n\t * Recursively destroys the view instance and child views added by {@link #registerChild} and\n\t * residing in collections created by the {@link #createCollection}.\n\t *\n\t * Destruction disables all event listeners:\n\t * * created on the view, e.g. `view.on( 'event', () => {} )`,\n\t * * defined in the {@link #template} for DOM events.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis._viewCollections.map( c => c.destroy() );\n\n\t\t// Template isn't obligatory for views.\n\t\tif ( this.template && this.template._revertData ) {\n\t\t\tthis.template.revert( this.element );\n\t\t}\n\t}\n\n\t/**\n\t * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\n\t * this event with the default priority.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * @event render\n\t */\n}\n\nmix( View, DomEmitterMixin );\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editorui/editoruiview\n */\n\n/* globals document */\n\nimport View from '../view';\nimport Template from '../template';\n\nimport '../../theme/components/editorui/editorui.css';\n\n/**\n * The editor UI view class. Base class for the editor main views.\n *\n * @extends module:ui/view~View\n */\nexport default class EditorUIView extends View {\n\t/**\n\t * Creates an instance of the editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views, detached from the DOM\n\t\t * structure of the editor, like panels, icons etc.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection} #body\n\t\t */\n\t\tthis.body = this.createCollection();\n\n\t\t/**\n\t\t * The element holding elements of the 'body' region.\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_bodyCollectionContainer\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._renderBodyCollection();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._bodyCollectionContainer.remove();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates and appends to `<body>` the {@link #body} collection container.\n\t *\n\t * @private\n\t */\n\t_renderBodyCollection() {\n\t\tconst locale = this.locale;\n\t\tconst bodyElement = this._bodyCollectionContainer = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset_all',\n\t\t\t\t\t'ck-body',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tdir: locale.uiLanguageDirection,\n\t\t\t},\n\t\t\tchildren: this.body\n\t\t} ).render();\n\n\t\tdocument.body.appendChild( bodyElement );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/label/labelview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/label/label.css';\n\n/**\n * The label view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text' );\n\n\t\t/**\n\t\t * The `for` attribute of the label (i.e. to pair with an `<input>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #for\n\t\t */\n\t\tthis.set( 'for' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'label',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-label'\n\t\t\t\t],\n\t\t\t\tfor: bind.to( 'for' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( 'text' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/boxed/boxededitoruiview\n */\nimport EditorUIView from '../../editorui/editoruiview';\nimport LabelView from '../../label/labelview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n/**\n * The boxed editor UI view class. This class represents an editor interface\n * consisting of a toolbar and an editable area, enclosed within a box.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nexport default class BoxedEditorUIView extends EditorUIView {\n    /**\n\t * Creates an instance of the boxed editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance..\n\t */\n    constructor(locale) {\n        super(locale);\n        const ariaLabelUid = uid();\n        /**\n\t\t * Collection of the child views located in the top (`.ck-editor__top`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.top = this.createCollection();\n        /**\n\t\t * Collection of the child views located in the main (`.ck-editor__main`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.main = this.createCollection();\n        /**\n\t\t * Voice label of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #_voiceLabelView\n\t\t */\n        this._voiceLabelView = this._createVoiceLabel(ariaLabelUid);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-editor',\n                    'ck-rounded-corners'\n                ],\n                role: 'application',\n                dir: locale.uiLanguageDirection,\n                lang: locale.uiLanguage,\n                'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`\n            },\n            children: [\n                this._voiceLabelView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__top',\n                            'ck-reset_all'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.top\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__main'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.main\n                }\n            ]\n        });\n    }\n    /**\n\t * Creates a voice label view instance.\n\t *\n\t * @private\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n    _createVoiceLabel(ariaLabelUid) {\n        const t = this.t;\n        const voiceLabel = new LabelView();\n        voiceLabel.text = t('Rich Text Editor');\n        voiceLabel.extendTemplate({\n            attributes: {\n                id: `ck-editor__aria-label_${ ariaLabelUid }`,\n                class: 'ck-voice-label'\n            }\n        });\n        return voiceLabel;\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\n\nimport View from '../view';\n\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\nexport default class EditableUIView extends View {\n\t/**\n\t * Creates an instance of EditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n\tconstructor( locale, editingView, editableElement ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-content',\n\t\t\t\t\t'ck-editor__editable',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tlang: locale.contentLanguage,\n\t\t\t\tdir: locale.contentLanguageDirection\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The name of the editable UI view.\n\t\t *\n\t\t * @member {String} #name\n\t\t */\n\t\tthis.name = null;\n\n\t\t/**\n\t\t * Controls whether the editable is focused, i.e. the user is typing in it.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_editableElement\n\t\t */\n\t\tthis._editableElement = editableElement;\n\n\t\t/**\n\t\t * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n\t\t * the view will not render its {@link #template}.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} #_hasExternalElement\n\t\t */\n\t\tthis._hasExternalElement = !!this._editableElement;\n\n\t\t/**\n\t\t * The editing view instance the editable is related to. Editable uses the editing\n\t\t * view to dynamically modify its certain DOM attributes after {@link #render rendering}.\n\t\t *\n\t\t * **Note**: The DOM attributes are performed by the editing view and not UI\n\t\t * {@link module:ui/view~View#bindTemplate template bindings} because once rendered,\n\t\t * the editable DOM element must remain under the full control of the engine to work properly.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/view~View} #isFocused\n\t\t */\n\t\tthis._editingView = editingView;\n\t}\n\n\t/**\n\t * Renders the view by either applying the {@link #template} to the existing\n\t * {@link #_editableElement} or assigning {@link #element} as {@link #_editableElement}.\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.apply( this.element = this._editableElement );\n\t\t} else {\n\t\t\tthis._editableElement = this.element;\n\t\t}\n\n\t\tthis.on( 'change:isFocused', () => this._updateIsFocusedClasses() );\n\t\tthis._updateIsFocusedClasses();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.revert( this._editableElement );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n\t * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n\t *\n\t * @private\n\t */\n\t_updateIsFocusedClasses() {\n\t\tconst editingView = this._editingView;\n\n\t\tif ( editingView.isRenderingInProgress ) {\n\t\t\tupdateAfterRender( this );\n\t\t} else {\n\t\t\tupdate( this );\n\t\t}\n\n\t\tfunction update( view ) {\n\t\t\teditingView.change( writer => {\n\t\t\t\tconst viewRoot = editingView.document.getRoot( view.name );\n\n\t\t\t\twriter.addClass( view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot );\n\t\t\t\twriter.removeClass( view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot );\n\t\t\t} );\n\t\t}\n\n\t\t// In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n\t\t// While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n\t\t// callback and render is called inside the already pending render.\n\t\t// We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1676.\n\t\tfunction updateAfterRender( view ) {\n\t\t\teditingView.once( 'change:isRenderingInProgress', ( evt, name, value ) => {\n\t\t\t\tif ( !value ) {\n\t\t\t\t\tupdate( view );\n\t\t\t\t} else {\n\t\t\t\t\tupdateAfterRender( view );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../../editableui/editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n *\n * @extends module:ui/editableui/editableuiview~EditableUIView\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n\t * Creates an instance of the InlineEditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}\n\t * will create it. Otherwise, the existing element will be used.\n\t */\n    constructor(locale, editingView, editableElement) {\n        super(locale, editingView, editableElement);\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        const editingView = this._editingView;\n        const t = this.t;\n        editingView.change(writer => {\n            const viewRoot = editingView.document.getRoot(this.name);\n            writer.setAttribute('aria-label', t('Rich Text Editor, %0', [this.name]), viewRoot);\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/tounit\n */\n\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param {String} unit An unit like \"px\" or \"em\".\n * @returns {module:utils/dom/tounit~helper}\n */\nexport default function toUnit( unit ) {\n\t/**\n\t * A function, which adds a pre–defined trailing `unit`\n\t * to the passed `value`.\n\t *\n\t * @function helper\n \t * @param {*} value A value to be given the unit.\n \t * @returns {String} A value with the trailing unit.\n\t */\n\treturn value => value + unit;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/sticky/stickypanelview\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport View from '../../view';\nimport Template from '../../template';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nimport '../../../theme/components/panel/stickypanel.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the sticky panel should be active.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isActive\n\t\t */\n\t\tthis.set( 'isActive', false );\n\n\t\t/**\n\t\t * Controls whether the sticky panel is in the \"sticky\" state.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isSticky\n\t\t */\n\t\tthis.set( 'isSticky', false );\n\n\t\t/**\n\t\t * The limiter element for the sticky panel instance. Its bounding rect limits\n\t\t * the \"stickyness\" of the panel, i.e. when the panel reaches the bottom\n\t\t * edge of the limiter, it becomes sticky to that edge and does not float\n\t\t * off the limiter. It is mandatory for the panel to work properly and once\n\t\t * set, it cannot be changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement} #limiterElement\n\t\t */\n\t\tthis.set( 'limiterElement', null );\n\n\t\t/**\n\t\t * The offset from the bottom edge of {@link #limiterElement}\n\t\t * which stops the panel from stickying any further to prevent limiter's content\n\t\t * from being completely covered.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 50\n\t\t * @member {Number} #limiterBottomOffset\n\t\t */\n\t\tthis.set( 'limiterBottomOffset', 50 );\n\n\t\t/**\n\t\t * The offset from the top edge of the web browser's viewport which makes the\n\t\t * panel become sticky. The default value is `0`, which means the panel becomes\n\t\t * sticky when it's upper edge touches the top of the page viewport.\n\t\t *\n\t\t * This attribute is useful when the web page has UI elements positioned to the top\n\t\t * either using `position: fixed` or `position: sticky`, which would cover the\n\t\t * sticky panel or vice–versa (depending on the `z-index` hierarchy).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #viewportTopOffset\n\t\t */\n\t\tthis.set( 'viewportTopOffset', 0 );\n\n\t\t/**\n\t\t * Controls the `margin-left` CSS style of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #_marginLeft\n\t\t */\n\t\tthis.set( '_marginLeft', null );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel reached the bottom edge of the\n\t\t * {@link #limiterElement}.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_isStickyToTheLimiter\n\t\t */\n\t\tthis.set( '_isStickyToTheLimiter', false );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel uses the {@link #viewportTopOffset},\n\t\t * i.e. not {@link #_isStickyToTheLimiter} and the {@link #viewportTopOffset}\n\t\t * is not `0`.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_hasViewportTopOffset\n\t\t */\n\t\tthis.set( '_hasViewportTopOffset', false );\n\n\t\t/**\n\t\t * Collection of the child views which creates balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link module:ui/view~View#element} of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_panelRect\n\t\t */\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link #limiterElement}\n\t\t * of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_limiterRect\n\t\t */\n\n\t\t/**\n\t\t * A dummy element which visually fills the space as long as the\n\t\t * actual panel is sticky. It prevents flickering of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanelPlaceholder = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel__placeholder'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.to( 'isSticky', isSticky => isSticky ? 'block' : 'none' ),\n\t\t\t\t\theight: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._panelRect.height ) : null;\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t}\n\t\t} ).render();\n\n\t\t/**\n\t\t * The panel which accepts children into {@link #content} collection.\n\t\t * Also an element which is positioned when {@link #isSticky}.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanel = new Template( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel__content',\n\t\t\t\t\t// Toggle class of the panel when \"sticky\" state changes in the view.\n\t\t\t\t\tbind.if( 'isSticky', 'ck-sticky-panel__content_sticky' ),\n\t\t\t\t\tbind.if( '_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit' ),\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._contentPanelPlaceholder.getBoundingClientRect().width ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\ttop: bind.to( '_hasViewportTopOffset', _hasViewportTopOffset => {\n\t\t\t\t\t\treturn _hasViewportTopOffset ? toPx( this.viewportTopOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tbottom: bind.to( '_isStickyToTheLimiter', _isStickyToTheLimiter => {\n\t\t\t\t\t\treturn _isStickyToTheLimiter ? toPx( this.limiterBottomOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tmarginLeft: bind.to( '_marginLeft' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} ).render();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._contentPanelPlaceholder,\n\t\t\t\tthis._contentPanel\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Check if the panel should go into the sticky state immediately.\n\t\tthis._checkIfShouldBeSticky();\n\n\t\t// Update sticky state of the panel as the window is being scrolled.\n\t\tthis.listenTo( global.window, 'scroll', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\n\t\t// Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n\t\tthis.listenTo( this, 'change:isActive', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\t}\n\n\t/**\n\t * Analyzes the environment to decide whether the panel should\n\t * be sticky or not.\n\t *\n\t * @protected\n\t */\n\t_checkIfShouldBeSticky() {\n\t\tconst panelRect = this._panelRect = this._contentPanel.getBoundingClientRect();\n\t\tlet limiterRect;\n\n\t\tif ( !this.limiterElement ) {\n\t\t\tthis.isSticky = false;\n\t\t} else {\n\t\t\tlimiterRect = this._limiterRect = this.limiterElement.getBoundingClientRect();\n\n\t\t\t// The panel must be active to become sticky.\n\t\t\tthis.isSticky = this.isActive &&\n\t\t\t\t// The limiter's top edge must be beyond the upper edge of the visible viewport (+the viewportTopOffset).\n\t\t\t\tlimiterRect.top < this.viewportTopOffset &&\n\t\t\t\t// The model#limiterElement's height mustn't be smaller than the panel's height and model#limiterBottomOffset.\n\t\t\t\t// There's no point in entering the sticky mode if the model#limiterElement is very, very small, because\n\t\t\t\t// it would immediately set model#_isStickyToTheLimiter true and, given model#limiterBottomOffset, the panel\n\t\t\t\t// would be positioned before the model#limiterElement.\n\t\t\t\tthis._panelRect.height + this.limiterBottomOffset < limiterRect.height;\n\t\t}\n\n\t\t// Stick the panel to the top edge of the viewport simulating CSS position:sticky.\n\t\t// TODO: Possibly replaced by CSS in the future http://caniuse.com/#feat=css-sticky\n\t\tif ( this.isSticky ) {\n\t\t\tthis._isStickyToTheLimiter =\n\t\t\t\tlimiterRect.bottom < panelRect.height + this.limiterBottomOffset + this.viewportTopOffset;\n\t\t\tthis._hasViewportTopOffset = !this._isStickyToTheLimiter && !!this.viewportTopOffset;\n\t\t\tthis._marginLeft = this._isStickyToTheLimiter ? null : toPx( -global.window.scrollX );\n\t\t}\n\t\t// Detach the panel from the top edge of the viewport.\n\t\telse {\n\t\t\tthis._isStickyToTheLimiter = false;\n\t\t\tthis._hasViewportTopOffset = false;\n\t\t\tthis._marginLeft = null;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The toolbar separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ToolbarSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\n/* globals console */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport preventDefault from '../bindings/preventdefault.js';\nimport '../../theme/components/toolbar/toolbar.css';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n    /**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        /**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n        this.set('ariaLabel', t('Editor toolbar'));\n        /**\n\t\t * Collection of the toolbar items (like buttons).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.items = this.createCollection();\n        /**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * Controls the orientation of toolbar items.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n        this.set('isVertical', false);\n        /**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n        this.set('class');\n        /**\n\t\t * Helps cycling over focusable {@link #items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this.items,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [\n                    'arrowleft',\n                    'arrowup'\n                ],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [\n                    'arrowright',\n                    'arrowdown'\n                ]\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar',\n                    bind.if('isVertical', 'ck-toolbar_vertical'),\n                    bind.to('class')\n                ],\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel')\n            },\n            children: this.items,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        // Items added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n\t * A utility which expands a plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items config.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n    fillFromConfig(config, factory) {\n        config.map(name => {\n            if (name == '|') {\n                this.items.add(new ToolbarSeparatorView());\n            } else if (factory.has(name)) {\n                this.items.add(factory.create(name));\n            } else {\n                /**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n                console.warn(attachLinkToDocumentation('toolbarview-item-unavailable: The requested toolbar item is unavailable.'), { name });\n            }\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/preventdefault\n */\n\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n *\t\t// In a class extending View.\n *\t\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n *\t\t// ...\n *\n *\t\tthis.setTemplate( {\n *\t\t\ttag: 'div',\n *\n *\t\t\ton: {\n *\t\t\t\t// Prevent the default mousedown action on this view.\n *\t\t\t\tmousedown: preventDefault( this )\n *\t\t\t}\n *\t\t} );\n *\n * @param {module:ui/view~View} view View instance that defines the template.\n * @returns {module:ui/template~TemplateToBinding}\n */\nexport default function preventDefault( view ) {\n\treturn view.bindTemplate.to( evt => {\n\t\tif ( evt.target === view.element ) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditoruiview\n */\n\nimport BoxedEditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview';\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\nimport StickyPanelView from '@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\n\nimport '../theme/classiceditor.css';\n\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n *\n * @extends module:ui/editorui/boxed/boxededitoruiview~BoxedEditorUIView\n */\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\n\t/**\n\t * Creates an instance of the classic editor UI view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n\t */\n\tconstructor( locale, editingView ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\n\t\t * that makes toolbar sticky.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/sticky/stickypanelview~StickyPanelView}\n\t\t */\n\t\tthis.stickyPanel = new StickyPanelView( locale );\n\n\t\t/**\n\t\t * Toolbar view instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbar = new ToolbarView( locale );\n\n\t\t/**\n\t\t * Editable UI view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n\t\t */\n\t\tthis.editable = new InlineEditableUIView( locale, editingView );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n\t\tthis.stickyPanel.content.add( this.toolbar );\n\n\t\tthis.top.add( this.stickyPanel );\n\t\tthis.main.add( this.editable );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class ClassicEditor extends Editor {\n\t/**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data. For more information see\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t}\n\n\t\tthis.data.processor = new HtmlDataProcessor();\n\n\t\tthis.model.document.createRoot();\n\n\t\tthis.ui = new ClassicEditorUI( this, new ClassicEditorUIView( this.locale, this.editing.view ) );\n\n\t\tattachToForm( this );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the editor's source element with the data.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tif ( this.sourceElement ) {\n\t\t\tthis.updateSourceElement();\n\t\t}\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates a new classic editor instance.\n\t *\n\t * There are three ways how the editor can be initialized.\n\t *\n\t * # Replacing a DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( '<p>Hello world!</p>' )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Replacing a DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * The code samples listed in the previous sections of this documentation assume that you are using an\n\t * {@glink builds/guides/overview editor build} (for example – `@ckeditor/ckeditor5-build-classic`).\n\t *\n\t * If you want to use the classic editor from source (`@ckeditor/ckeditor5-editor-classic/src/classiceditor`),\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n\t * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n\t * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n\t * in the DOM (the original one will be hidden and the editor will be injected next to it).\n\t *\n\t * Moreover, the editor data will be set back to the original element once the editor is destroyed and when a form, in which\n\t * this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration with native\n\t * web forms.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */\n\tstatic create( sourceElementOrData, config = {} ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => editor.ui.init( isElement( sourceElementOrData ) ? sourceElementOrData : null ) )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tif ( !isElement( sourceElementOrData ) && config.initialData ) {\n\t\t\t\t\t\t\t// Documented in core/editor/editorconfig.jdoc.\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'editor-create-initial-data: ' +\n\t\t\t\t\t\t\t\t'The config.initialData option cannot be used together with initial data passed in Editor.create().',\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst initialData = config.initialData || getInitialData( sourceElementOrData );\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( ClassicEditor, DataApiMixin );\nmix( ClassicEditor, ElementApiMixin );\n\nfunction getInitialData( sourceElementOrData ) {\n\treturn isElement( sourceElementOrData ) ? getDataFromElement( sourceElementOrData ) : sourceElementOrData;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { isFunction } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\nexport default function attachToForm( editor ) {\n\tif ( !isFunction( editor.updateSourceElement ) ) {\n\t\t/**\n\t\t * The editor passed to `attachToForm()` must implement the\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'attachtoform-missing-elementapi-interface: Editor passed to attachToForm() must implement ElementApi.',\n\t\t\teditor\n\t\t);\n\t}\n\n\tconst sourceElement = editor.sourceElement;\n\n\t// Only when replacing a textarea which is inside of a form element.\n\tif ( sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.form ) {\n\t\tlet originalSubmit;\n\t\tconst form = sourceElement.form;\n\t\tconst onSubmit = () => editor.updateSourceElement();\n\n\t\t// Replace the original form#submit() to call a custom submit function first.\n\t\t// Check if #submit is a function because the form might have an input named \"submit\".\n\t\tif ( isFunction( form.submit ) ) {\n\t\t\toriginalSubmit = form.submit;\n\n\t\t\tform.submit = () => {\n\t\t\t\tonSubmit();\n\t\t\t\toriginalSubmit.apply( form );\n\t\t\t};\n\t\t}\n\n\t\t// Update the replaced textarea with data before each form#submit event.\n\t\tform.addEventListener( 'submit', onSubmit );\n\n\t\t// Remove the submit listener and revert the original submit method on\n\t\t// editor#destroy.\n\t\teditor.on( 'destroy', () => {\n\t\t\tform.removeEventListener( 'submit', onSubmit );\n\n\t\t\tif ( originalSubmit ) {\n\t\t\t\tform.submit = originalSubmit;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * @module utils/dom/getdatafromelement\n */\n\n/**\n * Gets data from a given source element.\n *\n * @param {HTMLElement} el The element from which the data will be retrieved.\n * @returns {String} The data string.\n */\nexport default function getDataFromElement( el ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\treturn el.value;\n\t}\n\n\treturn el.innerHTML;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugin\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n\t\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n\t\t * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n\t\t * interface.\n\t\t *\n\t\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t\t *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n\t\t *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n\t\t *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n}\n\nmix( Plugin, ObservableMixin );\n\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form a plugin can be a simple function that accepts {@link module:core/editor/editor~Editor the editor}\n * as a parameter:\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor.data, 'ready', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * The plugin can also implement methods (e.g. {@link module:core/plugin~PluginInterface#init `init()`} or\n * {@link module:core/plugin~PluginInterface#destroy `destroy()`}) which, when present, will be used to properly\n * initialize and destroy the plugin.\n *\n * **Note:** When defined as a plain function, the plugin acts as a constructor and will be\n * called in parallel with other plugins' {@link module:core/plugin~PluginInterface#constructor constructors}.\n * This means the code of that plugin will be executed **before** {@link module:core/plugin~PluginInterface#init `init()`} and\n * {@link module:core/plugin~PluginInterface#afterInit `afterInit()`} methods of other plugins and, for instance,\n * you cannot use it to extend other plugins' {@glink framework/guides/architecture/editing-engine#schema schema}\n * rules as they are defined later on during the `init()` stage.\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n\n/**\n * Array of loaded plugins.\n *\n * @typedef {Array.<module:core/plugin~PluginInterface>} module:core/plugin~LoadedPlugins\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n\tconstructor( nativeDataTransfer ) {\n\t\t/**\n\t\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<File>} #files\n\t\t */\n\t\tthis.files = getFiles( nativeDataTransfer );\n\n\t\t/**\n\t\t * The native DataTransfer object.\n\t\t *\n\t\t * @private\n\t\t * @member {DataTransfer} #_native\n\t\t */\n\t\tthis._native = nativeDataTransfer;\n\t}\n\n\t/**\n\t * Returns an array of available native content types.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tget types() {\n\t\treturn this._native.types;\n\t}\n\n\t/**\n\t * Gets data from the data transfer by its mime type.\n\t *\n\t *\t\tdataTransfer.getData( 'text/plain' );\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @returns {String}\n\t */\n\tgetData( type ) {\n\t\treturn this._native.getData( type );\n\t}\n\n\t/**\n\t * Sets data in the data transfer.\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @param {String} data\n\t */\n\tsetData( type, data ) {\n\t\tthis._native.setData( type, data );\n\t}\n}\n\nfunction getFiles( nativeDataTransfer ) {\n\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\n\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\n\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\n\n\tif ( files.length ) {\n\t\treturn files;\n\t}\n\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\n\treturn items\n\t\t.filter( item => item.kind === 'file' )\n\t\t.map( item => item.getAsFile() );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardobserver\n */\n\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\nimport DataTransfer from './datatransfer';\n\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput}\n * * {@link module:engine/view/document~Document#event:dragover}\n * * {@link module:engine/view/document~Document#event:drop}\n * * {@link module:engine/view/document~Document#event:paste}\n * * {@link module:engine/view/document~Document#event:copy}\n * * {@link module:engine/view/document~Document#event:cut}\n *\n * Note that this observer is not available by default (it is not added by the engine).\n * To make it available it needs to be added to {@link module:engine/view/document~Document} by\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. You can also load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClipboardObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst viewDocument = this.document;\n\n\t\tthis.domEventType = [ 'paste', 'copy', 'cut', 'drop', 'dragover' ];\n\n\t\tthis.listenTo( viewDocument, 'paste', handleInput, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'drop', handleInput, { priority: 'low' } );\n\n\t\tfunction handleInput( evt, data ) {\n\t\t\tdata.preventDefault();\n\n\t\t\tconst targetRanges = data.dropRange ? [ data.dropRange ] : Array.from( viewDocument.selection.getRanges() );\n\n\t\t\tconst eventInfo = new EventInfo( viewDocument, 'clipboardInput' );\n\n\t\t\tviewDocument.fire( eventInfo, {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\ttargetRanges\n\t\t\t} );\n\n\t\t\t// If CKEditor handled the input, do not bubble the original event any further.\n\t\t\t// This helps external integrations recognize that fact and act accordingly.\n\t\t\t// https://github.com/ckeditor/ckeditor5-upload/issues/92\n\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\tdata.stopPropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tconst evtData = {\n\t\t\tdataTransfer: new DataTransfer( domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer )\n\t\t};\n\n\t\tif ( domEvent.type == 'drop' ) {\n\t\t\tevtData.dropRange = getDropViewRange( this.view, domEvent );\n\t\t}\n\n\t\tthis.fire( domEvent.type, domEvent, evtData );\n\t}\n}\n\nfunction getDropViewRange( view, domEvent ) {\n\tconst domDoc = domEvent.target.ownerDocument;\n\tconst x = domEvent.clientX;\n\tconst y = domEvent.clientY;\n\tlet domRange;\n\n\t// Webkit & Blink.\n\tif ( domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint( x, y ) ) {\n\t\tdomRange = domDoc.caretRangeFromPoint( x, y );\n\t}\n\t// FF.\n\telse if ( domEvent.rangeParent ) {\n\t\tdomRange = domDoc.createRange();\n\t\tdomRange.setStart( domEvent.rangeParent, domEvent.rangeOffset );\n\t\tdomRange.collapse( true );\n\t}\n\n\tif ( domRange ) {\n\t\treturn view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\treturn view.document.selection.getFirstRange();\n\t}\n}\n\n/**\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\n * and inserted into the editor.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardInput\n * @param {Object} data Event data.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\n * (usually – into which the content should be inserted).\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\n * then it's the drop position (which can be different than the selection at the moment of drop).\n */\n\n/**\n * Fired when user drags content over one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:dragover\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user dropped content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:drop\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\n */\n\n/**\n * Fired when user pasted content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:paste\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user copied content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:copy\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user cut content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:cut\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:paste},\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\n *\n * In order to access clipboard data use `dataTransfer` property.\n *\n * @class module:clipboard/clipboardobserver~ClipboardEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [ 'figcaption', 'li' ];\n\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText( viewItem ) {\n\tlet text = '';\n\n\tif ( viewItem.is( 'text' ) || viewItem.is( 'textProxy' ) ) {\n\t\t// If item is `Text` or `TextProxy` simple take its text data.\n\t\ttext = viewItem.data;\n\t} else if ( viewItem.is( 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\n\t\t// Special case for images - use alt attribute if it is provided.\n\t\ttext = viewItem.getAttribute( 'alt' );\n\t} else {\n\t\t// Other elements are document fragments, attribute elements or container elements.\n\t\t// They don't have their own text value, so convert their children.\n\t\tlet prev = null;\n\n\t\tfor ( const child of viewItem.getChildren() ) {\n\t\t\tconst childText = viewToPlainText( child );\n\n\t\t\t// Separate container element children with one or more new-line characters.\n\t\t\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\n\t\t\t\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\n\t\t\t\t\ttext += '\\n';\n\t\t\t\t} else {\n\t\t\t\t\ttext += '\\n\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext += childText;\n\t\t\tprev = child;\n\t\t}\n\t}\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor();\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content, dataTransfer } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n *\n * @param {String} data The HTML data to normalize.\n * @returns {String} Normalized HTML.\n */\nexport default function normalizeClipboardData( data ) {\n\treturn data\n\t\t.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\t\t// Handle the most popular and problematic case when even a single space becomes an nbsp;.\n\t\t\t// Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n\t\t\tif ( spaces.length == 1 ) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\n\t\t\treturn spaces;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param {String} text The plain text to convert.\n * @returns {String} HTML generated from the plain text.\n */\nexport default function plainTextToHtml( text ) {\n\ttext = text\n\t\t// Encode <>.\n\t\t.replace( /</g, '&lt;' )\n\t\t.replace( />/g, '&gt;' )\n\t\t// Creates paragraphs for every line breaks.\n\t\t.replace( /\\n/g, '</p><p>' )\n\t\t// Preserve trailing spaces (only the first and last one – the rest is handled below).\n\t\t.replace( /^\\s/, '&nbsp;' )\n\t\t.replace( /\\s$/, '&nbsp;' )\n\t\t// Preserve other subsequent spaces now.\n\t\t.replace( /\\s\\s/g, ' &nbsp;' );\n\n\tif ( text.indexOf( '</p><p>' ) > -1 ) {\n\t\t// If we created paragraphs above, add the trailing ones.\n\t\ttext = `<p>${ text }</p>`;\n\t}\n\n\t// TODO:\n\t// * What about '\\nfoo' vs ' foo'?\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of the command. A concrete command class should define what it represents for it.\n\t\t *\n\t\t * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n\t\t * And the value of the `'link'` command may be an object with links details.\n\t\t *\n\t\t * It is possible for a command to have no value (e.g. for stateless actions such as `'imageUpload'`).\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command will do nothing when executed.\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n\t\t * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n\t\t * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n\t\t *\n\t\t *\t\tfunction disableCommand( cmd ) {\n\t\t *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t *\n\t\t *\t\t\tcmd.isEnabled = false;\n\t\t *\n\t\t *\t\t\t// Make it possible to enable the command again.\n\t\t *\t\t\treturn () => {\n\t\t *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n\t\t *\t\t\t\tcmd.refresh();\n\t\t *\t\t\t};\n\t\t *\n\t\t *\t\t\tfunction forceDisable( evt ) {\n\t\t *\t\t\t\tevt.return = false;\n\t\t *\t\t\t\tevt.stop();\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\t// Usage:\n\t\t *\n\t\t *\t\t// Disabling the command.\n\t\t *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n\t\t *\n\t\t *\t\t// Enabling the command again.\n\t\t *\t\tenableBold();\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\t/**\n\t\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t\t *\n\t\t * @type {Set.<String>}\n\t\t * @private\n\t\t */\n\t\tthis._disableStack = new Set();\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value ) {\n\t\t\t\tthis.forceDisabled( 'readOnlyMode' );\n\t\t\t} else {\n\t\t\t\tthis.clearForceDisabled( 'readOnlyMode' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the command.\n\t *\n\t * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n\t * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a command:\n\t *\n\t *\t\tcommand.isEnabled; // -> true\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Command disabled by multiple features:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'OtherFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n\t * so the command might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n\t */\n\tforceDisabled( id ) {\n\t\tthis._disableStack.add( id );\n\n\t\tif ( this._disableStack.size == 1 ) {\n\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable previously set through {@link #clearForceDisabled}. See {@link #clearForceDisabled}.\n\t *\n\t * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */\n\tclearForceDisabled( id ) {\n\t\tthis._disableStack.delete( id );\n\n\t\tif ( this._disableStack.size == 0 ) {\n\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n\n// Helper function that forces command to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/utils\n */\n\n/**\n * Returns attributes that should be preserved on the enter key.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param {module:engine/model/schema~Schema} schema\n * @param {Iterable.<*>} allAttributes attributes to filter.\n * @returns {Iterable.<*>}\n */\nexport function* getCopyOnEnterAttributes( schema, allAttributes ) {\n\tfor ( const attribute of allAttributes ) {\n\t\tif ( attribute && schema.getAttributeProperties( attribute[ 0 ] ).copyOnEnter ) {\n\t\t\tyield attribute;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/entercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\n *\n * @extends module:core/command~Command\n */\nexport default class EnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tenterBlock( this.editor.model, writer, doc.selection, model.schema );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n}\n\n// Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n// @param {module:engine/model/schema~Schema} schema\nfunction enterBlock( model, writer, selection, schema ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Don't touch the roots and other limit elements.\n\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\n\t\t// Delete the selected content but only if inside a single limit element.\n\t\t// Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n\t\t// This is an edge case and it's hard to tell what should actually happen because such a selection\n\t\t// is not entirely valid.\n\t\tif ( !isSelectionEmpty && startElement == endElement ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( writer.model.schema, selection.getAttributes() );\n\t\tsplitBlock( writer, range.start );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\tif ( leaveUnmerged ) {\n\t\t\t// Partially selected elements.\n\t\t\t//\n\t\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n\t\t\tif ( isContainedWithinOneElement ) {\n\t\t\t\tsplitBlock( writer, selection.focus );\n\t\t\t}\n\t\t\t// Selection over multiple elements.\n\t\t\t//\n\t\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t\telse {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction splitBlock( writer, splitPos ) {\n\twriter.split( splitPos );\n\twriter.setSelection( splitPos.parent.nextSibling, 0 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst doc = this.document;\n\n\t\tdoc.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\t\tlet event;\n\t\t\t\tdoc.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\t\tdoc.fire( 'enter', new DomEventData( doc, data.domEvent, {\n\t\t\t\t\tisSoft: data.shiftKey\n\t\t\t\t} ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event && event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enter\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n\n/**\n * This plugin handles the <kbd>Enter</kbd> key (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Enter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Enter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'enter', new EnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The soft enter key is handled by the ShiftEnter plugin.\n\t\t\tif ( data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'enter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftentercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\nexport default class ShiftEnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tsoftBreakAction( model, writer, doc.selection );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.isEnabled = isEnabled( model.schema, doc.selection );\n\t}\n}\n\n// Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\nfunction isEnabled( schema, selection ) {\n\t// At this moment it is okay to support single range selections only.\n\t// But in the future we may need to change that.\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst anchorPos = selection.anchor;\n\n\t// Check whether the break element can be inserted in the current selection anchor.\n\tif ( !anchorPos || !schema.checkChild( anchorPos, 'softBreak' ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Do not modify the content if selection is cross-limit elements.\n\tif ( ( isInsideLimitElement( startElement, schema ) || isInsideLimitElement( endElement, schema ) ) && startElement !== endElement ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\nfunction softBreakAction( model, writer, selection ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( model.schema, selection.getAttributes() );\n\t\tinsertBreak( writer, range.end );\n\n\t\twriter.removeSelectionAttribute( selection.getAttributeKeys() );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\t// Selection within one element:\n\t\t//\n\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\t\tif ( isContainedWithinOneElement ) {\n\t\t\tinsertBreak( writer, selection.focus );\n\t\t}\n\t\t// Selection over multiple elements.\n\t\t//\n\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t//\n\t\t// We chose not to insert a line break in this case because:\n\t\t//\n\t\t// * it's not a very common scenario,\n\t\t// * it actually surprised me when I saw the \"expected behavior\" in real life.\n\t\t//\n\t\t// It's ok if the user will need to be more specific where they want the <br> to be inserted.\n\t\telse {\n\t\t\t// Move the selection to the 2nd element (last step of the example above).\n\t\t\tif ( leaveUnmerged ) {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction insertBreak( writer, position ) {\n\tconst breakLineElement = writer.createElement( 'softBreak' );\n\n\twriter.insert( breakLineElement, position );\n\twriter.setSelection( breakLineElement, 'after' );\n}\n\n// Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\nfunction isInsideLimitElement( element, schema ) {\n\t// `$root` is a limit element but in this case is an invalid element.\n\tif ( element.is( 'rootElement' ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.isLimit( element ) || isInsideLimitElement( element.parent, schema );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftenter\n */\n\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ShiftEnter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ShiftEnter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Configure the schema.\n\t\tschema.register( 'softBreak', {\n\t\t\tallowWhere: '$text',\n\t\t\tisInline: true\n\t\t} );\n\n\t\t// Configure converters.\n\t\tconversion.for( 'upcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: 'br'\n\t\t\t} );\n\n\t\tconversion.for( 'downcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: ( modelElement, viewWriter ) => viewWriter.createEmptyElement( 'br' )\n\t\t\t} );\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'shiftEnter', new ShiftEnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The hard enter key is handled by the Enter plugin.\n\t\t\tif ( !data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'shiftEnter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = this.model.createBatch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\n\t\t/**\n\t\t * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n\t\t * {@link module:typing/input~Input#isInput} method.\n\t\t *\n\t\t * @type {WeakSet<module:engine/model/batch~Batch>}\n\t\t * @protected\n\t\t */\n\t\tthis._batches = new WeakSet();\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst range = options.range || doc.selection.getFirstRange();\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tconst isCollapsedRange = range.isCollapsed;\n\n\t\t\tthis._buffer.lock();\n\n\t\t\tmodel.deleteContent( model.createSelection( range ) );\n\n\t\t\tif ( text ) {\n\t\t\t\tmodel.insertContent( writer.createText( text, doc.selection.getAttributes() ), range.start );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( isCollapsedRange ) {\n\t\t\t\t// If range was collapsed just shift the selection by the number of inserted characters.\n\t\t\t\twriter.setSelection( range.start.getShiftedBy( textInsertions ) );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\n\t\t\t// Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\t\t\tthis._batches.add( this._buffer.batch );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injectunsafekeystrokeshandling\n */\n\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Handles keystrokes which are unsafe for typing. This handler's logic is explained\n * in https://github.com/ckeditor/ckeditor5-typing/issues/83#issuecomment-398690251.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectUnsafeKeystrokesHandling( editor ) {\n\tlet latestCompositionSelection = null;\n\n\tconst model = editor.model;\n\tconst view = editor.editing.view;\n\tconst inputCommand = editor.commands.get( 'input' );\n\n\t// For Android, we want to handle keystrokes on `beforeinput` to be sure that code in `DeleteObserver` already had a chance to be fired.\n\tif ( env.isAndroid ) {\n\t\tview.document.on( 'beforeinput', ( evt, evtData ) => handleUnsafeKeystroke( evtData ), { priority: 'lowest' } );\n\t} else {\n\t\tview.document.on( 'keydown', ( evt, evtData ) => handleUnsafeKeystroke( evtData ), { priority: 'lowest' } );\n\t}\n\n\tview.document.on( 'compositionstart', handleCompositionStart, { priority: 'lowest' } );\n\n\tview.document.on( 'compositionend', () => {\n\t\tlatestCompositionSelection = model.createSelection( model.document.selection );\n\t}, { priority: 'lowest' } );\n\n\t// Handles the keydown event. We need to guess whether such keystroke is going to result\n\t// in typing. If so, then before character insertion happens, any selected content needs\n\t// to be deleted. Otherwise the default browser deletion mechanism would be\n\t// triggered, resulting in:\n\t//\n\t// * Hundreds of mutations which could not be handled.\n\t// * But most importantly, loss of control over how the content is being deleted.\n\t//\n\t// The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\n\t// to handle the event.\n\t//\n\t// @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\n\tfunction handleUnsafeKeystroke( evtData ) {\n\t\tconst doc = model.document;\n\t\tconst isComposing = view.document.isComposing;\n\t\tconst isSelectionUnchanged = latestCompositionSelection && latestCompositionSelection.isEqual( doc.selection );\n\n\t\t// Reset stored composition selection.\n\t\tlatestCompositionSelection = null;\n\n\t\t// By relying on the state of the input command we allow disabling the entire input easily\n\t\t// by just disabling the input command. We could’ve used here the delete command but that\n\t\t// would mean requiring the delete feature which would block loading one without the other.\n\t\t// We could also check the editor.isReadOnly property, but that wouldn't allow to block\n\t\t// the input without blocking other features.\n\t\tif ( !inputCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isSafeKeystroke( evtData ) || doc.selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If during composition, deletion should be prevented as it may remove composed sequence (#83).\n\t\tif ( isComposing && evtData.keyCode === 229 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is a `keydown` event fired with '229' keycode it might be related\n\t\t// to recent composition. Check if selection is the same as upon ending recent composition,\n\t\t// if so do not remove selected content as it will remove composed sequence (#83).\n\t\tif ( !isComposing && evtData.keyCode === 229 && isSelectionUnchanged ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\t// Handles the `compositionstart` event. It is used only in special cases to remove the contents\n\t// of a non-collapsed selection so composition itself does not result in complex mutations.\n\t//\n\t// The special case mentioned above is a situation in which the `keydown` event is fired after\n\t// `compositionstart` event. In such cases {@link #handleKeydown} cannot clear current selection\n\t// contents (because it is too late and will break the composition) so the composition handler takes care of it.\n\tfunction handleCompositionStart() {\n\t\tconst doc = model.document;\n\t\tconst isFlatSelection = doc.selection.rangeCount === 1 ? doc.selection.getFirstRange().isFlat : true;\n\n\t\t// If on `compositionstart` there is a non-collapsed selection which start and end have different parents\n\t\t// it means the `handleKeydown()` method did not remove its contents. It happens usually because\n\t\t// of different order of events (`compositionstart` before `keydown` - in Safari). In such cases\n\t\t// we need to remove selection contents on composition start (#83).\n\t\tif ( doc.selection.isCollapsed || isFlatSelection ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\tfunction deleteSelectionContent() {\n\t\tconst buffer = inputCommand.buffer;\n\n\t\tbuffer.lock();\n\n\t\tmodel.enqueueChange( buffer.batch, () => {\n\t\t\tmodel.deleteContent( model.document.selection );\n\t\t} );\n\n\t\tbuffer.unlock();\n\t}\n}\n\nconst safeKeycodes = [\n\tgetCode( 'arrowUp' ),\n\tgetCode( 'arrowRight' ),\n\tgetCode( 'arrowDown' ),\n\tgetCode( 'arrowLeft' ),\n\t9, // Tab\n\t16, // Shift\n\t17, // Ctrl\n\t18, // Alt\n\t19, // Pause\n\t20, // CapsLock\n\t27, // Escape\n\t33, // PageUp\n\t34, // PageDown\n\t35, // Home\n\t36, // End,\n\t45, // Insert,\n\t91, // Windows,\n\t93, // Menu key,\n\t144, // NumLock\n\t145, // ScrollLock,\n\t173, // Mute/Unmute\n\t174, // Volume up\n\t175, // Volume down,\n\t176, // Next song,\n\t177, // Previous song,\n\t178, // Stop,\n\t179, // Play/Pause,\n\t255 // Display brightness (increase and decrease)\n];\n\n// Function keys.\nfor ( let code = 112; code <= 135; code++ ) {\n\tsafeKeycodes.push( code );\n}\n\n// Returns `true` if a keystroke should not cause any content change caused by \"typing\".\n//\n// Note: This implementation is very simple and will need to be refined with time.\n//\n// @private\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\n// @returns {Boolean}\nfunction isSafeKeystroke( keyData ) {\n\t// Keystrokes which contain Ctrl don't represent typing.\n\tif ( keyData.ctrlKey ) {\n\t\treturn true;\n\t}\n\n\treturn safeKeycodes.includes( keyData.keyCode );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( 'text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( 'text' ) && !!newChild && newChild.is( 'text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges( diff, output ) {\n\tconst changes = [];\n\tlet index = 0;\n\tlet lastOperation;\n\n\tdiff.forEach( change => {\n\t\tif ( change == 'equal' ) {\n\t\t\tpushLast();\n\n\t\t\tindex++;\n\t\t} else if ( change == 'insert' ) {\n\t\t\tif ( isContinuationOf( 'insert' ) ) {\n\t\t\t\tlastOperation.values.push( output[ index ] );\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'insert',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalues: [ output[ index ] ]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tindex++;\n\t\t} else /* if ( change == 'delete' ) */ {\n\t\t\tif ( isContinuationOf( 'delete' ) ) {\n\t\t\t\tlastOperation.howMany++;\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'delete',\n\t\t\t\t\tindex,\n\t\t\t\t\thowMany: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n\n\tpushLast();\n\n\treturn changes;\n\n\tfunction pushLast() {\n\t\tif ( lastOperation ) {\n\t\t\tchanges.push( lastOperation );\n\t\t\tlastOperation = null;\n\t\t}\n\t}\n\n\tfunction isContinuationOf( expected ) {\n\t\treturn lastOperation && lastOperation.type == expected;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectTypingMutationsHandling( editor ) {\n\teditor.editing.view.document.on( 'mutations', ( evt, mutations, viewSelection ) => {\n\t\tnew MutationHandler( editor ).handle( mutations, viewSelection );\n\t} );\n}\n\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\nclass MutationHandler {\n\t/**\n\t * Creates an instance of the mutation handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * Editor instance for which mutations are handled.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The editing controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\n\t\t */\n\t\tthis.editing = this.editor.editing;\n\t}\n\n\t/**\n\t * Handles given mutations.\n\t *\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\thandle( mutations, viewSelection ) {\n\t\tif ( containerChildrenMutated( mutations ) ) {\n\t\t\tthis._handleContainerChildrenMutations( mutations, viewSelection );\n\t\t} else {\n\t\t\tfor ( const mutation of mutations ) {\n\t\t\t\t// Fortunately it will never be both.\n\t\t\t\tthis._handleTextMutation( mutation, viewSelection );\n\t\t\t\tthis._handleTextNodeInsertion( mutation );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles situations when container's children mutated during input. This can happen when\n\t * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n\t * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n\t * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n\t *\n\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n\t * and then compared with the current model to calculate the proper text change.\n\t *\n\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n\t * in {@link #_handleTextMutation}).\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleContainerChildrenMutations( mutations, viewSelection ) {\n\t\t// Get common ancestor of all mutations.\n\t\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\n\n\t\t// Quit if there is no common ancestor.\n\t\tif ( !mutationsCommonAncestor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.editor.editing.view.domConverter;\n\n\t\t// Get common ancestor in DOM.\n\t\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\n\n\t\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n\t\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\t\tconst freshDomConverter = new DomConverter();\n\t\tconst modelFromCurrentDom = this.editor.data.toModel(\n\t\t\tfreshDomConverter.domToView( domMutationCommonAncestor )\n\t\t).getChild( 0 );\n\n\t\t// Current model.\n\t\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\n\n\t\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n\t\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\n\t\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n\t\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n\t\t// because `<ul>` is not mapped (`<li>`s are).\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/718.\n\t\tif ( !currentModel ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get children from both ancestors.\n\t\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\n\t\tconst currentModelChildren = Array.from( currentModel.getChildren() );\n\n\t\t// Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n\t\t// If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\t\tconst lastDomChild = modelFromDomChildren[ modelFromDomChildren.length - 1 ];\n\t\tconst lastCurrentChild = currentModelChildren[ currentModelChildren.length - 1 ];\n\n\t\tif ( lastDomChild && lastDomChild.is( 'softBreak' ) && lastCurrentChild && !lastCurrentChild.is( 'softBreak' ) ) {\n\t\t\tmodelFromDomChildren.pop();\n\t\t}\n\n\t\tconst schema = this.editor.model.schema;\n\n\t\t// Skip situations when common ancestor has any container elements.\n\t\tif ( !isSafeForTextMutation( modelFromDomChildren, schema ) || !isSafeForTextMutation( currentModelChildren, schema ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n\t\t// Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n\t\t// that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n\t\t// By inserting a character we keep all the real texts on their indexes.\n\t\tconst newText = modelFromDomChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\t\tconst oldText = currentModelChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\t\tconst removeRange = this.editor.model.createRange(\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt ),\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt + deletions )\n\t\t);\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextMutation( mutation, viewSelection ) {\n\t\tif ( mutation.type != 'text' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n\t\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n\t\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n\t\t// However then it will be handled outside of mutations, like enter key is.\n\t\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n\t\t// take `newText` and compare it to (cleaned up) view.\n\t\t// It could also be done in mutation observer too, however if any outside plugin would like to\n\t\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\t\tconst newText = mutation.newText.replace( /\\u00A0/g, ' ' );\n\t\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\t\tconst oldText = mutation.oldText.replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\t// Get the position in view and model where the changes will happen.\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, firstChangeAt );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst removeRange = this.editor.model.createRange( modelPos, modelPos.getShiftedBy( deletions ) );\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextNodeInsertion( mutation ) {\n\t\tif ( mutation.type != 'children' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst change = getSingleTextNodeChange( mutation );\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, change.index );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst insertedText = change.values[ 0 ].data;\n\n\t\tthis.editor.execute( 'input', {\n\t\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t\t// See comment in `_handleTextMutation`.\n\t\t\t// In this case we don't need to do this before `diff` because we diff whole nodes.\n\t\t\t// Just change &nbsp; in case there are some.\n\t\t\ttext: insertedText.replace( /\\u00A0/g, ' ' ),\n\t\t\trange: this.editor.model.createRange( modelPos )\n\t\t} );\n\t}\n}\n\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\nfunction getMutationsContainer( mutations ) {\n\tconst lca = mutations\n\t\t.map( mutation => mutation.node )\n\t\t.reduce( ( commonAncestor, node ) => {\n\t\t\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\n\t\t} );\n\n\tif ( !lca ) {\n\t\treturn;\n\t}\n\n\t// We need to look for container and root elements only, so check all LCA's\n\t// ancestors (starting from itself).\n\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\n\t\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\n}\n\n// Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isSafeForTextMutation( children, schema ) {\n\treturn children.every( child => schema.isInline( child ) );\n}\n\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\nfunction calculateChanges( diffResult ) {\n\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n\tlet firstChangeAt = null;\n\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\tlet lastChangeAt = null;\n\n\t// Get `firstChangeAt` and `lastChangeAt`.\n\tfor ( let i = 0; i < diffResult.length; i++ ) {\n\t\tconst change = diffResult[ i ];\n\n\t\tif ( change != 'equal' ) {\n\t\t\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n\t\t\tlastChangeAt = i;\n\t\t}\n\t}\n\n\t// How many characters, starting from `firstChangeAt`, should be removed.\n\tlet deletions = 0;\n\t// How many characters, starting from `firstChangeAt`, should be inserted.\n\tlet insertions = 0;\n\n\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\n\t\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n\t\tif ( diffResult[ i ] != 'insert' ) {\n\t\t\tdeletions++;\n\t\t}\n\n\t\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\t\tif ( diffResult[ i ] != 'delete' ) {\n\t\t\tinsertions++;\n\t\t}\n\t}\n\n\treturn { insertions, deletions, firstChangeAt };\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/input\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\n\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Input extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Input';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\t\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\n\n\t\teditor.commands.add( 'input', inputCommand );\n\n\t\tinjectUnsafeKeystrokesHandling( editor );\n\t\tinjectTypingMutationsHandling( editor );\n\t}\n\n\t/**\n\t * Checks batch if it is a result of user input - e.g. typing.\n\t *\n\t *\t\tconst input = editor.plugins.get( 'Input' );\n\t *\n\t *\t\teditor.model.document.on( 'change:data', ( evt, batch ) => {\n\t *\t\t\tif ( input.isTyping( batch ) ) {\n\t *\t\t\t\tconsole.log( 'The user typed something...' );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** This method checks if the batch was created using {@link module:typing/inputcommand~InputCommand 'input'}\n\t * command as typing changes coming from user input are inserted to the document using that command.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch A batch to check.\n\t * @returns {Boolean}\n\t */\n\tisInput( batch ) {\n\t\tconst inputCommand = this.editor.commands.get( 'input' );\n\n\t\treturn inputCommand._batches.has( batch );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deletecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\nexport default class DeleteCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */\n\tconstructor( editor, direction ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The directionality of the delete describing in what direction it should\n\t\t * consume the content when the selection is collapsed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'forward'|'backward'} #direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Delete's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {typing.ChangeBuffer} #buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t * @param {module:engine/model/selection~Selection} [options.selection] Selection to remove. If not set, current model selection\n\t * will be used.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tconst selection = writer.createSelection( options.selection || doc.selection );\n\n\t\t\t// Do not replace the whole selected content if selection was collapsed.\n\t\t\t// This prevents such situation:\n\t\t\t//\n\t\t\t// <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n\t\t\t// starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\t\t\tconst doNotResetEntireContent = selection.isCollapsed;\n\n\t\t\t// Try to extend the selection in the specified direction.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\n\t\t\t}\n\n\t\t\t// Check if deleting in an empty editor. See #61.\n\t\t\tif ( this._shouldEntireContentBeReplacedWithParagraph( options.sequence || 1 ) ) {\n\t\t\t\tthis._replaceEntireContentWithParagraph( writer );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If selection is still collapsed, then there's nothing to delete.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet changeCount = 0;\n\n\t\t\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\n\t\t\t\tchangeCount += count(\n\t\t\t\t\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tmodel.deleteContent( selection, { doNotResetEntireContent } );\n\t\t\tthis._buffer.input( changeCount );\n\n\t\t\twriter.setSelection( selection );\n\n\t\t\tthis._buffer.unlock();\n\t\t} );\n\t}\n\n\t/**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @private\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\n\t\t// Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n\t\tif ( sequence > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\n\t\t// If a collapsed selection contains the whole content it means that the content is empty\n\t\t// (from the user perspective).\n\t\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\n\n\t\tif ( !limitElementIsEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n\t\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\t\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @private\n\t */\n\t_replaceEntireContentWithParagraph( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\twriter.remove( writer.createRangeIn( limitElement ) );\n\t\twriter.insert( paragraph, limitElement );\n\n\t\twriter.setSelection( paragraph, 0 );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deleteobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DeleteObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = view.document;\n\t\tlet sequence = 0;\n\n\t\tdocument.on( 'keyup', ( evt, data ) => {\n\t\t\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\n\t\t\t\tsequence = 0;\n\t\t\t}\n\t\t} );\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\tconst deleteData = {};\n\n\t\t\tif ( data.keyCode == keyCodes.delete ) {\n\t\t\t\tdeleteData.direction = 'forward';\n\t\t\t\tdeleteData.unit = 'character';\n\t\t\t} else if ( data.keyCode == keyCodes.backspace ) {\n\t\t\t\tdeleteData.direction = 'backward';\n\t\t\t\tdeleteData.unit = 'codePoint';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n\t\t\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n\t\t\tdeleteData.sequence = ++sequence;\n\n\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t} );\n\n\t\t// `beforeinput` is handled only for Android devices. Desktop Chrome and iOS are skipped because they are working fine now.\n\t\tif ( env.isAndroid ) {\n\t\t\tdocument.on( 'beforeinput', ( evt, data ) => {\n\t\t\t\t// If event type is other than `deleteContentBackward` then this is not deleting.\n\t\t\t\tif ( data.domEvent.inputType != 'deleteContentBackward' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst deleteData = {\n\t\t\t\t\tunit: 'codepoint',\n\t\t\t\t\tdirection: 'backward',\n\t\t\t\t\tsequence: 1\n\t\t\t\t};\n\n\t\t\t\t// Android IMEs may change the DOM selection on `beforeinput` event so that the selection contains all the text\n\t\t\t\t// that the IME wants to remove. We will pass this information to `delete` event so proper part of the content is removed.\n\t\t\t\t//\n\t\t\t\t// Sometimes it is only expanding by a one character (in case of collapsed selection). In this case we don't need to\n\t\t\t\t// set a different selection to remove, it will work just fine.\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tif ( domSelection.anchorNode == domSelection.focusNode && domSelection.anchorOffset + 1 != domSelection.focusOffset ) {\n\t\t\t\t\tdeleteData.selectionToRemove = view.domConverter.domSelectionToView( domSelection );\n\t\t\t\t}\n\n\t\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t\t} );\n\t\t}\n\n\t\tfunction fireViewDeleteEvent( originalEvent, domEvent, deleteData ) {\n\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\tlet event;\n\t\t\tdocument.once( 'delete', evt => ( event = evt ), { priority: Number.POSITIVE_INFINITY } );\n\n\t\t\tdocument.fire( 'delete', new DomEventData( document, domEvent, deleteData ) );\n\n\t\t\t// Stop the original event if `delete` event was stopped.\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\tif ( event && event.stop.called ) {\n\t\t\t\toriginalEvent.stop();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n * @param {module:engine/view/selection~Selection} [data.selectionToRemove] View selection which content should be removed. If not set,\n * current selection should be used.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\teditor.commands.add( 'forwardDelete', new DeleteCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tconst deleteCommandParams = { unit: data.unit, sequence: data.sequence };\n\n\t\t\t// If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\t\t\tif ( data.selectionToRemove ) {\n\t\t\t\tconst modelSelection = editor.model.createSelection();\n\t\t\t\tconst ranges = [];\n\n\t\t\t\tfor ( const viewRange of data.selectionToRemove.getRanges() ) {\n\t\t\t\t\tranges.push( editor.editing.mapper.toModelRange( viewRange ) );\n\t\t\t\t}\n\n\t\t\t\tmodelSelection.setTo( ranges );\n\n\t\t\t\tdeleteCommandParams.selection = modelSelection;\n\t\t\t}\n\n\t\t\teditor.execute( data.direction == 'forward' ? 'forwardDelete' : 'delete', deleteCommandParams );\n\n\t\t\tdata.preventDefault();\n\n\t\t\tview.scrollToTheSelection();\n\t\t} );\n\n\t\t// Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n\t\t// This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n\t\t// was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n\t\t//\n\t\t// To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n\t\t// on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n\t\t// wouldn't be changed and the fix would do nothing.\n\t\t//\n\t\tif ( env.isAndroid ) {\n\t\t\tlet domSelectionAfterDeletion = null;\n\n\t\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tdomSelectionAfterDeletion = {\n\t\t\t\t\tanchorNode: domSelection.anchorNode,\n\t\t\t\t\tanchorOffset: domSelection.anchorOffset,\n\t\t\t\t\tfocusNode: domSelection.focusNode,\n\t\t\t\t\tfocusOffset: domSelection.focusOffset\n\t\t\t\t};\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tthis.listenTo( viewDocument, 'keyup', ( evt, data ) => {\n\t\t\t\tif ( domSelectionAfterDeletion ) {\n\t\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\t\tdomSelection.collapse( domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset );\n\t\t\t\t\tdomSelection.extend( domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset );\n\n\t\t\t\t\tdomSelectionAfterDeletion = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/typing\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Input from './input';\nimport Delete from './delete';\n\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Typing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Input, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Typing';\n\t}\n}\n\n/**\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\n *\n * Read more in {@link module:typing/typing~TypingConfig}.\n *\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\n */\n\n/**\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttyping: ... // Typing feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TypingConfig\n */\n\n/**\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\n * is created every 20 characters are inserted or deleted.\n *\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/nooperation\n */\n\nimport Operation from './operation';\n\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class NoOperation extends Operation {\n\tget type() {\n\t\treturn 'noop';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new NoOperation( this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation}\n\t */\n\tgetReversed() {\n\t\treturn new NoOperation( this.baseVersion + 1 );\n\t}\n\n\t_execute() {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'NoOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport MergeOperation from './mergeoperation';\nimport SplitOperation from './splitoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport Position from '../position';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\nconst transformations = new Map();\n\n/**\n * @module engine/model/operation/transform\n */\n\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @protected\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @param {Function} transformationFunction Function to use for transforming.\n */\nfunction setTransformation( OperationA, OperationB, transformationFunction ) {\n\tlet aGroup = transformations.get( OperationA );\n\n\tif ( !aGroup ) {\n\t\taGroup = new Map();\n\t\ttransformations.set( OperationA, aGroup );\n\t}\n\n\taGroup.set( OperationB, transformationFunction );\n}\n\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @private\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @returns {Function} Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\nfunction getTransformation( OperationA, OperationB ) {\n\tconst aGroup = transformations.get( OperationA );\n\n\tif ( aGroup && aGroup.has( OperationB ) ) {\n\t\treturn aGroup.get( OperationB );\n\t}\n\n\treturn noUpdateTransformation;\n}\n\n/**\n * A transformation function that only clones operation to transform, without changing it.\n *\n * @private\n * @param {module:engine/model/operation/operation~Operation} a Operation to transform.\n * @returns {Array.<module:engine/model/operation/operation~Operation>}\n */\nfunction noUpdateTransformation( a ) {\n\treturn [ a ];\n}\n\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param {module:engine/model/operation/operation~Operation} a Operation to be transformed.\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\n * @param {module:engine/model/operation/transform~TransformationContext} context Transformation context for this transformation.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Transformation result.\n */\nexport function transform( a, b, context = {} ) {\n\tconst transformationFunction = getTransformation( a.constructor, b.constructor );\n\n\ttry {\n\t\ta = a.clone();\n\n\t\treturn transformationFunction( a, b, context );\n\t} catch ( e ) {\n\t\t// @if CK_DEBUG // console.warn( 'Error during operation transformation!', e.message );\n\t\t// @if CK_DEBUG // console.warn( 'Transformed operation', a );\n\t\t// @if CK_DEBUG // console.warn( 'Operation transformed by', b );\n\t\t// @if CK_DEBUG // console.warn( 'context.aIsStrong', context.aIsStrong );\n\t\t// @if CK_DEBUG // console.warn( 'context.aWasUndone', context.aWasUndone );\n\t\t// @if CK_DEBUG // console.warn( 'context.bWasUndone', context.bWasUndone );\n\t\t// @if CK_DEBUG // console.warn( 'context.abRelation', context.abRelation );\n\t\t// @if CK_DEBUG // console.warn( 'context.baRelation', context.baRelation );\n\n\t\tthrow e;\n\t}\n}\n\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsA\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsB\n * @param {Object} options Additional transformation options.\n * @param {module:engine/model/document~Document|null} options.document Document which the operations change.\n * @param {Boolean} [options.useRelations=false] Whether during transformation relations should be used (used during undo for\n * better conflict resolution).\n * @param {Boolean} [options.padWithNoOps=false] Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @returns {Object} Transformation result.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsA Transformed `operationsA`.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsB Transformed `operationsB`.\n * @returns {Map} return.originalOperations A map that links transformed operations to original operations. The keys are the transformed\n * operations and the values are the original operations from the input (`operationsA` and `operationsB`).\n */\nexport function transformSets( operationsA, operationsB, options ) {\n\t// Create new arrays so the originally passed arguments are not changed.\n\t// No need to clone operations, they are cloned as they are transformed.\n\toperationsA = operationsA.slice();\n\toperationsB = operationsB.slice();\n\n\tconst contextFactory = new ContextFactory( options.document, options.useRelations, options.forceWeakRemove );\n\tcontextFactory.setOriginalOperations( operationsA );\n\tcontextFactory.setOriginalOperations( operationsB );\n\n\tconst originalOperations = contextFactory.originalOperations;\n\n\t// If one of sets is empty there is simply nothing to transform, so return sets as they are.\n\tif ( operationsA.length == 0 || operationsB.length == 0 ) {\n\t\treturn { operationsA, operationsB, originalOperations };\n\t}\n\t//\n\t// Following is a description of transformation process:\n\t//\n\t// There are `operationsA` and `operationsB` to be transformed, both by both.\n\t//\n\t// So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n\t//\n\t// Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n\t// the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n\t// is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n\t//\n\t// However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n\t// we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n\t// All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n\t//\n\t// The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n\t//\n\t//          [the initial state]\n\t//         [common for a1 and b1]\n\t//\n\t//                   *\n\t//                  / \\\n\t//                 /   \\\n\t//               b1     a1\n\t//               /       \\\n\t//              /         \\\n\t//             *           *\n\t//            / \\         / \\\n\t//           /   \\       /   \\\n\t//         b2    a1'   b1'    a2\n\t//         /       \\   /       \\\n\t//        /         \\ /         \\\n\t//       *           *           *\n\t//        \\         / \\         /\n\t//         \\       /   \\       /\n\t//        a1''   b2'   a2'   b1''\n\t//           \\   /       \\   /\n\t//            \\ /         \\ /\n\t//             *           *\n\t//              \\         /\n\t//               \\       /\n\t//              a2''   b2''\n\t//                 \\   /\n\t//                  \\ /\n\t//                   *\n\t//\n\t//           [the final state]\n\t//\n\t// The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n\t// applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n\t// transformed.\n\t//\n\t// Another thing to consider is that an operation during transformation can be broken into multiple operations.\n\t// Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n\t//\n\t// In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n\t// (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n\t// by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n\t// from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n\t// by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n\t// following `operationsA` (in our case it is just `a2`).\n\t//\n\t// Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n\t// the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n\t// be transformed by both of them.\n\t//\n\t//                       *\n\t//                      / \\\n\t//                     /   \\\n\t//                    /     \\\n\t//                  b1       a1\n\t//                  /         \\\n\t//                 /           \\\n\t//                /             \\\n\t//               *               *\n\t//              / \\             / \\\n\t//             /  a11'         /   \\\n\t//            /     \\         /     \\\n\t//          b2       *      b1'      a2\n\t//          /       / \\     /         \\\n\t//         /       /  a12' /           \\\n\t//        /       /     \\ /             \\\n\t//       *       b2'     *               *\n\t//        \\     /       / \\             /\n\t//       a11'' /     b21'' \\           /\n\t//          \\ /       /     \\         /\n\t//           *       *      a2'     b1''\n\t//            \\     / \\       \\     /\n\t//          a12'' b22''\\       \\   /\n\t//              \\ /     \\       \\ /\n\t//               *      a2''     *\n\t//                \\       \\     /\n\t//                 \\       \\  b21'''\n\t//                  \\       \\ /\n\t//                a2'''      *\n\t//                    \\     /\n\t//                     \\  b22'''\n\t//                      \\ /\n\t//                       *\n\t//\n\t// Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n\t//\n\t// Having all that on mind, here is an outline for the transformation process algorithm:\n\t//\n\t// 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n\t//\n\t// 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n\t// All original `operationsA` are set to be transformed starting from the first operation `b`.\n\t//\n\t// 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n\t// by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n\t// with the transformation results.\n\t//\n\t// 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n\t// original operation.\n\t//\n\t// 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n\t// be transformed by.\n\t//\n\t// 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n\t// unless the last operation `a` was transformed.\n\t//\n\t// The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n\t// The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n\t// to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n\t// index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n\t// operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n\t// current `a` operation index to the next one.\n\t//\n\n\t// For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n\tconst nextTransformIndex = new WeakMap();\n\n\t// For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n\tfor ( const op of operationsA ) {\n\t\tnextTransformIndex.set( op, 0 );\n\t}\n\n\t// Additional data that is used for some postprocessing after the main transformation process is done.\n\tconst data = {\n\t\tnextBaseVersionA: operationsA[ operationsA.length - 1 ].baseVersion + 1,\n\t\tnextBaseVersionB: operationsB[ operationsB.length - 1 ].baseVersion + 1,\n\t\toriginalOperationsACount: operationsA.length,\n\t\toriginalOperationsBCount: operationsB.length\n\t};\n\n\t// Index of currently transformed operation `a`.\n\tlet i = 0;\n\n\t// While not all `operationsA` are transformed...\n\twhile ( i < operationsA.length ) {\n\t\t// Get \"current\" operation `a`.\n\t\tconst opA = operationsA[ i ];\n\n\t\t// For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n\t\tconst indexB = nextTransformIndex.get( opA );\n\n\t\t// If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n\t\tif ( indexB == operationsB.length ) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst opB = operationsB[ indexB ];\n\n\t\t// Transform `a` by `b` and `b` by `a`.\n\t\tconst newOpsA = transform( opA, opB, contextFactory.getContext( opA, opB, true ) );\n\t\tconst newOpsB = transform( opB, opA, contextFactory.getContext( opB, opA, false ) );\n\t\t// As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n\n\t\t// Update contextual information about operations.\n\t\tcontextFactory.updateRelation( opA, opB );\n\n\t\tcontextFactory.setOriginalOperations( newOpsA, opA );\n\t\tcontextFactory.setOriginalOperations( newOpsB, opB );\n\n\t\t// For new `a` operations, update their index of the next operation `b` to transform them by.\n\t\t//\n\t\t// This is needed even if there was only one result (`a` was not broken) because that information is used\n\t\t// at the beginning of this loop every time.\n\t\tfor ( const newOpA of newOpsA ) {\n\t\t\t// Acknowledge, that operation `b` also might be broken into multiple operations.\n\t\t\t//\n\t\t\t// This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n\t\t\t// spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n\t\t\t// be transformed by the same operation (part of it) again.\n\t\t\tnextTransformIndex.set( newOpA, indexB + newOpsB.length );\n\t\t}\n\n\t\t// Update `operationsA` and `operationsB` with the transformed versions.\n\t\toperationsA.splice( i, 1, ...newOpsA );\n\t\toperationsB.splice( indexB, 1, ...newOpsB );\n\t}\n\n\tif ( options.padWithNoOps ) {\n\t\t// If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n\t\tconst brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n\t\tconst brokenOperationsBCount = operationsB.length - data.originalOperationsBCount;\n\n\t\t// Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n\t\t// that the base versions are equalled.\n\t\t//\n\t\t// Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n\t\tpadWithNoOps( operationsA, brokenOperationsBCount - brokenOperationsACount );\n\t\tpadWithNoOps( operationsB, brokenOperationsACount - brokenOperationsBCount );\n\t}\n\n\t// Finally, update base versions of transformed operations.\n\tupdateBaseVersions( operationsA, data.nextBaseVersionB );\n\tupdateBaseVersions( operationsB, data.nextBaseVersionA );\n\n\treturn { operationsA, operationsB, originalOperations };\n}\n\n// Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n// about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\nclass ContextFactory {\n\t// Creates `ContextFactory` instance.\n\t//\n\t// @param {module:engine/model/document~Document} document Document which the operations change.\n\t// @param {Boolean} useRelations Whether during transformation relations should be used (used during undo for\n\t// better conflict resolution).\n\t// @param {Boolean} [forceWeakRemove=false] If set to `false`, remove operation will be always stronger than move operation,\n\t// so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n\tconstructor( document, useRelations, forceWeakRemove = false ) {\n\t\t// For each operation that is created during transformation process, we keep a reference to the original operation\n\t\t// which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n\t\t// gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n\t\t// This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n\t\t// gathered data through original operation reference.\n\t\tthis.originalOperations = new Map();\n\n\t\t// `model.History` instance which information about undone operations will be taken from.\n\t\tthis._history = document.history;\n\n\t\t// Whether additional context should be used.\n\t\tthis._useRelations = useRelations;\n\n\t\tthis._forceWeakRemove = !!forceWeakRemove;\n\n\t\t// Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n\t\t// to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n\t\t// we keep relations between them.\n\t\tthis._relations = new Map();\n\t}\n\n\t// Sets \"original operation\" for given operations.\n\t//\n\t// During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n\t// or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n\t// so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n\t//\n\t// The original operation object will be used as such an universal linking id. Throughout the transformation process\n\t// all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n\t//\n\t// If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n\t// This should be used as an initialization step.\n\t//\n\t// If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n\t// for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n\t// `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n\t//\n\t// @param {Array.<module:engine/model/operation/operation~Operation>} operations\n\t// @param {module:engine/model/operation/operation~Operation|null} [takeFrom=null]\n\tsetOriginalOperations( operations, takeFrom = null ) {\n\t\tconst originalOperation = takeFrom ? this.originalOperations.get( takeFrom ) : null;\n\n\t\tfor ( const operation of operations ) {\n\t\t\tthis.originalOperations.set( operation, originalOperation || operation );\n\t\t}\n\t}\n\n\t// Saves a relation between operations `opA` and `opB`.\n\t//\n\t// Relations are then later used to help solve conflicts when operations are transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\tupdateRelation( opA, opB ) {\n\t\t// The use of relations is described in a bigger detail in transformation functions.\n\t\t//\n\t\t// In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n\t\t// Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n\t\t// position is before the other operation source position. This kind of information gives contextual information when\n\t\t// transformation is used during undo. Similar checks are done for other pairs of operations.\n\t\t//\n\t\tswitch ( opA.constructor ) {\n\t\t\tcase MoveOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opB.movedRange.containsPosition( opA.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAtSource' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isEqual( opB.deletionPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBetween' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isAfter( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'moveTargetAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opA.targetPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBefore' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase SplitOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isEqual( opB.sourcePosition ) || opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MergeOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( !opA.targetPosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeTargetNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSourceNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSameElement' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase SplitOperation: {\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.splitPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitAtSource' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MarkerOperation: {\n\t\t\t\tconst markerRange = opA.newRange;\n\n\t\t\t\tif ( !markerRange ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tconst movedRange = Range._createFromPositionAndShift( opB.sourcePosition, opB.howMany );\n\n\t\t\t\t\t\tconst affectedLeft = movedRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\t\t\tmovedRange.start.isEqual( markerRange.start );\n\n\t\t\t\t\t\tconst affectedRight = movedRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\t\t\tmovedRange.end.isEqual( markerRange.end );\n\n\t\t\t\t\t\tif ( ( affectedLeft || affectedRight ) && !movedRange.containsRange( markerRange ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, {\n\t\t\t\t\t\t\t\tside: affectedLeft ? 'left' : 'right',\n\t\t\t\t\t\t\t\tpath: affectedLeft ? markerRange.start.path.slice() : markerRange.end.path.slice()\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tconst wasInLeftElement = markerRange.start.isEqual( opB.targetPosition );\n\t\t\t\t\t\tconst wasStartBeforeMergedElement = markerRange.start.isEqual( opB.deletionPosition );\n\t\t\t\t\t\tconst wasEndBeforeMergedElement = markerRange.end.isEqual( opB.deletionPosition );\n\t\t\t\t\t\tconst wasInRightElement = markerRange.end.isEqual( opB.sourcePosition );\n\n\t\t\t\t\t\tif ( wasInLeftElement || wasStartBeforeMergedElement || wasEndBeforeMergedElement || wasInRightElement ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, {\n\t\t\t\t\t\t\t\twasInLeftElement,\n\t\t\t\t\t\t\t\twasStartBeforeMergedElement,\n\t\t\t\t\t\t\t\twasEndBeforeMergedElement,\n\t\t\t\t\t\t\t\twasInRightElement\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {module:engine/model/operation/transform~TransformationContext}\n\tgetContext( opA, opB, aIsStrong ) {\n\t\treturn {\n\t\t\taIsStrong,\n\t\t\taWasUndone: this._wasUndone( opA ),\n\t\t\tbWasUndone: this._wasUndone( opB ),\n\t\t\tabRelation: this._useRelations ? this._getRelation( opA, opB ) : null,\n\t\t\tbaRelation: this._useRelations ? this._getRelation( opB, opA ) : null,\n\t\t\tforceWeakRemove: this._forceWeakRemove\n\t\t};\n\t}\n\n\t// Returns whether given operation `op` has already been undone.\n\t//\n\t// Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} op\n\t// @returns {Boolean}\n\t_wasUndone( op ) {\n\t\t// For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n\t\t// operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n\t\t// from which was undone. So get that original operation.\n\t\tconst originalOp = this.originalOperations.get( op );\n\n\t\t// And check with the document if the original operation was undone.\n\t\treturn originalOp.wasUndone || this._history.isUndoneOperation( originalOp );\n\t}\n\n\t// Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n\t// was set earlier or `null` if there was no relation between those operations.\n\t//\n\t// This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n\t//\n\t// When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n\t// undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n\t// we look forward in the future and ask if in that future `opB` was undone.\n\t//\n\t// Relations is a backward process to `wasUndone()`.\n\t//\n\t// Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n\t// operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n\t// a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n\t// between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n\t// a better decision when resolving a conflict between two operations, because we know more about the context of\n\t// those two operations.\n\t//\n\t// This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n\t// back to search for a meaningful contextual information.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {String|null}\n\t_getRelation( opA, opB ) {\n\t\t// Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n\t\tconst origB = this.originalOperations.get( opB );\n\t\tconst undoneB = this._history.getUndoneOperation( origB );\n\n\t\t// If `opB` is not undoing any operation, there is no relation.\n\t\tif ( !undoneB ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst origA = this.originalOperations.get( opA );\n\t\tconst relationsA = this._relations.get( origA );\n\n\t\t// Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n\t\tif ( relationsA ) {\n\t\t\treturn relationsA.get( undoneB ) || null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Helper function for `ContextFactory#updateRelations`.\n\t//\n\t// @private\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @param {String} relation\n\t_setRelation( opA, opB, relation ) {\n\t\t// As always, setting is for original operations, not the clones/transformed operations.\n\t\tconst origA = this.originalOperations.get( opA );\n\t\tconst origB = this.originalOperations.get( opB );\n\n\t\tlet relationsA = this._relations.get( origA );\n\n\t\tif ( !relationsA ) {\n\t\t\trelationsA = new Map();\n\t\t\tthis._relations.set( origA, relationsA );\n\t\t}\n\n\t\trelationsA.set( origB, relation );\n\t}\n}\n\n/**\n * Holds additional contextual information about a transformed pair of operations (`a` and `b`). Those information\n * can be used for better conflict resolving.\n *\n * @typedef {Object} module:engine/model/operation/transform~TransformationContext\n *\n * @property {Boolean} aIsStrong Whether `a` is strong operation in this transformation, or weak.\n * @property {Boolean} aWasUndone Whether `a` operation was undone.\n * @property {Boolean} bWasUndone Whether `b` operation was undone.\n * @property {String|null} abRelation The relation between `a` operation and an operation undone by `b` operation.\n * @property {String|null} baRelation The relation between `b` operation and an operation undone by `a` operation.\n */\n\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations to update.\n * @param {Number} baseVersion Base version to set for the first operation in `operations`.\n */\nfunction updateBaseVersions( operations, baseVersion ) {\n\tfor ( const operation of operations ) {\n\t\toperation.baseVersion = baseVersion++;\n\t}\n}\n\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations\n * @param {Number} howMany\n */\nfunction padWithNoOps( operations, howMany ) {\n\tfor ( let i = 0; i < howMany; i++ ) {\n\t\toperations.push( new NoOperation( 0 ) );\n\t}\n}\n\n// -----------------------\n\nsetTransformation( AttributeOperation, AttributeOperation, ( a, b, context ) => {\n\tif ( a.key === b.key ) {\n\t\t// If operations attributes are in conflict, check if their ranges intersect and manage them properly.\n\n\t\t// First, we want to apply change to the part of a range that has not been changed by the other operation.\n\t\tconst operations = a.range.getDifference( b.range ).map( range => {\n\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, 0 );\n\t\t} );\n\n\t\t// Then we take care of the common part of ranges.\n\t\tconst common = a.range.getIntersection( b.range );\n\n\t\tif ( common ) {\n\t\t\t// If this operation is more important, we also want to apply change to the part of the\n\t\t\t// original range that has already been changed by the other operation. Since that range\n\t\t\t// got changed we also have to update `oldValue`.\n\t\t\tif ( context.aIsStrong ) {\n\t\t\t\toperations.push( new AttributeOperation( common, b.key, b.newValue, a.newValue, 0 ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( operations.length == 0 ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\treturn operations;\n\t} else {\n\t\t// If operations don't conflict, simply return an array containing just a clone of this operation.\n\t\treturn [ a ];\n\t}\n} );\n\nsetTransformation( AttributeOperation, InsertOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.position ) && a.range.containsPosition( b.position ) ) {\n\t\t// If new nodes should not receive attributes, two separated ranges will be returned.\n\t\t// Otherwise, one expanded range will be returned.\n\t\tconst range = a.range._getTransformedByInsertion( b.position, b.howMany, !b.shouldReceiveAttributes );\n\t\tconst result = range.map( r => {\n\t\t\treturn new AttributeOperation( r, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t} );\n\n\t\tif ( b.shouldReceiveAttributes ) {\n\t\t\t// `AttributeOperation#range` includes some newly inserted text.\n\t\t\t// The operation should also change the attribute of that text. An example:\n\t\t\t//\n\t\t\t// Bold should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar</p>\n\t\t\t//\n\t\t\t// In meantime, new text is typed:\n\t\t\t// <p>Fozxxbar</p>\n\t\t\t//\n\t\t\t// Bold should be applied also on the new text:\n\t\t\t// <p>Fo[zxxb]ar</p>\n\t\t\t// <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n\t\t\t//\n\t\t\t// There is a special case to consider here to consider.\n\t\t\t//\n\t\t\t// Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n\t\t\t// have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n\t\t\t//\n\t\t\t// Attribute `highlight=\"yellow\"` should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar<p>\n\t\t\t//\n\t\t\t// In meantime, character `x` with `highlight=\"red\"` is typed:\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n\t\t\t//\n\t\t\t// In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n\t\t\t// because that would lead to an exception (`oldValue` is incorrect for `x`).\n\t\t\t//\n\t\t\t// We also cannot break the original range as this would mess up a scenario when there are multiple following\n\t\t\t// insert operations, because then only the first inserted character is included in those ranges:\n\t\t\t// <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n\t\t\t//\n\t\t\t// So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n\t\t\t//\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n\t\t\t//\n\t\t\t// But before that operation would be applied, we will add an additional attribute operation that will change\n\t\t\t// attributes on the inserted nodes in a way which would make the original operation correct:\n\t\t\t//\n\t\t\t// <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n\t\t\t// <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n\t\t\t//\n\n\t\t\t// Generate complementary attribute operation. Be sure to add it before the original operation.\n\t\t\tconst op = _getComplementaryAttributeOperations( b, a.key, a.oldValue );\n\n\t\t\tif ( op ) {\n\t\t\t\tresult.unshift( op );\n\t\t\t}\n\t\t}\n\n\t\t// If nodes should not receive new attribute, we are done here.\n\t\treturn result;\n\t}\n\n\t// If insert operation is not expanding the attribute operation range, simply transform the range.\n\ta.range = a.range._getTransformedByInsertion( b.position, b.howMany, false )[ 0 ];\n\n\treturn [ a ];\n} );\n\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n *\n * @private\n * @param {module:engine/model/operation/insertoperation~InsertOperation} insertOperation\n * @param {String} key\n * @param {*} newValue\n * @returns {module:engine/model/operation/attributeoperation~AttributeOperation|null}\n */\nfunction _getComplementaryAttributeOperations( insertOperation, key, newValue ) {\n\tconst nodes = insertOperation.nodes;\n\n\t// At the beginning we store the attribute value from the first node.\n\tconst insertValue = nodes.getNode( 0 ).getAttribute( key );\n\n\tif ( insertValue == newValue ) {\n\t\treturn null;\n\t}\n\n\tconst range = new Range( insertOperation.position, insertOperation.position.getShiftedBy( insertOperation.howMany ) );\n\n\treturn new AttributeOperation( range, key, insertValue, newValue, 0 );\n}\n\nsetTransformation( AttributeOperation, MergeOperation, ( a, b ) => {\n\tconst ranges = [];\n\n\t// Case 1:\n\t//\n\t// Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n\t// An additional attribute operation that will change the (re)moved element needs to be generated.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.deletionPosition ) ) {\n\t\tif ( a.range.containsPosition( b.deletionPosition ) || a.range.start.isEqual( b.deletionPosition ) ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.graveyardPosition, 1 ) );\n\t\t}\n\t}\n\n\tconst range = a.range._getTransformedByMergeOperation( b );\n\n\t// Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n\tif ( !range.isCollapsed ) {\n\t\tranges.push( range );\n\t}\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => {\n\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t} );\n} );\n\nsetTransformation( AttributeOperation, MoveOperation, ( a, b ) => {\n\tconst ranges = _breakRangeByMoveOperation( a.range, b );\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion ) );\n} );\n\n// Helper function for `AttributeOperation` x `MoveOperation` transformation.\n//\n// Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n// are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n// be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n// top-level nodes of the original `range`.\n//\n// This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n// track only how those nodes have been affected by `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/operation/moveoperation~MoveOperation} moveOp\n// @returns {Array.<module:engine/model/range~Range>}\nfunction _breakRangeByMoveOperation( range, moveOp ) {\n\tconst moveRange = Range._createFromPositionAndShift( moveOp.sourcePosition, moveOp.howMany );\n\n\t// We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n\t// transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n\tlet common = null;\n\tlet difference = [];\n\n\t// Let's compare the ranges.\n\tif ( moveRange.containsRange( range, true ) ) {\n\t\t// If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n\t\tcommon = range;\n\t} else if ( range.start.hasSameParentAs( moveRange.start ) ) {\n\t\t// If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n\t\t// that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n\t\tdifference = range.getDifference( moveRange );\n\t\tcommon = range.getIntersection( moveRange );\n\t} else {\n\t\t// In any other situation we assume that original range is different than move range, that is that move operation\n\t\t// moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n\t\t//\n\t\t// Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n\t\t// than `.getDifference` (we would get two ranges).\n\t\tdifference = [ range ];\n\t}\n\n\tconst result = [];\n\n\t// The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n\t// we do it by hand.\n\tfor ( let diff of difference ) {\n\t\t// First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n\t\t// as the range is different than the moved range.\n\t\tdiff = diff._getTransformedByDeletion( moveOp.sourcePosition, moveOp.howMany );\n\n\t\t// Transform also `targetPosition`.\n\t\tconst targetPosition = moveOp.getMovedRangeStart();\n\n\t\t// Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n\t\tconst spread = diff.start.hasSameParentAs( targetPosition );\n\n\t\t// Transform by insertion of moved nodes.\n\t\tdiff = diff._getTransformedByInsertion( targetPosition, moveOp.howMany, spread );\n\n\t\tresult.push( ...diff );\n\t}\n\n\t// Common part can be simply transformed by the move operation. This is because move operation will not target to\n\t// that common part (the operation would have to target inside its own moved range).\n\tif ( common ) {\n\t\tresult.push(\n\t\t\tcommon._getTransformedByMove( moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false )[ 0 ]\n\t\t);\n\t}\n\n\treturn result;\n}\n\nsetTransformation( AttributeOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Split node is the last node in `AttributeOperation#range`.\n\t// `AttributeOperation#range` needs to be expanded to include the new (split) node.\n\t//\n\t// Attribute `type` to be changed to `numbered` but the `listItem` is split.\n\t// <listItem type=\"bulleted\">foobar</listItem>\n\t//\n\t// After split:\n\t// <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n\t//\n\t// After attribute change:\n\t// <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n\t//\n\tif ( a.range.end.isEqual( b.insertionPosition ) ) {\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.range.end.offset++;\n\t\t}\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n\t// not going to make a flat range.\n\t//\n\t// Content with range-to-change and split position:\n\t// <p>Fo[zb^a]r</p>\n\t//\n\t// After split:\n\t// <p>Fozb</p><p>ar</p>\n\t//\n\t// Make two separate ranges containing all nodes to change:\n\t// <p>Fo[zb]</p><p>[a]r</p>\n\t//\n\tif ( a.range.start.hasSameParentAs( b.splitPosition ) && a.range.containsPosition( b.splitPosition ) ) {\n\t\tconst secondPart = a.clone();\n\n\t\tsecondPart.range = new Range(\n\t\t\tb.moveTargetPosition.clone(),\n\t\t\ta.range.end._getCombined( b.splitPosition, b.moveTargetPosition )\n\t\t);\n\n\t\ta.range.end = b.splitPosition.clone();\n\t\ta.range.end.stickiness = 'toPrevious';\n\n\t\treturn [ a, secondPart ];\n\t}\n\n\t// The default case.\n\t//\n\ta.range = a.range._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, AttributeOperation, ( a, b ) => {\n\tconst result = [ a ];\n\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\t// This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n\t// although this case is a little less complicated. In this case we simply need to change attributes of the\n\t// inserted nodes and that's it.\n\t//\n\tif ( a.shouldReceiveAttributes && a.position.hasSameParentAs( b.range.start ) && b.range.containsPosition( a.position ) ) {\n\t\tconst op = _getComplementaryAttributeOperations( a, b.key, b.newValue );\n\n\t\tif ( op ) {\n\t\t\tresult.push( op );\n\t\t}\n\t}\n\n\t// The default case is: do nothing.\n\t// `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n\t//\n\treturn result;\n} );\n\nsetTransformation( InsertOperation, InsertOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n\t// what will be the order of inserted nodes. However, there is no additional information to help in that\n\t// decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n\t//\n\t// To achieve that, we will check if the operation is strong.\n\t// If it is, it won't get transformed. If it is not, it will be moved.\n\t//\n\tif ( a.position.isEqual( b.position ) && context.aIsStrong ) {\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MoveOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, SplitOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MergeOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MarkerOperation, InsertOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MarkerOperation, ( a, b, context ) => {\n\tif ( a.name == b.name ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldRange = b.newRange ? b.newRange.clone() : null;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MergeOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByMergeOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MoveOperation, ( a, b, context ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = Range._createFromRanges( a.oldRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\tif ( a.newRange ) {\n\t\tif ( context.abRelation ) {\n\t\t\tconst aNewRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\n\t\t\tif ( context.abRelation.side == 'left' && b.targetPosition.isEqual( a.newRange.start ) ) {\n\t\t\t\ta.newRange.start.path = context.abRelation.path;\n\t\t\t\ta.newRange.end = aNewRange.end;\n\n\t\t\t\treturn [ a ];\n\t\t\t} else if ( context.abRelation.side == 'right' && b.targetPosition.isEqual( a.newRange.end ) ) {\n\t\t\t\ta.newRange.start = aNewRange.start;\n\t\t\t\ta.newRange.end.path = context.abRelation.path;\n\n\t\t\t\treturn [ a ];\n\t\t\t}\n\t\t}\n\n\t\ta.newRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, SplitOperation, ( a, b, context ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedBySplitOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\tif ( context.abRelation ) {\n\t\t\tconst aNewRange = a.newRange._getTransformedBySplitOperation( b );\n\n\t\t\tif ( a.newRange.start.isEqual( b.splitPosition ) && context.abRelation.wasStartBeforeMergedElement ) {\n\t\t\t\ta.newRange.start = Position._createAt( b.insertionPosition );\n\t\t\t} else if ( a.newRange.start.isEqual( b.splitPosition ) && !context.abRelation.wasInLeftElement ) {\n\t\t\t\ta.newRange.start = Position._createAt( b.moveTargetPosition );\n\t\t\t}\n\n\t\t\tif ( a.newRange.end.isEqual( b.splitPosition ) && context.abRelation.wasInRightElement ) {\n\t\t\t\ta.newRange.end = Position._createAt( b.moveTargetPosition );\n\t\t\t} else if ( a.newRange.end.isEqual( b.splitPosition ) && context.abRelation.wasEndBeforeMergedElement ) {\n\t\t\t\ta.newRange.end = Position._createAt( b.insertionPosition );\n\t\t\t} else {\n\t\t\t\ta.newRange.end = aNewRange.end;\n\t\t\t}\n\n\t\t\treturn [ a ];\n\t\t}\n\n\t\ta.newRange = a.newRange._getTransformedBySplitOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MergeOperation, InsertOperation, ( a, b ) => {\n\tif ( a.sourcePosition.hasSameParentAs( b.position ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByInsertOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Same merge operations.\n\t//\n\t// Both operations have same source and target positions. So the element already got merged and there is\n\t// theoretically nothing to do.\n\t//\n\tif ( a.sourcePosition.isEqual( b.sourcePosition ) && a.targetPosition.isEqual( b.targetPosition ) ) {\n\t\t// There are two ways that we can provide a do-nothing operation.\n\t\t//\n\t\t// First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n\t\t//\n\t\t// Second is a merge operation that has the source operation in the merged element - in the graveyard -\n\t\t// same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n\t\t// which is almost the same as NoOperation.\n\t\t//\n\t\t// This way the merge operation can be later transformed by split operation\n\t\t// to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n\t\t//\n\t\tif ( !context.bWasUndone ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\tconst path = b.graveyardPosition.path.slice();\n\t\t\tpath.push( 0 );\n\n\t\t\ta.sourcePosition = new Position( b.graveyardPosition.root, path );\n\t\t\ta.howMany = 0;\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same merge source position but different target position.\n\t//\n\t// This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n\t// and the other person removed that paragraph and merged the same paragraph to something before:\n\t//\n\t// Client A:\n\t// <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n\t// <p>Foo</p><p>BarXyz</p>\n\t//\n\t// Client B:\n\t// <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n\t// <p>Foo</p><p>[]Xyz</p>\n\t// <p>FooXyz</p>\n\t//\n\t// In this case we need to decide where finally \"Xyz\" will land:\n\t//\n\t// <p>FooXyz</p>               graveyard: <p>Bar</p>\n\t// <p>Foo</p>                  graveyard: <p>BarXyz</p>\n\t//\n\t// Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n\t// nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n\t// end up in the graveyard (see above).\n\t//\n\t// If neither or both operations point to graveyard, then let `aIsStrong` decide.\n\t//\n\tif (\n\t\ta.sourcePosition.isEqual( b.sourcePosition ) && !a.targetPosition.isEqual( b.targetPosition ) &&\n\t\t!context.bWasUndone && context.abRelation != 'splitAtSource'\n\t) {\n\t\tconst aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n\t\tconst bToGraveyard = b.targetPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aToGraveyard && !bToGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bToGraveyard && !aToGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst sourcePosition = b.targetPosition._getTransformedByMergeOperation( b );\n\t\t\tconst targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\treturn [ new MoveOperation( sourcePosition, a.howMany, targetPosition, 0 ) ];\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMergeOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t// Handle positions in graveyard.\n\t// If graveyard positions are same and `a` operation is strong - do not transform.\n\tif ( !a.graveyardPosition.isEqual( b.graveyardPosition ) || !context.aIsStrong ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MoveOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// The element to merge got removed.\n\t//\n\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t// from technical point of view. However, if the element was removed, the intention of the user deleting it\n\t// was to have it all deleted, together with its children. From user experience point of view, moving back the\n\t// removed nodes might be unexpected. This means that in this scenario we will block the merging.\n\t//\n\t// The exception of this rule would be if the remove operation was later undone.\n\t//\n\tconst removedRange = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove ) {\n\t\tif ( a.deletionPosition.hasSameParentAs( b.sourcePosition ) && removedRange.containsPosition( a.sourcePosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\tif ( a.sourcePosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMoveOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMoveOperation( b );\n\n\t// `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n\t// be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n\t// Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n\t// This means that we won't transform graveyard position if it is equal to move operation target position.\n\tif ( !a.graveyardPosition.isEqual( b.targetPosition ) ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, SplitOperation, ( a, b, context ) => {\n\tif ( b.graveyardPosition ) {\n\t\t// If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n\t\t// transform `a.graveyardPosition` accordingly.\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByDeletion( b.graveyardPosition, 1 );\n\n\t\t// This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n\t\t//\n\t\t// So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n\t\t// source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n\t\t// means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n\t\t//\n\t\t// If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n\t\t// `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n\t\t// properties.\n\t\t//\n\t\tif ( a.deletionPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\ta.howMany = b.howMany;\n\t\t}\n\t}\n\n\t// Case 1:\n\t//\n\t// Merge operation moves nodes to the place where split happens.\n\t// This is a classic situation when there are two paragraphs, and there is a split (enter) after the first\n\t// paragraph and there is a merge (delete) at the beginning of the second paragraph:\n\t//\n\t// <p>Foo{}</p><p>[]Bar</p>.\n\t//\n\t// Split is after `Foo`, while merge is from `Bar` to the end of `Foo`.\n\t//\n\t// State after split:\n\t// <p>Foo</p><p></p><p>Bar</p>\n\t//\n\t// Now, `Bar` should be merged to the new paragraph:\n\t// <p>Foo</p><p>Bar</p>\n\t//\n\t// Instead of merging it to the original paragraph:\n\t// <p>FooBar</p><p></p>\n\t//\n\t// This means that `targetPosition` needs to be transformed. This is the default case though.\n\t// For example, if the split would be after `F`, `targetPosition` should also be transformed.\n\t//\n\t// There are three exceptions, though, when we want to keep `targetPosition` as it was.\n\t//\n\t// First exception is when the merge target position is inside an element (not at the end, as usual). This\n\t// happens when the merge operation earlier was transformed by \"the same\" merge operation. If merge operation\n\t// targets inside the element we want to keep the original target position (and not transform it) because\n\t// we have additional context telling us that we want to merge to the original element. We can check if the\n\t// merge operation points inside element by checking what is `SplitOperation#howMany`. Since merge target position\n\t// is same as split position, if `howMany` is non-zero, it means that the merge target position is inside an element.\n\t//\n\t// Second exception is when the element to merge is in the graveyard and split operation uses it. In that case\n\t// if target position would be transformed, the merge operation would target at the source position:\n\t//\n\t// root: <p>Foo</p>\t\t\t\tgraveyard: <p></p>\n\t//\n\t// SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n\t// MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n\t//\n\t// Since split operation moves the graveyard node back to the root, the merge operation source position changes.\n\t// We would like to merge from the empty <p> to the \"Foo\" <p>:\n\t//\n\t// root: <p>Foo</p><p></p>\t\t\tgraveyard:\n\t//\n\t// MergeOperation#sourcePosition = root [ 1, 0 ]\n\t//\n\t// If `targetPosition` is transformed, it would become root [ 1, 0 ] as well. It has to be kept as it was.\n\t//\n\t// Third exception is connected with relations. If this happens during undo and we have explicit information\n\t// that target position has not been affected by the operation which is undone by this split then this split should\n\t// not move the target position either.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) ) {\n\t\tconst mergeInside = b.howMany != 0;\n\t\tconst mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual( b.graveyardPosition );\n\n\t\tif ( mergeInside || mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved' ) {\n\t\t\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Merge source is at the same position as split position. This sometimes happen, mostly during undo.\n\t// The decision here is mostly to choose whether merge source position should stay where it is (so it will be at the end of the\n\t// split element) or should be move to the beginning of the new element.\n\t//\n\tif ( a.sourcePosition.isEqual( b.splitPosition ) ) {\n\t\t// Use context to check if `SplitOperation` is not undoing a merge operation, that didn't change the `a` operation.\n\t\t// This scenario happens the undone merge operation moved nodes at the source position of `a` operation.\n\t\t// In that case `a` operation source position should stay where it is.\n\t\tif ( context.abRelation == 'mergeSourceNotMoved' ) {\n\t\t\ta.howMany = 0;\n\t\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\n\t\t// This merge operation might have been earlier transformed by a merge operation which both merged the same element.\n\t\t// See that case in `MergeOperation` x `MergeOperation` transformation. In that scenario, if the merge operation has been undone,\n\t\t// the special case is not applied.\n\t\t//\n\t\t// Now, the merge operation is transformed by the split which has undone that previous merge operation.\n\t\t// So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n\t\t//\n\t\tif ( context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0 ) {\n\t\t\ta.sourcePosition = b.moveTargetPosition.clone();\n\t\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.splitPosition ) ) {\n\t\ta.howMany = b.splitPosition.offset;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MoveOperation, InsertOperation, ( a, b ) => {\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByInsertOperation( b, false )[ 0 ];\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\n\t// See `InsertOperation` x `MoveOperation` transformation for details on this case.\n\t//\n\t// In summary, both operations point to the same place, so the order of nodes needs to be decided.\n\t// `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n\t// between operations.\n\t//\n\tif ( !a.targetPosition.isEqual( b.position ) ) {\n\t\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MoveOperation, MoveOperation, ( a, b, context ) => {\n\t//\n\t// Setting and evaluating some variables that will be used in special cases and default algorithm.\n\t//\n\t// Create ranges from `MoveOperations` properties.\n\tconst rangeA = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst rangeB = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\t// Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n\t// this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n\tlet aIsStrong = context.aIsStrong;\n\n\t// This will be used to decide the order of nodes if both operations target at the same position.\n\t// By default, use strong/weak operation mechanism.\n\tlet insertBefore = !context.aIsStrong;\n\n\t// If the relation is set, then use it to decide nodes order.\n\tif ( context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter' ) {\n\t\tinsertBefore = true;\n\t} else if ( context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore' ) {\n\t\tinsertBefore = false;\n\t}\n\n\t// `a.targetPosition` could be affected by the `b` operation. We will transform it.\n\tlet newTargetPosition;\n\n\tif ( a.targetPosition.isEqual( b.targetPosition ) && insertBefore ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByDeletion(\n\t\t\tb.sourcePosition,\n\t\t\tb.howMany\n\t\t);\n\t} else {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByMove(\n\t\t\tb.sourcePosition,\n\t\t\tb.targetPosition,\n\t\t\tb.howMany\n\t\t);\n\t}\n\n\t//\n\t// Special case #1 + mirror.\n\t//\n\t// Special case when both move operations' target positions are inside nodes that are\n\t// being moved by the other move operation. So in other words, we move ranges into inside of each other.\n\t// This case can't be solved reasonably (on the other hand, it should not happen often).\n\tif ( _moveTargetIntoMovedRange( a, b ) && _moveTargetIntoMovedRange( b, a ) ) {\n\t\t// Instead of transforming operation, we return a reverse of the operation that we transform by.\n\t\t// So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n\t\treturn [ b.getReversed() ];\n\t}\n\t//\n\t// End of special case #1.\n\t//\n\n\t//\n\t// Special case #2.\n\t//\n\t// Check if `b` operation targets inside `rangeA`.\n\tconst bTargetsToA = rangeA.containsPosition( b.targetPosition );\n\n\t// If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n\t// You might say that operation `b` is captured inside operation `a`.\n\tif ( bTargetsToA && rangeA.containsRange( rangeB, true ) ) {\n\t\t// There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n\t\t// we need to transform `a` operation anyway.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\n\t//\n\t// Special case #2 mirror.\n\t//\n\tconst aTargetsToB = rangeB.containsPosition( a.targetPosition );\n\n\tif ( aTargetsToB && rangeB.containsRange( rangeA, true ) ) {\n\t\t// `a` operation is \"moved together\" with `b` operation.\n\t\t// Here, just move `rangeA` \"inside\" `rangeB`.\n\t\trangeA.start = rangeA.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\trangeA.end = rangeA.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #2.\n\t//\n\n\t//\n\t// Special case #3 + mirror.\n\t//\n\t// `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n\t// but not on the same tree level. In such case ranges have common part but we have to treat it\n\t// differently, because in such case those ranges are not really conflicting and should be treated like\n\t// two separate ranges. Also we have to discard two difference parts.\n\tconst aCompB = compareArrays( a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath() );\n\n\tif ( aCompB == 'prefix' || aCompB == 'extension' ) {\n\t\t// Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n\t\t// Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n\t\t// like a one difference part.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #3.\n\t//\n\n\t//\n\t// Default case - ranges are on the same level or are not connected with each other.\n\t//\n\t// Modifier for default case.\n\t// Modifies `aIsStrong` flag in certain conditions.\n\t//\n\t// If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n\t// to provide more expected results.\n\tif ( a.type == 'remove' && b.type != 'remove' && !context.aWasUndone && !context.forceWeakRemove ) {\n\t\taIsStrong = true;\n\t} else if ( a.type != 'remove' && b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove ) {\n\t\taIsStrong = false;\n\t}\n\n\t// Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n\t// This will aggregate transformed ranges.\n\tconst ranges = [];\n\n\t// Get the \"difference part\" of `a` operation source range.\n\t// This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n\tconst difference = rangeA.getDifference( rangeB );\n\n\tfor ( const range of difference ) {\n\t\t// Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n\t\trange.start = range.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\trange.end = range.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\n\t\t// If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n\t\tconst shouldSpread = compareArrays( range.start.getParentPath(), b.getMovedRangeStart().getParentPath() ) == 'same';\n\t\tconst newRanges = range._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, shouldSpread );\n\n\t\tranges.push( ...newRanges );\n\t}\n\n\t// Then, we have to manage the \"common part\" of both move ranges.\n\tconst common = rangeA.getIntersection( rangeB );\n\n\tif ( common !== null && aIsStrong ) {\n\t\t// Calculate the new position of that part of original range.\n\t\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t// Take care of proper range order.\n\t\t//\n\t\t// Put `common` at appropriate place. Keep in mind that we are interested in original order.\n\t\t// Basically there are only three cases: there is zero, one or two difference ranges.\n\t\t//\n\t\t// If there is zero difference ranges, just push `common` in the array.\n\t\tif ( ranges.length === 0 ) {\n\t\t\tranges.push( common );\n\t\t}\n\t\t// If there is one difference range, we need to check whether common part was before it or after it.\n\t\telse if ( ranges.length == 1 ) {\n\t\t\tif ( rangeB.start.isBefore( rangeA.start ) || rangeB.start.isEqual( rangeA.start ) ) {\n\t\t\t\tranges.unshift( common );\n\t\t\t} else {\n\t\t\t\tranges.push( common );\n\t\t\t}\n\t\t}\n\t\t// If there are more ranges (which means two), put common part between them. This is the only scenario\n\t\t// where there could be two difference ranges so we don't have to make any comparisons.\n\t\telse {\n\t\t\tranges.splice( 1, 0, common );\n\t\t}\n\t}\n\n\tif ( ranges.length === 0 ) {\n\t\t// If there are no \"source ranges\", nothing should be changed.\n\t\t// Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, SplitOperation, ( a, b, context ) => {\n\tlet newTargetPosition = a.targetPosition.clone();\n\n\t// Do not transform if target position is same as split insertion position and this split comes from undo.\n\t// This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n\t// We need to make a decision how we will resolve such conflict and this is less harmful way.\n\tif ( !a.targetPosition.isEqual( b.insertionPosition ) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter' ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 1:\n\t//\n\t// Last element in the moved range got split.\n\t//\n\t// In this case the default range transformation will not work correctly as the element created by\n\t// split operation would be outside the range. The range to move needs to be fixed manually.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( moveRange.end.isEqual( b.insertionPosition ) ) {\n\t\t// Do it only if this is a \"natural\" split, not a one that comes from undo.\n\t\t// If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.howMany++;\n\t\t}\n\n\t\ta.targetPosition = newTargetPosition;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split happened between the moved nodes. In this case two ranges to move need to be generated.\n\t//\n\t// Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n\t// <p>F[oz|ba]r</p><p>Xyz</p>\n\t//\n\t// After split:\n\t// <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n\t//\n\t// Correct ranges:\n\t// <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n\t//\n\t// After move:\n\t// <p>F</p><p>r</p><p>Xyzozba</p>\n\t//\n\tif ( moveRange.start.hasSameParentAs( b.splitPosition ) && moveRange.containsPosition( b.splitPosition ) ) {\n\t\tlet rightRange = new Range( b.splitPosition, moveRange.end );\n\t\trightRange = rightRange._getTransformedBySplitOperation( b );\n\n\t\tconst ranges = [\n\t\t\tnew Range( moveRange.start, b.splitPosition ),\n\t\t\trightRange\n\t\t];\n\n\t\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n\t}\n\n\t// Case 3:\n\t//\n\t// Move operation targets at the split position. We need to decide if the nodes should be inserted\n\t// at the end of the split element or at the beginning of the new element.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) && context.abRelation == 'insertAtSource' ) {\n\t\tnewTargetPosition = b.moveTargetPosition;\n\t}\n\n\t// Case 4:\n\t//\n\t// Move operation targets just after the split element. We need to decide if the nodes should be inserted\n\t// between two parts of split element, or after the new element.\n\t//\n\t// Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n\t// <p>Foo|bar</p>^<p>baz</p>\n\t// <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n\t//\n\t// If there is no contextual information between operations (for example, they come from collaborative\n\t// editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n\t// However, if the split is from undo, in the past, the moved content might be targeting between the\n\t// split parts, meaning that was exactly user's intention:\n\t//\n\t// <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n\t// <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n\t// <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n\t//\n\t// In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n\t// so we need to transform accordingly. We can detect this scenario thanks to relations.\n\t//\n\tif ( a.targetPosition.isEqual( b.insertionPosition ) && context.abRelation == 'insertBetween' ) {\n\t\tnewTargetPosition = a.targetPosition;\n\t}\n\n\t// The default case.\n\t//\n\tconst transformed = moveRange._getTransformedBySplitOperation( b );\n\tconst ranges = [ transformed ];\n\n\t// Case 5:\n\t//\n\t// Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n\t//\n\tif ( b.graveyardPosition ) {\n\t\tconst movesGraveyardElement = moveRange.start.isEqual( b.graveyardPosition ) || moveRange.containsPosition( b.graveyardPosition );\n\n\t\tif ( a.howMany > 1 && movesGraveyardElement && !context.aWasUndone ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.insertionPosition, 1 ) );\n\t\t}\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, MergeOperation, ( a, b, context ) => {\n\tconst movedRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( b.deletionPosition.hasSameParentAs( a.sourcePosition ) && movedRange.containsPosition( b.sourcePosition ) ) {\n\t\tif ( a.type == 'remove' && !context.forceWeakRemove ) {\n\t\t\t// Case 1:\n\t\t\t//\n\t\t\t// The element to remove got merged.\n\t\t\t//\n\t\t\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t\t\t// from technical point of view. However, if the element was removed, the intention of the user\n\t\t\t// deleting it was to have it all deleted. From user experience point of view, moving back the\n\t\t\t// removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n\t\t\t//\n\t\t\tif ( !context.aWasUndone ) {\n\t\t\t\tconst results = [];\n\n\t\t\t\tlet gyMoveSource = b.graveyardPosition.clone();\n\t\t\t\tlet splitNodesMoveSource = b.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\tif ( a.howMany > 1 ) {\n\t\t\t\t\tresults.push( new MoveOperation( a.sourcePosition, a.howMany - 1, a.targetPosition, 0 ) );\n\n\t\t\t\t\tgyMoveSource = gyMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t}\n\n\t\t\t\tconst gyMoveTarget = b.deletionPosition._getCombined( a.sourcePosition, a.targetPosition );\n\t\t\t\tconst gyMove = new MoveOperation( gyMoveSource, 1, gyMoveTarget, 0 );\n\n\t\t\t\tconst splitNodesMoveTargetPath = gyMove.getMovedRangeStart().path.slice();\n\t\t\t\tsplitNodesMoveTargetPath.push( 0 );\n\n\t\t\t\tconst splitNodesMoveTarget = new Position( gyMove.targetPosition.root, splitNodesMoveTargetPath );\n\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( gyMoveSource, gyMoveTarget, 1 );\n\t\t\t\tconst splitNodesMove = new MoveOperation( splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0 );\n\n\t\t\t\tresults.push( gyMove );\n\t\t\t\tresults.push( splitNodesMove );\n\n\t\t\t\treturn results;\n\t\t\t}\n\t\t} else {\n\t\t\t// Case 2:\n\t\t\t//\n\t\t\t// The element to move got merged and it was the only element to move.\n\t\t\t// In this case just don't do anything, leave the node in the graveyard. Without special case\n\t\t\t// it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n\t\t\t//\n\t\t\tif ( a.howMany == 1 ) {\n\t\t\t\tif ( !context.bWasUndone ) {\n\t\t\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t\t\t} else {\n\t\t\t\t\ta.sourcePosition = b.graveyardPosition.clone();\n\t\t\t\t\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\t\treturn [ a ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByMergeOperation( b );\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RenameOperation, InsertOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MergeOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Element to rename got merged, so it was moved to `b.graveyardPosition`.\n\t//\n\tif ( a.position.isEqual( b.deletionPosition ) ) {\n\t\ta.position = b.graveyardPosition.clone();\n\t\ta.position.stickiness = 'toNext';\n\n\t\treturn [ a ];\n\t}\n\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MoveOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, RenameOperation, ( a, b, context ) => {\n\tif ( a.position.isEqual( b.position ) ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldName = b.newName;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The element to rename has been split. In this case, the new element should be also renamed.\n\t//\n\t// User decides to change the paragraph to a list item:\n\t// <paragraph>Foobar</paragraph>\n\t//\n\t// However, in meantime, split happens:\n\t// <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n\t//\n\t// As a result, rename both elements:\n\t// <listItem>Foo</listItem><listItem>bar</listItem>\n\t//\n\tconst renamePath = a.position.path;\n\tconst splitPath = b.splitPosition.getParentPath();\n\n\tif ( compareArrays( renamePath, splitPath ) == 'same' && !b.graveyardPosition ) {\n\t\tconst extraRename = new RenameOperation( a.position.getShiftedBy( 1 ), a.oldName, a.newName, 0 );\n\n\t\treturn [ a, extraRename ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RootAttributeOperation, RootAttributeOperation, ( a, b, context ) => {\n\tif ( a.root === b.root && a.key === b.key ) {\n\t\tif ( !context.aIsStrong || a.newValue === b.newValue ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\ta.oldValue = b.newValue;\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( SplitOperation, InsertOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.position ) && a.splitPosition.offset < b.position.offset ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByInsertOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split element got merged. If two different elements were merged, clients will have different content.\n\t//\n\t// Example. Merge at `{}`, split at `[]`:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// On merge side it will look like this:\n\t// <heading>FooB[]ar</heading>\n\t// <heading>FooB</heading><heading>ar</heading>\n\t//\n\t// On split side it will look like this:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t// <heading>FooB</heading><paragraph>ar</paragraph>\n\t//\n\t// Clearly, the second element is different for both clients.\n\t//\n\t// We could use the removed merge element from graveyard as a split element but then clients would have a different\n\t// model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n\t//\n\t// To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n\t// in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n\t// used for splitting. Example below.\n\t//\n\t// Original state:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// Merge side client:\n\t//\n\t// After merge:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n\t//\n\t// Extra split:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n\t//\n\t// Use the \"cloned\" element from graveyard:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// Split side client:\n\t//\n\t// After split:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t//\n\t// After merge:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// This special case scenario only applies if the original split operation clones the split element.\n\t// If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n\t// knows exactly which element it should use. So there would be no original problem with different contents.\n\t//\n\t// Additionally, the special case applies only if the merge wasn't already undone.\n\t//\n\tif ( !a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\tconst splitPath = b.graveyardPosition.path.slice();\n\t\tsplitPath.push( 0 );\n\n\t\tconst splitPosition = new Position( b.graveyardPosition.root, splitPath );\n\t\tconst insertionPosition = SplitOperation.getInsertionPosition( new Position( b.graveyardPosition.root, splitPath ) );\n\n\t\tconst additionalSplit = new SplitOperation( splitPosition, 0, null, 0 );\n\t\tadditionalSplit.insertionPosition = insertionPosition;\n\n\t\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t\ta.graveyardPosition = additionalSplit.insertionPosition.clone();\n\t\ta.graveyardPosition.stickiness = 'toNext';\n\n\t\treturn [ additionalSplit, a ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.deletionPosition ) && !a.splitPosition.isAfter( b.deletionPosition ) ) {\n\t\ta.howMany--;\n\t}\n\n\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MoveOperation, ( a, b, context ) => {\n\tconst rangeToMove = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( a.graveyardPosition ) {\n\t\t// Case 1:\n\t\t//\n\t\t// Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n\t\t// is already moved to the correct position, we need to only move the nodes after the split position.\n\t\t// This will be done by `MoveOperation` instead of `SplitOperation`.\n\t\t//\n\t\tconst gyElementMoved = rangeToMove.start.isEqual( a.graveyardPosition ) || rangeToMove.containsPosition( a.graveyardPosition );\n\n\t\tif ( !context.bWasUndone && gyElementMoved ) {\n\t\t\tconst sourcePosition = a.splitPosition._getTransformedByMoveOperation( b );\n\n\t\t\tconst newParentPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t\t\tconst newTargetPath = newParentPosition.path.slice();\n\t\t\tnewTargetPath.push( 0 );\n\n\t\t\tconst newTargetPosition = new Position( newParentPosition.root, newTargetPath );\n\t\t\tconst moveOp = new MoveOperation( sourcePosition, a.howMany, newTargetPosition, 0 );\n\n\t\t\treturn [ moveOp ];\n\t\t}\n\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\t// Case 2:\n\t//\n\t// If the split position is inside the moved range, we need to shift the split position to a proper place.\n\t// The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n\t//\n\t// Characters `bc` should be moved to the second paragraph while split position is between them:\n\t// <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n\t//\n\t// After move, new split position is incorrect:\n\t// <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n\t//\n\t// Correct split position:\n\t// <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\t// After split:\n\t// <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && rangeToMove.containsPosition( a.splitPosition ) ) {\n\t\tconst howManyRemoved = b.howMany - ( a.splitPosition.offset - b.sourcePosition.offset );\n\t\ta.howMany -= howManyRemoved;\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\n\t\ta.splitPosition = b.sourcePosition.clone();\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 3:\n\t//\n\t// Split is at a position where nodes were moved.\n\t//\n\t// This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n\t// \"split operation point of view\".\n\t//\n\tconst splitAtTarget = a.splitPosition.isEqual( b.targetPosition );\n\n\tif ( splitAtTarget && ( context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore' ) ) {\n\t\ta.howMany += b.howMany;\n\t\ta.splitPosition = a.splitPosition._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t// Don't change `howMany` if move operation does not really move anything.\n\t//\n\tif ( !b.sourcePosition.isEqual( b.targetPosition ) ) {\n\t\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && a.splitPosition.offset <= b.sourcePosition.offset ) {\n\t\t\ta.howMany -= b.howMany;\n\t\t}\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\t}\n\n\t// Change position stickiness to force a correct transformation.\n\ta.splitPosition.stickiness = 'toNone';\n\ta.splitPosition = a.splitPosition._getTransformedByMoveOperation( b );\n\ta.splitPosition.stickiness = 'toNext';\n\n\tif ( a.graveyardPosition ) {\n\t\ta.insertionPosition = a.insertionPosition._getTransformedByMoveOperation( b );\n\t} else {\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, SplitOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split at the same position.\n\t//\n\t// If there already was a split at the same position as in `a` operation, it means that the intention\n\t// conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n\t//\n\t// However, there is a difference if these are new splits or splits created by undo. These have different\n\t// intentions. Also splits moving back different elements from graveyard have different intentions. They\n\t// are just different operations.\n\t//\n\t// So we cancel split operation only if it was really identical.\n\t//\n\t// Also, there is additional case, where split operations aren't identical and should not be cancelled, however the\n\t// default transformation is incorrect too.\n\t//\n\tif ( a.splitPosition.isEqual( b.splitPosition ) ) {\n\t\tif ( !a.graveyardPosition && !b.graveyardPosition ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\t// Use context to know that the `a.splitPosition` should stay where it is.\n\t\t// This happens during undo when first a merge operation moved nodes to `a.splitPosition` and now `b` operation undoes that merge.\n\t\tif ( context.abRelation == 'splitBefore' ) {\n\t\t\t// Since split is at the same position, there are no nodes left to split.\n\t\t\ta.howMany = 0;\n\n\t\t\t// Note: there was `if ( a.graveyardPosition )` here but it was uncovered in tests and I couldn't find any scenarios for now.\n\t\t\t// That would have to be a `SplitOperation` that didn't come from undo but is transformed by operations that were undone.\n\t\t\t// It could happen if `context` is enabled in collaboration.\n\t\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same node is using to split different elements. This happens in undo when previously same element was merged to\n\t// two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n\t//\n\t// In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n\t// split operations. This might not always be true but in the real cases that were experienced it was. After all,\n\t// if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n\t// should be same for both of those splits.\n\t//\n\t// Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n\t//\n\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\tconst aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n\t\tconst bInGraveyard = b.splitPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aInGraveyard && !bInGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bInGraveyard && !aInGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst result = [];\n\n\t\t\t// First we need to move any nodes split by `b` back to where they were.\n\t\t\t// Do it only if `b` actually moved something.\n\t\t\tif ( b.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( b.moveTargetPosition, b.howMany, b.splitPosition, 0 ) );\n\t\t\t}\n\n\t\t\t// Then we need to move nodes from `a` split position to their new element.\n\t\t\t// Do it only if `a` actually should move something.\n\t\t\tif ( a.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( a.splitPosition, a.howMany, a.moveTargetPosition, 0 ) );\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 3:\n\t//\n\t// Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n\t// As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n\t//\n\tif ( a.splitPosition.isEqual( b.insertionPosition ) && context.abRelation == 'splitBefore' ) {\n\t\ta.howMany++;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 4:\n\t//\n\t// This is a mirror to the case 2. above.\n\t//\n\tif ( b.splitPosition.isEqual( a.insertionPosition ) && context.baRelation == 'splitBefore' ) {\n\t\tconst newPositionPath = b.insertionPosition.path.slice();\n\t\tnewPositionPath.push( 0 );\n\n\t\tconst newPosition = new Position( b.insertionPosition.root, newPositionPath );\n\t\tconst moveOp = new MoveOperation( a.insertionPosition, 1, newPosition, 0 );\n\n\t\treturn [ a, moveOp ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.splitPosition ) && a.splitPosition.offset < b.splitPosition.offset ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedBySplitOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\n// Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/operation/moveoperation~MoveOperation} a\n// @param {module:engine/model/operation/moveoperation~MoveOperation} b\n// @returns {Boolean}\nfunction _moveTargetIntoMovedRange( a, b ) {\n\treturn a.targetPosition._getTransformedByDeletion( b.sourcePosition, b.howMany ) === null;\n}\n\n// Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n// move operations and returns them.\n//\n// Ranges and target position will be transformed on-the-fly when generating operations.\n//\n// Given `ranges` should be in the order of how they were in the original transformed operation.\n//\n// Given `targetPosition` is the target position of the first range from `ranges`.\n//\n// @private\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @param {module:engine/model/position~Position} targetPosition\n// @returns {Array.<module:engine/model/operation/moveoperation~MoveOperation>}\nfunction _makeMoveOperationsFromRanges( ranges, targetPosition ) {\n\t// At this moment we have some ranges and a target position, to which those ranges should be moved.\n\t// Order in `ranges` array is the go-to order of after transformation.\n\t//\n\t// We are almost done. We have `ranges` and `targetPosition` to make operations from.\n\t// Unfortunately, those operations may affect each other. Precisely, first operation after move\n\t// may affect source range and target position of second and third operation. Same with second\n\t// operation affecting third.\n\t//\n\t// We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n\tconst operations = [];\n\n\t// Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t// Create new operation out of a range and target position.\n\t\tconst range = ranges[ i ];\n\t\tconst op = new MoveOperation(\n\t\t\trange.start,\n\t\t\trange.end.offset - range.start.offset,\n\t\t\ttargetPosition,\n\t\t\t0\n\t\t);\n\n\t\toperations.push( op );\n\n\t\t// Transform other ranges by the generated operation.\n\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t// All ranges in `ranges` array should be:\n\t\t\t//\n\t\t\t// * non-intersecting (these are part of original operation source range), and\n\t\t\t// * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n\t\t\t//\n\t\t\t// This means that the transformation will be \"clean\" and always return one result.\n\t\t\tranges[ j ] = ranges[ j ]._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany )[ 0 ];\n\t\t}\n\n\t\ttargetPosition = targetPosition._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany );\n\t}\n\n\treturn operations;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/basecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { transformSets } from '@ckeditor/ckeditor5-engine/src/model/operation/transform';\n\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\nexport default class BaseCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Stack of items stored by the command. These are pairs of:\n\t\t *\n\t\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array} #_stack\n\t\t */\n\t\tthis._stack = [];\n\n\t\t/**\n\t\t * Stores all batches that were created by this command.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n\t\t */\n\t\tthis._createdBatches = new WeakSet();\n\n\t\t// Refresh state, so the command is inactive right after initialization.\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._stack.length > 0;\n\t}\n\n\t/**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch The batch to add.\n\t */\n\taddBatch( batch ) {\n\t\tconst docSelection = this.editor.model.document.selection;\n\n\t\tconst selection = {\n\t\t\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\n\t\t\tisBackward: docSelection.isBackward\n\t\t};\n\n\t\tthis._stack.push( { batch, selection } );\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Removes all items from the stack.\n\t */\n\tclearStack() {\n\t\tthis._stack = [];\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @protected\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations which has been applied\n\t * since selection has been stored.\n\t */\n\t_restoreSelection( ranges, isBackward, operations ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// This will keep the transformed selection ranges.\n\t\tconst selectionRanges = [];\n\n\t\t// Transform all ranges from the restored selection.\n\t\tfor ( const range of ranges ) {\n\t\t\tconst transformed = transformSelectionRange( range, operations );\n\n\t\t\t// For each `range` from `ranges`, we take only one transformed range.\n\t\t\t// This is because we want to prevent situation where single-range selection\n\t\t\t// got transformed to multi-range selection. We will take the first range that\n\t\t\t// is not in the graveyard.\n\t\t\tconst newRange = transformed.find(\n\t\t\t\trange => range.start.root != document.graveyard\n\t\t\t);\n\n\t\t\t// `transformedRange` might be `undefined` if transformed range ended up in graveyard.\n\t\t\tif ( newRange ) {\n\t\t\t\tselectionRanges.push( newRange );\n\t\t\t}\n\t\t}\n\n\t\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\t\tif ( selectionRanges.length ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectionRanges, { backward: isBackward } );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @protected\n\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n\t * @param {module:engine/model/batch~Batch} undoingBatch The batch that will contain undoing changes.\n\t */\n\t_undo( batchToUndo, undoingBatch ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// All changes done by the command execution will be saved as one batch.\n\t\tthis._createdBatches.add( undoingBatch );\n\n\t\tconst operationsToUndo = batchToUndo.operations.slice().filter( operation => operation.isDocumentOperation );\n\t\toperationsToUndo.reverse();\n\n\t\t// We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n\t\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\t\tfor ( const operationToUndo of operationsToUndo ) {\n\t\t\tconst nextBaseVersion = operationToUndo.baseVersion + 1;\n\t\t\tconst historyOperations = Array.from( document.history.getOperations( nextBaseVersion ) );\n\n\t\t\tconst transformedSets = transformSets(\n\t\t\t\t[ operationToUndo.getReversed() ],\n\t\t\t\thistoryOperations,\n\t\t\t\t{\n\t\t\t\t\tuseRelations: true,\n\t\t\t\t\tdocument: this.editor.model.document,\n\t\t\t\t\tpadWithNoOps: false,\n\t\t\t\t\tforceWeakRemove: true\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst reversedOperations = transformedSets.operationsA;\n\n\t\t\t// After reversed operation has been transformed by all history operations, apply it.\n\t\t\tfor ( const operation of reversedOperations ) {\n\t\t\t\t// Before applying, add the operation to the `undoingBatch`.\n\t\t\t\tundoingBatch.addOperation( operation );\n\t\t\t\tmodel.applyOperation( operation );\n\n\t\t\t\tdocument.history.setOperationAsUndone( operationToUndo, operation );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Transforms given range `range` by given `operations`.\n// Returns an array containing one or more ranges, which are result of the transformation.\nfunction transformSelectionRange( range, operations ) {\n\tconst transformed = range.getTransformedByOperations( operations );\n\n\t// After `range` got transformed, we have an array of ranges. Some of those\n\t// ranges may be \"touching\" -- they can be next to each other and could be merged.\n\t// First, we have to sort those ranges to assure that they are in order.\n\ttransformed.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\n\n\t// Then, we check if two consecutive ranges are touching.\n\tfor ( let i = 1; i < transformed.length; i++ ) {\n\t\tconst a = transformed[ i - 1 ];\n\t\tconst b = transformed[ i ];\n\n\t\tif ( a.end.isTouching( b.start ) ) {\n\t\t\t// And join them together if they are.\n\t\t\ta.end = b.end;\n\t\t\ttransformed.splice( i, 1 );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn transformed;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class UndoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n\t */\n\texecute( batch = null ) {\n\t\t// If batch is not given, set `batchIndex` to the last index in command stack.\n\t\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\n\n\t\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\n\t\tconst undoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( undoingBatch, () => {\n\t\t\tthis._undo( item.batch, undoingBatch );\n\n\t\t\tconst operations = this.editor.model.document.history.getOperations( item.batch.baseVersion );\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\n\t\t\tthis.fire( 'revert', item.batch, undoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/redocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class RedoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst item = this._stack.pop();\n\t\tconst redoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n\t\t// operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( redoingBatch, () => {\n\t\t\tconst lastOperation = item.batch.operations[ item.batch.operations.length - 1 ];\n\t\t\tconst nextBaseVersion = lastOperation.baseVersion + 1;\n\t\t\tconst operations = this.editor.model.document.history.getOperations( nextBaseVersion );\n\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\t\t\tthis._undo( item.batch, redoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n\t\t */\n\n\t\t/**\n\t\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n\t\t */\n\n\t\t/**\n\t\t * Keeps track of which batches were registered in undo.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>}\n\t\t */\n\t\tthis._batchRegistry = new WeakSet();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Create commands.\n\t\tthis._undoCommand = new UndoCommand( editor );\n\t\tthis._redoCommand = new RedoCommand( editor );\n\n\t\t// Register command to the editor.\n\t\teditor.commands.add( 'undo', this._undoCommand );\n\t\teditor.commands.add( 'redo', this._redoCommand );\n\n\t\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\t// Do not register batch if the operation is not a document operation.\n\t\t\t// This prevents from creating empty undo steps, where all operations where non-document operations.\n\t\t\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n\t\t\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n\t\t\t// Such operations should not be reversed.\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst batch = operation.batch;\n\n\t\t\tconst isRedoBatch = this._redoCommand._createdBatches.has( batch );\n\t\t\tconst isUndoBatch = this._undoCommand._createdBatches.has( batch );\n\t\t\tconst isRegisteredBatch = this._batchRegistry.has( batch );\n\n\t\t\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\n\t\t\tif ( isRegisteredBatch || ( batch.type == 'transparent' && !isRedoBatch && !isUndoBatch ) ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif ( isRedoBatch ) {\n\t\t\t\t\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t} else if ( !isUndoBatch ) {\n\t\t\t\t\t// A default batch - these are new changes in the document, not introduced by undo feature.\n\t\t\t\t\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t\tthis._redoCommand.clearStack();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the batch to the registry so it will not be processed again.\n\t\t\tthis._batchRegistry.add( batch );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\n\t\t\tthis._redoCommand.addBatch( undoingBatch );\n\t\t} );\n\n\t\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\n\t\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\n\t\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-icon'\n\t\t\t\t],\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/tooltip/tooltipview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/tooltip/tooltip.css';\n\n/**\n * The tooltip view class.\n *\n * @extends module:ui/view~View\n */\nexport default class TooltipView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the tooltip visible to the user.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text', '' );\n\n\t\t/**\n\t\t * The position of the tooltip (south or north).\n\t\t *\n\t\t *\t\t+-----------+\n\t\t *\t\t|   north   |\n\t\t *\t\t+-----------+\n\t\t *\t\t      V\n\t\t *\t\t  [element]\n\t\t *\n\t\t *\t\t  [element]\n\t\t *\t\t      ^\n\t\t *\t\t+-----------+\n\t\t *\t\t|   south   |\n\t\t *\t\t+-----------+\n\t\t *\n\t\t * @observable\n\t\t * @default 's'\n\t\t * @member {'s'|'n'} #position\n\t\t */\n\t\tthis.set( 'position', 's' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-tooltip',\n\t\t\t\t\tbind.to( 'position', position => 'ck-tooltip_' + position ),\n\t\t\t\t\tbind.if( 'text', 'ck-hidden', value => !value.trim() )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-tooltip__text'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'text' ),\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\n\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../../theme/components/button/button.css';\n\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\nexport default class ButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst ariaLabelUid = uid();\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'class' );\n\t\tthis.set( 'labelStyle' );\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'isToggleable', false );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n\t\t */\n\t\tthis.tooltipView = this._createTooltipView();\n\n\t\t/**\n\t\t * Label of the button view. It is configurable using the {@link #label label attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( ariaLabelUid );\n\n\t\t/**\n\t\t * The icon view of the button. Will be added to {@link #children} when the\n\t\t * {@link #icon icon attribute} is defined.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView} #iconView\n\t\t */\n\t\tthis.iconView = new IconView();\n\n\t\tthis.iconView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-button__icon'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Tooltip of the button bound to the template.\n\t\t *\n\t\t * @see #tooltip\n\t\t * @see #_getTooltipString\n\t\t * @private\n\t\t * @observable\n\t\t * @member {Boolean} #_tooltipString\n\t\t */\n\t\tthis.bind( '_tooltipString' ).to(\n\t\t\tthis, 'tooltip',\n\t\t\tthis, 'label',\n\t\t\tthis, 'keystroke',\n\t\t\tthis._getTooltipString.bind( this )\n\t\t);\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'button',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\n\t\t\t\t\tbind.if( 'withText', 'ck-button_with-text' )\n\t\t\t\t],\n\t\t\t\ttype: bind.to( 'type', value => value ? value : 'button' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' ),\n\t\t\t\t'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t\t'aria-disabled': bind.if( 'isEnabled', true, value => !value ),\n\t\t\t\t'aria-pressed': bind.to( 'isOn', value => this.isToggleable ? String( value ) : false )\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( evt => {\n\t\t\t\t\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\n\t\t\t\t\t// Though, shouldn't this condition be moved to the button controller?\n\t\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prevent the default when button is disabled, to block e.g.\n\t\t\t\t\t\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.icon ) {\n\t\t\tthis.iconView.bind( 'content' ).to( this, 'icon' );\n\t\t\tthis.children.add( this.iconView );\n\t\t}\n\n\t\tthis.children.add( this.tooltipView );\n\t\tthis.children.add( this.labelView );\n\t}\n\n\t/**\n\t * Focuses the {@link #element} of the button.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\n\t */\n\t_createTooltipView() {\n\t\tconst tooltipView = new TooltipView();\n\n\t\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\n\t\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\n\n\t\treturn tooltipView;\n\t}\n\n\t/**\n\t * Creates a label view instance and binds it with button attributes.\n\t *\n\t * @private\n\t * @param {String} ariaLabelUid The aria label UID.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createLabelView( ariaLabelUid ) {\n\t\tconst labelView = new View();\n\t\tconst bind = this.bindTemplate;\n\n\t\tlabelView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__label'\n\t\t\t\t],\n\t\t\t\tstyle: bind.to( 'labelStyle' ),\n\t\t\t\tid: `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.bindTemplate.to( 'label' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Gets the text for the {@link #tooltipView} from the combination of\n\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n\t *\n\t * @private\n\t * @see #tooltip\n\t * @see #_tooltipString\n\t * @param {Boolean|String|Function} tooltip Button tooltip.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Button keystroke.\n\t * @returns {String}\n\t */\n\t_getTooltipString( tooltip, label, keystroke ) {\n\t\tif ( tooltip ) {\n\t\t\tif ( typeof tooltip == 'string' ) {\n\t\t\t\treturn tooltip;\n\t\t\t} else {\n\t\t\t\tif ( keystroke ) {\n\t\t\t\t\tkeystroke = getEnvKeystrokeText( keystroke );\n\t\t\t\t}\n\n\t\t\t\tif ( tooltip instanceof Function ) {\n\t\t\t\t\treturn tooltip( label, keystroke );\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? undoIcon : redoIcon;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? redoIcon : undoIcon;\n        this._addButton('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButton('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @private\n\t * @param {String} name Command name.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Command keystroke.\n\t * @param {String} Icon Source of the icon.\n\t */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(name));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undo\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever a {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n *\t\t    History                            Undo stack\n *\t\t==============             ==================================\n *\t\t[operation A1]                         [batch A]\n *\t\t[operation B1]                         [batch B]\n *\t\t[operation B2]                         [batch C]\n *\t\t[operation C1]\n *\t\t[operation C2]\n *\t\t[operation B3]\n *\t\t[operation C3]\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n *\t\t     History                             Undo stack\n *\t\t=================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]             [   processing undoing batch C   ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]                      [ batch Crr ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\t\t[ operation C1'r]\n *\t\t[ operation C2'r]\n *\t\t[ operation C3rr]\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Undo extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ UndoEditing, UndoUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Undo';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/blockautoformatediting\n */\n\nimport LiveRange from '@ckeditor/ckeditor5-engine/src/model/liverange';\n\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class BlockAutoformatEditing {\n\t/**\n\t * Creates a listener triggered on `change` event in the document.\n\t * Calls the callback when inserted text matches the regular expression or the command name\n\t * if provided instead of the callback.\n\t *\n\t * Examples of usage:\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the command name:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, 'heading1' );\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the callback:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, ( context ) => {\n\t *\t\t\tconst { match } = context;\n\t *\t\t\tconst headingLevel = match[ 1 ].length;\n\t *\n\t *\t\t\teditor.execute( 'heading', {\n\t *\t\t\t\tformatId: `heading${ headingLevel }`\n\t *\t\t\t} );\n\t * \t\t} );\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {RegExp} pattern The regular expression to execute on just inserted text.\n\t * @param {Function|String} callbackOrCommand The callback to execute or the command to run when the text is matched.\n\t * In case of providing the callback, it receives the following parameter:\n\t * * {Object} match RegExp.exec() result of matching the pattern to inserted text.\n\t */\n\tconstructor( editor, pattern, callbackOrCommand ) {\n\t\tlet callback;\n\t\tlet command = null;\n\n\t\tif ( typeof callbackOrCommand == 'function' ) {\n\t\t\tcallback = callbackOrCommand;\n\t\t} else {\n\t\t\t// We assume that the actual command name was provided.\n\t\t\tcommand = editor.commands.get( callbackOrCommand );\n\n\t\t\tcallback = () => {\n\t\t\t\teditor.execute( callbackOrCommand );\n\t\t\t};\n\t\t}\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( command && !command.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( editor.model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst item = entry.position.textNode || entry.position.nodeAfter;\n\n\t\t\tif ( !item.parent.is( 'paragraph' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = pattern.exec( item.data );\n\n\t\t\tif ( !match ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\t// Matched range.\n\t\t\t\tconst start = writer.createPositionAt( item.parent, 0 );\n\t\t\t\tconst end = writer.createPositionAt( item.parent, match[ 0 ].length );\n\t\t\t\tconst range = new LiveRange( start, end );\n\n\t\t\t\tconst wasChanged = callback( { match } );\n\n\t\t\t\t// Remove matched text.\n\t\t\t\tif ( wasChanged !== false ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\n\t\t\t\trange.detach();\n\t\t\t} );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/inlineautoformatediting\n */\n\n/**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class InlineAutoformatEditing {\n\t/**\n\t * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n\t *\n\t * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n\t * On every change applied to the model the autoformatting engine checks the text on the left of the selection\n\t * and executes the provided action if the text matches given criteria (regular expression or callback).\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\n\t * Provided regular expression *must* have three capture groups. The first and the third capture group\n\t * should match opening and closing delimiters. The second capture group should match the text to format.\n\t *\n\t *\t\t// Matches the `**bold text**` pattern.\n\t *\t\t// There are three capturing groups:\n\t *\t\t// - The first to match the starting `**` delimiter.\n\t *\t\t// - The second to match the text to format.\n\t *\t\t// - The third to match the ending `**` delimiter.\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n\t * The function should return proper \"ranges\" to delete and format.\n\t *\n\t *\t\t{\n\t *\t\t\tremove: [\n\t *\t\t\t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n\t *\t\t\t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n\t *\t\t\t],\n\t *\t\t\tformat: [\n\t *\t\t\t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n\t *\t\t\t]\n\t *\t\t}\n\t *\n\t * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\n\t * formatting. If callback is passed it should return `false` if changes should not be applied (e.g. if a command is disabled).\n\t *\n\t *\t\t// Use attribute name:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t *\t\t// Use formatting callback:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, rangesToFormat ) => {\n\t *\t\t\tconst command = editor.commands.get( 'bold' );\n\t *\n\t *\t\t\tif ( !command.isEnabled ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, 'bold' );\n\t *\n\t *\t\t\tfor ( let range of validRanges ) {\n\t *\t\t\t\twriter.setAttribute( 'bold', true, range );\n\t *\t\t\t}\n\t *\t\t} );\n\t */\n\tconstructor( editor, testRegexpOrCallback, attributeOrCallback ) {\n\t\tlet regExp;\n\t\tlet attributeKey;\n\t\tlet testCallback;\n\t\tlet formatCallback;\n\n\t\tif ( testRegexpOrCallback instanceof RegExp ) {\n\t\t\tregExp = testRegexpOrCallback;\n\t\t} else {\n\t\t\ttestCallback = testRegexpOrCallback;\n\t\t}\n\n\t\tif ( typeof attributeOrCallback == 'string' ) {\n\t\t\tattributeKey = attributeOrCallback;\n\t\t} else {\n\t\t\tformatCallback = attributeOrCallback;\n\t\t}\n\n\t\t// A test callback run on changed text.\n\t\ttestCallback = testCallback || ( text => {\n\t\t\tlet result;\n\t\t\tconst remove = [];\n\t\t\tconst format = [];\n\n\t\t\twhile ( ( result = regExp.exec( text ) ) !== null ) {\n\t\t\t\t// There should be full match and 3 capture groups.\n\t\t\t\tif ( result && result.length < 4 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet {\n\t\t\t\t\tindex,\n\t\t\t\t\t'1': leftDel,\n\t\t\t\t\t'2': content,\n\t\t\t\t\t'3': rightDel\n\t\t\t\t} = result;\n\n\t\t\t\t// Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n\t\t\t\tconst found = leftDel + content + rightDel;\n\t\t\t\tindex += result[ 0 ].length - found.length;\n\n\t\t\t\t// Start and End offsets of delimiters to remove.\n\t\t\t\tconst delStart = [\n\t\t\t\t\tindex,\n\t\t\t\t\tindex + leftDel.length\n\t\t\t\t];\n\t\t\t\tconst delEnd = [\n\t\t\t\t\tindex + leftDel.length + content.length,\n\t\t\t\t\tindex + leftDel.length + content.length + rightDel.length\n\t\t\t\t];\n\n\t\t\t\tremove.push( delStart );\n\t\t\t\tremove.push( delEnd );\n\n\t\t\t\tformat.push( [ index + leftDel.length, index + leftDel.length + content.length ] );\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tremove,\n\t\t\t\tformat\n\t\t\t};\n\t\t} );\n\n\t\t// A format callback run on matched text.\n\t\tformatCallback = formatCallback || ( ( writer, rangesToFormat ) => {\n\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\t\tfor ( const range of validRanges ) {\n\t\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t\t}\n\n\t\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\t\twriter.removeSelectionAttribute( attributeKey );\n\t\t} );\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\t// Do nothing if selection is not collapsed.\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( editor.model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst block = selection.focus.parent;\n\t\t\tconst text = getText( block ).slice( 0, selection.focus.offset );\n\t\t\tconst testOutput = testCallback( text );\n\t\t\tconst rangesToFormat = testOutputToRanges( block, testOutput.format, editor.model );\n\t\t\tconst rangesToRemove = testOutputToRanges( block, testOutput.remove, editor.model );\n\n\t\t\tif ( !( rangesToFormat.length && rangesToRemove.length ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\t// Apply format.\n\t\t\t\tconst hasChanged = formatCallback( writer, rangesToFormat );\n\n\t\t\t\t// Strict check on `false` to have backward compatibility (when callbacks were returning `undefined`).\n\t\t\t\tif ( hasChanged === false ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove delimiters - use reversed order to not mix the offsets while removing.\n\t\t\t\tfor ( const range of rangesToRemove.reverse() ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n// Returns whole text from parent element by adding all data from text nodes together.\n//\n// @private\n// @param {module:engine/model/element~Element} element\n// @returns {String}\nfunction getText( element ) {\n\treturn Array.from( element.getChildren() ).reduce( ( a, b ) => a + b.data, '' );\n}\n\n// Converts output of the test function provided to the InlineAutoformatEditing and converts it to the model ranges\n// inside provided block.\n//\n// @private\n// @param {module:engine/model/element~Element} block\n// @param {Array.<Array>} arrays\n// @param {module:engine/model/model~Model} model\nfunction testOutputToRanges( block, arrays, model ) {\n\treturn arrays\n\t\t.filter( array => ( array[ 0 ] !== undefined && array[ 1 ] !== undefined ) )\n\t\t.map( array => {\n\t\t\treturn model.createRange( model.createPositionAt( block, array[ 0 ] ), model.createPositionAt( block, array[ 1 ] ) );\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^1[.|)]\\s$/, 'numberedList' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst boldCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'bold' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, boldCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst italicCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'italic' );\n\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, italicCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, italicCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst codeCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'code' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, codeCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with value `heading1` will be executed when typing `#`,\n\t * * `heading` with value `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tconst command = this.editor.commands.get( 'heading' );\n\n\t\tif ( command ) {\n\t\t\tcommand.modelElements\n\t\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t\t.forEach( commandValue => {\n\t\t\t\t\tconst level = commandValue[ 7 ];\n\t\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t\t// eslint-disable-next-line no-new\n\t\t\t\t\tnew BlockAutoformatEditing( this.editor, pattern, () => {\n\t\t\t\t\t\tif ( !command.isEnabled ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editor.execute( 'heading', { value: commandValue } );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n}\n\n// Helper function for getting `InlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\nfunction getCallbackFunctionForInlineAutoformat( editor, attributeKey ) {\n\treturn ( writer, rangesToFormat ) => {\n\t\tconst command = editor.commands.get( attributeKey );\n\n\t\tif ( !command.isEnabled ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\tfor ( const range of validRanges ) {\n\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t}\n\n\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\twriter.removeSelectionAttribute( attributeKey );\n\t};\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.627 16.5zm5.873-.196zm0-7.001V8h-13v8.5h4.341c.191.54.457 1.044.785 1.5H2a1.5 1.5 0 0 1-1.5-1.5v-13A1.5 1.5 0 0 1 2 2h4.5a1.5 1.5 0 0 1 1.06.44L9.122 4H16a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 19 8v2.531a6.027 6.027 0 0 0-1.5-1.228zM16 6.5v-1H8.5l-2-2H2v13h1V8a1.5 1.5 0 0 1 1.5-1.5H16z\\\"/><path d=\\\"M14.5 19.5a5 5 0 1 1 0-10 5 5 0 0 1 0 10zM15 14v-2h-1v2h-2v1h2v2h1v-2h2v-1h-2z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ckfinder/ckfinderui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport browseFilesIcon from '../theme/icons/browse-files.svg';\n/**\n * The CKFinder UI plugin. It introduces he `'ckfinder'` toolbar button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'CKFinderUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const componentFactory = editor.ui.componentFactory;\n        const t = editor.t;\n        componentFactory.add('ckfinder', locale => {\n            const command = editor.commands.get('ckfinder');\n            const button = new ButtonView(locale);\n            button.set({\n                label: t('Insert image or file'),\n                icon: browseFilesIcon,\n                tooltip: true\n            });\n            button.bind('isEnabled').to(command);\n            button.on('execute', () => {\n                editor.execute('ckfinder');\n                editor.editing.view.focus();\n            });\n            return button;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The Notification plugin.\n *\n * This plugin sends a few types of notifications: `success`, `info` and `warning`. The notifications need to be\n * handled and displayed by a plugin responsible for showing the UI of the notifications. Using this plugin for dispatching\n * notifications makes it possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as a system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Notification extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Notification';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Each unhandled and not stopped `show:warning` event is displayed as a system alert.\n\t\tthis.on( 'show:warning', ( evt, data ) => {\n\t\t\twindow.alert( data.message ); // eslint-disable-line no-alert\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Shows a success notification.\n\t *\n\t * By default, it fires the {@link #event:show:success `show:success` event} with the given `data`. The event namespace can be extended\n\t * using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowSuccess( 'Image is uploaded.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire the `show:success:upload:image` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowSuccess( 'Image is uploaded.', {\n\t *\t\t\ttitle: 'Image upload success'\n\t *\t\t} );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowSuccess( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'success',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows an information notification.\n\t *\n\t * By default, it fires the {@link #event:show:info `show:info` event} with the given `data`. The event namespace can be extended\n\t * using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowInfo( 'Editor is offline.', {\n\t * \t\t\tnamespace: 'editor:status'\n\t * \t\t} );\n\t *\n\t * will fire the `show:info:editor:status` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowInfo( 'Editor is offline.', {\n\t *\t\t\ttitle: 'Network information'\n\t *\t\t} );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowInfo( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'info',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows a warning notification.\n\t *\n\t * By default, it fires the {@link #event:show:warning `show:warning` event}\n\t * with the given `data`. The event namespace can be extended using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowWarning( 'Image upload error.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire the `show:warning:upload:image` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowWarning( 'Image upload error.', {\n\t *\t\t\ttitle: 'Upload failed'\n\t *\t\t} );\n\t *\n\t * Note that each unhandled and not stopped `warning` notification will be displayed as a system alert.\n\t * The plugin responsible for displaying warnings should `stop()` the event to prevent displaying it as an alert:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Do something with the data.\n\t *\n\t * \t\t\t// Stop this event to prevent displaying it as an alert.\n\t * \t\t\tevt.stop();\n\t * \t\t} );\n\t *\n\t * You can attach many listeners to the same event and `stop()` this event in a listener with a low priority:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Show the warning in the UI, but do not stop it.\n\t * \t\t} );\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Log the warning to some error tracker.\n\t *\n\t * \t\t\t// Stop this event to prevent displaying it as an alert.\n\t * \t\t\tevt.stop();\n\t * \t\t}, { priority: 'low' } );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowWarning( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `show` event with the specified type, namespace and message.\n\t *\n\t * @private\n\t * @param {Object} data The message data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {'success'|'info'|'warning'} data.type The type of the message.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title=''] The title of the notification.\n\t */\n\t_showNotification( data ) {\n\t\tconst event = `show:${ data.type }` + ( data.namespace ? `:${ data.namespace }` : '' );\n\n\t\tthis.fire( event, {\n\t\t\tmessage: data.message,\n\t\t\ttype: data.type,\n\t\t\ttitle: data.title || ''\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when one of the `showSuccess()`, `showInfo()`, `showWarning()` methods is called.\n\t *\n\t * @event show\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'success'|'info'|'warning'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showSuccess()` method is called.\n\t *\n\t * @event show:success\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'success'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showInfo()` method is called.\n\t *\n\t * @event show:info\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'info'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showWarning()` method is called.\n\t *\n\t * When this event is not handled or stopped by `event.stop()`, the `data.message` of this event will\n\t * be automatically displayed as a system alert.\n\t *\n\t * @event show:warning\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'warning'} data.type The type of the notification.\n\t */\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global window */\n/**\n * @module ckfinder/ckfindercommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The CKFinder command. It is used by the {@link module:ckfinder/ckfinderediting~CKFinderEditing ckfinder editng feature}\n * to open a CKFinder file browser to insert an image or a link to a file into content.\n *\n *\t\teditor.execute( 'ckfinder' );\n *\n * @extends module:core/command~Command\n */\nexport default class CKFinderCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        // Remove default document listener to lower its priority.\n        this.stopListening(this.editor.model.document, 'change');\n        // Lower this command listener priority to be sure that refresh() will be called after link & image refresh.\n        this.listenTo(this.editor.model.document, 'change', () => this.refresh(), { priority: 'low' });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    refresh() {\n        const imageCommand = this.editor.commands.get('imageUpload');\n        const linkCommand = this.editor.commands.get('link');\n        // The CKFinder command is enabled when one of image or link command is enabled.\n        this.isEnabled = imageCommand && linkCommand && (imageCommand.isEnabled || linkCommand.isEnabled);\n    }\n    /**\n\t * @inheritDoc\n\t */\n    execute() {\n        const editor = this.editor;\n        const openerMethod = this.editor.config.get('ckfinder.openerMethod') || 'modal';\n        if (openerMethod != 'popup' && openerMethod != 'modal') {\n            throw new CKEditorError('ckfinder-unknown-openerMethod: The openerMethod config option must by \"popup\" or \"modal\".', editor);\n        }\n        const options = this.editor.config.get('ckfinder.options') || {};\n        options.chooseFiles = true;\n        // Cache the user-defined onInit method\n        const originalOnInit = options.onInit;\n        // Pass the lang code to the CKFinder if not defined by user.\n        if (!options.language) {\n            options.language = editor.locale.uiLanguage;\n        }\n        // The onInit method allows to extend CKFinder's behavior. It is used to attach event listeners to file choosing related events.\n        options.onInit = finder => {\n            // Call original options.onInit if it was defined by user.\n            if (originalOnInit) {\n                originalOnInit(finder);\n            }\n            finder.on('files:choose', evt => {\n                const files = evt.data.files.toArray();\n                // Insert links\n                const links = files.filter(file => !file.isImage());\n                const images = files.filter(file => file.isImage());\n                for (const linkFile of links) {\n                    editor.execute('link', linkFile.getUrl());\n                }\n                const imagesUrls = [];\n                for (const image of images) {\n                    const url = image.getUrl();\n                    imagesUrls.push(url ? url : finder.request('file:getProxyUrl', { file: image }));\n                }\n                if (imagesUrls.length) {\n                    insertImages(editor, imagesUrls);\n                }\n            });\n            finder.on('file:choose:resizedImage', evt => {\n                const resizedUrl = evt.data.resizedUrl;\n                if (!resizedUrl) {\n                    const notification = editor.plugins.get('Notification');\n                    const t = editor.locale.t;\n                    notification.showWarning(t('Could not obtain resized image URL.'), {\n                        title: t('Selecting resized image failed'),\n                        namespace: 'ckfinder'\n                    });\n                    return;\n                }\n                insertImages(editor, [resizedUrl]);\n            });\n        };\n        window.CKFinder[openerMethod](options);\n    }\n}\nfunction insertImages(editor, urls) {\n    const imageCommand = editor.commands.get('imageUpload');\n    // Check if inserting an image is actually possible - it might be possible to only insert a link.\n    if (!imageCommand.isEnabled) {\n        const notification = editor.plugins.get('Notification');\n        const t = editor.locale.t;\n        notification.showWarning(t('Could not insert image at the current position.'), {\n            title: t('Inserting image failed'),\n            namespace: 'ckfinder'\n        });\n        return;\n    }\n    editor.execute('imageInsert', { source: urls });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ckfinder/ckfinderediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\n\nimport CKFinderCommand from './ckfindercommand';\n\n/**\n * The CKFinder editing feature. It introduces the {@link module:ckfinder/ckfindercommand~CKFinderCommand ckfinder command}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CKFinderEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Notification ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.commands.add( 'ckfinder', new CKFinderCommand( editor ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/pendingactions\n */\n\nimport Plugin from './plugin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n *\t\t// You can update the message:\n * \t\taction.message = 'Upload in progress: 10%.';\n *\n * Removing a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Unsaved changes.' );\n *\n * \t\tpendingActions.remove( action );\n *\n * Getting pending actions:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * \t\tconst action1 = pendingActions.add( 'Action 1' );\n * \t\tconst action2 = pendingActions.add( 'Action 2' );\n *\n * \t\tpendingActions.first; // Returns action1\n * \t\tArray.from( pendingActions ); // Returns [ action1, action2 ]\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink builds/guides/integration/saving-data Saving and getting data} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class PendingActions extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'PendingActions';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * Defines whether there is any registered pending action.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #hasAny\n\t\t */\n\t\tthis.set( 'hasAny', false );\n\n\t\t/**\n\t\t * A list of pending actions.\n\t\t *\n\t\t * @private\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis._actions = new Collection( { idProperty: '_id' } );\n\t\tthis._actions.delegate( 'add', 'remove' ).to( this );\n\t}\n\n\t/**\n\t * Adds an action to the list of pending actions.\n\t *\n\t * This method returns an action object with an observable message property.\n\t * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n\t *\n\t * @param {String} message The action message.\n\t * @returns {Object} An observable object that represents a pending action.\n\t */\n\tadd( message ) {\n\t\tif ( typeof message !== 'string' ) {\n\t\t\t/**\n\t\t\t * The message must be a string.\n\t\t\t *\n\t\t\t * @error pendingactions-add-invalid-message\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'pendingactions-add-invalid-message: The message must be a string.', this );\n\t\t}\n\n\t\tconst action = Object.create( ObservableMixin );\n\n\t\taction.set( 'message', message );\n\t\tthis._actions.add( action );\n\t\tthis.hasAny = true;\n\n\t\treturn action;\n\t}\n\n\t/**\n\t * Removes an action from the list of pending actions.\n\t *\n\t * @param {Object} action An action object.\n\t */\n\tremove( action ) {\n\t\tthis._actions.remove( action );\n\t\tthis.hasAny = !!this._actions.length;\n\t}\n\n\t/**\n\t * Returns the first action from the list or null when list is empty\n\t *\n\t * returns {Object|null} The pending action object.\n\t */\n\tget first() {\n\t\treturn this._actions.get( 0 );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._actions[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an action is added to the list.\n\t *\n\t * @event add\n\t * @param {Object} action The added action.\n\t */\n\n\t/**\n\t * Fired when an action is removed from the list.\n\t *\n\t * @event remove\n\t * @param {Object} action The removed action.\n\t */\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Wrapper over the native `FileReader`.\n */\nexport default class FileReader {\n\t/**\n\t * Creates an instance of the FileReader.\n\t */\n\tconstructor() {\n\t\tconst reader = new window.FileReader();\n\n\t\t/**\n\t\t * Instance of native FileReader.\n\t\t *\n\t\t * @private\n\t\t * @member {FileReader} #_reader\n\t\t */\n\t\tthis._reader = reader;\n\n\t\tthis._data = undefined;\n\n\t\t/**\n\t\t * Number of bytes loaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #loaded\n\t\t */\n\t\tthis.set( 'loaded', 0 );\n\n\t\treader.onprogress = evt => {\n\t\t\tthis.loaded = evt.loaded;\n\t\t};\n\t}\n\n\t/**\n\t * Returns error that occurred during file reading.\n\t *\n\t * @returns {Error}\n\t */\n\tget error() {\n\t\treturn this._reader.error;\n\t}\n\n\t/**\n\t * Holds the data of an already loaded file. The file must be first loaded\n\t * by using {@link module:upload/filereader~FileReader#read `read()`}.\n\t *\n\t * @type {File|undefined}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Reads the provided file.\n\t *\n\t * @param {File} file Native File object.\n\t * @returns {Promise.<String>} Returns a promise that will be resolved with file's content.\n\t * The promise will be rejected in case of an error or when the reading process is aborted.\n\t */\n\tread( file ) {\n\t\tconst reader = this._reader;\n\t\tthis.total = file.size;\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\treader.onload = () => {\n\t\t\t\tconst result = reader.result;\n\n\t\t\t\tthis._data = result;\n\n\t\t\t\tresolve( result );\n\t\t\t};\n\n\t\t\treader.onerror = () => {\n\t\t\t\treject( 'error' );\n\t\t\t};\n\n\t\t\treader.onabort = () => {\n\t\t\t\treject( 'aborted' );\n\t\t\t};\n\n\t\t\tthis._reader.readAsDataURL( file );\n\t\t} );\n\t}\n\n\t/**\n\t * Aborts file reader.\n\t */\n\tabort() {\n\t\tthis._reader.abort();\n\t}\n}\n\nmix( FileReader, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module upload/filerepository\n */\n/* globals console */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport PendingActions from '@ckeditor/ckeditor5-core/src/pendingactions';\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport FileReader from './filereader.js';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one – see\n * the {@glink framework/guides/deep-dive/upload-adapter \"Custom image upload adapter\" deep dive guide}.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FileRepository extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'FileRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [PendingActions];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        /**\n\t\t * Collection of loaders associated with this repository.\n\t\t *\n\t\t * @member {module:utils/collection~Collection} #loaders\n\t\t */\n        this.loaders = new Collection();\n        // Keeps upload in a sync with pending actions.\n        this.loaders.on('add', () => this._updatePendingAction());\n        this.loaders.on('remove', () => this._updatePendingAction());\n        /**\n\t\t * Loaders mappings used to retrieve loaders references.\n\t\t *\n\t\t * @private\n\t\t * @member {Map<File|Promise, FileLoader>} #_loadersMap\n\t\t */\n        this._loadersMap = new Map();\n        /**\n\t\t * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n\t\t * while upload is in progress. When there is no upload then value is `null`.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_pendingAction\n\t\t */\n        this._pendingAction = null;\n        /**\n\t\t * A factory function which should be defined before using `FileRepository`.\n\t\t *\n\t\t * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\n\t\t * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\n\t\t * will be passed to that function.\n\t\t *\n\t\t * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\n\t\t *\n\t\t * @member {Function} #createUploadAdapter\n\t\t */\n        /**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n        this.set('uploaded', 0);\n        /**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * It might be different than the file size because of headers and additional data.\n\t\t * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\n\t\t * the progress.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n        this.set('uploadTotal', null);\n        /**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? uploaded / total * 100 : 0;\n        });\n    }\n    /**\n\t * Returns the loader associated with specified file or promise.\n\t *\n\t * To get loader by id use `fileRepository.loaders.get( id )`.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native file or promise handle.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n    getLoader(fileOrPromise) {\n        return this._loadersMap.get(fileOrPromise) || null;\n    }\n    /**\n\t * Creates a loader instance for the given file.\n\t *\n\t * Requires {@link #createUploadAdapter} factory to be defined.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native File object or native Promise object which resolves to a File.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n    createLoader(fileOrPromise) {\n        if (!this.createUploadAdapter) {\n            /**\n\t\t\t * You need to enable an upload adapter in order to be able to upload files.\n\t\t\t *\n\t\t\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n\t\t\t * without {@link #createUploadAdapter definining an upload adapter}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\n\t\t\t * it means that you did not configure any of the upload adapters available by default in those builds.\n\t\t\t *\n\t\t\t * See the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n\t\t\t * adapters are available in the builds and how to configure them.\n\t\t\t *\n\t\t\t * **If you see this warning when using a custom build** there is a chance that you enabled\n\t\t\t * a feature like {@link module:image/imageupload~ImageUpload},\n\t\t\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n\t\t\t * You can choose one of the existing upload adapters listed in the\n\t\t\t * {@glink features/image-upload/image-upload \"Image upload overview\"}.\n\t\t\t *\n\t\t\t * You can also implement your {@glink framework/guides/deep-dive/upload-adapter own image upload adapter}.\n\t\t\t *\n\t\t\t * @error filerepository-no-upload-adapter\n\t\t\t */\n            console.warn(attachLinkToDocumentation('filerepository-no-upload-adapter: Upload adapter is not defined.'));\n            return null;\n        }\n        const loader = new FileLoader(Promise.resolve(fileOrPromise), this.createUploadAdapter);\n        this.loaders.add(loader);\n        this._loadersMap.set(fileOrPromise, loader);\n        // Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n        if (fileOrPromise instanceof Promise) {\n            loader.file.then(file => {\n                this._loadersMap.set(file, loader);\n            });\n        }\n        // Catch the file promise rejection. If there are no `catch` clause, the browser\n        // will throw an error (see https://github.com/ckeditor/ckeditor5-upload/pull/90).\n        loader.file.catch(() => {\n        });\n        loader.on('change:uploaded', () => {\n            let aggregatedUploaded = 0;\n            for (const loader of this.loaders) {\n                aggregatedUploaded += loader.uploaded;\n            }\n            this.uploaded = aggregatedUploaded;\n        });\n        loader.on('change:uploadTotal', () => {\n            let aggregatedTotal = 0;\n            for (const loader of this.loaders) {\n                if (loader.uploadTotal) {\n                    aggregatedTotal += loader.uploadTotal;\n                }\n            }\n            this.uploadTotal = aggregatedTotal;\n        });\n        return loader;\n    }\n    /**\n\t * Destroys the given loader.\n\t *\n\t * @param {File|Promise|module:upload/filerepository~FileLoader} fileOrPromiseOrLoader File or Promise associated\n\t * with that loader or loader itself.\n\t */\n    destroyLoader(fileOrPromiseOrLoader) {\n        const loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader(fileOrPromiseOrLoader);\n        loader._destroy();\n        this.loaders.remove(loader);\n        this._loadersMap.forEach((value, key) => {\n            if (value === loader) {\n                this._loadersMap.delete(key);\n            }\n        });\n    }\n    /**\n\t * Registers or deregisters pending action bound with upload progress.\n\t *\n\t * @private\n\t */\n    _updatePendingAction() {\n        const pendingActions = this.editor.plugins.get(PendingActions);\n        if (this.loaders.length) {\n            if (!this._pendingAction) {\n                const t = this.editor.t;\n                const getMessage = value => `${ t('Upload in progress') } ${ parseInt(value) }%.`;\n                this._pendingAction = pendingActions.add(getMessage(this.uploadedPercent));\n                this._pendingAction.bind('message').to(this, 'uploadedPercent', getMessage);\n            }\n        } else {\n            pendingActions.remove(this._pendingAction);\n            this._pendingAction = null;\n        }\n    }\n}\nmix(FileRepository, ObservableMixin);\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */\nclass FileLoader {\n    /**\n\t * Creates a new instance of `FileLoader`.\n\t *\n\t * @param {Promise.<File>} filePromise A promise which resolves to a file instance.\n\t * @param {Function} uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n\t */\n    constructor(filePromise, uploadAdapterCreator) {\n        /**\n\t\t * Unique id of FileLoader instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n        this.id = uid();\n        /**\n\t\t * Additional wrapper over the initial file promise passed to this loader.\n\t\t *\n\t\t * @private\n\t\t * @member {module:upload/filerepository~FilePromiseWrapper}\n\t\t */\n        this._filePromiseWrapper = this._createFilePromiseWrapper(filePromise);\n        /**\n\t\t * Adapter instance associated with this file loader.\n\t\t *\n\t\t * @private\n\t\t * @member {module:upload/filerepository~UploadAdapter}\n\t\t */\n        this._adapter = uploadAdapterCreator(this);\n        /**\n\t\t * FileReader used by FileLoader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filereader~FileReader}\n\t\t */\n        this._reader = new FileReader();\n        /**\n\t\t * Current status of FileLoader. It can be one of the following:\n\t\t *\n\t\t * * 'idle',\n\t\t * * 'reading',\n\t\t * * 'uploading',\n\t\t * * 'aborted',\n\t\t * * 'error'.\n\t\t *\n\t\t * When reading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `reading` -> `idle`\n\t\t * `idle` -> `reading -> `aborted`\n\t\t * `idle` -> `reading -> `error`\n\t\t *\n\t\t * When uploading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `uploading` -> `idle`\n\t\t * `idle` -> `uploading` -> `aborted`\n\t\t * `idle` -> `uploading` -> `error`\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #status\n\t\t */\n        this.set('status', 'idle');\n        /**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n        this.set('uploaded', 0);\n        /**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n        this.set('uploadTotal', null);\n        /**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? uploaded / total * 100 : 0;\n        });\n        /**\n\t\t * Response of the upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object|null} #uploadResponse\n\t\t */\n        this.set('uploadResponse', null);\n    }\n    /**\n\t * A `Promise` which resolves to a `File` instance associated with this file loader.\n\t *\n\t * @type {Promise.<File|null>}\n\t */\n    get file() {\n        if (!this._filePromiseWrapper) {\n            // Loader was destroyed, return promise which resolves to null.\n            return Promise.resolve(null);\n        } else {\n            // The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n            //\n            //\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n            //\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n            //\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n            //\n            // Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n            // is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n            return this._filePromiseWrapper.promise.then(file => this._filePromiseWrapper ? file : null);\n        }\n    }\n    /**\n\t * Returns the file data. To read its data, you need for first load the file\n\t * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n\t *\n\t * @type {File|undefined}\n\t */\n    get data() {\n        return this._reader.data;\n    }\n    /**\n\t * Reads file using {@link module:upload/filereader~FileReader}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n\t * is different than `idle`.\n\t *\n\t * Example usage:\n\t *\n\t *\tfileLoader.read()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( err => {\n\t *\t\t\tif ( err === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Reading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Reading error.', err );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<String>} Returns promise that will be resolved with read data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n    read() {\n        if (this.status != 'idle') {\n            throw new CKEditorError('filerepository-read-wrong-status: You cannot call read if the status is different than idle.', this);\n        }\n        this.status = 'reading';\n        return this._filePromiseWrapper.promise.then(file => this._reader.read(file)).then(data => {\n            this.status = 'idle';\n            return data;\n        }).catch(err => {\n            if (err === 'aborted') {\n                this.status = 'aborted';\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw this._reader.error ? this._reader.error : err;\n        });\n    }\n    /**\n\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n\t * is different than `idle`.\n\t * Example usage:\n\t *\n\t *\tfileLoader.upload()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( e => {\n\t *\t\t\tif ( e === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Uploading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Uploading error.', e );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<Object>} Returns promise that will be resolved with response data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n    upload() {\n        if (this.status != 'idle') {\n            throw new CKEditorError('filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.', this);\n        }\n        this.status = 'uploading';\n        return this._filePromiseWrapper.promise.then(() => this._adapter.upload()).then(data => {\n            this.uploadResponse = data;\n            this.status = 'idle';\n            return data;\n        }).catch(err => {\n            if (this.status === 'aborted') {\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw err;\n        });\n    }\n    /**\n\t * Aborts loading process.\n\t */\n    abort() {\n        const status = this.status;\n        this.status = 'aborted';\n        if (!this._filePromiseWrapper.isFulfilled) {\n            this._filePromiseWrapper.rejecter('aborted');\n        } else if (status == 'reading') {\n            this._reader.abort();\n        } else if (status == 'uploading' && this._adapter.abort) {\n            this._adapter.abort();\n        }\n        this._destroy();\n    }\n    /**\n\t * Performs cleanup.\n\t *\n\t * @private\n\t */\n    _destroy() {\n        this._filePromiseWrapper = undefined;\n        this._reader = undefined;\n        this._adapter = undefined;\n        this.uploadResponse = undefined;\n    }\n    /**\n\t * Wraps a given file promise into another promise giving additional\n\t * control (resolving, rejecting, checking if fulfilled) over it.\n\t *\n\t * @private\n\t * @param filePromise The initial file promise to be wrapped.\n\t * @returns {module:upload/filerepository~FilePromiseWrapper}\n\t */\n    _createFilePromiseWrapper(filePromise) {\n        const wrapper = {};\n        wrapper.promise = new Promise((resolve, reject) => {\n            wrapper.resolver = resolve;\n            wrapper.rejecter = reject;\n            wrapper.isFulfilled = false;\n            filePromise.then(file => {\n                wrapper.isFulfilled = true;\n                resolve(file);\n            }).catch(err => {\n                wrapper.isFulfilled = true;\n                reject(err);\n            });\n        });\n        return wrapper;\n    }\n}\nmix(FileLoader, ObservableMixin);    /**\n * Upload adapter interface used by the {@link module:upload/filerepository~FileRepository file repository}\n * to handle file upload. An upload adapter is a bridge between the editor and server that handles file uploads.\n * It should contain a logic necessary to initiate an upload process and monitor its progress.\n *\n * Learn how to develop your own upload adapter for CKEditor 5 in the\n * {@glink framework/guides/deep-dive/upload-adapter \"Custom upload adapter\" guide}.\n *\n * @interface UploadAdapter\n */\n                                     /**\n * Executes the upload process.\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\n * resolved with an object containing information about uploaded file:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png'\n *\t\t}\n *\n * Additionally, other image sizes can be provided:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png',\n *\t\t\t'160': 'http://server/size-160.image.png',\n *\t\t\t'500': 'http://server/size-500.image.png',\n *\t\t\t'1000': 'http://server/size-1000.image.png',\n *\t\t\t'1052': 'http://server/default-size.image.png'\n *\t\t}\n *\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\n * correctly set `width` attribute of the image. See this discussion:\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#upload\n * @returns {Promise.<Object>} Promise that should be resolved when data is uploaded.\n */\n                                     /**\n * Aborts the upload process.\n * After aborting it should reject promise returned from {@link #upload upload()}.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#abort\n */\n                                     /**\n * Object returned by {@link module:upload/filerepository~FileLoader#_createFilePromiseWrapper} method\n * to add more control over the initial file promise passed to {@link module:upload/filerepository~FileLoader}.\n *\n * @typedef {Object} module:upload/filerepository~FilePromiseWrapper\n * @property {Promise.<File>} promise Wrapper promise which can be chained for further processing.\n * @property {Function} resolver Resolves the promise when called.\n * @property {Function} rejecter Rejects the promise when called.\n * @property {Boolean} isFulfilled Whether original promise is already fulfilled.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module adapter-ckfinder/utils\n */\n\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n *\n * @returns {String}\n */\nexport function getCsrfToken() {\n\tlet token = getCookie( TOKEN_COOKIE_NAME );\n\n\tif ( !token || token.length != TOKEN_LENGTH ) {\n\t\ttoken = generateToken( TOKEN_LENGTH );\n\t\tsetCookie( TOKEN_COOKIE_NAME, token );\n\t}\n\n\treturn token;\n}\n\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n *\n * @param {String} name\n * @returns {String|null}\n */\nexport function getCookie( name ) {\n\tname = name.toLowerCase();\n\tconst parts = document.cookie.split( ';' );\n\n\tfor ( const part of parts ) {\n\t\tconst pair = part.split( '=' );\n\t\tconst key = decodeURIComponent( pair[ 0 ].trim().toLowerCase() );\n\n\t\tif ( key === name ) {\n\t\t\treturn decodeURIComponent( pair[ 1 ] );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets the value of the cookie with a given name.\n *\n * @param {String} name\n * @param {String} value\n */\nexport function setCookie( name, value ) {\n\tdocument.cookie = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';path=/';\n}\n\n// Generates the CSRF token with the given length.\n//\n// @private\n// @param {Number} length\n// @returns {string}\nfunction generateToken( length ) {\n\tlet result = '';\n\tconst randValues = new Uint8Array( length );\n\n\twindow.crypto.getRandomValues( randValues );\n\n\tfor ( let j = 0; j < randValues.length; j++ ) {\n\t\tconst character = tokenCharset.charAt( randValues[ j ] % tokenCharset.length );\n\t\tresult += Math.random() > 0.5 ? character.toUpperCase() : character;\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals XMLHttpRequest, FormData */\n/**\n * @module adapter-ckfinder/uploadadapter\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport { getCsrfToken } from './utils';\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKFinder server–side connector.\n *\n * See the {@glink features/image-upload/ckfinder \"CKFinder file manager integration\" guide} to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckfinder/ckfinder~CKFinder} plugin.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [FileRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'CKFinderUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const url = this.editor.config.get('ckfinder.uploadUrl');\n        if (!url) {\n            return;\n        }\n        // Register CKFinderAdapter\n        this.editor.plugins.get(FileRepository).createUploadAdapter = loader => new UploadAdapter(loader, url, this.editor.t);\n    }\n}\n/**\n * Upload adapter for CKFinder.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass UploadAdapter {\n    /**\n\t * Creates a new adapter instance.\n\t *\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {String} url\n\t * @param {module:utils/locale~Locale#t} t\n\t */\n    constructor(loader, url, t) {\n        /**\n\t\t * FileLoader instance to use during the upload.\n\t\t *\n\t\t * @member {module:upload/filerepository~FileLoader} #loader\n\t\t */\n        this.loader = loader;\n        /**\n\t\t * Upload URL.\n\t\t *\n\t\t * @member {String} #url\n\t\t */\n        this.url = url;\n        /**\n\t\t * Locale translation method.\n\t\t *\n\t\t * @member {module:utils/locale~Locale#t} #t\n\t\t */\n        this.t = t;\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t * @returns {Promise.<Object>}\n\t */\n    upload() {\n        return this.loader.file.then(file => {\n            return new Promise((resolve, reject) => {\n                this._initRequest();\n                this._initListeners(resolve, reject, file);\n                this._sendRequest(file);\n            });\n        });\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */\n    abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n    /**\n\t * Initializes the XMLHttpRequest object.\n\t *\n\t * @private\n\t */\n    _initRequest() {\n        const xhr = this.xhr = new XMLHttpRequest();\n        xhr.open('POST', this.url, true);\n        xhr.responseType = 'json';\n    }\n    /**\n\t * Initializes XMLHttpRequest listeners.\n\t *\n\t * @private\n\t * @param {Function} resolve Callback function to be called when the request is successful.\n\t * @param {Function} reject Callback function to be called when the request cannot be completed.\n\t * @param {File} file File instance to be uploaded.\n\t */\n    _initListeners(resolve, reject, file) {\n        const xhr = this.xhr;\n        const loader = this.loader;\n        const t = this.t;\n        const genericError = t('Cannot upload file:') + ` ${ file.name }.`;\n        xhr.addEventListener('error', () => reject(genericError));\n        xhr.addEventListener('abort', () => reject());\n        xhr.addEventListener('load', () => {\n            const response = xhr.response;\n            if (!response || !response.uploaded) {\n                return reject(response && response.error && response.error.message ? response.error.message : genericError);\n            }\n            resolve({ default: response.url });\n        });\n        // Upload progress when it's supported.\n        /* istanbul ignore else */\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', evt => {\n                if (evt.lengthComputable) {\n                    loader.uploadTotal = evt.total;\n                    loader.uploaded = evt.loaded;\n                }\n            });\n        }\n    }\n    /**\n\t * Prepares the data and sends the request.\n\t *\n\t * @private\n\t * @param {File} file File instance to be uploaded.\n\t */\n    _sendRequest(file) {\n        // Prepare form data.\n        const data = new FormData();\n        data.append('upload', file);\n        data.append('ckCsrfToken', getCsrfToken());\n        // Send request.\n        this.xhr.send(data);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/attributecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\nexport default class AttributeCommand extends Command {\n\t/**\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attributeKey Attribute that will be set by the command.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n\t\t *\n\t\t * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n\t\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n\t\t * text will have this attribute, too).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = this._getValueFromFirstAllowedNode();\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n\t * otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, true );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @private\n\t * @returns {Boolean} The attribute value.\n\t */\n\t_getValueFromFirstAllowedNode() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn selection.hasAttribute( this.attributeKey );\n\t\t}\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( schema.checkAttribute( item, this.attributeKey ) ) {\n\t\t\t\t\treturn item.hasAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold/boldediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst BOLD = 'bold';\n\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\t// Allow bold attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: BOLD } );\n\t\teditor.model.schema.setAttributeProperties( BOLD, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\t// Build converter from model to view for data and editing pipelines.\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: BOLD,\n\t\t\tview: 'strong',\n\t\t\tupcastAlso: [\n\t\t\t\t'b',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-weight': 'bold'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create bold command.\n\t\teditor.commands.add( BOLD, new AttributeCommand( editor, BOLD ) );\n\n\t\t// Set the Ctrl+B keystroke.\n\t\teditor.keystrokes.set( 'CTRL+B', BOLD );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport boldIcon from '../../theme/icons/bold.svg';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Bold'),\n                icon: boldIcon,\n                keystroke: 'CTRL+B',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(BOLD));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic/italicediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst ITALIC = 'italic';\n\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow italic attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: ITALIC } );\n\t\teditor.model.schema.setAttributeProperties( ITALIC, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: ITALIC,\n\t\t\tview: 'i',\n\t\t\tupcastAlso: [\n\t\t\t\t'em',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-style': 'italic'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create italic command.\n\t\teditor.commands.add( ITALIC, new AttributeCommand( editor, ITALIC ) );\n\n\t\t// Set the Ctrl+I keystroke.\n\t\teditor.keystrokes.set( 'CTRL+I', ITALIC );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Italic'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(ITALIC));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/first\n */\n\n/**\n * Returns first item of the given `iterable`.\n *\n * @param {Iterable.<*>} iterable\n * @returns {*}\n */\nexport default function first( iterable ) {\n\tconst iteratorItem = iterable.next();\n\n\tif ( iteratorItem.done ) {\n\t\treturn null;\n\t}\n\n\treturn iteratorItem.value;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\nexport default class ParagraphCommand extends Command {\n\t/**\n\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( 'paragraph' );\n\t\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\n\t}\n\n\t/**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n\t * The selection that the command should be applied to.\n\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\n\t\t\t\t\twriter.rename( block, 'paragraph' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeParagraph( block, schema ) {\n\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles element which has not been converted by any plugin and checks if it would be converted if\n\t\t// we wrap it in a paragraph or change it to a paragraph.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tif ( !Paragraph.paragraphLikeElements.has( viewElement.name ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Do not auto-paragraph empty elements.\n\t\t\t\tif ( viewElement.isEmpty ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn modelWriter.createElement( 'paragraph' );\n\t\t\t},\n\t\t\tconverterPriority: 'low'\n\t\t} );\n\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\t// Do not try auto-paragraphing if the element was already converted.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the element is not paragraph-like try wrapping it in a paragraph.\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle editor.data#ready event because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.data.on( 'ready', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, conversionApi.writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = schema.createContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\nexport default class HeadingCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n\t */\n\tconstructor( editor, modelElements ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n\t\t * the value is set to the name of that heading model element.\n\t\t * It is  set to `false` otherwise.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean|String} #value\n\t\t */\n\n\t\t/**\n\t\t * Set of defined model's elements names that this command support.\n\t\t * See {@link module:heading/heading~HeadingOption}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>}\n\t\t */\n\t\tthis.modelElements = modelElements;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && this.modelElements.includes( block.name ) && block.name;\n\t\tthis.isEnabled = !!block && this.modelElements.some( heading => checkCanBecomeHeading( block, heading, this.editor.model.schema ) );\n\t}\n\n\t/**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value Name of the element which this command will apply in the model.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst modelElement = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => {\n\t\t\t\t\treturn checkCanBecomeHeading( block, modelElement, model.schema );\n\t\t\t\t} );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( modelElement ) ) {\n\t\t\t\t\twriter.rename( block, modelElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeHeading( block, heading, schema ) {\n\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport HeadingCommand from './headingcommand';\n\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n\nconst defaultModelElement = 'paragraph';\n\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'heading', {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tconst modelElements = [];\n\n\t\tfor ( const option of options ) {\n\t\t\t// Skip paragraph - it is defined in required Paragraph feature.\n\t\t\tif ( option.model !== defaultModelElement ) {\n\t\t\t\t// Schema.\n\t\t\t\teditor.model.schema.register( option.model, {\n\t\t\t\t\tinheritAllFrom: '$block'\n\t\t\t\t} );\n\n\t\t\t\teditor.conversion.elementToElement( option );\n\n\t\t\t\tmodelElements.push( option.model );\n\t\t\t}\n\t\t}\n\n\t\tthis._addDefaultH1Conversion( editor );\n\n\t\t// Register the heading command for this option.\n\t\teditor.commands.add( 'heading', new HeadingCommand( editor, modelElements ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\t// If the enter command is added to the editor, alter its behavior.\n\t\t// Enter at the end of a heading element should create a paragraph.\n\t\tconst editor = this.editor;\n\t\tconst enterCommand = editor.commands.get( 'enter' );\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tif ( enterCommand ) {\n\t\t\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\n\t\t\t\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\n\t\t\t\tconst isHeading = options.some( option => positionParent.is( option.model ) );\n\n\t\t\t\tif ( isHeading && !positionParent.is( defaultModelElement ) && positionParent.childCount === 0 ) {\n\t\t\t\t\tdata.writer.rename( positionParent, defaultModelElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds default conversion for `h1` -> `heading1` with a low priority.\n\t *\n\t * @private\n\t * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n\t */\n\t_addDefaultH1Conversion( editor ) {\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'heading1',\n\t\t\tview: 'h1',\n\t\t\t// With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n\t\t\t// this listener is called before it. If not, `h1` will be transformed into a paragraph.\n\t\t\tconverterPriority: priorities.get( 'low' ) + 1\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/model\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { extend } from 'lodash-es';\n\n/**\n * The base MVC model class.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\t/**\n\t * Creates a new Model instance.\n\t *\n\t * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\n\t * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\n\t */\n\tconstructor( attributes, properties ) {\n\t\t// Extend this instance with the additional (out of state) properties.\n\t\tif ( properties ) {\n\t\t\textend( this, properties );\n\t\t}\n\n\t\t// Initialize the attributes.\n\t\tif ( attributes ) {\n\t\t\tthis.set( attributes );\n\t\t}\n\t}\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownpanelview\n */\n\nimport View from '../view';\n\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the panel is visible.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * The position of the panel, relative to the parent.\n\t\t *\n\t\t * This property is reflected in the CSS class set to {@link #element} that controls\n\t\t * the position of the panel.\n\t\t *\n\t\t * @observable\n\t\t * @default 'se'\n\t\t * @member {'se'|'sw'|'ne'|'nw'} #position\n\t\t */\n\t\tthis.set( 'position', 'se' );\n\n\t\t/**\n\t\t * Collection of the child views in this panel.\n\t\t *\n\t\t * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n\t\t * See {@link module:ui/dropdown/utils~addListToDropdown} and\n\t\t * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-dropdown__panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-dropdown__panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-dropdown__panel-visible' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// Drag and drop in the panel should not break the selection in the editor.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/228\n\t\t\t\tselectstart: bind.to( evt => evt.preventDefault() )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the view element or first item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocus() {\n\t\tif ( this.children.length ) {\n\t\t\tthis.children.first.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the view element or last item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocusLast() {\n\t\tif ( this.children.length ) {\n\t\t\tconst lastChild = this.children.last;\n\n\t\t\tif ( typeof lastChild.focusLast === 'function' ) {\n\t\t\t\tlastChild.focusLast();\n\t\t\t} else {\n\t\t\t\tlastChild.focus();\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/position\n */\n\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport { isFunction } from 'lodash-es';\n\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n *\t\t// The element which is to be positioned.\n *\t\tconst element = document.body.querySelector( '#toolbar' );\n *\n *\t\t// A target to which the element is positioned relatively.\n *\t\tconst target = document.body.querySelector( '#container' );\n *\n *\t\t// Finding the optimal coordinates for the positioning.\n *\t\tconst { left, top, name } = getOptimalPosition( {\n *\t\t\telement: element,\n *\t\t\ttarget: target,\n *\n * \t\t\t// The algorithm will chose among these positions to meet the requirements such\n * \t\t\t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t\t\t// in the order of the array.\n *\t\t\tpositions: [\n *\t\t\t\t//\n *\t\t\t \t//\t[ Target ]\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\n *\t\t\t\ttargetRect => ( {\n *\t\t\t\t\ttop: targetRect.bottom,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'mySouthEastPosition'\n *\t\t\t\t} ),\n *\n *\t\t\t\t//\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t[ Target ]\n *\t\t\t\t//\n *\t\t\t\t( targetRect, elementRect ) => ( {\n *\t\t\t\t\ttop: targetRect.top - elementRect.height,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'myNorthEastPosition'\n *\t\t\t\t} )\n *\t\t\t],\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of <body>.\n *\t\t\tlimiter: document.body,\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n *\t\t\tfitInViewport: true\n *\t\t} );\n *\n *\t\t// The best position which fits into document.body and the viewport. May be useful\n *\t\t// to set proper class on the `element`.\n *\t\tconsole.log( name ); // -> \"myNorthEastPosition\"\n *\n *\t\t// Using the absolute coordinates which has been found to position the element\n *\t\t// as in the diagram depicting the \"myNorthEastPosition\" position.\n *\t\telement.style.top = top;\n *\t\telement.style.left = left;\n *\n * @param {module:utils/dom/position~Options} options Positioning options object.\n * @returns {module:utils/dom/position~Position}\n */\nexport function getOptimalPosition( { element, target, positions, limiter, fitInViewport } ) {\n\t// If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-utils/issues/157\n\tif ( isFunction( target ) ) {\n\t\ttarget = target();\n\t}\n\n\t// If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-ui/issues/260\n\tif ( isFunction( limiter ) ) {\n\t\tlimiter = limiter();\n\t}\n\n\tconst positionedElementAncestor = getPositionedAncestor( element.parentElement );\n\tconst elementRect = new Rect( element );\n\tconst targetRect = new Rect( target );\n\n\tlet bestPosition;\n\tlet name;\n\n\t// If there are no limits, just grab the very first position and be done with that drama.\n\tif ( !limiter && !fitInViewport ) {\n\t\t[ name, bestPosition ] = getPosition( positions[ 0 ], targetRect, elementRect );\n\t} else {\n\t\tconst limiterRect = limiter && new Rect( limiter ).getVisible();\n\t\tconst viewportRect = fitInViewport && new Rect( global.window );\n\n\t\t[ name, bestPosition ] =\n\t\t\tgetBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) ||\n\t\t\t// If there's no best position found, i.e. when all intersections have no area because\n\t\t\t// rects have no width or height, then just use the first available position.\n\t\t\tgetPosition( positions[ 0 ], targetRect, elementRect );\n\t}\n\n\tlet { left, top } = getAbsoluteRectCoordinates( bestPosition );\n\n\tif ( positionedElementAncestor ) {\n\t\tconst ancestorPosition = getAbsoluteRectCoordinates( new Rect( positionedElementAncestor ) );\n\t\tconst ancestorBorderWidths = getBorderWidths( positionedElementAncestor );\n\n\t\t// (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n\t\t// consideration. `Rect` is always relative to the viewport while `position: absolute` works\n\t\t// with respect to that positioned ancestor.\n\t\tleft -= ancestorPosition.left;\n\t\ttop -= ancestorPosition.top;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, not only its position must be taken into\n\t\t// consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n\t\t// is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n\t\t// must compensate that scrolling.\n\t\tleft += positionedElementAncestor.scrollLeft;\n\t\ttop += positionedElementAncestor.scrollTop;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n\t\t// while `position: absolute` positioning does not consider it.\n\t\t// E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n\t\t// not upper-left corner of its border.\n\t\tleft -= ancestorBorderWidths.left;\n\t\ttop -= ancestorBorderWidths.top;\n\t}\n\n\treturn { left, top, name };\n}\n\n// For given position function, returns a corresponding `Rect` instance.\n//\n// @private\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\n// @returns {Array} An array containing position name and its Rect.\nfunction getPosition( position, targetRect, elementRect ) {\n\tconst { left, top, name } = position( targetRect, elementRect );\n\n\treturn [ name, elementRect.clone().moveTo( left, top ) ];\n}\n\n// For a given array of positioning functions, returns such that provides the best\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n//\n// @private\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\n// @returns {Array} An array containing the name of the position and it's rect.\nfunction getBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) {\n\tlet maxLimiterIntersectArea = 0;\n\tlet maxViewportIntersectArea = 0;\n\tlet bestPositionRect;\n\tlet bestPositionName;\n\n\t// This is when element is fully visible.\n\tconst elementRectArea = elementRect.getArea();\n\n\tpositions.some( position => {\n\t\tconst [ positionName, positionRect ] = getPosition( position, targetRect, elementRect );\n\t\tlet limiterIntersectArea;\n\t\tlet viewportIntersectArea;\n\n\t\tif ( limiterRect ) {\n\t\t\tif ( viewportRect ) {\n\t\t\t\t// Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n\t\t\t\tconst limiterViewportIntersectRect = limiterRect.getIntersection( viewportRect );\n\n\t\t\t\tif ( limiterViewportIntersectRect ) {\n\t\t\t\t\t// If the limiter is within the viewport, then check the intersection between that part of the\n\t\t\t\t\t// limiter and actual position.\n\t\t\t\t\tlimiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea( positionRect );\n\t\t\t\t} else {\n\t\t\t\t\tlimiterIntersectArea = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlimiterIntersectArea = limiterRect.getIntersectionArea( positionRect );\n\t\t\t}\n\t\t}\n\n\t\tif ( viewportRect ) {\n\t\t\tviewportIntersectArea = viewportRect.getIntersectionArea( positionRect );\n\t\t}\n\n\t\t// The only criterion: intersection with the viewport.\n\t\tif ( viewportRect && !limiterRect ) {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// The only criterion: intersection with the limiter.\n\t\telse if ( !viewportRect && limiterRect ) {\n\t\t\tif ( limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// Two criteria: intersection with the viewport and the limiter visible in the viewport.\n\t\telse {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t} else if ( viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\n\t\tfunction setBestPosition() {\n\t\t\tmaxViewportIntersectArea = viewportIntersectArea;\n\t\t\tmaxLimiterIntersectArea = limiterIntersectArea;\n\t\t\tbestPositionRect = positionRect;\n\t\t\tbestPositionName = positionName;\n\t\t}\n\n\t\t// If a such position is found that element is fully container by the limiter then, obviously,\n\t\t// there will be no better one, so finishing.\n\t\treturn limiterIntersectArea === elementRectArea;\n\t} );\n\n\treturn bestPositionRect ? [ bestPositionName, bestPositionRect ] : null;\n}\n\n// DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n// This function converts Rect to `position: absolute` coordinates.\n//\n// @private\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\nfunction getAbsoluteRectCoordinates( { left, top } ) {\n\tconst { scrollX, scrollY } = global.window;\n\n\treturn {\n\t\tleft: left + scrollX,\n\t\ttop: top + scrollY,\n\t};\n}\n\n/**\n * The `getOptimalPosition` helper options.\n *\n * @interface module:utils/dom/position~Options\n */\n\n/**\n * Element that is to be positioned.\n *\n * @member {HTMLElement} #element\n */\n\n/**\n * Target with respect to which the `element` is to be positioned.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\n */\n\n/**\n * An array of functions which return {@link module:utils/dom/position~Position} relative\n * to the `target`, in the order of preference.\n *\n * @member {Array.<Function>} #positions\n */\n\n/**\n * When set, the algorithm will chose position which fits the most in the\n * limiter's bounding rect.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\n */\n\n/**\n * When set, the algorithm will chose such a position which fits `element`\n * the most inside visible viewport.\n *\n * @member {Boolean} #fitInViewport\n */\n\n/**\n * An object describing a position in `position: absolute` coordinate\n * system, along with position name.\n *\n * @typedef {Object} module:utils/dom/position~Position\n *\n * @property {Number} top Top position offset.\n * @property {Number} left Left position offset.\n * @property {String} name Name of the position.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getpositionedancestor\n */\n\nimport global from './global';\n\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param {HTMLElement} element The native DOM element to be checked.\n * @returns {HTMLElement|null}\n */\nexport default function getPositionedAncestor( element ) {\n\twhile ( element && element.tagName.toLowerCase() != 'html' ) {\n\t\tif ( global.window.getComputedStyle( element ).position != 'static' ) {\n\t\t\treturn element;\n\t\t}\n\n\t\telement = element.parentElement;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/dropdown/dropdown.css';\n\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownView extends View {\n\t/**\n\t * Creates an instance of the dropdown.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n\t * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n\t */\n\tconstructor( locale, buttonView, panelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView} #buttonView\n\t\t */\n\t\tthis.buttonView = buttonView;\n\n\t\t/**\n\t\t * Panel of the dropdown. It opens when the {@link #buttonView} is\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n\t\t *\n\t\t * Child views can be added to the panel's `children` collection:\n\t\t *\n\t\t *\t\tdropdown.panelView.children.add( childView );\n\t\t *\n\t\t * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n\t\t * {@link module:ui/viewcollection~ViewCollection#add}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n\t\t */\n\t\tthis.panelView = panelView;\n\n\t\t/**\n\t\t * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOpen\n\t\t */\n\t\tthis.set( 'isOpen', false );\n\n\t\t/**\n\t\t * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n\t\t *\n\t\t * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * (Optional) The additional CSS class set on the dropdown {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * The position of the panel, relative to the dropdown.\n\t\t *\n\t\t * **Note**: When `'auto'`, the panel will use one of the remaining positions to stay\n\t\t * in the viewport, visible to the user. The positions correspond directly to\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions default panel positions}.\n\t\t *\n\t\t * **Note**: This value has an impact on the\n\t\t * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#position} property\n\t\t * each time the panel becomes {@link #isOpen open}.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {'auto'|'se'|'sw'|'ne'|'nw'} #panelPosition\n\t\t */\n\t\tthis.set( 'panelPosition', 'auto' );\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n\t\t * keystrokes of the dropdown:\n\t\t *\n\t\t * * <kbd>▼</kbd> opens the dropdown,\n\t\t * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-dropdown',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tbuttonView,\n\t\t\t\tpanelView\n\t\t\t]\n\t\t} );\n\n\t\tbuttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-dropdown__button',\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n\t\t * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/list/listview~ListView} #listView\n\t\t */\n\n\t\t/**\n\t\t * A child toolbar of the dropdown located in the\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n\t\t */\n\n\t\t/**\n\t\t * Fired when the toolbar button or list item is executed.\n\t\t *\n\t\t * For {@link #listView} It fires when a child of some {@link module:ui/list/listitemview~ListItemView}\n\t\t * fired `execute`.\n\t\t *\n\t\t * For {@link #toolbarView} It fires when one of the buttons has been\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n\t\t * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @event execute\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Toggle the dropdown when its button has been clicked.\n\t\tthis.listenTo( this.buttonView, 'open', () => {\n\t\t\tthis.isOpen = !this.isOpen;\n\t\t} );\n\n\t\t// Toggle the visibility of the panel when the dropdown becomes open.\n\t\tthis.panelView.bind( 'isVisible' ).to( this, 'isOpen' );\n\n\t\t// Let the dropdown control the position of the panel. The position must\n\t\t// be updated every time the dropdown is open.\n\t\tthis.on( 'change:isOpen', () => {\n\t\t\tif ( !this.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If \"auto\", find the best position of the panel to fit into the viewport.\n\t\t\t// Otherwise, simply assign the static position.\n\t\t\tif ( this.panelPosition === 'auto' ) {\n\t\t\t\tthis.panelView.position = DropdownView._getOptimalPosition( {\n\t\t\t\t\telement: this.panelView.element,\n\t\t\t\t\ttarget: this.buttonView.element,\n\t\t\t\t\tfitInViewport: true,\n\t\t\t\t\tpositions: this._panelPositions\n\t\t\t\t} ).name;\n\t\t\t} else {\n\t\t\t\tthis.panelView.position = this.panelPosition;\n\t\t\t}\n\t\t} );\n\n\t\t// Listen for keystrokes coming from within #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Register #element in the focus tracker.\n\t\tthis.focusTracker.add( this.element );\n\n\t\tconst closeDropdown = ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tthis.buttonView.focus();\n\t\t\t\tthis.isOpen = false;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\t// Open the dropdown panel using the arrow down key, just like with return or space.\n\t\tthis.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\t\t// Don't open if the dropdown is disabled or already open.\n\t\t\tif ( this.buttonView.isEnabled && !this.isOpen ) {\n\t\t\t\tthis.isOpen = true;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Block the right arrow key (until nested dropdowns are implemented).\n\t\tthis.keystrokes.set( 'arrowright', ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close the dropdown using the arrow left/escape key.\n\t\tthis.keystrokes.set( 'arrowleft', closeDropdown );\n\t\tthis.keystrokes.set( 'esc', closeDropdown );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n\n\t/**\n\t * Returns {@link #panelView panel} positions to be used by the\n\t * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n\t * utility considering the direction of the language the UI of the editor is displayed in.\n\t *\n\t * @type {module:utils/dom/position~Options#positions}\n\t * @private\n\t */\n\tget _panelPositions() {\n\t\tconst { southEast, southWest, northEast, northWest } = DropdownView.defaultPanelPositions;\n\n\t\tif ( this.locale.uiLanguageDirection === 'ltr' ) {\n\t\t\treturn [ southEast, southWest, northEast, northWest ];\n\t\t} else {\n\t\t\treturn [ southWest, southEast, northWest, northEast ];\n\t\t}\n\t}\n}\n\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `southEast`\n *\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southWest`\n *\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * **North**\n *\n * * `northEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n *\n * * `northWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n *\n * @member {Object} module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions\n */\nDropdownView.defaultPanelPositions = {\n\tsouthEast: buttonRect => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'se'\n\t\t};\n\t},\n\tsouthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'sw'\n\t\t};\n\t},\n\tnorthEast: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.top - panelRect.height,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'ne'\n\t\t};\n\t},\n\tnorthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom - panelRect.height,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'nw'\n\t\t};\n\t}\n};\n\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n *\n * @protected\n * @member {Function} module:ui/dropdown/dropdownview~DropdownView._getOptimalPosition\n */\nDropdownView._getOptimalPosition = getOptimalPosition;\n","export default \"<svg viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class DropdownButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * An icon that displays arrow to indicate a dropdown button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'aria-haspopup': true\n\t\t\t}\n\t\t} );\n\n\t\t// The DropdownButton interface expects the open event upon which will open the dropdown.\n\t\tthis.delegate( 'execute' ).to( this, 'open' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.arrowView );\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n\t *\n\t * @private\n\t * @returns {module:ui/icon/iconview~IconView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new IconView();\n\n\t\tarrowView.content = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-dropdown__arrow'\n\t\t\t}\n\t\t} );\n\n\t\treturn arrowView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/list/list.css';\n\n/**\n * The list view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ListView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Collection of the child list views.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backwards using the arrowup key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate toolbar items forwards using the arrowdown key.\n\t\t\t\tfocusNext: 'arrowdown',\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'ul',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-list'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listitemview\n */\n\nimport View from '../view';\n\n/**\n * The list item view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListItemView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views inside of the list item {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__item'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the list item.\n\t */\n\tfocus() {\n\t\tthis.children.first.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The list separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/switchbuttonview\n */\n\nimport View from '../view';\nimport ButtonView from './buttonview';\n\nimport '../../theme/components/button/switchbutton.css';\n\n/**\n * The switch button view class.\n *\n *\t\tconst view = new SwitchButtonView();\n *\n *\t\tview.set( {\n *\t\t\twithText: true,\n *\t\t\tlabel: 'Switch me!'\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class SwitchButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.isToggleable = true;\n\n\t\t/**\n\t\t * The toggle switch of the button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #toggleSwitchView\n\t\t */\n\t\tthis.toggleSwitchView = this._createToggleView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-switchbutton'\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.toggleSwitchView );\n\t}\n\n\t/**\n\t * Creates a toggle child view.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createToggleView() {\n\t\tconst toggleSwitchView = new View();\n\n\t\ttoggleSwitchView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__toggle'\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-button__toggle__inner'\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn toggleSwitchView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( model, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClass = DropdownButtonView) {\n    const buttonView = new ButtonClass(locale);\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof DropdownButtonView) {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    } else {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehavior(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n */\nexport function addToolbarToDropdown(dropdownView, buttons) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    toolbarView.set('ariaLabel', t('Dropdown toolbar'));\n    dropdownView.extendTemplate({ attributes: { class: ['ck-toolbar-dropdown'] } });\n    buttons.map(view => toolbarView.items.add(view));\n    dropdownView.panelView.children.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown(dropdownView, items) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    listView.items.bindTo(items).using(({type, model}) => {\n        if (type === 'separator') {\n            return new ListSeparatorView(locale);\n        } else if (type === 'button' || type === 'switchbutton') {\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (type === 'button') {\n                buttonView = new ButtonView(locale);\n            } else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(model)).to(model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n    });\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior(dropdownView) {\n    closeDropdownOnBlur(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n}\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.on('render', () => {\n        clickOutsideHandler({\n            emitter: dropdownView,\n            activator: () => dropdownView.isOpen,\n            callback: () => {\n                dropdownView.isOpen = false;\n            },\n            contextElements: [dropdownView.element]\n        });\n    });\n}\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}    /**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { getLocalizedOptions } from './utils';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('Choose heading');\n        const dropdownTooltip = t('Heading');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', locale => {\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [headingCommand];\n            for (const option of options) {\n                const def = {\n                    type: 'button',\n                    model: new Model({\n                        label: option.title,\n                        class: option.class,\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                } else {\n                    def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions);\n            dropdownView.buttonView.set({\n                isOn: false,\n                withText: true,\n                tooltip: dropdownTooltip\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n                const whichModel = value || para && 'paragraph';\n                // If none of the commands is active, display default title.\n                return titles[whichModel] ? titles[whichModel] : defaultTitle;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/utils\n */\n/**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\n * when the user config is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor\n * @returns {Array.<module:heading/heading~HeadingOption>}.\n */\nexport function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        Paragraph: t('Paragraph'),\n        'Heading 1': t('Heading 1'),\n        'Heading 2': t('Heading 2'),\n        'Heading 3': t('Heading 3'),\n        'Heading 4': t('Heading 4'),\n        'Heading 5': t('Heading 5'),\n        'Heading 6': t('Heading 6')\n    };\n    return editor.config.get('heading.options').map(option => {\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            option.title = title;\n        }\n        return option;\n    });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageloadobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\n\n/**\n * Observes all new images added to the {@link module:engine/view/document~Document},\n * fires {@link module:engine/view/document~Document#event:imageLoaded} and\n * {@link module:engine/view/document~Document#event:layoutChanged} event every time when the new image\n * has been loaded.\n *\n * **Note:** This event is not fired for images that has been added to the document and rendered as `complete` (already loaded).\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class ImageLoadObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * List of img DOM elements that are observed by this observer.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<HTMLElement>}\n\t\t */\n\t\tthis._observedElements = new Set();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domRoot, name ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// When there is a change in one of the view element\n\t\t// we need to check if there are any new `<img/>` elements to observe.\n\t\tviewRoot.on( 'change:children', ( evt, node ) => {\n\t\t\t// Wait for the render to be sure that `<img/>` elements are rendered in the DOM root.\n\t\t\tthis.view.once( 'render', () => this._updateObservedElements( domRoot, node ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the list of observed `<img/>` elements.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot DOM root element.\n\t * @param {module:engine/view/element~Element} viewNode View element where children have changed.\n\t */\n\t_updateObservedElements( domRoot, viewNode ) {\n\t\tif ( !viewNode.is( 'element' ) || viewNode.is( 'attributeElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domNode = this.view.domConverter.mapViewToDom( viewNode );\n\n\t\t// If there is no `domNode` it means that it was removed from the DOM in the meanwhile.\n\t\tif ( !domNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const domElement of domNode.querySelectorAll( 'img' ) ) {\n\t\t\tif ( !this._observedElements.has( domElement ) ) {\n\t\t\t\tthis.listenTo( domElement, 'load', ( evt, domEvt ) => this._fireEvents( domEvt ) );\n\t\t\t\tthis._observedElements.add( domElement );\n\t\t\t}\n\t\t}\n\n\t\t// Clean up the list of observed elements from elements that has been removed from the root.\n\t\tfor ( const domElement of this._observedElements ) {\n\t\t\tif ( !domRoot.contains( domElement ) ) {\n\t\t\t\tthis.stopListening( domElement );\n\t\t\t\tthis._observedElements.delete( domElement );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fires {@link module:engine/view/document~Document#event:layoutChanged} and\n\t * {@link module:engine/view/document~Document#event:imageLoaded}\n\t * if observer {@link #isEnabled is enabled}.\n\t *\n\t * @protected\n\t * @param {Event} domEvent The DOM event.\n\t */\n\t_fireEvents( domEvent ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( 'layoutChanged' );\n\t\t\tthis.document.fire( 'imageLoaded', domEvent );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._observedElements.clear();\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when an <img/> DOM element has been loaded in the DOM root.\n *\n * Introduced by {@link module:image/image/imageloadobserver~ImageLoadObserver}.\n *\n * @see module:image/image/imageloadobserver~ImageLoadObserver\n * @event module:engine/view/document~Document#event:imageLoaded\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/converters\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<image src=\"...\" alt=\"...\"></image>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<image>` model element.\n *\n * @returns {Function}\n */\nexport function viewFigureToModel() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:figure', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\t// Do not convert if this is not an \"image figure\".\n\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, classes: 'image' } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find an image element inside the figure element.\n\t\tconst viewImage = Array.from( data.viewItem.getChildren() ).find( viewChild => viewChild.is( 'img' ) );\n\n\t\t// Do not convert if image element is absent, is missing src attribute or was already converted.\n\t\tif ( !viewImage || !viewImage.hasAttribute( 'src' ) || !conversionApi.consumable.test( viewImage, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert view image to model image.\n\t\tconst conversionResult = conversionApi.convertItem( viewImage, data.modelCursor );\n\n\t\t// Get image element from conversion result.\n\t\tconst modelImage = first( conversionResult.modelRange.getItems() );\n\n\t\t// When image wasn't successfully converted then finish conversion.\n\t\tif ( !modelImage ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert rest of the figure element's children as an image children.\n\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelImage, 0 ) );\n\n\t\t// Set image range as conversion result.\n\t\tdata.modelRange = conversionResult.modelRange;\n\n\t\t// Continue conversion where image conversion ends.\n\t\tdata.modelCursor = conversionResult.modelCursor;\n\t}\n}\n\n/**\n * Converter used to convert the `srcset` model image attribute to the `srcset`, `sizes` and `width` attributes in the view.\n *\n * @returns {Function}\n */\nexport function srcsetAttributeConverter() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:srcset:image', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst writer = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue === null ) {\n\t\t\tconst srcset = data.attributeOldValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.removeAttribute( 'srcset', img );\n\t\t\t\twriter.removeAttribute( 'sizes', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.removeAttribute( 'width', img );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst srcset = data.attributeNewValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.setAttribute( 'srcset', srcset.data, img );\n\t\t\t\t// Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\t\t\t\twriter.setAttribute( 'sizes', '100vw', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.setAttribute( 'width', srcset.width, img );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function modelToViewAttributeConverter( attributeKey ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `attribute:${ attributeKey }:image`, converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue !== null ) {\n\t\t\tviewWriter.setAttribute( data.attributeKey, data.attributeNewValue, img );\n\t\t} else {\n\t\t\tviewWriter.removeAttribute( data.attributeKey, img );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */\n","export default \"<svg viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\\\"/><path fill-opacity=\\\".256\\\" d=\\\"M1 1h14v14H1z\\\"/><g class=\\\"ck-icon__selected-indicator\\\"><path d=\\\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\\\"/><path fill-opacity=\\\".254\\\" d=\\\"M1 1h14v14H1z\\\"/></g></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/utils\n */\n\nimport HighlightStack from './highlightstack';\nimport IconView from '@ckeditor/ckeditor5-ui/src/icon/iconview';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport dragHandlerIcon from '../theme/icons/drag-handler.svg';\n\n/**\n * CSS class added to each widget element.\n *\n * @const {String}\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n\n/**\n * CSS class added to currently selected widget element.\n *\n * @const {String}\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\nexport function isWidget( node ) {\n\tif ( !node.is( 'element' ) ) {\n\t\treturn false;\n\t}\n\n\treturn !!node.getCustomProperty( 'widget' );\n}\n\n/* eslint-disable max-len */\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"true\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n *\t\t\t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Object} [options={}]\n * @param {String|Function} [options.label] Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param {Boolean} [options.hasSelectionHandler=false] If `true`, the widget will have a selection handler added.\n * @returns {module:engine/view/element~Element} Returns the same element.\n */\n/* eslint-enable max-len */\nexport function toWidget( element, writer, options = {} ) {\n\t// The selection on Edge behaves better when the whole editor contents is in a single contenteditable element.\n\t// https://github.com/ckeditor/ckeditor5/issues/1079\n\tif ( !env.isEdge ) {\n\t\twriter.setAttribute( 'contenteditable', 'false', element );\n\t}\n\n\twriter.addClass( WIDGET_CLASS_NAME, element );\n\twriter.setCustomProperty( 'widget', true, element );\n\telement.getFillerOffset = getFillerOffset;\n\n\tif ( options.label ) {\n\t\tsetLabel( element, options.label, writer );\n\t}\n\n\tif ( options.hasSelectionHandler ) {\n\t\taddSelectionHandler( element, writer );\n\t}\n\n\tsetHighlightHandling(\n\t\telement,\n\t\twriter,\n\t\t( element, descriptor, writer ) => writer.addClass( normalizeToArray( descriptor.classes ), element ),\n\t\t( element, descriptor, writer ) => writer.removeClass( normalizeToArray( descriptor.classes ), element )\n\t);\n\n\treturn element;\n\n\t// Normalizes CSS class in descriptor that can be provided in form of an array or a string.\n\tfunction normalizeToArray( classes ) {\n\t\treturn Array.isArray( classes ) ? classes : [ classes ];\n\t}\n}\n\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Function} add\n * @param {Function} remove\n */\nexport function setHighlightHandling( element, writer, add, remove ) {\n\tconst stack = new HighlightStack();\n\n\tstack.on( 'change:top', ( evt, data ) => {\n\t\tif ( data.oldDescriptor ) {\n\t\t\tremove( element, data.oldDescriptor, data.writer );\n\t\t}\n\n\t\tif ( data.newDescriptor ) {\n\t\t\tadd( element, data.newDescriptor, data.writer );\n\t\t}\n\t} );\n\n\twriter.setCustomProperty( 'addHighlight', ( element, descriptor, writer ) => stack.add( descriptor, writer ), element );\n\twriter.setCustomProperty( 'removeHighlight', ( element, id, writer ) => stack.remove( id, writer ), element );\n}\n\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n *\n * @param {module:engine/view/element~Element} element\n * @param {String|Function} labelOrCreator\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n */\nexport function setLabel( element, labelOrCreator, writer ) {\n\twriter.setCustomProperty( 'widgetLabel', labelOrCreator, element );\n}\n\n/**\n * Returns the label of the provided element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {String}\n */\nexport function getLabel( element ) {\n\tconst labelCreator = element.getCustomProperty( 'widgetLabel' );\n\n\tif ( !labelCreator ) {\n\t\treturn '';\n\t}\n\n\treturn typeof labelCreator == 'function' ? labelCreator() : labelCreator;\n}\n\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `dataDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n *\t\t\t\t\treturn toWidgetEditable( nested, writer );\n *\t\t\t\t}\n *\t\t\t} );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/editableelement~EditableElement} editable\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/editableelement~EditableElement} Returns the same element that was provided in the `editable` parameter\n */\nexport function toWidgetEditable( editable, writer ) {\n\twriter.addClass( [ 'ck-editor__editable', 'ck-editor__nested-editable' ], editable );\n\n\t// The selection on Edge behaves better when the whole editor contents is in a single contentedible element.\n\t// https://github.com/ckeditor/ckeditor5/issues/1079\n\tif ( !env.isEdge ) {\n\t\t// Set initial contenteditable value.\n\t\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\n\n\t\t// Bind the contenteditable property to element#isReadOnly.\n\t\teditable.on( 'change:isReadOnly', ( evt, property, is ) => {\n\t\t\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\n\t\t} );\n\t}\n\n\teditable.on( 'change:isFocused', ( evt, property, is ) => {\n\t\tif ( is ) {\n\t\t\twriter.addClass( 'ck-editor__nested-editable_focused', editable );\n\t\t} else {\n\t\t\twriter.removeClass( 'ck-editor__nested-editable_focused', editable );\n\t\t}\n\t} );\n\n\treturn editable;\n}\n\n/**\n * Returns a model position which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the position before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the position after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, that block will be returned. If that position\n * is then passed to {@link module:engine/model/model~Model#insertContent},\n * the block will be fully replaced by the image.\n *\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection based on which the insertion position should be calculated.\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {module:engine/model/position~Position} The optimal position.\n */\nexport function findOptimalInsertionPosition( selection, model ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement && model.schema.isBlock( selectedElement ) ) {\n\t\treturn model.createPositionAfter( selectedElement );\n\t}\n\n\tconst firstBlock = selection.getSelectedBlocks().next().value;\n\n\tif ( firstBlock ) {\n\t\t// If inserting into an empty block – return position in that block. It will get\n\t\t// replaced with the image by insertContent(). #42.\n\t\tif ( firstBlock.isEmpty ) {\n\t\t\treturn model.createPositionAt( firstBlock, 0 );\n\t\t}\n\n\t\tconst positionAfter = model.createPositionAfter( firstBlock );\n\n\t\t// If selection is at the end of the block - return position after the block.\n\t\tif ( selection.focus.isTouching( positionAfter ) ) {\n\t\t\treturn positionAfter;\n\t\t}\n\n\t\t// Otherwise return position before the block.\n\t\treturn model.createPositionBefore( firstBlock );\n\t}\n\n\treturn selection.focus;\n}\n\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n *\t\t// Model:\n *\t\t<placeholder type=\"name\"></placeholder>\n *\n *\t\t// View:\n *\t\t<span class=\"placeholder\">name</span>\n *\n * In such case, view positions inside `<span>` cannot be correct mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n *\t\teditor.editing.mapper.on(\n *\t\t\t'viewToModelPosition',\n *\t\t\tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n *\t\t);\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n *\t\t// View:\n *\t\t<p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n *\t\t// Model:\n *\t\t<paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n *\t\t// View:\n *\t\t<p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n *\t\t// Model:\n *\t\t<paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n *\n * @param {module:engine/model/model~Model} model Model instance on which the callback operates.\n * @param {Function} viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n * @return {Function}\n */\nexport function viewToModelPositionOutsideModelElement( model, viewElementMatcher ) {\n\treturn ( evt, data ) => {\n\t\tconst { mapper, viewPosition } = data;\n\n\t\tconst viewParent = mapper.findMappedViewAncestor( viewPosition );\n\n\t\tif ( !viewElementMatcher( viewParent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelParent = mapper.toModelElement( viewParent );\n\n\t\tdata.modelPosition = model.createPositionAt( modelParent, viewPosition.isAtStart ? 'before' : 'after' );\n\t};\n}\n\n// Default filler offset function applied to all widget elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Adds a drag handler to the widget.\n//\n// @param {module:engine/view/containerelement~ContainerElement}\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction addSelectionHandler( widgetElement, writer ) {\n\tconst selectionHandler = writer.createUIElement( 'div', { class: 'ck ck-widget__selection-handler' }, function( domDocument ) {\n\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t// Use the IconView from the ui library.\n\t\tconst icon = new IconView();\n\t\ticon.set( 'content', dragHandlerIcon );\n\n\t\t// Render the icon view right away to append its #element to the selectionHandler DOM element.\n\t\ticon.render();\n\n\t\tdomElement.appendChild( icon.element );\n\n\t\treturn domElement;\n\t} );\n\n\t// Append the selection handler into the widget wrapper.\n\twriter.insert( writer.createPositionAt( widgetElement, 0 ), selectionHandler );\n\twriter.addClass( [ 'ck-widget_with-selection-handler' ], widgetElement );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\n\nimport { findOptimalInsertionPosition, isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the image `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toImageWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( 'image', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label: labelCreator } );\n\n\tfunction labelCreator() {\n\t\tconst imgElement = viewElement.getChild( 0 );\n\t\tconst altText = imgElement.getAttribute( 'alt' );\n\n\t\treturn altText ? `${ altText } ${ label }` : label;\n\t}\n}\n\n/**\n * Checks if a given view element is an image widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isImageWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'image' ) && isWidget( viewElement );\n}\n\n/**\n * Returns an image widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedImageWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isImageWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if the provided model element is an `image`.\n *\n * @param {module:engine/model/element~Element} modelElement\n * @returns {Boolean}\n */\nexport function isImage( modelElement ) {\n\treturn !!modelElement && modelElement.is( 'image' );\n}\n\n/**\n * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionPosition} method.\n *\n *\t\tmodel.change( writer => {\n *\t\t\tinsertImage( writer, model, { src: 'path/to/image.jpg' } );\n *\t\t} );\n *\n * @param {module:engine/model/writer~Writer} writer\n * @param {module:engine/model/model~Model} model\n * @param {Object} [attributes={}] Attributes of inserted image\n */\nexport function insertImage( writer, model, attributes = {} ) {\n\tconst imageElement = writer.createElement( 'image', attributes );\n\n\tconst insertAtSelection = findOptimalInsertionPosition( model.document.selection, model );\n\n\tmodel.insertContent( imageElement, insertAtSelection );\n\n\t// Inserting an image might've failed due to schema regulations.\n\tif ( imageElement.parent ) {\n\t\twriter.setSelection( imageElement, 'on' );\n\t}\n}\n\n/**\n * Checks if image can be inserted at current model selection.\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Boolean}\n */\nexport function isImageAllowed( model ) {\n\tconst schema = model.schema;\n\tconst selection = model.document.selection;\n\n\treturn isImageAllowedInParent( selection, schema, model ) &&\n\t\t!checkSelectionOnObject( selection, schema ) &&\n\t\tisInOtherImage( selection );\n}\n\n// Checks if image is allowed by schema in optimal insertion parent.\n//\n// @returns {Boolean}\nfunction isImageAllowedInParent( selection, schema, model ) {\n\tconst parent = getInsertImageParent( selection, model );\n\n\treturn schema.checkChild( parent, 'image' );\n}\n\n// Check if selection is on object.\n//\n// @returns {Boolean}\nfunction checkSelectionOnObject( selection, schema ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\treturn selectedElement && schema.isObject( selectedElement );\n}\n\n// Checks if selection is placed in other image (ie. in caption).\nfunction isInOtherImage( selection ) {\n\treturn [ ...selection.focus.getAncestors() ].every( ancestor => !ancestor.is( 'image' ) );\n}\n\n// Returns a node that will be used to insert image with `model.insertContent` to check if image can be placed there.\nfunction getInsertImageParent( selection, model ) {\n\tconst insertAt = findOptimalInsertionPosition( selection, model );\n\n\tconst parent = insertAt.parent;\n\n\tif ( parent.isEmpty && !parent.is( '$root' ) ) {\n\t\treturn parent.parent;\n\t}\n\n\treturn parent;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from './utils';\n\n/**\n * @module image/image/imageinsertcommand\n */\n\n/**\n * Insert image command.\n *\n * The command is registered by the {@link module:image/image/imageediting~ImageEditing} plugin as `'imageInsert'`.\n *\n * In order to insert an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and specify the image source:\n *\n *\t\teditor.execute( 'imageInsert', { source: 'http://url.to.the/image' } );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageInsert', {\n *\t\t\tsource:  [\n *\t\t\t\t'path/to/image.jpg',\n *\t\t\t\t'path/to/other-image.jpg'\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class ImageInsertCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = isImageAllowed( this.editor.model );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {String|Array.<String>} options.source The image source or an array of image sources to insert.\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst sources = Array.isArray( options.source ) ? options.source : [ options.source ];\n\n\t\t\tfor ( const src of sources ) {\n\t\t\t\tinsertImage( writer, model, { src } );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/image/imageediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageLoadObserver from './imageloadobserver';\nimport {\n    viewFigureToModel,\n    modelToViewAttributeConverter,\n    srcsetAttributeConverter\n} from './converters';\nimport { toImageWidget } from './utils';\nimport ImageInsertCommand from './imageinsertcommand';\n/**\n * The image engine plugin.\n *\n * It registers:\n *\n * * `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\n * * converters for editing and data pipelines.\n * * `'imageInsert'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        // See https://github.com/ckeditor/ckeditor5-image/issues/142.\n        editor.editing.view.addObserver(ImageLoadObserver);\n        // Configure schema.\n        schema.register('image', {\n            isObject: true,\n            isBlock: true,\n            allowWhere: '$block',\n            allowAttributes: [\n                'alt',\n                'src',\n                'srcset'\n            ]\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => createImageViewElement(viewWriter)\n        });\n        conversion.for('editingDowncast').elementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => toImageWidget(createImageViewElement(viewWriter), viewWriter, t('image widget'))\n        });\n        conversion.for('downcast').add(modelToViewAttributeConverter('src')).add(modelToViewAttributeConverter('alt')).add(srcsetAttributeConverter());\n        conversion.for('upcast').elementToElement({\n            view: {\n                name: 'img',\n                attributes: { src: true }\n            },\n            model: (viewImage, modelWriter) => modelWriter.createElement('image', { src: viewImage.getAttribute('src') })\n        }).attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'alt'\n            },\n            model: 'alt'\n        }).attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'srcset'\n            },\n            model: {\n                key: 'srcset',\n                value: viewImage => {\n                    const value = { data: viewImage.getAttribute('srcset') };\n                    if (viewImage.hasAttribute('width')) {\n                        value.width = viewImage.getAttribute('width');\n                    }\n                    return value;\n                }\n            }\n        }).add(viewFigureToModel());\n        // Register imageUpload command.\n        editor.commands.add('imageInsert', new ImageInsertCommand(editor));\n    }\n}\n// Creates a view element representing the image.\n//\n//\t\t<figure class=\"image\"><img></img></figure>\n//\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/containerelement~ContainerElement}\nexport function createImageViewElement(writer) {\n    const emptyElement = writer.createEmptyElement('img');\n    const figure = writer.createContainerElement('figure', { class: 'image' });\n    writer.insert(writer.createPositionAt(figure, 0), emptyElement);\n    return figure;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mouseobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class MouseObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'mousedown';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when mouse button is pressed down on one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/mouseobserver~MouseObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:engine/view/observer/mouseobserver~MouseObserver}\n * needs to be added to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/mouseobserver~MouseObserver\n * @event module:engine/view/document~Document#event:mousedown\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widget\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport { getCode, keyCodes, parseKeystroke } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport '../theme/widget.css';\n\nconst selectAllKeystrokeCode = parseKeystroke( 'Ctrl+A' );\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Widget extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Widget';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Holds previously selected widgets.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<module:engine/view/element~Element>}\n\t\t */\n\t\tthis._previouslySelected = new Set();\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection\n\t\tthis.editor.editing.downcastDispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\t\t\tlet lastMarked = null;\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item;\n\n\t\t\t\t\t// Do not mark nested widgets in selected one. See: #57.\n\t\t\t\t\tif ( isWidget( node ) && !isChild( node, lastMarked ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\t\t\t\t\t\tlastMarked = node;\n\n\t\t\t\t\t\t// Check if widget is a single element selected.\n\t\t\t\t\t\tif ( node == selectedElement ) {\n\t\t\t\t\t\t\tviewWriter.setSelection( viewSelection.getRanges(), { fake: true, label: getLabel( selectedElement ) } );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// Handle custom keydown behaviour.\n\t\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => this._onKeydown( ...args ), { priority: 'high' } );\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onMousedown( eventInfo, domEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element = domEventData.target;\n\n\t\t// Do nothing for single or double click inside nested editable.\n\t\tif ( isInsideNestedEditable( element ) ) {\n\t\t\t// But at least triple click inside nested editable causes broken selection in Safari.\n\t\t\t// For such event, we select the entire nested editable element.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/1463.\n\t\t\tif ( env.isSafari && domEventData.domEvent.detail >= 3 ) {\n\t\t\t\tconst mapper = editor.editing.mapper;\n\t\t\t\tconst modelElement = mapper.toModelElement( element );\n\n\t\t\t\tthis.editor.model.change( writer => {\n\t\t\t\t\tdomEventData.preventDefault();\n\t\t\t\t\twriter.setSelection( modelElement, 'in' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\telement = element.findAncestor( isWidget );\n\n\t\t\tif ( !element ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\tthis._setSelectionOverElement( modelElement );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onKeydown( eventInfo, domEventData ) {\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isForward = keyCode == keyCodes.arrowdown || keyCode == keyCodes.arrowright;\n\t\tlet wasHandled = false;\n\n\t\t// Checks if the keys were handled and then prevents the default event behaviour and stops\n\t\t// the propagation.\n\t\tif ( isArrowKeyCode( keyCode ) ) {\n\t\t\twasHandled = this._handleArrowKeys( isForward );\n\t\t} else if ( isSelectAllKeyCode( domEventData ) ) {\n\t\t\twasHandled = this._selectAllNestedEditableContent() || this._selectAllContent();\n\t\t} else if ( keyCode === keyCodes.enter ) {\n\t\t\twasHandled = this._handleEnterKey( domEventData.shiftKey );\n\t\t}\n\n\t\tif ( wasHandled ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleDelete( isForward ) {\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( this.editor.isReadOnly ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent;\n\n\t\t\t\t\twriter.remove( nodeToRemove );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles arrow keys.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if arrow key should be handled in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleArrowKeys( isForward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelDocument = model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// If selection is next to object element.\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement2 = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( !!objectElement2 && schema.isObject( objectElement2 ) ) {\n\t\t\tthis._setSelectionOverElement( objectElement2 );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the enter key, giving users and access to positions in the editable directly before\n\t * (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or after (<kbd>Enter</kbd>) the selected widget.\n\t * It improves the UX, mainly when the widget is the first or last child of the root editable\n\t * and there's no other way to type after or before it.\n\t *\n\t * @private\n\t * @param {Boolean} isBackwards Set to true if the new paragraph is to be inserted before\n\t * the selected widget (<kbd>Shift</kbd>+<kbd>Enter</kbd>).\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleEnterKey( isBackwards ) {\n\t\tconst model = this.editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst selectedElement = modelSelection.getSelectedElement();\n\n\t\tif ( shouldInsertParagraph( selectedElement, model.schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\tlet position = writer.createPositionAt( selectedElement, isBackwards ? 'before' : 'after' );\n\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\t\t// Split the parent when inside a block element.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/1529\n\t\t\t\tif ( model.schema.isBlock( selectedElement.parent ) ) {\n\t\t\t\t\tconst paragraphLimit = model.schema.findAllowedParent( position, paragraph );\n\n\t\t\t\t\tposition = writer.split( position, paragraphLimit ).position;\n\t\t\t\t}\n\n\t\t\t\twriter.insert( paragraph, position );\n\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Extends the {@link module:engine/model/selection~Selection document's selection} to span the entire\n\t * content of the nested editable if already anchored in one.\n\t *\n\t * See: {@link module:engine/model/schema~Schema#getLimitElement}.\n\t *\n\t * @private\n\t */\n\t_selectAllNestedEditableContent() {\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\t\tconst limitElement = model.schema.getLimitElement( documentSelection );\n\n\t\tif ( documentSelection.getFirstRange().root == limitElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( limitElement ) );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Handles <kbd>CTRL + A</kbd> when widget is selected.\n\t *\n\t * @private\n\t * @returns {Boolean} Returns true if widget was selected and selecting all was handled by this method.\n\t */\n\t_selectAllContent() {\n\t\tconst model = this.editor.model;\n\t\tconst editing = this.editor.editing;\n\t\tconst view = editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst viewSelection = viewDocument.selection;\n\n\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t// Only widget is selected.\n\t\t// https://github.com/ckeditor/ckeditor5-widget/issues/23\n\t\tif ( selectedElement && isWidget( selectedElement ) ) {\n\t\t\tconst widgetParent = editing.mapper.toModelElement( selectedElement.parent );\n\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( widgetParent ) );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_setSelectionOverElement( element ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @private\n\t * @param {Boolean} forward Direction of checking.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getObjectElementNextToSelection( forward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = model.createSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\t\tconst objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n\t\tif ( !!objectElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t *\n\t * @private\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_clearPreviouslySelectedWidgets( writer ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n}\n\n// Returns 'true' if provided key code represents one of the arrow keys.\n//\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n// Returns 'true' if provided (DOM) key event data corresponds with the Ctrl+A keystroke.\n//\n// @param {module:engine/view/observer/keyobserver~KeyEventData} domEventData\n// @returns {Boolean}\nfunction isSelectAllKeyCode( domEventData ) {\n\treturn getCode( domEventData ) == selectAllKeystrokeCode;\n}\n\n// Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\nfunction isInsideNestedEditable( element ) {\n\twhile ( element ) {\n\t\tif ( element.is( 'editableElement' ) && !element.is( 'rootElement' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Click on nested widget should select it.\n\t\tif ( isWidget( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\treturn false;\n}\n\n// Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\nfunction isChild( element, parent ) {\n\tif ( !parent ) {\n\t\treturn false;\n\t}\n\n\treturn Array.from( element.getAncestors() ).includes( parent );\n}\n\n// Checks if enter key should insert paragraph. This should be done only on elements of type object (excluding inline objects).\n//\n// @param {module:engine/model/element~Element} element And element to check.\n// @param {module:engine/model/schema~Schema} schema\nfunction shouldInsertParagraph( element, schema ) {\n\treturn element && schema.isObject( element ) && !schema.isInline( element );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<image>` elements.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageTextAlternativeCommand extends Command {\n\t/**\n\t * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {String|Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( isImage( element ) && element.hasAttribute( 'alt' ) ) {\n\t\t\tthis.value = element.getAttribute( 'alt' );\n\t\t} else {\n\t\t\tthis.value = false;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {String} options.newValue The new value of the `alt` attribute to set.\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'alt', options.newValue, imageElement );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeediting\n */\n\nimport ImageTextAlternativeCommand from './imagetextalternativecommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The image text alternative editing plugin.\n *\n * Registers the `'imageTextAlternative'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.editor.commands.add( 'imageTextAlternative', new ImageTextAlternativeCommand( this.editor ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\n\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledinput/labeledinput.css';\n\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabeledInputView extends View {\n\t/**\n\t * Creates an instance of the labeled input view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Function} InputView Constructor of the input view.\n\t */\n\tconstructor( locale, InputView ) {\n\t\tsuper( locale );\n\n\t\tconst inputUid = `ck-input-${ uid() }`;\n\t\tconst statusUid = `ck-status-${ uid() }`;\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.set( 'label' );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * Controls whether the component is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The validation error text. When set, it will be displayed\n\t\t * next to the {@link #inputView} as a typical validation error message.\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** Setting this property to anything but `null` will automatically\n\t\t * make the {@link module:ui/inputtext/inputtextview~InputTextView#hasError `hasError`}\n\t\t * of the {@link #inputView} `true`.\n\t\t *\n\t\t * **Note:** Typing in the {@link #inputView} which fires the\n\t\t * {@link module:ui/inputtext/inputtextview~InputTextView#event:input `input` event}\n\t\t * resets this property back to `null`, indicating that the input field can be re–validated.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #errorText\n\t\t */\n\t\tthis.set( 'errorText', null );\n\n\t\t/**\n\t\t * The additional information text displayed next to the {@link #inputView} which can\n\t\t * be used to inform the user about the purpose of the input, provide help or hints.\n\t\t *\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n\t\t * latter always takes precedence: if the {@link #errorText} is set, it replaces\n\t\t * {@link #errorText} for as long as the value of the input is invalid.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #infoText\n\t\t */\n\t\tthis.set( 'infoText', null );\n\n\t\t/**\n\t\t * The label view.\n\t\t *\n\t\t * @member {module:ui/label/labelview~LabelView} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( inputUid );\n\n\t\t/**\n\t\t * The input view.\n\t\t *\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView} #inputView\n\t\t */\n\t\tthis.inputView = this._createInputView( InputView, inputUid, statusUid );\n\n\t\t/**\n\t\t * The status view for the {@link #inputView}. It displays {@link #errorText} and\n\t\t * {@link #infoText}.\n\t\t *\n\t\t * @member {module:ui/view~View} #statusView\n\t\t */\n\t\tthis.statusView = this._createStatusView( statusUid );\n\n\t\t/**\n\t\t * The combined status text made of {@link #errorText} and {@link #infoText}.\n\t\t * Note that when present, {@link #errorText} always takes precedence in the\n\t\t * status.\n\t\t *\n\t\t * @see #errorText\n\t\t * @see #infoText\n\t\t * @see #statusView\n\t\t * @private\n\t\t * @observable\n\t\t * @member {String|null} #_statusText\n\t\t */\n\t\tthis.bind( '_statusText' ).to(\n\t\t\tthis, 'errorText',\n\t\t\tthis, 'infoText',\n\t\t\t( errorText, infoText ) => errorText || infoText\n\t\t);\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input',\n\t\t\t\t\tbind.if( 'isReadOnly', 'ck-disabled' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.labelView,\n\t\t\t\tthis.inputView,\n\t\t\t\tthis.statusView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Creates label view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {String} id Unique id to set as labelView#for attribute.\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n\t_createLabelView( id ) {\n\t\tconst labelView = new LabelView( this.locale );\n\n\t\tlabelView.for = id;\n\t\tlabelView.bind( 'text' ).to( this, 'label' );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Creates input view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {Function} InputView Input view constructor.\n\t * @param {String} inputUid Unique id to set as inputView#id attribute.\n\t * @param {String} statusUid Unique id of the status for the input's `aria-describedby` attribute.\n\t * @returns {module:ui/inputtext/inputtextview~InputTextView}\n\t */\n\t_createInputView( InputView, inputUid, statusUid ) {\n\t\tconst inputView = new InputView( this.locale, statusUid );\n\n\t\tinputView.id = inputUid;\n\t\tinputView.ariaDescribedById = statusUid;\n\t\tinputView.bind( 'value' ).to( this );\n\t\tinputView.bind( 'isReadOnly' ).to( this );\n\t\tinputView.bind( 'hasError' ).to( this, 'errorText', value => !!value );\n\n\t\tinputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tthis.errorText = null;\n\t\t} );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n\t * next to the {@link #inputView}. See {@link #_statusText}.\n\t *\n\t * @private\n\t * @param {String} statusUid Unique id of the status, shared with the input's `aria-describedby` attribute.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createStatusView( statusUid ) {\n\t\tconst statusView = new View( this.locale );\n\t\tconst bind = this.bindTemplate;\n\n\t\tstatusView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input__status',\n\t\t\t\t\tbind.if( 'errorText', 'ck-labeled-input__status_error' ),\n\t\t\t\t\tbind.if( '_statusText', 'ck-hidden', value => !value )\n\t\t\t\t],\n\t\t\t\tid: statusUid,\n\t\t\t\trole: bind.if( 'errorText', 'alert' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( '_statusText' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn statusView;\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.inputView.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.inputView.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\n\nimport View from '../view';\nimport '../../theme/components/inputtext/inputtext.css';\n\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputTextView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * The `id` of the element describing this field, e.g. when it has\n\t\t * some error, it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #ariaDescribedById\n\t\t */\n\t\tthis.set( 'ariaDescribedById' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\ttype: 'text',\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input',\n\t\t\t\t\t'ck-input-text',\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDescribedById' )\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tinput: bind.to( 'input' )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Fired when the user types in the input. Corresponds to the native\n\t\t * DOM `input` event.\n\t\t *\n\t\t * @event input\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tconst setValue = value => {\n\t\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t\t};\n\n\t\tsetValue( this.value );\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tsetValue( value );\n\t\t} );\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../../theme/textalternativeform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\nexport default class TextAlternativeFormView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = this.locale.t;\n        /**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * A textarea with a label.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView} #labeledTextarea\n\t\t */\n        this.labeledInput = this._createLabeledInputView();\n        /**\n\t\t * A button used to submit the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n\t\t */\n        this.saveButtonView = this._createButton(t('Save'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * A button used to cancel the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n\t\t */\n        this.cancelButtonView = this._createButton(t('Cancel'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-text-alternative-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-image/issues/40\n                tabindex: '-1'\n            },\n            children: [\n                this.labeledInput,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        this.keystrokes.listenTo(this.element);\n        submitHandler({ view: this });\n        [\n            this.labeledInput,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n    }\n    /**\n\t * Creates the button view.\n\t *\n\t * @private\n\t * @param {String} label The button label\n\t * @param {String} icon The button's icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n\t * Creates an input with a label.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t */\n    _createLabeledInputView() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('Text alternative');\n        labeledInput.inputView.placeholder = t('Text alternative');\n        return labeledInput;\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/submithandler\n */\n\n/**\n * A handler useful for {@link module:ui/view~View views} working as HTML forms. It intercepts a native DOM\n * `submit` event, prevents the default web browser behavior (navigation and page reload) and\n * fires the `submit` event on a view instead. Such a custom event can be then used by any\n * {@link module:utils/dom/emittermixin~Emitter emitter}, e.g. to serialize the form data.\n *\n *\t\timport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\n *\n *\t\t// ...\n *\n *\t\tclass AnyFormView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tsuper();\n *\n *\t\t\t\t// ...\n *\n *\t\t\t\tsubmitHandler( {\n *\t\t\t\t\tview: this\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tconst view = new AnyFormView();\n *\n *\t\t// A sample listener attached by an emitter working with the view.\n *\t\tthis.listenTo( view, 'submit', () => {\n *\t\t\tsaveTheFormData();\n *\t\t\thideTheForm();\n *\t\t} );\n *\n * @param {Object} [options] Configuration options.\n * @param {module:ui/view~View} options.view The view which DOM `submit` events should be handled.\n */\nexport default function submitHandler( { view } ) {\n\tview.listenTo( view.element, 'submit', ( evt, domEvt ) => {\n\t\tdomEvt.preventDefault();\n\t\tview.fire( 'submit' );\n\t}, { useCapture: true } );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\n\nimport View from '../../view';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { isElement } from 'lodash-es';\n\nimport '../../../theme/components/panel/balloonpanel.css';\n\nconst toPx = toUnit( 'px' );\nconst defaultLimiterElement = global.document.body;\n\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n *\t\tconst panel = new BalloonPanelView( locale );\n *\t\tconst childView = new ChildView();\n *\t\tconst positions = BalloonPanelView.defaultPositions;\n *\n *\t\tpanel.render();\n *\n *\t\t// Add a child view to the panel's content collection.\n *\t\tpanel.content.add( childView );\n *\n *\t\t// Start pinning the panel to an element with the \"target\" id DOM.\n *\t\t// The balloon will remain pinned until unpin() is called.\n *\t\tpanel.pin( {\n *\t\t\ttarget: document.querySelector( '#target' ),\n *\t\t\tpositions: [\n *\t\t\t\tpositions.northArrowSouth,\n *\t\t\t\tpositions.southArrowNorth\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class BalloonPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The absolute top position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #top\n\t\t */\n\t\tthis.set( 'top', 0 );\n\n\t\t/**\n\t\t * The absolute left position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #left\n\t\t */\n\t\tthis.set( 'left', 0 );\n\n\t\t/**\n\t\t * The balloon panel's current position. The position name is reflected in the CSS class set\n\t\t * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for the \"arrow_nw\" position. The class\n\t\t * controls the minor aspects of the balloon's visual appearance like the placement\n\t\t * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\n\t\t *\n\t\t * Default position names correspond with\n\t\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t\t *\n\t\t * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\n\t\t *\n\t\t * @observable\n\t\t * @default 'arrow_nw'\n\t\t * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\n\t\t */\n\t\tthis.set( 'position', 'arrow_nw' );\n\n\t\t/**\n\t\t * Controls whether the balloon panel is visible or not.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * Controls whether the balloon panel has an arrow. The presence of the arrow\n\t\t * is reflected in the `ck-balloon-panel_with-arrow` CSS class.\n\t\t *\n\t\t * @observable\n\t\t * @default true\n\t\t * @member {Boolean} #withArrow\n\t\t */\n\t\tthis.set( 'withArrow', true );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * A callback that starts pinning the panel when {@link #isVisible} gets\n\t\t * `true`. Used by {@link #pin}.\n\t\t *\n\t\t * @private\n\t\t * @member {Function} #_pinWhenIsVisibleCallback\n\t\t */\n\n\t\t/**\n\t\t * A collection of the child views that creates the balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-balloon-panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-balloon-panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-balloon-panel_visible' ),\n\t\t\t\t\tbind.if( 'withArrow', 'ck-balloon-panel_with-arrow' ),\n\t\t\t\t\tbind.to( 'class' )\n\t\t\t\t],\n\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', toPx ),\n\t\t\t\t\tleft: bind.to( 'left', toPx )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\tshow() {\n\t\tthis.isVisible = true;\n\t}\n\n\t/**\n\t * Hides the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\thide() {\n\t\tthis.isVisible = false;\n\t}\n\n\t/**\n\t * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n\t * smart positioning heuristics that chooses from available positions to make sure the panel\n\t * is visible to the user i.e. within the limits of the viewport.\n\t *\n\t * This method accepts configuration {@link module:utils/dom/position~Options options}\n\t * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Attach the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.attachTo( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * **Note**: Attaching the panel will also automatically {@link #show} it.\n\t *\n\t * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n\t * See the {@link #pin} method for a more permanent positioning strategy.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tattachTo( options ) {\n\t\tthis.show();\n\n\t\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\t\tconst positionOptions = Object.assign( {}, {\n\t\t\telement: this.element,\n\t\t\tpositions: [\n\t\t\t\tdefaultPositions.southArrowNorth,\n\t\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\t\tdefaultPositions.northArrowSouth,\n\t\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\t\tdefaultPositions.northArrowSouthEast\n\t\t\t],\n\t\t\tlimiter: defaultLimiterElement,\n\t\t\tfitInViewport: true\n\t\t}, options );\n\n\t\tconst optimalPosition = BalloonPanelView._getOptimalPosition( positionOptions );\n\n\t\t// Usually browsers make some problems with super accurate values like 104.345px\n\t\t// so it is better to use int values.\n\t\tconst left = parseInt( optimalPosition.left );\n\t\tconst top = parseInt( optimalPosition.top );\n\t\tconst position = optimalPosition.name;\n\n\t\tObject.assign( this, { top, left, position } );\n\t}\n\n\t/**\n\t * Works the same way as the {@link #attachTo} method except that the position of the panel is\n\t * continuously updated when:\n\t *\n\t * * any ancestor of the {@link module:utils/dom/position~Options#target}\n\t * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n\t * * the browser window gets resized or scrolled.\n\t *\n\t * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n\t * and is immune to the changing environment.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Pin the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.pin( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * To leave the pinned state, use the {@link #unpin} method.\n\t *\n\t * **Note**: Pinning the panel will also automatically {@link #show} it.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tpin( options ) {\n\t\tthis.unpin();\n\n\t\tthis._pinWhenIsVisibleCallback = () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis._startPinning( options );\n\t\t\t} else {\n\t\t\t\tthis._stopPinning();\n\t\t\t}\n\t\t};\n\n\t\tthis._startPinning( options );\n\n\t\t// Control the state of the listeners depending on whether the panel is visible\n\t\t// or not.\n\t\t// TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\tthis.listenTo( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\t}\n\n\t/**\n\t * Stops pinning the panel, as set up by {@link #pin}.\n\t */\n\tunpin() {\n\t\tif ( this._pinWhenIsVisibleCallback ) {\n\t\t\t// Deactivate listeners attached by pin().\n\t\t\tthis._stopPinning();\n\n\t\t\t// Deactivate the panel pin() control logic.\n\t\t\t// TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\t\tthis.stopListening( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\n\t\t\tthis._pinWhenIsVisibleCallback = null;\n\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\t/**\n\t * Starts managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}.\n\t */\n\t_startPinning( options ) {\n\t\tthis.attachTo( options );\n\n\t\tconst targetElement = getDomElement( options.target );\n\t\tconst limiterElement = options.limiter ? getDomElement( options.limiter ) : defaultLimiterElement;\n\n\t\t// Then we need to listen on scroll event of eny element in the document.\n\t\tthis.listenTo( global.document, 'scroll', ( evt, domEvt ) => {\n\t\t\tconst scrollTarget = domEvt.target;\n\n\t\t\t// The position needs to be updated if the positioning target is within the scrolled element.\n\t\t\tconst isWithinScrollTarget = targetElement && scrollTarget.contains( targetElement );\n\n\t\t\t// The position needs to be updated if the positioning limiter is within the scrolled element.\n\t\t\tconst isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains( limiterElement );\n\n\t\t\t// The positioning target and/or limiter can be a Rect, object etc..\n\t\t\t// There's no way to optimize the listener then.\n\t\t\tif ( isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement ) {\n\t\t\t\tthis.attachTo( options );\n\t\t\t}\n\t\t}, { useCapture: true } );\n\n\t\t// We need to listen on window resize event and update position.\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis.attachTo( options );\n\t\t} );\n\t}\n\n\t/**\n\t * Stops managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t */\n\t_stopPinning() {\n\t\tthis.stopListening( global.document, 'scroll' );\n\t\tthis.stopListening( global.window, 'resize' );\n\t}\n}\n\n// Returns the DOM element for given object or null, if there is none,\n// e.g. when the passed object is a Rect instance or so.\n//\n// @private\n// @param {*} object\n// @returns {HTMLElement|null}\nfunction getDomElement( object ) {\n\tif ( isElement( object ) ) {\n\t\treturn object;\n\t}\n\n\tif ( isRange( object ) ) {\n\t\treturn object.commonAncestorContainer;\n\t}\n\n\tif ( typeof object == 'function' ) {\n\t\treturn getDomElement( object() );\n\t}\n\n\treturn null;\n}\n\n/**\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-----|---------...\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t +--+  |  +------...\n *\t\t     \\ | /\n *\t\t      \\|/\n *\t    >|-----|<---------------- horizontal offset\n *\n * @default 30\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\n */\nBalloonPanelView.arrowHorizontalOffset = 25;\n\n/**\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-------------...\n *\t\t |\n *\t\t |\n *\t\t |                      /-- vertical offset\n *\t\t |                     V\n *\t\t +--+    +-----...    ---------\n *\t\t     \\  /              |\n *\t\t      \\/               |\n *\t\t-------------------------------\n *\t\t                       ^\n *\n * @default 15\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\n */\nBalloonPanelView.arrowVerticalOffset = 10;\n\n/**\n * Function used to calculate the optimal position for the balloon.\n *\n * @protected\n * @member {Function} module:ui/panel/balloon/balloonpanelview~BalloonPanelView._getOptimalPosition\n */\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n * **North**\n *\n * * `northArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t    [ Target ]\n *\n * * `northArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t          [ Target ]\n *\n * * `northArrowSouthWest`\n *\n * \t\t  +-----------------+\n * \t\t  |     Balloon     |\n * \t\t  +-----------------+\n * \t\t     V\n * \t\t[ Target ]\n *\n * **North west**\n *\n * * `northWestArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t         [ Target ]\n *\n * * `northWestArrowSouthWest`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t   V\n * \t\t   [ Target ]\n *\n * * `northWestArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t               [ Target ]\n *\n * **North east**\n *\n * * `northEastArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * * `northEastArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t      [ Target ]\n *\n * * `northEastArrowSouthWest`\n *\n * \t\t      +-----------------+\n * \t\t      |     Balloon     |\n * \t\t      +-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * **South**\n *\n * * `southArrowNorth`\n *\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthEast`\n *\n *\t\t          [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n *\n * **South west**\n *\n * * `southWestArrowNorth`\n *\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthWest`\n *\n *\t\t  [ Target ]\n *\t\t  ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthEast`\n *\n *\t\t               [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * **South east**\n *\n * * `southEastArrowNorth`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthEast`\n *\n *\t\t       [ Target ]\n *\t\t                ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t       +-----------------+\n *\t\t       |     Balloon     |\n *\t\t       +-----------------+\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n *\n * @member {Object} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\n */\nBalloonPanelView.defaultPositions = {\n\t// ------- North\n\n\tnorthArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- North west\n\n\tnorthWestArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthWestArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\tnorthWestArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\t// ------- North east\n\n\tnorthEastArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthEastArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthEastArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- South\n\n\tsouthArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\t// ------- South west\n\n\tsouthWestArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthWestArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\tsouthWestArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\t// ------- South east\n\n\tsouthEastArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthEastArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthEastArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n};\n\n// Returns the top coordinate for positions starting with `north*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getNorthTop( targetRect, balloonRect ) {\n\treturn targetRect.top - balloonRect.height - BalloonPanelView.arrowVerticalOffset;\n}\n\n// Returns the top coordinate for positions starting with `south*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getSouthTop( targetRect ) {\n\treturn targetRect.bottom + BalloonPanelView.arrowVerticalOffset;\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z\\\" /></svg>\\n\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ContextualBalloon';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        /**\n\t\t * The {@link module:utils/dom/position~Options#limiter position limiter}\n\t\t * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n\t\t * or {@link #updatePosition}.\n\t\t *\n\t\t * By default, a function that obtains the farthest DOM\n\t\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\n\t\t * of the {@link module:engine/view/document~Document#selection}.\n\t\t *\n\t\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n\t\t */\n        this.positionLimiter = () => {\n            const view = this.editor.editing.view;\n            const viewDocument = view.document;\n            const editableElement = viewDocument.selection.editableElement;\n            if (editableElement) {\n                return view.domConverter.mapViewToDom(editableElement.root);\n            }\n            return null;\n        };\n        /**\n\t\t * The currently visible view or `null` when there are no views in any stack.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {module:ui/view~View|null} #visibleView\n\t\t */\n        this.set('visibleView', null);\n        /**\n\t\t * The common balloon panel view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n\t\t */\n        this.view = new BalloonPanelView(editor.locale);\n        editor.ui.view.body.add(this.view);\n        editor.ui.focusTracker.add(this.view.element);\n        /**\n\t\t * The map of views and their stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:ui/view~View,Set>}\n\t\t */\n        this._viewToStack = new Map();\n        /**\n\t\t * The map of IDs and stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n        this._idToStack = new Map();\n        /**\n\t\t * A total number of all stacks in the balloon.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #_numberOfStacks\n\t\t */\n        this.set('_numberOfStacks', 0);\n        /**\n\t\t * A flag that controls the single view mode.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_singleViewMode\n\t\t */\n        this.set('_singleViewMode', false);\n        /**\n\t\t * Rotator view embedded in the contextual balloon.\n\t\t * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t\t */\n        this._rotatorView = this._createRotatorView();\n        /**\n\t\t * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/view~View}\n\t\t */\n        this._fakePanelsView = this._createFakePanelsView();\n    }\n    /**\n\t * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n\t *\n\t * @param {module:ui/view~View} view\n\t * @returns {Boolean}\n\t */\n    hasView(view) {\n        return Array.from(this._viewToStack.keys()).includes(view);\n    }\n    /**\n\t * Adds a new view to the stack and makes it visible if the current stack is visible\n\t * or it is the first view in the balloon.\n\t *\n\t * @param {Object} data The configuration of the view.\n\t * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n\t * @param {module:ui/view~View} [data.view] The content of the balloon.\n\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n\t * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n\t */\n    add(data) {\n        if (this.hasView(data.view)) {\n            /**\n\t\t\t * Trying to add configuration of the same view more than once.\n\t\t\t *\n\t\t\t * @error contextualballoon-add-view-exist\n\t\t\t */\n            throw new CKEditorError('contextualballoon-add-view-exist: Cannot add configuration of the same view twice.', [\n                this,\n                data\n            ]);\n        }\n        const stackId = data.stackId || 'main';\n        // If new stack is added, creates it and show view from this stack.\n        if (!this._idToStack.has(stackId)) {\n            this._idToStack.set(stackId, new Map([[\n                    data.view,\n                    data\n                ]]));\n            this._viewToStack.set(data.view, this._idToStack.get(stackId));\n            this._numberOfStacks = this._idToStack.size;\n            if (!this._visibleStack || data.singleViewMode) {\n                this.showStack(stackId);\n            }\n            return;\n        }\n        const stack = this._idToStack.get(stackId);\n        if (data.singleViewMode) {\n            this.showStack(stackId);\n        }\n        // Add new view to the stack.\n        stack.set(data.view, data);\n        this._viewToStack.set(data.view, stack);\n        // And display it if is added to the currently visible stack.\n        if (stack === this._visibleStack) {\n            this._showView(data);\n        }\n    }\n    /**\n\t * Removes the given view from the stack. If the removed view was visible,\n\t * the view preceding it in the stack will become visible instead.\n\t * When there is no view in the stack, the next stack will be displayed.\n\t * When there are no more stacks, the balloon will hide.\n\t *\n\t * @param {module:ui/view~View} view A view to be removed from the balloon.\n\t */\n    remove(view) {\n        if (!this.hasView(view)) {\n            /**\n\t\t\t * Trying to remove the configuration of the view not defined in the stack.\n\t\t\t *\n\t\t\t * @error contextualballoon-remove-view-not-exist\n\t\t\t */\n            throw new CKEditorError('contextualballoon-remove-view-not-exist: Cannot remove the configuration of a non-existent view.', [\n                this,\n                view\n            ]);\n        }\n        const stack = this._viewToStack.get(view);\n        if (this._singleViewMode && this.visibleView === view) {\n            this._singleViewMode = false;\n        }\n        // When visible view will be removed we need to show a preceding view or next stack\n        // if a view is the only view in the stack.\n        if (this.visibleView === view) {\n            if (stack.size === 1) {\n                if (this._idToStack.size > 1) {\n                    this._showNextStack();\n                } else {\n                    this.view.hide();\n                    this.visibleView = null;\n                    this._rotatorView.hideView();\n                }\n            } else {\n                this._showView(Array.from(stack.values())[stack.size - 2]);\n            }\n        }\n        if (stack.size === 1) {\n            this._idToStack.delete(this._getStackId(stack));\n            this._numberOfStacks = this._idToStack.size;\n        } else {\n            stack.delete(view);\n        }\n        this._viewToStack.delete(view);\n    }\n    /**\n\t * Updates the position of the balloon using the position data of the first visible view in the stack.\n\t * When new position data is given, the position data of the currently visible view will be updated.\n\t *\n\t * @param {module:utils/dom/position~Options} [position] position options.\n\t */\n    updatePosition(position) {\n        if (position) {\n            this._visibleStack.get(this.visibleView).position = position;\n        }\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n    }\n    /**\n\t * Shows the last view from the stack of a given ID.\n\t *\n\t * @param {String} id\n\t */\n    showStack(id) {\n        this.visibleStack = id;\n        const stack = this._idToStack.get(id);\n        if (!stack) {\n            /**\n\t\t\t * Trying to show a stack that does not exist.\n\t\t\t *\n\t\t\t * @error contextualballoon-showstack-stack-not-exist\n\t\t\t */\n            throw new CKEditorError('contextualballoon-showstack-stack-not-exist: Cannot show a stack that does not exist.', this);\n        }\n        if (this._visibleStack === stack) {\n            return;\n        }\n        this._showView(Array.from(stack.values()).pop());\n    }\n    /**\n\t * Returns the stack of the currently visible view.\n\t *\n\t * @private\n\t * @type {Set}\n\t */\n    get _visibleStack() {\n        return this._viewToStack.get(this.visibleView);\n    }\n    /**\n\t * Returns the ID of the given stack.\n\t *\n\t * @private\n\t * @param {Set} stack\n\t * @returns {String}\n\t */\n    _getStackId(stack) {\n        const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n        return entry[0];\n    }\n    /**\n\t * Shows the last view from the next stack.\n\t *\n\t * @private\n\t */\n    _showNextStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = 0;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n\t * Shows the last view from the previous stack.\n\t *\n\t * @private\n\t */\n    _showPrevStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = stacks.length - 1;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n\t * Creates a rotator view.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t */\n    _createRotatorView() {\n        const view = new RotatorView(this.editor.locale);\n        const t = this.editor.locale.t;\n        this.view.content.add(view);\n        // Hide navigation when there is only a one stack & not in single view mode.\n        view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n            return !isSingleViewMode && value > 1;\n        });\n        // Update balloon position after toggling navigation.\n        view.on('change:isNavigationVisible', () => this.updatePosition(), { priority: 'low' });\n        // Update stacks counter value.\n        view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n            if (numberOfStacks < 2) {\n                return '';\n            }\n            const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n            return t('%0 of %1', [\n                current,\n                numberOfStacks\n            ]);\n        });\n        view.buttonNextView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showNextStack();\n        });\n        view.buttonPrevView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showPrevStack();\n        });\n        return view;\n    }\n    /**\n\t * @returns {module:ui/view~View}\n\t */\n    _createFakePanelsView() {\n        const view = new FakePanelsView(this.editor.locale, this.view);\n        view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n            const showPanels = !isSingleViewMode && number >= 2;\n            return showPanels ? Math.min(number - 1, 2) : 0;\n        });\n        view.listenTo(this.view, 'change:top', () => view.updatePosition());\n        view.listenTo(this.view, 'change:left', () => view.updatePosition());\n        this.editor.ui.view.body.add(view);\n        return view;\n    }\n    /**\n\t * Sets the view as the content of the balloon and attaches the balloon using position\n\t * options of the first view.\n\t *\n\t * @private\n\t * @param {Object} data Configuration.\n\t * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n\t * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t */\n    _showView({view, balloonClassName = '', withArrow = true, singleViewMode = false}) {\n        this.view.class = balloonClassName;\n        this.view.withArrow = withArrow;\n        this._rotatorView.showView(view);\n        this.visibleView = view;\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n        if (singleViewMode) {\n            this._singleViewMode = true;\n        }\n    }\n    /**\n\t * Returns position options of the last view in the stack.\n\t * This keeps the balloon in the same position when the view is changed.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n    _getBalloonPosition() {\n        let position = Array.from(this._visibleStack.values()).pop().position;\n        // Use the default limiter if none has been specified.\n        if (position && !position.limiter) {\n            // Don't modify the original options object.\n            position = Object.assign({}, position, { limiter: this.positionLimiter });\n        }\n        return position;\n    }\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\nclass RotatorView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        /**\n\t\t * Defines whether navigation is visible or not.\n\t\t *\n\t\t * @member {Boolean} #isNavigationVisible\n\t\t */\n        this.set('isNavigationVisible', true);\n        /**\n\t\t * Used for checking if a view is focused or not.\n\t\t *\n\t\t * @type {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * Navigation button for switching the stack to the previous one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.buttonPrevView = this._createButtonView(t('Previous'), prevIcon);\n        /**\n\t\t * Navigation button for switching the stack to the next one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.buttonNextView = this._createButtonView(t('Next'), nextIcon);\n        /**\n\t\t * A collection of the child views that creates the rotator content.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-rotator'\n                ],\n                'z-index': '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-balloon-rotator__navigation',\n                            bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')\n                        ]\n                    },\n                    children: [\n                        this.buttonPrevView,\n                        {\n                            tag: 'span',\n                            attributes: { class: ['ck-balloon-rotator__counter'] },\n                            children: [{ text: bind.to('counter') }]\n                        },\n                        this.buttonNextView\n                    ]\n                },\n                {\n                    tag: 'div',\n                    attributes: { class: 'ck-balloon-rotator__content' },\n                    children: this.content\n                }\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n    }\n    /**\n\t * Shows a given view.\n\t *\n\t * @param {module:ui/view~View} view The view to show.\n\t */\n    showView(view) {\n        this.hideView();\n        this.content.add(view);\n    }\n    /**\n\t * Hides the currently displayed view.\n\t */\n    hideView() {\n        this.content.clear();\n    }\n    /**\n\t * Creates a navigation button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n    _createButtonView(label, icon) {\n        const view = new ButtonView(this.locale);\n        view.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        return view;\n    }\n}\n// Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\nclass FakePanelsView extends View {\n    // @inheritDoc\n    constructor(locale, balloonPanelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Fake panels top offset.\n        //\n        // @observable\n        // @member {Number} #top\n        this.set('top', 0);\n        // Fake panels left offset.\n        //\n        // @observable\n        // @member {Number} #left\n        this.set('left', 0);\n        // Fake panels height.\n        //\n        // @observable\n        // @member {Number} #height\n        this.set('height', 0);\n        // Fake panels width.\n        //\n        // @observable\n        // @member {Number} #width\n        this.set('width', 0);\n        // Number of rendered fake panels.\n        //\n        // @observable\n        // @member {Number} #numberOfPanels\n        this.set('numberOfPanels', 0);\n        // Collection of the child views which creates fake panel content.\n        //\n        // @readonly\n        // @type {module:ui/viewcollection~ViewCollection}\n        this.content = this.createCollection();\n        // Context.\n        //\n        // @private\n        // @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n        this._balloonPanelView = balloonPanelView;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-fake-panel',\n                    bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx),\n                    width: bind.to('width', toPx),\n                    height: bind.to('height', toPx)\n                }\n            },\n            children: this.content\n        });\n        this.on('change:numberOfPanels', (evt, name, next, prev) => {\n            if (next > prev) {\n                this._addPanels(next - prev);\n            } else {\n                this._removePanels(prev - next);\n            }\n            this.updatePosition();\n        });\n    }\n    // @private\n    // @param {Number} number\n    _addPanels(number) {\n        while (number--) {\n            const view = new View();\n            view.setTemplate({ tag: 'div' });\n            this.content.add(view);\n            this.registerChild(view);\n        }\n    }\n    // @private\n    // @param {Number} number\n    _removePanels(number) {\n        while (number--) {\n            const view = this.content.last;\n            this.content.remove(view);\n            this.deregisterChild(view);\n            view.destroy();\n        }\n    }\n    // Updates coordinates of fake panels.\n    updatePosition() {\n        if (this.numberOfPanels) {\n            const {top, left} = this._balloonPanelView;\n            const {width, height} = new Rect(this._balloonPanelView.element);\n            Object.assign(this, {\n                top,\n                left,\n                width,\n                height\n            });\n        }\n    }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/ui/utils\n */\n\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { getSelectedImageWidget } from '../utils';\n\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the image in the editor content, if one is selected.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport function repositionContextualBalloon( editor ) {\n\tconst balloon = editor.plugins.get( 'ContextualBalloon' );\n\n\tif ( getSelectedImageWidget( editor.editing.view.document.selection ) ) {\n\t\tconst position = getBalloonPositionData( editor );\n\n\t\tballoon.updatePosition( position );\n\t}\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected element in the editor content.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n * @returns {module:utils/dom/position~Options}\n */\nexport function getBalloonPositionData( editor ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn {\n\t\ttarget: editingView.domConverter.viewToDom( editingView.document.selection.getSelectedElement() ),\n\t\tpositions: [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast\n\t\t]\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport textAlternativeIcon from '@ckeditor/ckeditor5-core/theme/icons/low-vision.svg';\nimport {\n    repositionContextualBalloon,\n    getBalloonPositionData\n} from '../image/ui/utils';\nimport { getSelectedImageWidget } from '../image/utils';\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageTextAlternativeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        this._createButton();\n        this._createForm();\n    }\n    /**\n\t * @inheritDoc\n\t */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this._form.destroy();\n    }\n    /**\n\t * Creates a button showing the balloon panel for changing the image text alternative and\n\t * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t */\n    _createButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('imageTextAlternative', locale => {\n            const command = editor.commands.get('imageTextAlternative');\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Change image text alternative'),\n                icon: textAlternativeIcon,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => this._showForm());\n            return view;\n        });\n    }\n    /**\n\t * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t * form.\n\t *\n\t * @private\n\t */\n    _createForm() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        /**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        /**\n\t\t * A form containing a textarea and buttons, used to change the `alt` text value.\n\t\t *\n\t\t * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t\t */\n        this._form = new TextAlternativeFormView(editor.locale);\n        // Render the form so its #element is available for clickOutsideHandler.\n        this._form.render();\n        this.listenTo(this._form, 'submit', () => {\n            editor.execute('imageTextAlternative', { newValue: this._form.labeledInput.inputView.element.value });\n            this._hideForm(true);\n        });\n        this.listenTo(this._form, 'cancel', () => {\n            this._hideForm(true);\n        });\n        // Close the form on Esc key press.\n        this._form.keystrokes.set('Esc', (data, cancel) => {\n            this._hideForm(true);\n            cancel();\n        });\n        // Reposition the balloon or hide the form if an image widget is no longer selected.\n        this.listenTo(editor.ui, 'update', () => {\n            if (!getSelectedImageWidget(viewDocument.selection)) {\n                this._hideForm(true);\n            } else if (this._isVisible) {\n                repositionContextualBalloon(editor);\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this._form,\n            activator: () => this._isVisible,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideForm()\n        });\n    }\n    /**\n\t * Shows the {@link #_form} in the {@link #_balloon}.\n\t *\n\t * @private\n\t */\n    _showForm() {\n        if (this._isVisible) {\n            return;\n        }\n        const editor = this.editor;\n        const command = editor.commands.get('imageTextAlternative');\n        const labeledInput = this._form.labeledInput;\n        if (!this._isInBalloon) {\n            this._balloon.add({\n                view: this._form,\n                position: getBalloonPositionData(editor)\n            });\n        }\n        // Make sure that each time the panel shows up, the field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n        // stays unaltered) and re-opened it without changing the value of the command, they would see the\n        // old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-image/issues/114\n        labeledInput.value = labeledInput.inputView.element.value = command.value || '';\n        this._form.labeledInput.select();\n    }\n    /**\n\t * Removes the {@link #_form} from the {@link #_balloon}.\n\t *\n\t * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n\t * @private\n\t */\n    _hideForm(focusEditable) {\n        if (!this._isInBalloon) {\n            return;\n        }\n        // Blur the input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        if (this._form.focusTracker.isFocused) {\n            this._form.saveButtonView.focus();\n        }\n        this._balloon.remove(this._form);\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n    get _isVisible() {\n        return this._balloon.visibleView === this._form;\n    }\n    /**\n\t * Returns `true` when the {@link #_form} is in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n    get _isInBalloon() {\n        return this._balloon.hasView(this._form);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageTextAlternativeEditing from './imagetextalternative/imagetextalternativeediting';\nimport ImageTextAlternativeUI from './imagetextalternative/imagetextalternativeui';\n\n/**\n * The image text alternative plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-styles image styles} documentation.\n *\n * This is a \"glue\" plugin which loads the\n *  {@link module:image/imagetextalternative/imagetextalternativeediting~ImageTextAlternativeEditing}\n * and {@link module:image/imagetextalternative/imagetextalternativeui~ImageTextAlternativeUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternative extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageTextAlternativeEditing, ImageTextAlternativeUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageTextAlternative';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\n\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Stores the internal state of a single resizable object.\n *\n */\nexport default class ResizeState {\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n\t */\n\tconstructor( options ) {\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalWidth\n\t\t */\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalHeight\n\t\t */\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalWidthPercents\n\t\t */\n\n\t\t/**\n\t\t * Position of the handle that has initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc or `null`\n\t\t * if unknown.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String|null} #activeHandlePosition\n\t\t */\n\t\tthis.set( 'activeHandlePosition', null );\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedWidthPercents\n\t\t */\n\t\tthis.set( 'proposedWidthPercents', null );\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedWidthPixels\n\t\t */\n\t\tthis.set( 'proposedWidth', null );\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedHeightPixels\n\t\t */\n\t\tthis.set( 'proposedHeight', null );\n\n\t\tthis.set( 'proposedHandleHostWidth', null );\n\t\tthis.set( 'proposedHandleHostHeight', null );\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #aspectRatio\n\t\t */\n\n\t\t/**\n\t\t * @private\n\t\t * @type {module:widget/widgetresize~ResizerOptions}\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * Reference point of resizer where the dragging started. It is used to measure the distance to user cursor\n\t\t * traveled, thus how much the image should be enlarged.\n\t\t * This information is only known after DOM was rendered, so it will be updated later.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._referenceCoordinates = null;\n\t}\n\n\t/**\n\t *\n\t * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n\t * @param {HTMLElement} domHandleHost\n\t * @param {HTMLElement} domResizeHost\n\t */\n\tbegin( domResizeHandle, domHandleHost, domResizeHost ) {\n\t\tconst clientRect = new Rect( domHandleHost );\n\n\t\tthis.activeHandlePosition = getHandlePosition( domResizeHandle );\n\n\t\tthis._referenceCoordinates = getAbsoluteBoundaryPoint( domHandleHost, getOppositePosition( this.activeHandlePosition ) );\n\n\t\tthis.originalWidth = clientRect.width;\n\t\tthis.originalHeight = clientRect.height;\n\n\t\tthis.aspectRatio = clientRect.width / clientRect.height;\n\n\t\tconst widthStyle = domResizeHost.style.width;\n\n\t\tif ( widthStyle ) {\n\t\t\tif ( widthStyle.match( /^\\d+\\.?\\d*%$/ ) ) {\n\t\t\t\tthis.originalWidthPercents = parseFloat( widthStyle );\n\t\t\t} else {\n\t\t\t\t// TODO we need to check it via comparing to the parent's width.\n\t\t\t\tthis.originalWidthPercents = 50;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.originalWidthPercents = 100;\n\t\t}\n\t}\n\n\tupdate( newSize ) {\n\t\tthis.proposedWidth = newSize.width;\n\t\tthis.proposedHeight = newSize.height;\n\t\tthis.proposedWidthPercents = newSize.widthPercents;\n\n\t\tthis.proposedHandleHostWidth = newSize.handleHostWidth;\n\t\tthis.proposedHandleHostHeight = newSize.handleHostHeight;\n\t}\n}\n\nmix( ResizeState, ObservableMixin );\n\n/**\n * Returns coordinates of top-left corner of a element, relative to the document's top-left corner.\n *\n * @private\n * @param {HTMLElement} element\n * @param {String} resizerPosition Position of the resize handler, e.g. `\"top-left\"`, `\"bottom-right\"`.\n * @returns {Object} return\n * @returns {Number} return.x\n * @returns {Number} return.y\n */\nfunction getAbsoluteBoundaryPoint( element, resizerPosition ) {\n\tconst elementRect = new Rect( element );\n\tconst positionParts = resizerPosition.split( '-' );\n\tconst ret = {\n\t\tx: positionParts[ 1 ] == 'right' ? elementRect.right : elementRect.left,\n\t\ty: positionParts[ 0 ] == 'bottom' ? elementRect.bottom : elementRect.top\n\t};\n\n\tret.x += element.ownerDocument.defaultView.scrollX;\n\tret.y += element.ownerDocument.defaultView.scrollY;\n\n\treturn ret;\n}\n\n/**\n * @private\n * @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns {String} A prefixed HTML class name for the resizer element\n */\nfunction getResizerHandleClass( resizerPosition ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\n/**\n * Determines the position of a given resize handle.\n *\n * @private\n * @param {HTMLElement} domHandle Handler used to calculate reference point.\n * @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\n */\nfunction getHandlePosition( domHandle ) {\n\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\tfor ( const position of resizerPositions ) {\n\t\tif ( domHandle.classList.contains( getResizerHandleClass( position ) ) ) {\n\t\t\treturn position;\n\t\t}\n\t}\n}\n\n/**\n * @param {String} position Like `\"top-left\"`.\n * @returns {String} Inverted `position`, e.g. returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */\nfunction getOppositePosition( position ) {\n\tconst parts = position.split( '-' );\n\tconst replacements = {\n\t\ttop: 'bottom',\n\t\tbottom: 'top',\n\t\tleft: 'right',\n\t\tright: 'left'\n\t};\n\n\treturn `${ replacements[ parts[ 0 ] ] }-${ replacements[ parts[ 1 ] ] }`;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport ResizeState from './resizerstate';\n\n/**\n * Represents a resizer for a single resizable object.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Resizer {\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n\t */\n\tconstructor( options ) {\n\t\t/**\n\t\t * Stores the state of resizable host geometry, such as original width, currently proposed height, etc.\n\t\t *\n\t\t * Note that a new state is created for each resize transaction.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:widget/widgetresize/resizerstate~ResizerState} #state\n\t\t */\n\n\t\t/**\n\t\t * A view displaying new proposed element's size during the resizing.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:widget/widgetresize/resizer~SizeView} #_sizeUI\n\t\t */\n\n\t\t/**\n\t\t * Options passed to the {@link #constructor}.\n\t\t *\n\t\t * @private\n\t\t * @type {module:widget/widgetresize~ResizerOptions}\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * Container of the entire resize UI.\n\t\t *\n\t\t * Note that this property is initialized only after the element bound with the resizer is drawn\n\t\t * so it will be a `null` when uninitialized.\n\t\t *\n\t\t * @private\n\t\t * @type {HTMLElement|null}\n\t\t */\n\t\tthis._domResizerWrapper = null;\n\n\t\t/**\n\t\t * @observable\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\tthis.decorate( 'begin' );\n\t\tthis.decorate( 'cancel' );\n\t\tthis.decorate( 'commit' );\n\t\tthis.decorate( 'updateSize' );\n\t}\n\n\t/**\n\t * Attaches the resizer to the DOM.\n\t */\n\tattach() {\n\t\tconst that = this;\n\t\tconst widgetElement = this._options.viewElement;\n\t\tconst writer = this._options.downcastWriter;\n\n\t\tconst viewResizerWrapper = writer.createUIElement( 'div', {\n\t\t\tclass: 'ck ck-reset_all ck-widget__resizer'\n\t\t}, function( domDocument ) {\n\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\tthat._appendHandles( domElement );\n\t\t\tthat._appendSizeUI( domElement );\n\n\t\t\tthat._domResizerWrapper = domElement;\n\n\t\t\tthat.on( 'change:isEnabled', ( evt, propName, newValue ) => {\n\t\t\t\tdomElement.style.display = newValue ? '' : 'none';\n\t\t\t} );\n\n\t\t\tdomElement.style.display = that.isEnabled ? '' : 'none';\n\n\t\t\treturn domElement;\n\t\t} );\n\n\t\t// Append resizer wrapper to the widget's wrapper.\n\t\twriter.insert( writer.createPositionAt( widgetElement, 'end' ), viewResizerWrapper );\n\t\twriter.addClass( 'ck-widget_with-resizer', widgetElement );\n\t}\n\n\t/**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for current process.\n\t *\n\t * @fires begin\n\t * @param {HTMLElement} domResizeHandle Clicked handle.\n\t */\n\tbegin( domResizeHandle ) {\n\t\tthis.state = new ResizeState( this._options );\n\n\t\tthis._sizeUI.bindToState( this._options, this.state );\n\n\t\tthis.state.begin( domResizeHandle, this._getHandleHost(), this._getResizeHost() );\n\n\t\tthis.redraw();\n\t}\n\n\t/**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t * @param {Event} domEventData\n\t */\n\tupdateSize( domEventData ) {\n\t\tconst domHandleHost = this._getHandleHost();\n\t\tconst domResizeHost = this._getResizeHost();\n\t\tconst unit = this._options.unit;\n\t\tconst newSize = this._proposeNewSize( domEventData );\n\n\t\tdomResizeHost.style.width = ( unit === '%' ? newSize.widthPercents : newSize.width ) + this._options.unit;\n\n\t\tconst domHandleHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.handleHostWidth = Math.round( domHandleHostRect.width );\n\t\tnewSize.handleHostHeight = Math.round( domHandleHostRect.height );\n\n\t\tconst domResizeHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.width = Math.round( domResizeHostRect.width );\n\t\tnewSize.height = Math.round( domResizeHostRect.height );\n\n\t\tthis.state.update( newSize );\n\n\t\t// Refresh values based on the real image. Real image might be limited by max-width, and thus fetching it\n\t\t// here will reflect this limitation.\n\t\tthis._domResizerWrapper.style.width = newSize.handleHostWidth + 'px';\n\t\tthis._domResizerWrapper.style.height = newSize.handleHostHeight + 'px';\n\t}\n\n\t/**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */\n\tcommit() {\n\t\tconst unit = this._options.unit;\n\t\tconst newValue = ( unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth ) + this._options.unit;\n\n\t\tthis._options.onCommit( newValue );\n\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Cancels and rejects proposed resize dimensions hiding all the UI.\n\t *\n\t * @fires cancel\n\t */\n\tcancel() {\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Destroys the resizer.\n\t */\n\tdestroy() {\n\t\tthis.cancel();\n\t}\n\n\t/**\n\t * Redraws the resizer.\n\t */\n\tredraw() {\n\t\t// TODO review this\n\t\tconst domWrapper = this._domResizerWrapper;\n\n\t\tif ( existsInDom( domWrapper ) ) {\n\t\t\t// Refresh only if resizer exists in the DOM.\n\t\t\tconst widgetWrapper = domWrapper.parentElement;\n\t\t\tconst handleHost = this._getHandleHost();\n\t\t\tconst clientRect = new Rect( handleHost );\n\n\t\t\tdomWrapper.style.width = clientRect.width + 'px';\n\t\t\tdomWrapper.style.height = clientRect.height + 'px';\n\n\t\t\t// In case a resizing host is not a widget wrapper, we need to compensate\n\t\t\t// for any additional offsets the resize host might have. E.g. wrapper padding\n\t\t\t// or simply another editable. By doing that the border and resizers are shown\n\t\t\t// only around the resize host.\n\t\t\tif ( !widgetWrapper.isSameNode( handleHost ) ) {\n\t\t\t\tdomWrapper.style.left = handleHost.offsetLeft + 'px';\n\t\t\t\tdomWrapper.style.top = handleHost.offsetTop + 'px';\n\n\t\t\t\tdomWrapper.style.height = handleHost.offsetHeight + 'px';\n\t\t\t\tdomWrapper.style.width = handleHost.offsetWidth + 'px';\n\t\t\t}\n\t\t}\n\n\t\tfunction existsInDom( element ) {\n\t\t\treturn element && element.ownerDocument && element.ownerDocument.contains( element );\n\t\t}\n\t}\n\n\tcontainsHandle( domElement ) {\n\t\treturn this._domResizerWrapper.contains( domElement );\n\t}\n\n\tstatic isResizeHandle( domElement ) {\n\t\treturn domElement.classList.contains( 'ck-widget__resizer__handle' );\n\t}\n\n\t/**\n\t * Cleans up the context state.\n\t *\n\t * @protected\n\t */\n\t_cleanup() {\n\t\tthis._sizeUI.dismiss();\n\t\tthis._sizeUI.isVisible = false;\n\t}\n\n\t/**\n\t * Method used to calculate the proposed size as the resize handles are dragged.\n\t *\n\t * @private\n\t * @param {Event} domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t * @returns {Object} return\n\t * @returns {Number} return.width Proposed width.\n\t * @returns {Number} return.height Proposed height.\n\t */\n\t_proposeNewSize( domEventData ) {\n\t\tconst state = this.state;\n\t\tconst currentCoordinates = extractCoordinates( domEventData );\n\t\tconst isCentered = this._options.isCentered ? this._options.isCentered( this ) : true;\n\n\t\t// Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n\t\t// meaning that it has been shrunk.\n\t\t//\n\t\t// +----------------+--+\n\t\t// |                |  |\n\t\t// |       img      |  |\n\t\t// |  /handle host  |  |\n\t\t// +----------------+  | ^\n\t\t// |                   | | - enlarge y\n\t\t// +-------------------+ v\n\t\t// \t\t\t\t\t<-->\n\t\t// \t\t\t\t\t enlarge x\n\t\tconst enlargement = {\n\t\t\tx: state._referenceCoordinates.x - ( currentCoordinates.x + state.originalWidth ),\n\t\t\ty: ( currentCoordinates.y - state.originalHeight ) - state._referenceCoordinates.y\n\t\t};\n\n\t\tif ( isCentered && state.activeHandlePosition.endsWith( '-right' ) ) {\n\t\t\tenlargement.x = currentCoordinates.x - ( state._referenceCoordinates.x + state.originalWidth );\n\t\t}\n\n\t\t// Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n\t\t// one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\t\tif ( isCentered ) {\n\t\t\tenlargement.x *= 2;\n\t\t}\n\n\t\t// const resizeHost = this._getResizeHost();\n\n\t\t// The size proposed by the user. It does not consider the aspect ratio.\n\t\tconst proposedSize = {\n\t\t\twidth: Math.abs( state.originalWidth + enlargement.x ),\n\t\t\theight: Math.abs( state.originalHeight + enlargement.y )\n\t\t};\n\n\t\t// Dominant determination must take the ratio into account.\n\t\tproposedSize.dominant = proposedSize.width / state.aspectRatio > proposedSize.height ? 'width' : 'height';\n\t\tproposedSize.max = proposedSize[ proposedSize.dominant ];\n\n\t\t// Proposed size, respecting the aspect ratio.\n\t\tconst targetSize = {\n\t\t\twidth: proposedSize.width,\n\t\t\theight: proposedSize.height\n\t\t};\n\n\t\tif ( proposedSize.dominant == 'width' ) {\n\t\t\ttargetSize.height = targetSize.width / state.aspectRatio;\n\t\t} else {\n\t\t\ttargetSize.width = targetSize.height * state.aspectRatio;\n\t\t}\n\n\t\treturn {\n\t\t\twidth: Math.round( targetSize.width ),\n\t\t\theight: Math.round( targetSize.height ),\n\t\t\twidthPercents: Math.min( Math.round( state.originalWidthPercents / state.originalWidth * targetSize.width * 100 ) / 100, 100 )\n\t\t};\n\t}\n\n\t/**\n\t * Method used to obtain the resize host.\n\t *\n\t * Resize host is an object that receives dimensions that are result of resizing.\n\t *\n\t * @protected\n\t * @returns {HTMLElement}\n\t */\n\t_getResizeHost() {\n\t\tconst widgetWrapper = this._domResizerWrapper.parentElement;\n\n\t\treturn this._options.getResizeHost( widgetWrapper );\n\t}\n\n\t/**\n\t * Method used to obtain the handle host.\n\t *\n\t * Handle host is an object to which the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. Image widget\n\t * contains an image and a caption. Only image should be surrounded with handles.\n\t *\n\t * @protected\n\t * @returns {HTMLElement}\n\t */\n\t_getHandleHost() {\n\t\tconst widgetWrapper = this._domResizerWrapper.parentElement;\n\n\t\treturn this._options.getHandleHost( widgetWrapper );\n\t}\n\n\t/**\n\t * Renders the resize handles in DOM.\n\t *\n\t * @private\n\t * @param {HTMLElement} domElement The resizer wrapper.\n\t */\n\t_appendHandles( domElement ) {\n\t\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\t\tfor ( const currentPosition of resizerPositions ) {\n\t\t\tdomElement.appendChild( ( new Template( {\n\t\t\t\ttag: 'div',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: `ck-widget__resizer__handle ${ getResizerClass( currentPosition ) }`\n\t\t\t\t}\n\t\t\t} ).render() ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the {@link #_sizeUI} property and adds it to the passed `domElement`.\n\t *\n\t * @private\n\t * @param {HTMLElement} domElement\n\t */\n\t_appendSizeUI( domElement ) {\n\t\tconst sizeUI = new SizeView();\n\n\t\t// Make sure icon#element is rendered before passing to appendChild().\n\t\tsizeUI.render();\n\n\t\tthis._sizeUI = sizeUI;\n\n\t\tdomElement.appendChild( sizeUI.element );\n\t}\n\n\t/**\n\t * Determines the position of a given resize handle.\n\t *\n\t * @private\n\t * @param {HTMLElement} domHandle Handler used to calculate reference point.\n\t * @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\n\t */\n\t_getHandlePosition( domHandle ) {\n\t\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\t\tfor ( const position of resizerPositions ) {\n\t\t\tif ( domHandle.classList.contains( getResizerClass( position ) ) ) {\n\t\t\t\treturn position;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @event begin\n\t */\n\n\t/**\n\t * @event updateSize\n\t */\n\n\t/**\n\t * @event commit\n\t */\n\n\t/**\n\t * @event cancel\n\t */\n}\n\nmix( Resizer, ObservableMixin );\n\n/**\n * A view displaying new proposed element's size during the resizing.\n *\n * @extends {module:ui/view~View}\n */\nclass SizeView extends View {\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-size-view',\n\t\t\t\t\tbind.to( 'activeHandlePosition', value => value ? `ck-orientation-${ value }` : '' )\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.if( 'isVisible', 'none', visible => !visible )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttext: bind.to( 'label' )\n\t\t\t} ]\n\t\t} );\n\t}\n\n\tbindToState( options, resizerState ) {\n\t\tthis.bind( 'isVisible' ).to( resizerState, 'proposedWidth', resizerState, 'proposedHeight', ( width, height ) =>\n\t\t\twidth !== null && height !== null );\n\n\t\tthis.bind( 'label' ).to(\n\t\t\tresizerState, 'proposedHandleHostWidth',\n\t\t\tresizerState, 'proposedHandleHostHeight',\n\t\t\tresizerState, 'proposedWidthPercents',\n\t\t\t( width, height, widthPercents ) => {\n\t\t\t\tif ( options.unit === 'px' ) {\n\t\t\t\t\treturn `${ width }×${ height }`;\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ widthPercents }%`;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis.bind( 'activeHandlePosition' ).to( resizerState );\n\t}\n\n\tdismiss() {\n\t\tthis.unbind();\n\t\tthis.isVisible = false;\n\t}\n}\n\n// @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element\nfunction getResizerClass( resizerPosition ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\nfunction extractCoordinates( event ) {\n\treturn {\n\t\tx: event.pageX,\n\t\ty: event.pageY\n\t};\n}\n","import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { throttle } from 'lodash-es';\n\n/**\n * Widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class WidgetResize extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'WidgetResize';\n\t}\n\n\tinit() {\n\t\tthis.resizers = [];\n\t\tthis.activeResizer = null;\n\n\t\tconst domDocument = global.window.document;\n\t\tconst THROTTLE_THRESHOLD = 16; // 16ms = ~60fps\n\n\t\tthis.editor.model.schema.setAttributeProperties( 'width', {\n\t\t\tisFormatting: true\n\t\t} );\n\n\t\tthis._observer = Object.create( DomEmitterMixin );\n\n\t\tthis._observer.listenTo( domDocument, 'mousedown', ( event, domEventData ) => {\n\t\t\tif ( !Resizer.isResizeHandle( domEventData.target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst resizeHandle = domEventData.target;\n\n\t\t\tthis.activeResizer = this._getResizerByHandle( resizeHandle );\n\n\t\t\tif ( this.activeResizer ) {\n\t\t\t\tthis.activeResizer.begin( resizeHandle );\n\t\t\t}\n\t\t} );\n\n\t\tthis._observer.listenTo( domDocument, 'mousemove', throttle( ( event, domEventData ) => {\n\t\t\tif ( this.activeResizer ) {\n\t\t\t\tthis.activeResizer.updateSize( domEventData );\n\t\t\t}\n\t\t}, THROTTLE_THRESHOLD ) );\n\n\t\tthis._observer.listenTo( domDocument, 'mouseup', () => {\n\t\t\tif ( this.activeResizer ) {\n\t\t\t\tthis.activeResizer.commit();\n\n\t\t\t\tthis.activeResizer = null;\n\t\t\t}\n\t\t} );\n\n\t\tconst redrawResizers = throttle( () => {\n\t\t\tfor ( const context of this.resizers ) {\n\t\t\t\tcontext.redraw();\n\t\t\t}\n\t\t}, THROTTLE_THRESHOLD );\n\n\t\t// Redrawing on any change of the UI of the editor (including content changes).\n\t\tthis.editor.ui.on( 'update', redrawResizers );\n\n\t\t// Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\t\tthis._observer.listenTo( global.window, 'resize', redrawResizers );\n\t}\n\n\tdestroy() {\n\t\tthis._observer.stopListening();\n\t}\n\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n\t * @returns {module:widget/widgetresize/resizer~Resizer}\n\t */\n\tattachTo( options ) {\n\t\tconst resizer = new Resizer( options );\n\n\t\tresizer.attach();\n\n\t\tthis.editor.editing.view.once( 'render', () => resizer.redraw() );\n\n\t\tthis.resizers.push( resizer );\n\n\t\treturn resizer;\n\t}\n\n\t_getResizerByHandle( domResizeHandle ) {\n\t\tfor ( const resizer of this.resizers ) {\n\t\t\tif ( resizer.containsHandle( domResizeHandle ) ) {\n\t\t\t\treturn resizer;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Interface describing a resizer. It allows to specify resizing host, custom logic for calculating aspect ratio etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * @member {module:engine/view/downcastwriter~DowncastWriter} module:widget/widgetresize~ResizerOptions#downcastWriter\n */\n\n/**\n * A callback to be executed once resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute image resize command,\n * which puts new value into the model.\n *\n * ```js\n * {\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\tdowncastWriter: conversionApi.writer,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'imageResize', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image resize command. Currently, it supports only the width attribute.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageResizeCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( !element || !element.hasAttribute( 'width' ) ) {\n\t\t\tthis.value = null;\n\t\t} else {\n\t\t\tthis.value = {\n\t\t\t\twidth: element.getAttribute( 'width' ),\n\t\t\t\theight: null\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t *\t\t// Sets the width to 50%:\n\t *\t\teditor.execute( 'imageResize', { width: '50%' } );\n\t *\n\t *\t\t// Removes the width attribute:\n\t *\t\teditor.execute( 'imageResize', { width: null } );\n\t *\n\t * @param {Object} options\n\t * @param {String|null} options.width The new width of the image.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'width', options.width, imageElement );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestylecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image style command. It is used to apply different image styles.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageStyleCommand extends Command {\n\t/**\n\t * Creates an instance of the image style command. Each command instance is handling one style.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles that this command supports.\n\t */\n\tconstructor( editor, styles ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The name of the default style, if it is present. If there is no default style, it defaults to `false`.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Boolean|String}\n\t\t */\n\t\tthis.defaultStyle = false;\n\n\t\t/**\n\t\t * A style handled by this command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} #styles\n\t\t */\n\t\tthis.styles = styles.reduce( ( styles, style ) => {\n\t\t\tstyles[ style.name ] = style;\n\n\t\t\tif ( style.isDefault ) {\n\t\t\t\tthis.defaultStyle = style.name;\n\t\t\t}\n\n\t\t\treturn styles;\n\t\t}, {} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( !element ) {\n\t\t\tthis.value = false;\n\t\t} else if ( element.hasAttribute( 'imageStyle' ) ) {\n\t\t\tconst attributeValue = element.getAttribute( 'imageStyle' );\n\t\t\tthis.value = this.styles[ attributeValue ] ? attributeValue : false;\n\t\t} else {\n\t\t\tthis.value = this.defaultStyle;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t *\t\teditor.execute( 'imageStyle', { value: 'side' } );\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value The name of the style (based on the\n\t * {@link module:image/image~ImageConfig#styles `image.styles`} configuration option).\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst styleName = options.value;\n\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\t// Default style means that there is no `imageStyle` attribute in the model.\n\t\t\t// https://github.com/ckeditor/ckeditor5-image/issues/147\n\t\t\tif ( this.styles[ styleName ].isDefault ) {\n\t\t\t\twriter.removeAttribute( 'imageStyle', imageElement );\n\t\t\t} else {\n\t\t\t\twriter.setAttribute( 'imageStyle', styleName, imageElement );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * @module image/imagestyle/converters\n */\n\n/**\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\n *\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n * for more details.\n * @returns {Function} A model-to-view attribute converter.\n */\nexport function modelToViewStyleAttribute( styles ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if there is class name associated with given value.\n\t\tconst newStyle = getStyleByName( data.attributeNewValue, styles );\n\t\tconst oldStyle = getStyleByName( data.attributeOldValue, styles );\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( oldStyle ) {\n\t\t\tviewWriter.removeClass( oldStyle.className, viewElement );\n\t\t}\n\n\t\tif ( newStyle ) {\n\t\t\tviewWriter.addClass( newStyle.className, viewElement );\n\t\t}\n\t};\n}\n\n/**\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles for which the converter is created.\n * @returns {Function} A view-to-model converter.\n */\nexport function viewToModelStyleAttribute( styles ) {\n\t// Convert only non–default styles.\n\tconst filteredStyles = styles.filter( style => !style.isDefault );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewFigureElement = data.viewItem;\n\t\tconst modelImageElement = first( data.modelRange.getItems() );\n\n\t\t// Check if `imageStyle` attribute is allowed for current element.\n\t\tif ( !conversionApi.schema.checkAttribute( modelImageElement, 'imageStyle' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert style one by one.\n\t\tfor ( const style of filteredStyles ) {\n\t\t\t// Try to consume class corresponding with style.\n\t\t\tif ( conversionApi.consumable.consume( viewFigureElement, { classes: style.className } ) ) {\n\t\t\t\t// And convert this style to model attribute.\n\t\t\t\tconversionApi.writer.setAttribute( 'imageStyle', style.name, modelImageElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Returns the style with a given `name` from an array of styles.\n//\n// @param {String} name\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\n// @returns {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\nfunction getStyleByName( name, styles ) {\n\tfor ( const style of styles ) {\n\t\tif ( style.name === name ) {\n\t\t\treturn style;\n\t\t}\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm2.5 3V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06c-.585 0-1.06-.407-1.06-.91V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" clip-rule=\\\"evenodd\\\" stroke-linejoin=\\\"round\\\" stroke-miterlimit=\\\"1.414\\\"><path d=\\\"M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm4.5 3V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm0 3V6h5.674v1.5zm0 3V9h5.674v1.5zm0 3V12h5.674v1.5zm8.5-6V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\n\n/* globals console */\n\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Default image styles provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * Among them, 2 default semantic content styles are available:\n *\n * * `full` is a full–width image without any CSS class,\n * * `side` is a side image styled with the `image-style-side` CSS class.\n *\n * There are also 3 styles focused on formatting:\n *\n * * `alignLeft` aligns the image to the left using the `image-style-align-left` class,\n * * `alignCenter` centers the image using the `image-style-align-center` class,\n * * `alignRight` aligns the image to the right using the `image-style-align-right` class,\n *\n * @member {Object.<String,Object>}\n */\nconst defaultStyles = {\n\t// This option is equal to the situation when no style is applied.\n\tfull: {\n\t\tname: 'full',\n\t\ttitle: 'Full size image',\n\t\ticon: fullWidthIcon,\n\t\tisDefault: true\n\t},\n\n\t// This represents a side image.\n\tside: {\n\t\tname: 'side',\n\t\ttitle: 'Side image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-side'\n\t},\n\n\t// This style represents an image aligned to the left.\n\talignLeft: {\n\t\tname: 'alignLeft',\n\t\ttitle: 'Left aligned image',\n\t\ticon: leftIcon,\n\t\tclassName: 'image-style-align-left'\n\t},\n\n\t// This style represents a centered image.\n\talignCenter: {\n\t\tname: 'alignCenter',\n\t\ttitle: 'Centered image',\n\t\ticon: centerIcon,\n\t\tclassName: 'image-style-align-center'\n\t},\n\n\t// This style represents an image aligned to the right.\n\talignRight: {\n\t\tname: 'alignRight',\n\t\ttitle: 'Right aligned image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-align-right'\n\t}\n};\n\n/**\n * Default image style icons provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\n *\n * @member {Object.<String, String>}\n */\nconst defaultIcons = {\n\tfull: fullWidthIcon,\n\tleft: leftIcon,\n\tright: rightIcon,\n\tcenter: centerIcon\n};\n\n/**\n * Returns a {@link module:image/image~ImageConfig#styles} array with items normalized in the\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\n *\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nexport function normalizeImageStyles( configuredStyles = [] ) {\n\treturn configuredStyles.map( _normalizeStyle );\n}\n\n// Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\n//\n// @param {Object} style\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\nfunction _normalizeStyle( style ) {\n\t// Just the name of the style has been passed.\n\tif ( typeof style == 'string' ) {\n\t\tconst styleName = style;\n\n\t\t// If it's one of the defaults, just use it.\n\t\tif ( defaultStyles[ styleName ] ) {\n\t\t\t// Clone the style to avoid overriding defaults.\n\t\t\tstyle = Object.assign( {}, defaultStyles[ styleName ] );\n\t\t}\n\t\t// If it's just a name but none of the defaults, warn because probably it's a mistake.\n\t\telse {\n\t\t\tconsole.warn(\n\t\t\t\tattachLinkToDocumentation( 'image-style-not-found: There is no such image style of given name.' ),\n\t\t\t\t{ name: styleName }\n\t\t\t);\n\n\t\t\t// Normalize the style anyway to prevent errors.\n\t\t\tstyle = {\n\t\t\t\tname: styleName\n\t\t\t};\n\t\t}\n\t}\n\t// If an object style has been passed and if the name matches one of the defaults,\n\t// extend it with defaults – the user wants to customize a default style.\n\t// Note: Don't override the user–defined style object, clone it instead.\n\telse if ( defaultStyles[ style.name ] ) {\n\t\tconst defaultStyle = defaultStyles[ style.name ];\n\t\tconst extendedStyle = Object.assign( {}, style );\n\n\t\tfor ( const prop in defaultStyle ) {\n\t\t\tif ( !style.hasOwnProperty( prop ) ) {\n\t\t\t\textendedStyle[ prop ] = defaultStyle[ prop ];\n\t\t\t}\n\t\t}\n\n\t\tstyle = extendedStyle;\n\t}\n\n\t// If an icon is defined as a string and correspond with a name\n\t// in default icons, use the default icon provided by the plugin.\n\tif ( typeof style.icon == 'string' && defaultIcons[ style.icon ] ) {\n\t\tstyle.icon = defaultIcons[ style.icon ];\n\t}\n\n\treturn style;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleCommand from './imagestylecommand';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\nimport { normalizeImageStyles } from './utils';\n\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\t// Define default configuration.\n\t\teditor.config.define( 'image.styles', [ 'full', 'side' ] );\n\n\t\t// Get configuration.\n\t\tconst styles = normalizeImageStyles( editor.config.get( 'image.styles' ) );\n\n\t\t// Allow imageStyle attribute in image.\n\t\t// We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\t\tschema.extend( 'image', { allowAttributes: 'imageStyle' } );\n\n\t\t// Converters for imageStyle attribute from model to view.\n\t\tconst modelToViewConverter = modelToViewStyleAttribute( styles );\n\t\tediting.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\t\tdata.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\n\t\t// Converter for figure element from view to model.\n\t\tdata.upcastDispatcher.on( 'element:figure', viewToModelStyleAttribute( styles ), { priority: 'low' } );\n\n\t\t// Register imageStyle command.\n\t\teditor.commands.add( 'imageStyle', new ImageStyleCommand( editor, styles ) );\n\t}\n}\n\n/**\n * The image style format descriptor.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleFormat = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size'\n *\t\t}\n *\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\n *\n * @property {String} name The unique name of the style. It will be used to:\n *\n * * Store the chosen style in the model by setting the `imageStyle` attribute of the `<image>` element.\n * * As a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for each of the styles (`'imageStyle:{name}'`) in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\n * A default style does not apply any CSS class to the view element.\n *\n * @property {String} icon One of the following to be used when creating the style's button:\n *\n * * An SVG icon source (as an XML string).\n * * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\n *\n * @property {String} title The style's title.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagestyle/imagestyleui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { normalizeImageStyles } from './utils';\nimport '../../theme/imagestyle.css';\n/**\n * The image style UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageStyleUI';\n    }\n    /**\n\t * Returns the default localized style titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:image/imagestyle/utils~defaultStyles} are available:\n\t *\n\t * * `'Full size image'`,\n\t * * `'Side image'`,\n\t * * `'Left aligned image'`,\n\t * * `'Centered image'`,\n\t * * `'Right aligned image'`\n\t *\n\t * @returns {Object.<String,String>}\n\t */\n    get localizedDefaultStylesTitles() {\n        const t = this.editor.t;\n        return {\n            'Full size image': t('Full size image'),\n            'Side image': t('Side image'),\n            'Left aligned image': t('Left aligned image'),\n            'Centered image': t('Centered image'),\n            'Right aligned image': t('Right aligned image')\n        };\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const configuredStyles = editor.config.get('image.styles');\n        const translatedStyles = translateStyles(normalizeImageStyles(configuredStyles), this.localizedDefaultStylesTitles);\n        for (const style of translatedStyles) {\n            this._createButton(style);\n        }\n    }\n    /**\n\t * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\n\t */\n    _createButton(style) {\n        const editor = this.editor;\n        const componentName = `imageStyle:${ style.name }`;\n        editor.ui.componentFactory.add(componentName, locale => {\n            const command = editor.commands.get('imageStyle');\n            const view = new ButtonView(locale);\n            view.set({\n                label: style.title,\n                icon: style.icon,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            view.bind('isOn').to(command, 'value', value => value === style.name);\n            this.listenTo(view, 'execute', () => editor.execute('imageStyle', { value: style.name }));\n            return view;\n        });\n    }\n}\n/**\n * Returns the translated `title` from the passed styles array.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\n * @param titles\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nfunction translateStyles(styles, titles) {\n    for (const style of styles) {\n        // Localize the titles of the styles, if a title corresponds with\n        // a localized default provided by the plugin.\n        if (titles[style.title]) {\n            style.title = titles[style.title];\n        }\n    }\n    return styles;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgettoolbarrepository\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isWidget } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * \t\tclass ImageToolbar extends Plugin {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ WidgetToolbarRepository ];\n *\t\t\t}\n *\n *\t\t\tafterInit() {\n *\t\t\t\tconst editor = this.editor;\n *\t\t\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n *\t\t\t\twidgetToolbarRepository.register( 'image', {\n *\t\t\t\t\titems: editor.config.get( 'image.toolbar' ),\n *\t\t\t\t\tgetRelatedElement: getSelectedImageWidget\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n */\nexport default class WidgetToolbarRepository extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'WidgetToolbarRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        // Disables the default balloon toolbar for all widgets.\n        if (editor.plugins.has('BalloonToolbar')) {\n            const balloonToolbar = editor.plugins.get('BalloonToolbar');\n            this.listenTo(balloonToolbar, 'show', evt => {\n                if (isWidgetSelected(editor.editing.view.document.selection)) {\n                    evt.stop();\n                }\n            }, { priority: 'high' });\n        }\n        /**\n\t\t * A map of toolbar definitions.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String,module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition>} #_toolbarDefinitions\n\t\t */\n        this._toolbarDefinitions = new Map();\n        /**\n\t\t * @private\n\t\t */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateToolbarsVisibility();\n        });\n        // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => {\n            this._updateToolbarsVisibility();\n        }, { priority: 'low' });\n    }\n    destroy() {\n        super.destroy();\n        for (const toolbarConfig of this._toolbarDefinitions.values()) {\n            toolbarConfig.view.destroy();\n        }\n    }\n    /**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param {String} toolbarId An id for the toolbar. Used to\n\t * @param {Object} options\n\t * @param {String} [options.ariaLabel] Label used by assistive technologies to describe this toolbar element.\n\t * @param {Array.<String>} options.items Array of toolbar items.\n\t * @param {Function} options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param {String} [options.balloonClassName='ck-toolbar-container'] CSS class for the widget balloon.\n\t */\n    register(toolbarId, {ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container'}) {\n        const editor = this.editor;\n        const t = editor.t;\n        const toolbarView = new ToolbarView(editor.locale);\n        toolbarView.ariaLabel = ariaLabel || t('Widget toolbar');\n        if (this._toolbarDefinitions.has(toolbarId)) {\n            /**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */\n            throw new CKEditorError('widget-toolbar-duplicated: Toolbar with the given id was already added.', this, { toolbarId });\n        }\n        toolbarView.fillFromConfig(items, editor.ui.componentFactory);\n        this._toolbarDefinitions.set(toolbarId, {\n            view: toolbarView,\n            getRelatedElement,\n            balloonClassName\n        });\n    }\n    /**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t *\n\t * @private\n\t */\n    _updateToolbarsVisibility() {\n        let maxRelatedElementDepth = 0;\n        let deepestRelatedElement = null;\n        let deepestToolbarDefinition = null;\n        for (const definition of this._toolbarDefinitions.values()) {\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            if (!this.editor.ui.focusTracker.isFocused) {\n                if (this._isToolbarVisible(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else if (!relatedElement) {\n                if (this._isToolbarInBalloon(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else {\n                const relatedElementDepth = relatedElement.getAncestors().length;\n                // Many toolbars can express willingness to be displayed but they do not know about\n                // each other. Figure out which toolbar is deepest in the view tree to decide which\n                // should be displayed. For instance, if a selected image is inside a table cell, display\n                // the ImageToolbar rather than the TableToolbar (#60).\n                if (relatedElementDepth > maxRelatedElementDepth) {\n                    maxRelatedElementDepth = relatedElementDepth;\n                    deepestRelatedElement = relatedElement;\n                    deepestToolbarDefinition = definition;\n                }\n            }\n        }\n        if (deepestToolbarDefinition) {\n            this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n        }\n    }\n    /**\n\t * Hides the given toolbar.\n\t *\n\t * @private\n\t * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n\t */\n    _hideToolbar(toolbarDefinition) {\n        this._balloon.remove(toolbarDefinition.view);\n        this.stopListening(this._balloon, 'change:visibleView');\n    }\n    /**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:core/editor/editorui~EditorUI#event:update}.\n\t *\n\t * @private\n\t * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n\t * @param {module:engine/view/element~Element} relatedElement\n\t */\n    _showToolbar(toolbarDefinition, relatedElement) {\n        if (this._isToolbarVisible(toolbarDefinition)) {\n            repositionContextualBalloon(this.editor, relatedElement);\n        } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n            this._balloon.add({\n                view: toolbarDefinition.view,\n                position: getBalloonPositionData(this.editor, relatedElement),\n                balloonClassName: toolbarDefinition.balloonClassName\n            });\n            // Update toolbar position each time stack with toolbar view is switched to visible.\n            // This is in a case target element has changed when toolbar was in invisible stack\n            // e.g. target image was wrapped by a block quote.\n            // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n            this.listenTo(this._balloon, 'change:visibleView', () => {\n                for (const definition of this._toolbarDefinitions.values()) {\n                    if (this._isToolbarVisible(definition)) {\n                        const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n                        repositionContextualBalloon(this.editor, relatedElement);\n                    }\n                }\n            });\n        }\n    }\n    /**\n\t * @private\n\t * @param {Object} toolbar\n\t * @returns {Boolean}\n\t */\n    _isToolbarVisible(toolbar) {\n        return this._balloon.visibleView === toolbar.view;\n    }\n    /**\n\t * @private\n\t * @param {Object} toolbar\n\t * @returns {Boolean}\n\t */\n    _isToolbarInBalloon(toolbar) {\n        return this._balloon.hasView(toolbar.view);\n    }\n}\nfunction repositionContextualBalloon(editor, relatedElement) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const position = getBalloonPositionData(editor, relatedElement);\n    balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement) {\n    const editingView = editor.editing.view;\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    return {\n        target: editingView.domConverter.mapViewToDom(relatedElement),\n        positions: [\n            defaultPositions.northArrowSouth,\n            defaultPositions.northArrowSouthWest,\n            defaultPositions.northArrowSouthEast,\n            defaultPositions.southArrowNorth,\n            defaultPositions.southArrowNorthWest,\n            defaultPositions.southArrowNorthEast\n        ]\n    };\n}\nfunction isWidgetSelected(selection) {\n    const viewElement = selection.getSelectedElement();\n    return !!(viewElement && isWidget(viewElement));\n}    /**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n *\n * @typedef {Object} module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition\n *\n * @property {module:ui/view~View} view The UI view of the toolbar.\n * @property {Function} getRelatedElement A function that returns an engine {@link module:engine/view/view~View}\n * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n * there is no such element). The function accepts an instance of {@link module:engine/view/selection~Selection}.\n * @property {String} balloonClassName CSS class for the widget balloon when a toolbar is displayed.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\n\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class FileDialogButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The button view of the component.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonView = new ButtonView( locale );\n\n\t\t/**\n\t\t * A hidden `<input>` view used to execute file dialog.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n\t\t */\n\t\tthis._fileInputView = new FileInputView( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis._fileInputView.bind( 'acceptedType' ).to( this );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `true`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis._fileInputView.bind( 'allowMultipleFiles' ).to( this );\n\n\t\t/**\n\t\t * Fired when file dialog is closed with file selected.\n\t\t *\n\t\t *\t\tview.on( 'done', ( evt, files ) => {\n\t\t *\t\t\tfor ( const file of files ) {\n\t\t *\t\t\t\tconsole.log( 'Selected file', file );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t * @event done\n\t\t * @param {Array.<File>} files Array of selected files.\n\t\t */\n\t\tthis._fileInputView.delegate( 'done' ).to( this );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-file-dialog-button',\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.buttonView,\n\t\t\t\tthis._fileInputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.buttonView.on( 'execute', () => {\n\t\t\tthis._fileInputView.open();\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n}\n\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass FileInputView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis.set( 'acceptedType' );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `false`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis.set( 'allowMultipleFiles', false );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-hidden'\n\t\t\t\t],\n\t\t\t\ttype: 'file',\n\t\t\t\ttabindex: '-1',\n\t\t\t\taccept: bind.to( 'acceptedType' ),\n\t\t\t\tmultiple: bind.to( 'allowMultipleFiles' )\n\t\t\t},\n\n\t\t\ton: {\n\t\t\t\t// Removing from code coverage since we cannot programmatically set input element files.\n\t\t\t\tchange: bind.to( /* istanbul ignore next */ () => {\n\t\t\t\t\tif ( this.element && this.element.files && this.element.files.length ) {\n\t\t\t\t\t\tthis.fire( 'done', this.element.files );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.element.value = '';\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Opens file dialog.\n\t */\n\topen() {\n\t\tthis.element.click();\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\n\n/**\n * Checks if a given file is an image.\n *\n * @param {File} file\n * @returns {Boolean}\n */\nexport function isImageType( file ) {\n\tconst types = /^image\\/(jpeg|png|gif|bmp)$/;\n\n\treturn types.test( file.type );\n}\n\n/**\n * Creates a promise which fetches the image local source (base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image which source to fetch.\n * @returns {Promise.<File>} A promise which resolves when image source is fetched and converted to `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing the promise will be rejected.\n */\nexport function fetchLocalImage( image ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst imageSrc = image.getAttribute( 'src' );\n\n\t\t// Fetch works asynchronously and so does not block browser UI when processing data.\n\t\tfetch( imageSrc )\n\t\t\t.then( resource => resource.blob() )\n\t\t\t.then( blob => {\n\t\t\t\tconst mimeType = getImageMimeType( blob, imageSrc );\n\t\t\t\tconst ext = mimeType.replace( 'image/', '' );\n\t\t\t\tconst filename = `image.${ ext }`;\n\t\t\t\tconst file = createFileFromBlob( blob, filename, mimeType );\n\n\t\t\t\tfile ? resolve( file ) : reject();\n\t\t\t} )\n\t\t\t.catch( reject );\n\t} );\n}\n\n/**\n * Checks whether given node is an image element with local source (base64 or blob).\n *\n * @param {module:engine/view/node~Node} node Node to check.\n * @returns {Boolean}\n */\nexport function isLocalImage( node ) {\n\tif ( !node.is( 'element', 'img' ) || !node.getAttribute( 'src' ) ) {\n\t\treturn false;\n\t}\n\n\treturn node.getAttribute( 'src' ).match( /^data:image\\/\\w+;base64,/g ) ||\n\t\tnode.getAttribute( 'src' ).match( /^blob:/g );\n}\n\n// Extracts image type based on its blob representation or its source.\n//\n// @param {String} src Image src attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\nfunction getImageMimeType( blob, src ) {\n\tif ( blob.type ) {\n\t\treturn blob.type;\n\t} else if ( src.match( /data:(image\\/\\w+);base64/ ) ) {\n\t\treturn src.match( /data:(image\\/\\w+);base64/ )[ 1 ].toLowerCase();\n\t} else {\n\t\t// Fallback to 'jpeg' as common extension.\n\t\treturn 'image/jpeg';\n\t}\n}\n\n// Creates `File` instance from the given `Blob` instance using specified filename.\n//\n// @param {Blob} blob The `Blob` instance from which file will be created.\n// @param {String} filename Filename used during file creation.\n// @param {String} mimeType File mime type.\n// @returns {File|null} The `File` instance created from the given blob or `null` if `File API` is not available.\nfunction createFileFromBlob( blob, filename, mimeType ) {\n\ttry {\n\t\treturn new File( [ blob ], filename, { type: mimeType } );\n\t} catch ( err ) {\n\t\t// Edge does not support `File` constructor ATM, see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9551546/.\n\t\t// However, the `File` function is present (so cannot be checked with `!window.File` or `typeof File === 'function'`), but\n\t\t// calling it with `new File( ... )` throws an error. This try-catch prevents that. Also when the function will\n\t\t// be implemented correctly in Edge the code will start working without any changes (see #247).\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imageupload/imageuploadui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileDialogButtonView from '@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview';\nimport imageIcon from '@ckeditor/ckeditor5-core/theme/icons/image.svg';\nimport { isImageType } from './utils';\n/**\n * The image upload button plugin.\n *\n * For a detailed overview, check the {@glink features/image-upload/image-upload Image upload feature} documentation.\n *\n * Adds the `'imageUpload'` button to the {@link module:ui/componentfactory~ComponentFactory UI component factory}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Setup `imageUpload` button.\n        editor.ui.componentFactory.add('imageUpload', locale => {\n            const view = new FileDialogButtonView(locale);\n            const command = editor.commands.get('imageUpload');\n            view.set({\n                acceptedType: 'image/*',\n                allowMultipleFiles: true\n            });\n            view.buttonView.set({\n                label: t('Insert image'),\n                icon: imageIcon,\n                tooltip: true\n            });\n            view.buttonView.bind('isEnabled').to(command);\n            view.on('done', (evt, files) => {\n                const imagesToUpload = Array.from(files).filter(isImageType);\n                if (imagesToUpload.length) {\n                    editor.execute('imageUpload', { file: imagesToUpload });\n                }\n            });\n            return view;\n        });\n    }\n}","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 700 250\\\"><rect rx=\\\"4\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/imageuploadprogress\n */\n\n/* globals setTimeout */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport '../../theme/imageuploadprogress.css';\nimport '../../theme/imageuploadicon.css';\nimport '../../theme/imageuploadloader.css';\n\n/**\n * The image upload progress plugin.\n * It shows a placeholder when the image is read from the disk and a progress bar while the image is uploading.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadProgress extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The image placeholder that is displayed before real image data can be accessed.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent( uploadingPlaceholder );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Upload status change - update image's view according to that status.\n\t\teditor.editing.downcastDispatcher.on( 'attribute:uploadStatus:image', ( ...args ) => this.uploadStatusChange( ...args ) );\n\t}\n\n\t/**\n\t * This method is called each time the image `uploadStatus` attribute is changed.\n\t *\n\t * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\t */\n\tuploadStatusChange( evt, data, conversionApi ) {\n\t\tconst editor = this.editor;\n\t\tconst modelImage = data.item;\n\t\tconst uploadId = modelImage.getAttribute( 'uploadId' );\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\t\tconst status = uploadId ? data.attributeNewValue : null;\n\t\tconst placeholder = this.placeholder;\n\t\tconst viewFigure = editor.editing.mapper.toViewElement( modelImage );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( status == 'reading' ) {\n\t\t\t// Start \"appearing\" effect and show placeholder with infinite progress bar on the top\n\t\t\t// while image is read from disk.\n\t\t\t_startAppearEffect( viewFigure, viewWriter );\n\t\t\t_showPlaceholder( placeholder, viewFigure, viewWriter );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Show progress bar on the top of the image when image is uploading.\n\t\tif ( status == 'uploading' ) {\n\t\t\tconst loader = fileRepository.loaders.get( uploadId );\n\n\t\t\t// Start appear effect if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\t\t\t_startAppearEffect( viewFigure, viewWriter );\n\n\t\t\tif ( !loader ) {\n\t\t\t\t// There is no loader associated with uploadId - this means that image came from external changes.\n\t\t\t\t// In such cases we still want to show the placeholder until image is fully uploaded.\n\t\t\t\t// Show placeholder if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\t\t\t\t_showPlaceholder( placeholder, viewFigure, viewWriter );\n\t\t\t} else {\n\t\t\t\t// Hide placeholder and initialize progress bar showing upload progress.\n\t\t\t\t_hidePlaceholder( viewFigure, viewWriter );\n\t\t\t\t_showProgressBar( viewFigure, viewWriter, loader, editor.editing.view );\n\t\t\t\t_displayLocalImage( viewFigure, viewWriter, loader );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Because in Edge there is no way to show fancy animation of completeIcon we need to skip it.\n\t\tif ( status == 'complete' && fileRepository.loaders.get( uploadId ) && !env.isEdge ) {\n\t\t\t_showCompleteIcon( viewFigure, viewWriter, editor.editing.view );\n\t\t}\n\n\t\t// Clean up.\n\t\t_hideProgressBar( viewFigure, viewWriter );\n\t\t_hidePlaceholder( viewFigure, viewWriter );\n\t\t_stopAppearEffect( viewFigure, viewWriter );\n\t}\n}\n\n// Adds ck-appear class to the image figure if one is not already applied.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _startAppearEffect( viewFigure, writer ) {\n\tif ( !viewFigure.hasClass( 'ck-appear' ) ) {\n\t\twriter.addClass( 'ck-appear', viewFigure );\n\t}\n}\n\n// Removes ck-appear class to the image figure if one is not already removed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _stopAppearEffect( viewFigure, writer ) {\n\twriter.removeClass( 'ck-appear', viewFigure );\n}\n\n// Shows placeholder together with infinite progress bar on given image figure.\n//\n// @param {String} Data-uri with a svg placeholder.\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _showPlaceholder( placeholder, viewFigure, writer ) {\n\tif ( !viewFigure.hasClass( 'ck-image-upload-placeholder' ) ) {\n\t\twriter.addClass( 'ck-image-upload-placeholder', viewFigure );\n\t}\n\n\tconst viewImg = viewFigure.getChild( 0 );\n\n\tif ( viewImg.getAttribute( 'src' ) !== placeholder ) {\n\t\twriter.setAttribute( 'src', placeholder, viewImg );\n\t}\n\n\tif ( !_getUIElement( viewFigure, 'placeholder' ) ) {\n\t\twriter.insert( writer.createPositionAfter( viewImg ), _createPlaceholder( writer ) );\n\t}\n}\n\n// Removes placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _hidePlaceholder( viewFigure, writer ) {\n\tif ( viewFigure.hasClass( 'ck-image-upload-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-image-upload-placeholder', viewFigure );\n\t}\n\n\t_removeUIElement( viewFigure, writer, 'placeholder' );\n}\n\n// Shows progress bar displaying upload progress.\n// Attaches it to the file loader to update when upload percentace is changed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n// @param {module:engine/view/view~View} view\nfunction _showProgressBar( viewFigure, writer, loader, view ) {\n\tconst progressBar = _createProgressBar( writer );\n\twriter.insert( writer.createPositionAt( viewFigure, 'end' ), progressBar );\n\n\t// Update progress bar width when uploadedPercent is changed.\n\tloader.on( 'change:uploadedPercent', ( evt, name, value ) => {\n\t\tview.change( writer => {\n\t\t\twriter.setStyle( 'width', value + '%', progressBar );\n\t\t} );\n\t} );\n}\n\n// Hides upload progress bar.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _hideProgressBar( viewFigure, writer ) {\n\t_removeUIElement( viewFigure, writer, 'progressBar' );\n}\n\n// Shows complete icon and hides after a certain amount of time.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/view~View} view\nfunction _showCompleteIcon( viewFigure, writer, view ) {\n\tconst completeIcon = writer.createUIElement( 'div', { class: 'ck-image-upload-complete-icon' } );\n\n\twriter.insert( writer.createPositionAt( viewFigure, 'end' ), completeIcon );\n\n\tsetTimeout( () => {\n\t\tview.change( writer => writer.remove( writer.createRangeOn( completeIcon ) ) );\n\t}, 3000 );\n}\n\n// Create progress bar element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction _createProgressBar( writer ) {\n\tconst progressBar = writer.createUIElement( 'div', { class: 'ck-progress-bar' } );\n\n\twriter.setCustomProperty( 'progressBar', true, progressBar );\n\n\treturn progressBar;\n}\n\n// Create placeholder element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction _createPlaceholder( writer ) {\n\tconst placeholder = writer.createUIElement( 'div', { class: 'ck-upload-placeholder-loader' } );\n\n\twriter.setCustomProperty( 'placeholder', true, placeholder );\n\n\treturn placeholder;\n}\n\n// Returns {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n// Returns `undefined` if element is not found.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {String} uniqueProperty\n// @returns {module:engine/view/uielement~UIElement|undefined}\nfunction _getUIElement( imageFigure, uniqueProperty ) {\n\tfor ( const child of imageFigure.getChildren() ) {\n\t\tif ( child.getCustomProperty( uniqueProperty ) ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n\n// Removes {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {String} uniqueProperty\nfunction _removeUIElement( viewFigure, writer, uniqueProperty ) {\n\tconst element = _getUIElement( viewFigure, uniqueProperty );\n\n\tif ( element ) {\n\t\twriter.remove( writer.createRangeOn( element ) );\n\t}\n}\n\n// Displays local data from file loader.\n//\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\nfunction _displayLocalImage( viewFigure, writer, loader ) {\n\tif ( loader.data ) {\n\t\tconst viewImg = viewFigure.getChild( 0 );\n\n\t\twriter.setAttribute( 'src', loader.data, viewImg );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/upcastwriter\n */\n\nimport DocumentFragment from './documentfragment';\nimport Element from './element';\nimport Text from './text';\nimport { isPlainObject } from 'lodash-es';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\n/**\n * View upcast writer. It provides a set of methods used to manipulate non-semantic view trees.\n *\n * It should be used only while working on a non-semantic view\n * (e.g. a view created from HTML string on paste).\n * To manipulate a view which was or is being downcasted from the the model use the\n * {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n *\n * Unlike `DowncastWriter`, which is available in the {@link module:engine/view/view~View#change `View#change()`} block,\n * `UpcastWriter` can be created wherever you need it:\n *\n *\t\tconst writer = new UpcastWriter();\n *\t\tconst text = writer.createText( 'foo!' );\n *\n *\t\twriter.appendChild( text, someViewElement );\n */\nexport default class UpcastWriter {\n\t/**\n\t * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n\t *\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n\t */\n\tcreateDocumentFragment( children ) {\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/element~Element} instance.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tupcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tupcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tupcastWriter.createElement( 'div', mapOfAttributes ); // map\n\t *\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t * @returns {module:engine/view/element~Element} Created element.\n\t */\n\tcreateElement( name, attrs, children ) {\n\t\treturn new Element( name, attrs, children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text} instance.\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Clones the provided element.\n\t *\n\t * @see module:engine/view/element~Element#_clone\n\t * @param {module:engine/view/element~Element} element Element to be cloned.\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\tclone( element, deep = false ) {\n\t\treturn element._clone( deep );\n\t}\n\n\t/**\n\t * Appends a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/element~Element#_appendChild\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * to which items will be appended.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\tappendChild( items, element ) {\n\t\treturn element._appendChild( items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/element~Element#_insertChild\n\t * @param {Number} index Offset at which nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * to which items will be inserted.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\tinsertChild( index, items, element ) {\n\t\treturn element._insertChild( index, items );\n\t}\n\n\t/**\n\t * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/element~Element#_removeChildren\n\t * @param {Number} index Offset from which nodes will be removed.\n\t * @param {Number} howMany Number of nodes to remove.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * which children will be removed.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n\t */\n\tremoveChildren( index, howMany, element ) {\n\t\treturn element._removeChildren( index, howMany );\n\t}\n\n\t/**\n\t * Removes given element from the view structure. Will not have effect on detached elements.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which will be removed.\n\t * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n\t */\n\tremove( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( parent ) {\n\t\t\treturn this.removeChildren( parent.getChildIndex( element ), 1, parent );\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Replaces given element with the new one in the view structure. Will not have effect on detached elements.\n\t *\n\t * @param {module:engine/view/element~Element} oldElement Element which will be replaced.\n\t * @param {module:engine/view/element~Element} newElement Element which will be inserted in the place of the old element.\n\t * @returns {Boolean} Whether old element was successfully replaced.\n\t */\n\treplace( oldElement, newElement ) {\n\t\tconst parent = oldElement.parent;\n\n\t\tif ( parent ) {\n\t\t\tconst index = parent.getChildIndex( oldElement );\n\n\t\t\tthis.removeChildren( index, 1, parent );\n\t\t\tthis.insertChild( index, newElement, parent );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes given element from view structure and places its children in its position.\n\t * It does nothing if element has no parent.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unwrap.\n\t */\n\tunwrapElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( parent ) {\n\t\t\tconst index = parent.getChildIndex( element );\n\n\t\t\tthis.remove( element );\n\t\t\tthis.insertChild( index, element.getChildren(), parent );\n\t\t}\n\t}\n\n\t/**\n\t * Renames element by creating a copy of a given element but with its name changed and then moving contents of the\n\t * old element to the new one.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New element name.\n\t * @param {module:engine/view/element~Element} element Element to be renamed.\n\t * @returns {module:engine/view/element~Element|null} New element or null if the old element\n\t * was not replaced (happens for detached elements).\n\t */\n\trename( newName, element ) {\n\t\tconst newElement = new Element( newName, element.getAttributes(), element.getChildren() );\n\n\t\treturn this.replace( element, newElement ) ? newElement : null;\n\t}\n\n\t/**\n\t * Adds or overwrites element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( linkElement, 'href', 'http://ckeditor.com' );\n\t *\n\t * @see module:engine/view/element~Element#_setAttribute\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element Element for which attribute will be set.\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( linkElement, 'href' );\n\t *\n\t * @see module:engine/view/element~Element#_removeAttribute\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element Element from which attribute will be removed.\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( linkElement, 'foo' );\n\t *\t\twriter.addClass( linkElement, [ 'foo', 'bar' ] );\n\t *\n\t * @see module:engine/view/element~Element#_addClass\n\t * @param {Array.<String>|String} className Single class name or array of class names which will be added.\n\t * @param {module:engine/view/element~Element} element Element for which class will be added.\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( linkElement, 'foo' );\n\t *\t\twriter.removeClass( linkElement, [ 'foo', 'bar' ] );\n\t *\n\t * @see module:engine/view/element~Element#_removeClass\n\t * @param {Array.<String>|String} className Single class name or array of class names which will be removed.\n\t * @param {module:engine/view/element~Element} element Element from which class will be removed.\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( element, 'color', 'red' );\n\t *\t\twriter.setStyle( element, {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/element~Element#_setStyle\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element for which style will be added.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( element, 'color' );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( element, [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/element~Element#_removeStyle\n\t * @param {Array.<String>|String} property Style property name or names to be removed.\n\t * @param {module:engine/view/element~Element} element Element from which style will be removed.\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/element~Element#_setCustomProperty\n\t * @param {String|Symbol} key Custom property name/key.\n\t * @param {*} value Custom property value to be stored.\n\t * @param {module:engine/view/element~Element} element Element for which custom property will be set.\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @see module:engine/view/element~Element#_removeCustomProperty\n\t * @param {String|Symbol} key Name/key of the custom property to be removed.\n\t * @param {module:engine/view/element~Element} element Element from which the custom property will be removed.\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from '../image/utils';\n\n/**\n * @module image/imageupload/imageuploadcommand\n */\n\n/**\n * Image upload command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `'imageUpload'`.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'imageUpload', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageUpload', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class ImageUploadCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = isImageAllowed( this.editor.model );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\n\t\tmodel.change( writer => {\n\t\t\tconst filesToUpload = Array.isArray( options.file ) ? options.file : [ options.file ];\n\n\t\t\tfor ( const file of filesToUpload ) {\n\t\t\t\tuploadImage( writer, model, fileRepository, file );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Handles uploading single file.\n//\n// @param {module:engine/model/writer~writer} writer\n// @param {module:engine/model/model~Model} model\n// @param {File} file\nfunction uploadImage( writer, model, fileRepository, file ) {\n\tconst loader = fileRepository.createLoader( file );\n\n\t// Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\tif ( !loader ) {\n\t\treturn;\n\t}\n\n\tinsertImage( writer, model, { uploadId: loader.id } );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imageupload/imageuploadediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport ImageUploadCommand from '../../src/imageupload/imageuploadcommand';\nimport {\n    fetchLocalImage,\n    isImageType,\n    isLocalImage\n} from '../../src/imageupload/utils';\n/**\n * The editing part of the image upload feature. It registers the `'imageUpload'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [\n            FileRepository,\n            Notification\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const doc = editor.model.document;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const fileRepository = editor.plugins.get(FileRepository);\n        // Setup schema to allow uploadId and uploadStatus for images.\n        schema.extend('image', {\n            allowAttributes: [\n                'uploadId',\n                'uploadStatus'\n            ]\n        });\n        // Register imageUpload command.\n        editor.commands.add('imageUpload', new ImageUploadCommand(editor));\n        // Register upcast converter for uploadId.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'uploadId'\n            },\n            model: 'uploadId'\n        });\n        // Handle pasted images.\n        // For every image file, a new file loader is created and a placeholder image is\n        // inserted into the content. Then, those images are uploaded once they appear in the model\n        // (see Document#change listener below).\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data) => {\n            // Skip if non empty HTML data is included.\n            // https://github.com/ckeditor/ckeditor5-upload/issues/68\n            if (isHtmlIncluded(data.dataTransfer)) {\n                return;\n            }\n            const images = Array.from(data.dataTransfer.files).filter(file => {\n                // See https://github.com/ckeditor/ckeditor5-image/pull/254.\n                if (!file) {\n                    return false;\n                }\n                return isImageType(file);\n            });\n            const ranges = data.targetRanges.map(viewRange => editor.editing.mapper.toModelRange(viewRange));\n            editor.model.change(writer => {\n                // Set selection to paste target.\n                writer.setSelection(ranges);\n                if (images.length) {\n                    evt.stop();\n                    // Upload images after the selection has changed in order to ensure the command's state is refreshed.\n                    editor.model.enqueueChange('default', () => {\n                        editor.execute('imageUpload', { file: images });\n                    });\n                }\n            });\n        });\n        // Handle HTML pasted with images with base64 or blob sources.\n        // For every image file, a new file loader is created and a placeholder image is\n        // inserted into the content. Then, those images are uploaded once they appear in the model\n        // (see Document#change listener below).\n        if (editor.plugins.has('Clipboard')) {\n            this.listenTo(editor.plugins.get('Clipboard'), 'inputTransformation', (evt, data) => {\n                const fetchableImages = Array.from(editor.editing.view.createRangeIn(data.content)).filter(value => isLocalImage(value.item) && !value.item.getAttribute('uploadProcessed')).map(value => {\n                    return {\n                        promise: fetchLocalImage(value.item),\n                        imageElement: value.item\n                    };\n                });\n                if (!fetchableImages.length) {\n                    return;\n                }\n                const writer = new UpcastWriter();\n                for (const fetchableImage of fetchableImages) {\n                    // Set attribute marking that the image was processed already.\n                    writer.setAttribute('uploadProcessed', true, fetchableImage.imageElement);\n                    const loader = fileRepository.createLoader(fetchableImage.promise);\n                    if (loader) {\n                        writer.setAttribute('src', '', fetchableImage.imageElement);\n                        writer.setAttribute('uploadId', loader.id, fetchableImage.imageElement);\n                    }\n                }\n            });\n        }\n        // Prevents from the browser redirecting to the dropped image.\n        editor.editing.view.document.on('dragover', (evt, data) => {\n            data.preventDefault();\n        });\n        // Upload placeholder images that appeared in the model.\n        doc.on('change', () => {\n            const changes = doc.differ.getChanges({ includeChangesInGraveyard: true });\n            for (const entry of changes) {\n                if (entry.type == 'insert' && entry.name != '$text') {\n                    const item = entry.position.nodeAfter;\n                    const isInGraveyard = entry.position.root.rootName == '$graveyard';\n                    for (const image of getImagesFromChangeItem(editor, item)) {\n                        // Check if the image element still has upload id.\n                        const uploadId = image.getAttribute('uploadId');\n                        if (!uploadId) {\n                            continue;\n                        }\n                        // Check if the image is loaded on this client.\n                        const loader = fileRepository.loaders.get(uploadId);\n                        if (!loader) {\n                            continue;\n                        }\n                        if (isInGraveyard) {\n                            // If the image was inserted to the graveyard - abort the loading process.\n                            loader.abort();\n                        } else if (loader.status == 'idle') {\n                            // If the image was inserted into content and has not been loaded yet, start loading it.\n                            this._readAndUpload(loader, image);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Read and upload an image.\n\t *\n\t * The image is read from the disk and as a base64 encoded string it is set temporarily to\n\t * `image[src]`. When the image is successfully uploaded the temporary data is replaced with the target\n\t * image's URL (the URL to the uploaded image on the server).\n\t *\n\t * @protected\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {module:engine/model/element~Element} imageElement\n\t * @returns {Promise}\n\t */\n    _readAndUpload(loader, imageElement) {\n        const editor = this.editor;\n        const model = editor.model;\n        const t = editor.locale.t;\n        const fileRepository = editor.plugins.get(FileRepository);\n        const notification = editor.plugins.get(Notification);\n        model.enqueueChange('transparent', writer => {\n            writer.setAttribute('uploadStatus', 'reading', imageElement);\n        });\n        return loader.read().then(() => {\n            const promise = loader.upload();\n            // Force re–paint in Safari. Without it, the image will display with a wrong size.\n            // https://github.com/ckeditor/ckeditor5/issues/1975\n            /* istanbul ignore next */\n            if (env.isSafari) {\n                const viewFigure = editor.editing.mapper.toViewElement(imageElement);\n                const viewImg = viewFigure.getChild(0);\n                editor.editing.view.once('render', () => {\n                    // Early returns just to be safe. There might be some code ran\n                    // in between the outer scope and this callback.\n                    if (!viewImg.parent) {\n                        return;\n                    }\n                    const domFigure = editor.editing.view.domConverter.mapViewToDom(viewImg.parent);\n                    if (!domFigure) {\n                        return;\n                    }\n                    const originalDisplay = domFigure.style.display;\n                    domFigure.style.display = 'none';\n                    // Make sure this line will never be removed during minification for having \"no effect\".\n                    domFigure._ckHack = domFigure.offsetHeight;\n                    domFigure.style.display = originalDisplay;\n                });\n            }\n            model.enqueueChange('transparent', writer => {\n                writer.setAttribute('uploadStatus', 'uploading', imageElement);\n            });\n            return promise;\n        }).then(data => {\n            model.enqueueChange('transparent', writer => {\n                writer.setAttributes({\n                    uploadStatus: 'complete',\n                    src: data.default\n                }, imageElement);\n                this._parseAndSetSrcsetAttributeOnImage(data, imageElement, writer);\n            });\n            clean();\n        }).catch(error => {\n            // If status is not 'error' nor 'aborted' - throw error because it means that something else went wrong,\n            // it might be generic error and it would be real pain to find what is going on.\n            if (loader.status !== 'error' && loader.status !== 'aborted') {\n                throw error;\n            }\n            // Might be 'aborted'.\n            if (loader.status == 'error' && error) {\n                notification.showWarning(error, {\n                    title: t('Upload failed'),\n                    namespace: 'upload'\n                });\n            }\n            clean();\n            // Permanently remove image from insertion batch.\n            model.enqueueChange('transparent', writer => {\n                writer.remove(imageElement);\n            });\n        });\n        function clean() {\n            model.enqueueChange('transparent', writer => {\n                writer.removeAttribute('uploadId', imageElement);\n                writer.removeAttribute('uploadStatus', imageElement);\n            });\n            fileRepository.destroyLoader(loader);\n        }\n    }\n    /**\n\t * Creates `srcset` attribute based on a given file upload response and sets it as an attribute to a specific image element.\n\t *\n\t * @protected\n\t * @param {Object} data Data object from which `srcset` will be created.\n\t * @param {module:engine/model/element~Element} image The image element on which `srcset` attribute will be set.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n    _parseAndSetSrcsetAttributeOnImage(data, image, writer) {\n        // Srcset attribute for responsive images support.\n        let maxWidth = 0;\n        const srcsetAttribute = Object.keys(data)    // Filter out keys that are not integers.\n.filter(key => {\n            const width = parseInt(key, 10);\n            if (!isNaN(width)) {\n                maxWidth = Math.max(maxWidth, width);\n                return true;\n            }\n        })    // Convert each key to srcset entry.\n.map(key => `${ data[key] } ${ key }w`)    // Join all entries.\n.join(', ');\n        if (srcsetAttribute != '') {\n            writer.setAttribute('srcset', {\n                data: srcsetAttribute,\n                width: maxWidth\n            }, image);\n        }\n    }\n}\n// Returns `true` if non-empty `text/html` is included in the data transfer.\n//\n// @param {module:clipboard/datatransfer~DataTransfer} dataTransfer\n// @returns {Boolean}\nexport function isHtmlIncluded(dataTransfer) {\n    return Array.from(dataTransfer.types).includes('text/html') && dataTransfer.getData('text/html') !== '';\n}\nfunction getImagesFromChangeItem(editor, item) {\n    return Array.from(editor.model.createRangeOn(item)).filter(value => value.item.is('image')).map(value => value.item);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class ListCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'numbered'|'bulleted'} type List type that will be handled by this command.\n\t */\n\tconstructor( editor, type ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The type of the list created by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'numbered'|'bulleted'|'todo'}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @protected\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = this.value === true;\n\t\t// If we are turning off items, we are going to rename them to paragraphs.\n\n\t\tmodel.change( writer => {\n\t\t\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n\t\t\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\n\t\t\tif ( turnOff ) {\n\t\t\t\t// Start from the model item that is just after the last turned-off item.\n\t\t\t\tlet next = blocks[ blocks.length - 1 ].nextSibling;\n\t\t\t\tlet currentIndent = Number.POSITIVE_INFINITY;\n\t\t\t\tlet changes = [];\n\n\t\t\t\t// Correct indent of all items after the last turned off item.\n\t\t\t\t// Rules that should be followed:\n\t\t\t\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t\t\t\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t\t\t\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t\t\t\t//    should not end up as a child of any of list items that they were not children of before.\n\t\t\t\t// 3. All other items should have their indent changed relatively to it's parent.\n\t\t\t\t//\n\t\t\t\t// For example:\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t// 3        * --------\t\t\t<-- this is turned off.\n\t\t\t\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t\t\t\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t\t\t\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t\t\t\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t\t\t\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t\t\t\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t\t\t\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// After turning off 3 the list becomes:\n\t\t\t\t//\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t//\n\t\t\t\t// 3  --------\n\t\t\t\t//\n\t\t\t\t// 4  * --------\n\t\t\t\t// 5     * --------\n\t\t\t\t// 6  * --------\n\t\t\t\t// 7     * --------\n\t\t\t\t// 8  * --------\n\t\t\t\t// 9     * --------\n\t\t\t\t// 10       * --------\n\t\t\t\t// 11       * --------\n\t\t\t\t// 12 * --------\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t\t\t\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t\t\t\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t\t\t\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t\t\t\t// less conversion (faster).\n\t\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) !== 0 ) {\n\t\t\t\t\t// Check each next list item, as long as its indent is bigger than 0.\n\t\t\t\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\t\t\t\tconst indent = next.getAttribute( 'listIndent' );\n\n\t\t\t\t\t// We check if that's item indent is lower as current relative indent.\n\t\t\t\t\tif ( indent < currentIndent ) {\n\t\t\t\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\t\t\t\tcurrentIndent = indent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix indent relatively to current relative indent.\n\t\t\t\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\t\t\t\tconst newIndent = indent - currentIndent;\n\n\t\t\t\t\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\n\t\t\t\t\t// reverse the changes so the last item is changed first.\n\t\t\t\t\t// This is to keep model in correct state all the time.\n\t\t\t\t\tchanges.push( { element: next, listIndent: newIndent } );\n\n\t\t\t\t\t// Find next item.\n\t\t\t\t\tnext = next.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tchanges = changes.reverse();\n\n\t\t\t\tfor ( const item of changes ) {\n\t\t\t\t\twriter.setAttribute( 'listIndent', item.listIndent, item.element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\n\t\t\t// Changing one nested list item to other type should also trigger changing all its siblings so the\n\t\t\t// whole nested list is of the same type.\n\t\t\t// Example (assume changing to numbered list):\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ---[--\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t// * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n\t\t\t//   * ---]--\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\tif ( !turnOff ) {\n\t\t\t\t// Find lowest indent among selected items. This will be indicator what is the indent of\n\t\t\t\t// top-most list affected by the command.\n\t\t\t\tlet lowestIndent = Number.POSITIVE_INFINITY;\n\n\t\t\t\tfor ( const item of blocks ) {\n\t\t\t\t\tif ( item.is( 'listItem' ) && item.getAttribute( 'listIndent' ) < lowestIndent ) {\n\t\t\t\t\t\tlowestIndent = item.getAttribute( 'listIndent' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do not execute the fix for top-level lists.\n\t\t\t\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n\n\t\t\t\t// Fix types of list items that are \"before\" the selected blocks.\n\t\t\t\t_fixType( blocks, true, lowestIndent );\n\n\t\t\t\t// Fix types of list items that are \"after\" the selected blocks.\n\t\t\t\t_fixType( blocks, false, lowestIndent );\n\t\t\t}\n\n\t\t\t// Phew! Now it will be easier :).\n\t\t\t// For each block element that was in the selection, we will either: turn it to list item,\n\t\t\t// turn it to paragraph, or change it's type. Or leave it as it is.\n\t\t\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\n\t\t\tfor ( const element of blocks.reverse() ) {\n\t\t\t\tif ( turnOff && element.name == 'listItem' ) {\n\t\t\t\t\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n\t\t\t\t\t// List item specific attributes are removed by post fixer.\n\t\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\t} else if ( !turnOff && element.name != 'listItem' ) {\n\t\t\t\t\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n\t\t\t\t\t// The order of operations is important to keep model in correct state.\n\t\t\t\t\twriter.setAttributes( { listType: this.type, listIndent: 0 }, element );\n\t\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t// We are turning on and the element is a `listItem` but has different type - change it's type and\n\t\t\t\t\t// type of it's all siblings that have same indent.\n\t\t\t\t\twriter.setAttribute( 'listType', this.type, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\t// Check whether closest `listItem` ancestor of the position has a correct type.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\treturn !!listItem && listItem.is( 'listItem' ) && listItem.getAttribute( 'listType' ) == this.type;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Otherwise, check if list item can be inserted at the position start.\n\t\treturn checkCanBecomeListItem( firstBlock, schema );\n\t}\n}\n\n// Helper function used when one or more list item have their type changed. Fixes type of other list items\n// that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n// not to duplicated code, as same fix has to be performed before and after selection.\n//\n// @param {Array.<module:engine/model/node~Node>} blocks Blocks that are in selection.\n// @param {Boolean} isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n// or blocks after last selected block (`false`).\n// @param {Number} lowestIndent Lowest indent among selected blocks.\nfunction _fixType( blocks, isBackward, lowestIndent ) {\n\t// We need to check previous sibling of first changed item and next siblings of last changed item.\n\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\n\n\tif ( startingItem.is( 'listItem' ) ) {\n\t\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t// During processing items, keeps the lowest indent of already processed items.\n\t\t// This saves us from changing too many items.\n\t\t// Following example is for going forward as it is easier to read, however same applies to going backward.\n\t\t// * ------\n\t\t//   * ------\n\t\t//     * --[---\n\t\t//   * ------\t\t<-- `lowestIndent` should be 1\n\t\t//     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n\t\t//     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n\t\t//     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n\t\t// * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\t\tlet currentIndent = startingItem.getAttribute( 'listIndent' );\n\n\t\t// Look back until a list item with indent lower than reference `lowestIndent`.\n\t\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\n\t\twhile ( item && item.is( 'listItem' ) && item.getAttribute( 'listIndent' ) >= lowestIndent ) {\n\t\t\tif ( currentIndent > item.getAttribute( 'listIndent' ) ) {\n\t\t\t\tcurrentIndent = item.getAttribute( 'listIndent' );\n\t\t\t}\n\n\t\t\t// Found an item that is in the same nested sublist.\n\t\t\tif ( item.getAttribute( 'listIndent' ) == currentIndent ) {\n\t\t\t\t// Just add the item to selected blocks like it was selected by the user.\n\t\t\t\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\n\t\t\t}\n\n\t\t\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t}\n\t}\n}\n\n// Checks whether the given block can be replaced by a listItem.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeListItem( block, schema ) {\n\treturn schema.checkChild( block.parent, 'listItem' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/indentcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class IndentCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor, indentDirection ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Determines by how much the command will change the list item's indent attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) > lastItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = item.getAttribute( 'listIndent' ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' );\n\t\t\tconst type = listItem.getAttribute( 'listType' );\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'listItem' ) && prev.getAttribute( 'listIndent' ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/utils\n */\n\nimport { getFillerOffset } from '@ckeditor/ckeditor5-engine/src/view/containerelement';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer The writer instance.\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createViewListItemElement( writer ) {\n\tconst viewItem = writer.createContainerElement( 'li' );\n\n\tviewItem.getFillerOffset = getListItemFillerOffset;\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (<li>) with the model `listItem` element.\n * The function then returns the created view list item (<li>).\n *\n * @param {module:engine/model/item~Item} modelItem Model list item.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @returns {module:engine/view/containerelement~ContainerElement} View list element.\n */\nexport function generateLiInUl( modelItem, conversionApi ) {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'listType' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement( viewWriter );\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\n\tviewWriter.insert( viewWriter.createPositionAt( viewList, 0 ), viewItem );\n\n\tmapper.bindElements( modelItem, viewItem );\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param {module:engine/view/item~Item} modelItem Model list item.\n * @param {module:engine/view/containerelement~ContainerElement} injectedItem\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @param {module:engine/model/model~Model} model The model instance.\n */\nexport function injectViewList( modelItem, injectedItem, conversionApi, model ) {\n\tconst injectedList = injectedItem.parent;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// The position where the view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\n\t// 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n\t// that is a \"parent\" or \"sibling\" of the injected model item.\n\t// If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem.previousSibling, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: modelItem.getAttribute( 'listIndent' )\n\t} );\n\tconst prevItem = modelItem.previousSibling;\n\n\tif ( refItem && refItem.getAttribute( 'listIndent' ) == modelItem.getAttribute( 'listIndent' ) ) {\n\t\t// There is a list item with the same indent - we found the same-level sibling.\n\t\t// Break the list after it. The inserted view item will be added in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem );\n\t\tinsertPosition = viewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with the same indent. Check the previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have a lower indent.\n\t\t\t// It means that the inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionAt( prevItem, 'end' ) );\n\t\t} else {\n\t\t\t// The previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at the mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of the injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem );\n\n\t\tconst walkerBoundaries = viewWriter.createRange( viewWriter.createPositionAt( prevView, 0 ), insertPosition );\n\t\tconst walker = walkerBoundaries.getWalker( { ignoreElementEnd: true } );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( viewWriter.createPositionBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent;\n\n\t\t\t\tconst targetPosition = viewWriter.createPositionAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( viewList ), targetPosition );\n\n\t\t\t\twalker.position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'ul' ) || nextViewList.is( 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif ( modelChild && modelChild.getAttribute( 'listIndent' ) > modelItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( lastSubChild.parent ), viewWriter.createPositionAt( injectedItem, 'end' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge the inserted view list with its possible neighbor lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling );\n\tmergeViewLists( viewWriter, injectedList.previousSibling, injectedList );\n}\n\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter The writer instance.\n * @param {module:engine/view/item~Item} firstList The first element to compare.\n * @param {module:engine/view/item~Item} secondList The second element to compare.\n * @returns {module:engine/view/position~Position|null} The position after merge or `null` when there was no merge.\n */\nexport function mergeViewLists( viewWriter, firstList, secondList ) {\n\t// Check if two lists are going to be merged.\n\tif ( !firstList || !secondList || ( firstList.name != 'ul' && firstList.name != 'ol' ) ) {\n\t\treturn null;\n\t}\n\n\t// Both parameters are list elements, so compare types now.\n\tif ( firstList.name != secondList.name || firstList.getAttribute( 'class' ) !== secondList.getAttribute( 'class' ) ) {\n\t\treturn null;\n\t}\n\n\treturn viewWriter.mergeContainers( viewWriter.createPositionAfter( firstList ) );\n}\n\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @param {module:engine/view/position~Position} viewPosition\n * @returns {module:engine/view/position~Position}\n */\nexport function positionAfterUiElements( viewPosition ) {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param {module:engine/model/item~Item} modelItem\n * @param {Object} options Search criteria.\n * @param {Boolean} [options.sameIndent=false] Whether the sought sibling should have the same indentation.\n * @param {Boolean} [options.smallerIndent=false] Whether the sought sibling should have a smaller indentation.\n * @param {Number} [options.listIndent] The reference indentation.\n * @returns {module:engine/model/item~Item|null}\n */\nexport function getSiblingListItem( modelItem, options ) {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\tconst indent = options.listIndent;\n\n\tlet item = modelItem;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\titem = item.previousSibling;\n\t}\n\n\treturn null;\n}\n\nexport function findInRange( range, comparator ) {\n\tfor ( const item of range.getItems() ) {\n\t\tconst result = comparator( item );\n\n\t\tif ( result ) {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n/**\n * Helper method for creating a UI button and linking it with an appropriate command.\n *\n * @private\n * @param {module:core/editor/editor~Editor} editor The editor instance to which the UI component will be added.\n * @param {String} commandName The name of the command.\n * @param {Object} label The button label.\n * @param {String} icon The source of the icon.\n */\nexport function createUIComponent( editor, commandName, label, icon ) {\n\teditor.ui.componentFactory.add( commandName, locale => {\n\t\tconst command = editor.commands.get( commandName );\n\t\tconst buttonView = new ButtonView( locale );\n\n\t\tbuttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\t// Bind button model to command.\n\t\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t\t// Execute command.\n\t\tbuttonView.on( 'execute', () => editor.execute( commandName ) );\n\n\t\treturn buttonView;\n\t} );\n}\n\n// Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getListItemFillerOffset() {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\tif ( this.isEmpty || hasOnlyLists ) {\n\t\treturn 0;\n\t}\n\n\treturn getFillerOffset.call( this );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/converters\n */\n\nimport {\n\tgenerateLiInUl,\n\tinjectViewList,\n\tmergeViewLists,\n\tgetSiblingListItem,\n\tpositionAfterUiElements\n} from './utils';\nimport TreeWalker from '@ckeditor/ckeditor5-engine/src/model/treewalker';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewInsertion( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.item, 'insert' );\n\t\tconsumable.consume( data.item, 'attribute:listType' );\n\t\tconsumable.consume( data.item, 'attribute:listIndent' );\n\n\t\tconst modelItem = data.item;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewRemove( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'li' ) );\n\t\tconst viewItem = viewStart.nodeAfter;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item - the one to remove.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Remove the list with the item to remove.\n\t\tconst viewList = viewItem.parent;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\t// 3. Merge the whole created by breaking and removing the list.\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 4. Bring back nested list that was in the removed <li>.\n\t\tconst modelItem = conversionApi.mapper.toModelElement( viewItem );\n\n\t\thoistNestedLists( modelItem.getAttribute( 'listIndent' ) + 1, data.position, removeRange.start, viewItem, conversionApi, model );\n\n\t\t// 5. Unbind removed view item and all children.\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/converters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/todolistconverters~modelViewChangeType} to see an example of it.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewChangeType( evt, data, conversionApi ) {\n\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listType' ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewWriter = conversionApi.writer;\n\n\t// Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t// Change name of the view list that holds the changed view item.\n\t// We cannot just change name property, because that would not render properly.\n\tconst viewList = viewItem.parent;\n\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n\n\tviewWriter.rename( listName, viewList );\n}\n\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/converters~modelViewChangeType}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewMergeAfterChangeType( evt, data, conversionApi ) {\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewList = viewItem.parent;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Merge the changed view list with other lists, if possible.\n\tmergeViewLists( viewWriter, viewList, viewList.nextSibling );\n\tmergeViewLists( viewWriter, viewList.previousSibling, viewList );\n\n\t// Consumable insertion of children inside the item. They are already handled by re-building the item in view.\n\tfor ( const child of data.item.getChildren() ) {\n\t\tconversionApi.consumable.consume( child, 'insert' );\n\t}\n}\n\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewChangeIndent( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listIndent' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item -- the one that changed type.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\t\tconst viewList = viewItem.parent;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tviewWriter.remove( removeRange );\n\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 3. Bring back nested list that was in the removed <li>.\n\t\thoistNestedLists( data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi, model );\n\n\t\t// 4. Inject view list like it is newly inserted.\n\t\tinjectViewList( data.item, viewItem, conversionApi, model );\n\n\t\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\t\tfor ( const child of data.item.getChildren() ) {\n\t\t\tconversionApi.consumable.consume( child, 'insert' );\n\t\t}\n\t};\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n *\t\t<paragraph>xxx</paragraph>       // Instead of this wrong view state:\n *\t\t<listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewSplitOnInsert( evt, data, conversionApi ) {\n\tif ( data.item.name != 'listItem' ) {\n\t\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst lists = [];\n\n\t\t// Break multiple ULs/OLs if there are.\n\t\t//\n\t\t// Imagine following list:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// Insert paragraph after item 1.1.1:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// In this case 1.1.2 has to become beginning of a new list.\n\t\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n\t\t// Then we need to move those broken pieces one after another and merge:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t// 1.1.2 --------\n\t\t//   1.1.3 --------\n\t\t//     1.1.3.1 --------\n\t\t// 1.2 --------\n\t\t//   1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\twhile ( viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol' ) {\n\t\t\tviewPosition = viewWriter.breakContainer( viewPosition );\n\n\t\t\tif ( viewPosition.parent.name != 'li' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Remove lists that are after inserted element.\n\t\t\t// They will be brought back later, below the inserted element.\n\t\t\tconst removeStart = viewPosition;\n\t\t\tconst removeEnd = viewWriter.createPositionAt( viewPosition.parent, 'end' );\n\n\t\t\t// Don't remove if there is nothing to remove.\n\t\t\tif ( !removeStart.isEqual( removeEnd ) ) {\n\t\t\t\tconst removed = viewWriter.remove( viewWriter.createRange( removeStart, removeEnd ) );\n\t\t\t\tlists.push( removed );\n\t\t\t}\n\n\t\t\tviewPosition = viewWriter.createPositionAfter( viewPosition.parent );\n\t\t}\n\n\t\t// Bring back removed lists.\n\t\tif ( lists.length > 0 ) {\n\t\t\tfor ( let i = 0; i < lists.length; i++ ) {\n\t\t\t\tconst previousList = viewPosition.nodeBefore;\n\t\t\t\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\n\t\t\t\tviewPosition = insertedRange.end;\n\n\t\t\t\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tconst mergePos = mergeViewLists( viewWriter, previousList, previousList.nextSibling );\n\n\t\t\t\t\t// If `mergePos` is in `previousList` it means that the lists got merged.\n\t\t\t\t\t// In this case, we need to fix insert position.\n\t\t\t\t\tif ( mergePos && mergePos.parent == previousList ) {\n\t\t\t\t\t\tviewPosition.offset--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Merge last inserted list with element after it.\n\t\t\tmergeViewLists( viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter );\n\t\t}\n\t}\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul>\n *\t\t<paragraph>xxx</paragraph>       <p>xxx</p>\n *\t\t<listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewMergeAfter( evt, data, conversionApi ) {\n\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\tconst viewItemPrev = viewPosition.nodeBefore;\n\tconst viewItemNext = viewPosition.nodeAfter;\n\n\t// Merge lists if something (remove, move) was done from inside of list.\n\t// Merging will be done only if both items are view lists of the same type.\n\t// The check is done inside the helper function.\n\tmergeViewLists( conversionApi.writer, viewItemPrev, viewItemNext );\n}\n\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function viewModelConverter( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\tconst writer = conversionApi.writer;\n\t\tconst conversionStore = this.conversionApi.store;\n\n\t\t// 1. Create `listItem` model element.\n\t\tconst listItem = writer.createElement( 'listItem' );\n\n\t\t// 2. Handle `listItem` model element attributes.\n\t\tconversionStore.indent = conversionStore.indent || 0;\n\t\twriter.setAttribute( 'listIndent', conversionStore.indent, listItem );\n\n\t\t// Set 'bulleted' as default. If this item is pasted into a context,\n\t\tconst type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n\t\twriter.setAttribute( 'listType', type, listItem );\n\n\t\t// `listItem`s created recursively should have bigger indent.\n\t\tconversionStore.indent++;\n\n\t\t// Try to find allowed parent for list item.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( listItem, data.modelCursor );\n\n\t\t// When there is no allowed parent it means that list item cannot be converted at current model position\n\t\t// and in any of position ancestors.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\twriter.insert( listItem, splitResult.position );\n\n\t\tconst nextPosition = viewToModelListItemChildrenConverter( listItem, data.viewItem.getChildren(), conversionApi );\n\n\t\tconversionStore.indent--;\n\n\t\t// Result range starts before the first item and ends after the last.\n\t\tdata.modelRange = writer.createRange( data.modelCursor, nextPosition );\n\n\t\t// When `data.modelCursor` parent had to be split to insert list item...\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// Continue conversion in the split element.\n\t\t\tdata.modelCursor = writer.createPositionAt( splitResult.cursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise continue conversion after the last list item.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanList( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t// Caching children because when we start removing them iterating fails.\n\t\tconst children = Array.from( data.viewItem.getChildren() );\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( !child.is( 'li' ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanListItem( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\tif ( data.viewItem.childCount === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [ ...data.viewItem.getChildren() ];\n\n\t\tlet foundList = false;\n\t\tlet firstNode = true;\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( foundList && !child.is( 'ul' ) && !child.is( 'ol' ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\n\t\t\tif ( child.is( 'text' ) ) {\n\t\t\t\t// If this is the first node and it's a text node, left-trim it.\n\t\t\t\tif ( firstNode ) {\n\t\t\t\t\tchild._data = child.data.replace( /^\\s+/, '' );\n\t\t\t\t}\n\n\t\t\t\t// If this is the last text node before <ul> or <ol>, right-trim it.\n\t\t\t\tif ( !child.nextSibling || ( child.nextSibling.is( 'ul' ) || child.nextSibling.is( 'ol' ) ) ) {\n\t\t\t\t\tchild._data = child.data.replace( /\\s+$/, '' );\n\t\t\t\t}\n\t\t\t} else if ( child.is( 'ul' ) || child.is( 'ol' ) ) {\n\t\t\t\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n\t\t\t\tfoundList = true;\n\t\t\t}\n\n\t\t\tfirstNode = false;\n\t\t}\n\t}\n}\n\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:modelToViewPosition\n * @param {module:engine/view/view~View} view A view instance.\n * @returns {Function}\n */\nexport function modelToViewPosition( view ) {\n\treturn ( evt, data ) => {\n\t\tif ( data.isPhantom ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.modelPosition.nodeBefore;\n\n\t\tif ( modelItem && modelItem.is( 'listItem' ) ) {\n\t\t\tconst viewItem = data.mapper.toViewElement( modelItem );\n\t\t\tconst topmostViewList = viewItem.getAncestors().find( element => element.is( 'ul' ) || element.is( 'ol' ) );\n\t\t\tconst walker = view.createPositionAt( viewItem, 0 ).getWalker();\n\n\t\t\tfor ( const value of walker ) {\n\t\t\t\tif ( value.type == 'elementStart' && value.item.is( 'li' ) ) {\n\t\t\t\t\tdata.viewPosition = value.previousPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\n\t\t\t\t\tdata.viewPosition = value.nextPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function viewToModelPosition( model ) {\n\treturn ( evt, data ) => {\n\t\tconst viewPos = data.viewPosition;\n\t\tconst viewParent = viewPos.parent;\n\t\tconst mapper = data.mapper;\n\n\t\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\n\t\t\t// Position is directly in <ul> or <ol>.\n\t\t\tif ( !viewPos.isAtEnd ) {\n\t\t\t\t// If position is not at the end, it must be before <li>.\n\t\t\t\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter );\n\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode );\n\t\t\t} else {\n\t\t\t\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n\t\t\t\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n\t\t\t\t// because that <li> may contain nested items.\n\t\t\t\t// We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore );\n\t\t\t\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore );\n\n\t\t\t\t// Then we get model position before mapped `listItem` and shift it accordingly.\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode ).getShiftedBy( modelLength );\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t} else if (\n\t\t\tviewParent.name == 'li' &&\n\t\t\tviewPos.nodeBefore &&\n\t\t\t( viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol' )\n\t\t) {\n\t\t\t// In most cases when view position is in <li> it is in text and this is a correct position.\n\t\t\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n\t\t\tconst modelNode = mapper.toModelElement( viewParent );\n\n\t\t\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n\t\t\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\t\t\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\t\t\tlet viewList = viewPos.nodeBefore;\n\n\t\t\twhile ( viewList && ( viewList.is( 'ul' ) || viewList.is( 'ol' ) ) ) {\n\t\t\t\tmodelLength += mapper.getModelLength( viewList );\n\n\t\t\t\tviewList = viewList.previousSibling;\n\t\t\t}\n\n\t\t\tdata.modelPosition = model.createPositionBefore( modelNode ).getShiftedBy( modelLength );\n\n\t\t\tevt.stop();\n\t\t}\n\t};\n}\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * The list structure after the middle element is removed:\n *\n * \t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n *\n * @param {module:engine/model/model~Model} model The data model.\n * @param {module:engine/model/writer~Writer} writer The writer to do changes with.\n * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n */\nexport function modelChangePostFixer( model, writer ) {\n\tconst changes = model.document.differ.getChanges();\n\tconst itemToListHead = new Map();\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\n\t\t\tif ( entry.name != '$text' ) {\n\t\t\t\t// In case of renamed element.\n\t\t\t\tconst item = entry.position.nodeAfter;\n\n\t\t\t\tif ( item.hasAttribute( 'listIndent' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listIndent', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listType' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listType', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst posAfter = entry.position.getShiftedBy( entry.length );\n\n\t\t\t_addListToFix( posAfter );\n\t\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listIndent' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listType' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t}\n\t}\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\t_fixListIndents( listHead );\n\t\t_fixListTypes( listHead );\n\t}\n\n\treturn applied;\n\n\tfunction _addListToFix( position ) {\n\t\tconst prev = position.nodeBefore;\n\n\t\tif ( !prev || !prev.is( 'listItem' ) ) {\n\t\t\tconst item = position.nodeAfter;\n\n\t\t\tif ( item && item.is( 'listItem' ) ) {\n\t\t\t\titemToListHead.set( item, item );\n\t\t\t}\n\t\t} else {\n\t\t\tlet listHead = prev;\n\n\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( listHead.previousSibling && listHead.previousSibling.is( 'listItem' ) ) {\n\t\t\t\tlistHead = listHead.previousSibling;\n\n\t\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemToListHead.set( position.nodeBefore, listHead );\n\t\t}\n\t}\n\n\tfunction _fixListIndents( item ) {\n\t\tlet maxIndent = 0;\n\t\tlet fixBy = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\t\tif ( itemIndent > maxIndent ) {\n\t\t\t\tlet newIndent;\n\n\t\t\t\tif ( fixBy === null ) {\n\t\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\t\tnewIndent = maxIndent;\n\t\t\t\t} else {\n\t\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'listIndent', newIndent, item );\n\n\t\t\t\tapplied = true;\n\t\t\t} else {\n\t\t\t\tfixBy = null;\n\t\t\t\tmaxIndent = item.getAttribute( 'listIndent' ) + 1;\n\t\t\t}\n\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n\n\tfunction _fixListTypes( item ) {\n\t\tlet typesStack = [];\n\t\tlet prev = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\t\tif ( prev && prev.getAttribute( 'listIndent' ) > itemIndent ) {\n\t\t\t\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\n\t\t\t}\n\n\t\t\tif ( itemIndent != 0 ) {\n\t\t\t\tif ( typesStack[ itemIndent ] ) {\n\t\t\t\t\tconst type = typesStack[ itemIndent ];\n\n\t\t\t\t\tif ( item.getAttribute( 'listType' ) != type ) {\n\t\t\t\t\t\twriter.setAttribute( 'listType', type, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttypesStack[ itemIndent ] = item.getAttribute( 'listType' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprev = item;\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n *\t\t// At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n *\t\t//              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Array} args Arguments of {@link module:engine/model/model~Model#insertContent}.\n */\nexport function modelIndentPasteFixer( evt, [ content, selectable ] ) {\n\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\n\t// that list will be broken.\n\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n\t// would create incorrect model.\n\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\n\n\tlet selection;\n\n\tif ( !selectable ) {\n\t\tselection = this.document.selection;\n\t} else {\n\t\tselection = this.createSelection( selectable );\n\t}\n\n\tif ( item && item.is( 'listItem' ) ) {\n\t\t// Get a reference list item. Inserted list items will be fixed according to that item.\n\t\tconst pos = selection.getFirstPosition();\n\t\tlet refItem = null;\n\n\t\tif ( pos.parent.is( 'listItem' ) ) {\n\t\t\trefItem = pos.parent;\n\t\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'listItem' ) ) {\n\t\t\trefItem = pos.nodeBefore;\n\t\t}\n\n\t\t// If there is `refItem` it means that we do insert list items into an existing list.\n\t\tif ( refItem ) {\n\t\t\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n\t\t\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n\t\t\t// Indent of all those items has to be adjusted to reference item.\n\t\t\tconst indentChange = refItem.getAttribute( 'listIndent' );\n\n\t\t\t// Fix only if there is anything to fix.\n\t\t\tif ( indentChange > 0 ) {\n\t\t\t\t// Adjust indent of all \"first\" list items in inserted data.\n\t\t\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\t\t\titem._setAttribute( 'listIndent', item.getAttribute( 'listIndent' ) + indentChange );\n\n\t\t\t\t\titem = item.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Helper function that converts children of a given `<li>` view element into corresponding model elements.\n// The function maintains proper order of elements if model `listItem` is split during the conversion\n// due to block children conversion.\n//\n// @param {module:engine/model/element~Element} listItemModel List item model element to which converted children will be inserted.\n// @param {Iterable.<module:engine/view/node~Node>} viewChildren View elements which will be converted.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n// @returns {module:engine/model/position~Position} Position on which next elements should be inserted after children conversion.\nfunction viewToModelListItemChildrenConverter( listItemModel, viewChildren, conversionApi ) {\n\tconst { writer, schema } = conversionApi;\n\n\t// A position after the last inserted `listItem`.\n\tlet nextPosition = writer.createPositionAfter( listItemModel );\n\n\t// Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n\t// in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n\tfor ( const child of viewChildren ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\t// If the children is a list, we will insert its conversion result after currently handled `listItem`.\n\t\t\t// Then, next insertion position will be set after all the new list items (and maybe other elements if\n\t\t\t// something split list item).\n\t\t\t//\n\t\t\t// If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n\t\t\t// should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n\t\t\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\n\t\t} else {\n\t\t\t// If this is not a list, try inserting content at the end of the currently handled `listItem`.\n\t\t\tconst result = conversionApi.convertItem( child, writer.createPositionAt( listItemModel, 'end' ) );\n\n\t\t\t// It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n\t\t\t//\n\t\t\t// <li><p>Foo</p></li>\n\t\t\t//\n\t\t\t// will be converted to:\n\t\t\t//\n\t\t\t// <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n\t\t\t//\n\t\t\tconst convertedChild = result.modelRange.start.nodeAfter;\n\t\t\tconst wasSplit = convertedChild && convertedChild.is( 'element' ) && !schema.checkChild( listItemModel, convertedChild.name );\n\n\t\t\tif ( wasSplit ) {\n\t\t\t\t// As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n\t\t\t\t//\n\t\t\t\t// `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n\t\t\t\t// that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n\t\t\t\t//\n\t\t\t\t// However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// or after an element if another element broken auto-paragraphed element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// We need to check for such cases and use proper list item and position based on it.\n\t\t\t\t//\n\t\t\t\tif ( result.modelCursor.parent.is( 'listItem' ) ) {\n\t\t\t\t\t// (1).\n\t\t\t\t\tlistItemModel = result.modelCursor.parent;\n\t\t\t\t} else {\n\t\t\t\t\t// (2), (3).\n\t\t\t\t\tlistItemModel = findNextListItem( result.modelCursor );\n\t\t\t\t}\n\n\t\t\t\tnextPosition = writer.createPositionAfter( listItemModel );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nextPosition;\n}\n\n// Helper function that seeks for a next list item starting from given `startPosition`.\nfunction findNextListItem( startPosition ) {\n\tconst treeWalker = new TreeWalker( { startPosition } );\n\n\tlet value;\n\n\tdo {\n\t\tvalue = treeWalker.next();\n\t} while ( !value.value.item.is( 'listItem' ) );\n\n\treturn value.value.item;\n}\n\n// Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n// to other given parameters.\nfunction hoistNestedLists( nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi, model ) {\n\t// Find correct previous model list item element.\n\t// The element has to have either same or smaller indent than given reference indent.\n\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n\t// Keep in mind that such element might not be found, if removed item was the first item.\n\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition.nodeBefore, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: nextIndent,\n\t\tfoo: 'b'\n\t} );\n\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Indent of found element or `null` if the element has not been found.\n\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'listIndent' ) : null;\n\n\tlet insertPosition;\n\n\tif ( !prevModelItem ) {\n\t\t// If element has not been found, simply insert lists at the position where the removed item was:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n\t\t//   1.1 --------       <--- this is reference indent.\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1.1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t// 1.2 --------\n\t\tinsertPosition = viewRemoveStartPosition;\n\t} else if ( prevIndent == nextIndent ) {\n\t\t// If element has been found and has same indent as reference indent it means that nested items should\n\t\t// become siblings of found element:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------       <--- this is `prevModelItem`.\n\t\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n\t\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n\t\t//   2.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------\n\t\t//   2.1 --------\n\t\t//   2.2 --------\n\t\tconst prevViewList = mapper.toViewElement( prevModelItem ).parent;\n\t\tinsertPosition = viewWriter.createPositionAfter( prevViewList );\n\t} else {\n\t\t// If element has been found and has smaller indent as reference indent it means that nested items\n\t\t// should become nested items of found item:\n\t\t//\n\t\t// 1 --------           <--- this is `prevModelItem`.\n\t\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n\t\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n\t\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\n\t\tconst modelPosition = model.createPositionAt( prevModelItem, 'end' );\n\t\tinsertPosition = mapper.toViewPosition( modelPosition );\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n\t// are inserted after the first list (no need to recalculate insertion position for them).\n\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\n\t\tif ( child.is( 'ul' ) || child.is( 'ol' ) ) {\n\t\t\tinsertPosition = viewWriter.move( viewWriter.createRangeOn( child ), insertPosition ).end;\n\n\t\t\tmergeViewLists( viewWriter, child, child.nextSibling );\n\t\t\tmergeViewLists( viewWriter, child.previousSibling, child );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listediting\n */\n\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfterChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './converters';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\t\tediting.mapper.on( 'viewToModelPosition', viewToModelPosition( editor.model ) );\n\t\tdata.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\n\t\tediting.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tediting.downcastDispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\tdata.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tdata.downcastDispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\n\t\tediting.downcastDispatcher.on( 'attribute:listType:listItem', modelViewChangeType, { priority: 'high' } );\n\t\tediting.downcastDispatcher.on( 'attribute:listType:listItem', modelViewMergeAfterChangeType, { priority: 'low' } );\n\t\tediting.downcastDispatcher.on( 'attribute:listIndent:listItem', modelViewChangeIndent( editor.model ) );\n\n\t\tediting.downcastDispatcher.on( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\tediting.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\n\t\tdata.upcastDispatcher.on( 'element:ul', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:ol', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', cleanListItem, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', viewModelConverter );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new IndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new IndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { priority: 'high' } );\n\n\t\tconst getCommandExecuter = commandName => {\n\t\t\treturn ( data, cancel ) => {\n\t\t\t\tconst command = this.editor.commands.get( commandName );\n\n\t\t\t\tif ( command.isEnabled ) {\n\t\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\teditor.keystrokes.set( 'Tab', getCommandExecuter( 'indentList' ) );\n\t\teditor.keystrokes.set( 'Shift+Tab', getCommandExecuter( 'outdentList' ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst commands = this.editor.commands;\n\n\t\tconst indent = commands.get( 'indent' );\n\t\tconst outdent = commands.get( 'outdent' );\n\n\t\tif ( indent ) {\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' ) );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' ) );\n\t\t}\n\t}\n}\n\nfunction getViewListItemLength( element ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module list/listui\n */\nimport { createUIComponent } from './utils';\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const t = this.editor.t;\n        // Create two buttons and link them with numberedList and bulletedList commands.\n        createUIComponent(this.editor, 'numberedList', t('Numbered List'), numberedListIcon);\n        createUIComponent(this.editor, 'bulletedList', t('Bulleted List'), bulletedListIcon);\n    }\n}","\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/clickobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:click Click} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View view controller}\n * by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClickObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'click';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when one of the editables has been clicked.\n *\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\n *\n * Note that this event is not available by default. To make it available\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/clickobserver~ClickObserver\n * @event module:engine/view/document~Document#event:click\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * This class represents all the constants needed in a MathType integration among different classes.\n * If a constant should be used across different classes should be defined using attribute\n * accessors.\n */\nexport default class Constants {\n  /**\n   * Safe XML entities.\n   * @type {Object}\n   */\n  static get safeXmlCharactersEntities() {\n    return {\n      tagOpener: '&laquo;',\n      tagCloser: '&raquo;',\n      doubleQuote: '&uml;',\n      realDoubleQuote: '&quot;',\n    };\n  }\n\n  /**\n   * Blackboard invalid safe characters.\n   * @type {Object}\n   */\n  static get safeBadBlackboardCharacters() {\n    return {\n      ltElement: '«mo»<«/mo»',\n      gtElement: '«mo»>«/mo»',\n      ampElement: '«mo»&«/mo»',\n    };\n  }\n\n  /**\n   * Blackboard valid safe characters.\n   * @type{Object}\n   */\n  static get safeGoodBlackboardCharacters() {\n    return {\n      ltElement: '«mo»§lt;«/mo»',\n      gtElement: '«mo»§gt;«/mo»',\n      ampElement: '«mo»§amp;«/mo»',\n    };\n  }\n\n  /**\n   * Standard XML special characters.\n   * @type {Object}\n   */\n  static get xmlCharacters() {\n    return {\n      id: 'xmlCharacters',\n      tagOpener: '<', // Hex: \\x3C.\n      tagCloser: '>', // Hex: \\x3E.\n      doubleQuote: '\"', // Hex: \\x22.\n      ampersand: '&', // Hex: \\x26.\n      quote: '\\'', // Hex: \\x27.\n    };\n  }\n\n  /**\n  * Safe XML special characters. This characters are used instead the standard\n  * the standard to parse the  MathML if safeXML save mode is enable. Each XML\n  * special character have a UTF-8 representation.\n  * @type {Object}\n  */\n  static get safeXmlCharacters() {\n    return {\n      id: 'safeXmlCharacters',\n      tagOpener: '«', // Hex: \\xAB.\n      tagCloser: '»', // Hex: \\xBB.\n      doubleQuote: '¨', // Hex: \\xA8.\n      ampersand: '§', // Hex: \\xA7.\n      quote: '`', // Hex: \\x60.\n      realDoubleQuote: '¨',\n    };\n  }\n}\n","import Constants from './constants';\nimport Util from './util';\n\n/**\n * @classdesc\n * This class represents a class to manage MathML objects.\n */\nexport default class MathML {\n  /**\n   * Checks if the mathml at position i is inside an HTML attribute or not.\n   * @param {string} content - a string containing MathML code.\n   * @param {number} i -  search index.\n   * @return {boolean} true if is inside an HTML attribute. false otherwise.\n   */\n  static isMathmlInAttribute(content, i) {\n    // Regex =\n    // '^[\\'\"][\\\\s]*=[\\\\s]*[\\\\w-]+([\\\\s]*(\"[^\"]*\"|\\'[^\\']*\\')[\\\\s]*\n    // =[\\\\s]*[\\\\w-]+[\\\\s]*)*[\\\\s]+gmi<';\n    const mathAtt = '[\\'\"][\\\\s]*=[\\\\s]*[\\\\w-]+'; // \"=att OR '=att\n    const attContent = '\"[^\"]*\"|\\'[^\\']*\\''; // \"blabla\" OR 'blabla'\n    const att = `[\\\\s]*(${attContent})[\\\\s]*=[\\\\s]*[\\\\w-]+[\\\\s]*`; // \"blabla\"=att OR 'blabla'=att\n    const atts = `('${att}')*`; // \"blabla\"=att1 \"blabla\"=att2\n    const regex = `^${mathAtt}${atts}[\\\\s]+gmi<`; // \"=att \"blabla\"=att1 \"blabla\"=att2 gmi< .\n    const expression = new RegExp(regex);\n\n    const actualContent = content.substring(0, i);\n    const reversed = actualContent.split('').reverse().join('');\n    const exists = expression.test(reversed);\n\n    return exists;\n  }\n\n  /**\n   * Decodes an encoded MathML with standard XML tags.\n   * We use these entities because IE doesn't support html entities\n   * on its attributes sometimes. Yes, sometimes.\n   * @param {string} input - string to be decoded.\n   * @return {string} decoded string.\n   */\n  static safeXmlDecode(input) {\n    let { tagOpener } = Constants.safeXmlCharactersEntities;\n    let { tagCloser } = Constants.safeXmlCharactersEntities;\n    let { doubleQuote } = Constants.safeXmlCharactersEntities;\n    let { realDoubleQuote } = Constants.safeXmlCharactersEntities;\n    // Decoding entities.\n    input = input.split(tagOpener).join(Constants.safeXmlCharacters.tagOpener);\n    input = input.split(tagCloser).join(Constants.safeXmlCharacters.tagCloser);\n    input = input.split(doubleQuote).join(Constants.safeXmlCharacters.doubleQuote);\n    // Added to fix problem due to import from 1.9.x.\n    input = input.split(realDoubleQuote).join(Constants.safeXmlCharacters.realDoubleQuote);\n\n    // Blackboard.\n    const { ltElement } = Constants.safeBadBlackboardCharacters;\n    const { gtElement } = Constants.safeBadBlackboardCharacters;\n    const { ampElement } = Constants.safeBadBlackboardCharacters;\n    if ('_wrs_blackboard' in window && window._wrs_blackboard) {\n      input = input.split(ltElement).join(Constants.safeGoodBlackboardCharacters.ltElement);\n      input = input.split(gtElement).join(Constants.safeGoodBlackboardCharacters.gtElement);\n      input = input.split(ampElement).join(Constants.safeGoodBlackboardCharacters.ampElement);\n    }\n\n    ({ tagOpener } = Constants.safeXmlCharacters);\n    ({ tagCloser } = Constants.safeXmlCharacters);\n    ({ doubleQuote } = Constants.safeXmlCharacters);\n    ({ realDoubleQuote } = Constants.safeXmlCharacters);\n    const { ampersand } = Constants.safeXmlCharacters;\n    const { quote } = Constants.safeXmlCharacters;\n\n    // Decoding characters.\n    input = input.split(tagOpener).join(Constants.xmlCharacters.tagOpener);\n    input = input.split(tagCloser).join(Constants.xmlCharacters.tagCloser);\n    input = input.split(doubleQuote).join(Constants.xmlCharacters.doubleQuote);\n    input = input.split(ampersand).join(Constants.xmlCharacters.ampersand);\n    input = input.split(quote).join(Constants.xmlCharacters.quote);\n\n    // We are replacing $ by & when its part of an entity for retrocompatibility.\n    // Now, the standard is replace § by &.\n    let returnValue = '';\n    let currentEntity = null;\n\n    for (let i = 0; i < input.length; i += 1) {\n      const character = input.charAt(i);\n      if (currentEntity == null) {\n        if (character === '$') {\n          currentEntity = '';\n        } else {\n          returnValue += character;\n        }\n      } else if (character === ';') {\n        returnValue += `&${currentEntity}`;\n        currentEntity = null;\n      } else if (character.match(/([a-zA-Z0-9#._-] | '-')/)) { // Character is part of an entity.\n        currentEntity += character;\n      } else {\n        returnValue += `$${currentEntity}`; // Is not an entity.\n        currentEntity = null;\n        i -= 1; // Parse again the current character.\n      }\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Encodes a MathML with standard XML tags to a MMathML encoded with safe XML tags.\n   * We use these entities because IE doesn't support html entities on its attributes sometimes.\n   * @param {string} input - input string to be encoded\n   * @returns {string} encoded string.\n   */\n  static safeXmlEncode(input) {\n    const { tagOpener } = Constants.xmlCharacters;\n    const { tagCloser } = Constants.xmlCharacters;\n    const { doubleQuote } = Constants.xmlCharacters;\n    const { ampersand } = Constants.xmlCharacters;\n    const { quote } = Constants.xmlCharacters;\n\n    input = input.split(tagOpener).join(Constants.safeXmlCharacters.tagOpener);\n    input = input.split(tagCloser).join(Constants.safeXmlCharacters.tagCloser);\n    input = input.split(doubleQuote).join(Constants.safeXmlCharacters.doubleQuote);\n    input = input.split(ampersand).join(Constants.safeXmlCharacters.ampersand);\n    input = input.split(quote).join(Constants.safeXmlCharacters.quote);\n\n    return input;\n  }\n\n  /**\n   * Converts special symbols (> 128) to entities and replaces all textual\n   * entities by its number entities.\n   * @param {string} mathml - MathML string containing - or not - special symbols\n   * @returns {string} MathML with all textual entities replaced.\n   */\n  static mathMLEntities(mathml) {\n    let toReturn = '';\n\n    for (let i = 0; i < mathml.length; i += 1) {\n      const character = mathml.charAt(i);\n\n      // Parsing > 128 characters.\n      if (mathml.codePointAt(i) > 128) {\n        toReturn += `&#${mathml.codePointAt(i)};`;\n        // For UTF-32 characters we need to move the index one position.\n        if (mathml.codePointAt(i) > 0xffff) {\n          i += 1;\n        }\n      } else if (character === '&') {\n        const end = mathml.indexOf(';', i + 1);\n        if (end >= 0) {\n          const container = document.createElement('span');\n          container.innerHTML = mathml.substring(i, end + 1);\n          toReturn += `&#${Util.fixedCharCodeAt((container.textContent || container.innerText), 0)};`;\n          i = end;\n        } else {\n          toReturn += character;\n        }\n      } else {\n        toReturn += character;\n      }\n    }\n\n    return toReturn;\n  }\n\n  /**\n   * Add a custom editor name with the prefix wrs_ to a MathML class attribute.\n   * @param {string} mathml - a MathML string created with a custom editor, like chemistry.\n   * @param {string} customEditor - custom editor name.\n   * @returns {string} MathML string with his class containing the editor toolbar string.\n   */\n  static addCustomEditorClassAttribute(mathml, customEditor) {\n    let toReturn = '';\n\n    const start = mathml.indexOf('<math');\n    if (start === 0) {\n      const end = mathml.indexOf('>');\n      if (mathml.indexOf('class') === -1) {\n        // Adding custom editor type.\n        toReturn = `${mathml.substr(start, end)} class=\"wrs_${customEditor}\">`;\n        toReturn += mathml.substr(end + 1, mathml.length);\n        return toReturn;\n      }\n    }\n    return mathml;\n  }\n\n  /**\n   * Remove a custom editor name from the MathML class attribute.\n   * @param {string} mathml - a MathML string.\n   * @param {string} customEditor - custom editor name.\n   * @returns {string} The input MathML without customEditor name in his class.\n   */\n  static removeCustomEditorClassAttribute(mathml, customEditor) {\n    // Discard MathML without the specified class.\n    if (mathml.indexOf('class') === -1 || mathml.indexOf(`wrs_${customEditor}`) === -1) {\n      return mathml;\n    }\n\n    // Trivial case: class attribute value equal to editor name. Then\n    // class attribute is removed.\n    if (mathml.indexOf(`class=\"wrs_${customEditor}\"`) !== -1) {\n      return mathml.replace(`class=\"wrs_${customEditor}\"`, '');\n    }\n\n    // Non Trivial case: class attribute contains editor name.\n    return mathml.replace(`wrs_${customEditor}`, '');\n  }\n\n  /**\n   * Adds annotation tag in MathML element.\n   * @param {String} mathml - valid MathML.\n   * @param {String} content - value to put inside annotation tag.\n   * @param {String} annotationEncoding - annotation encoding.\n   * @returns {String} - 'mathml' with an annotation that contains\n   * 'content' and encoding 'encoding'.\n   */\n  static addAnnotation(mathml, content, annotationEncoding) {\n    // If contains annotation, also contains semantics tag.\n    const containsAnnotation = mathml.indexOf('<annotation');\n\n    let mathmlWithAnnotation = '';\n    if (containsAnnotation !== -1) {\n      const closeSemanticsIndex = mathml.indexOf('</semantics>');\n      mathmlWithAnnotation = `${mathml.substring(0, closeSemanticsIndex)}<annotation encoding=\"${annotationEncoding}\">${content}</annotation>${mathml.substring(closeSemanticsIndex)}`;\n    } else if (MathML.isEmpty(mathml)) {\n      const endIndexInline = mathml.indexOf('/>');\n      const endIndexNonInline = mathml.indexOf('>');\n      const endIndex = endIndexNonInline === endIndexInline ? endIndexInline : endIndexNonInline;\n      mathmlWithAnnotation = `${mathml.substring(0, endIndex)}><semantics><annotation encoding=\"${annotationEncoding}\">${content}</annotation></semantics></math>`;\n    } else {\n      const beginMathMLContent = mathml.indexOf('>') + 1;\n      const endMathmlContent = mathml.lastIndexOf('</math>');\n      const mathmlContent = mathml.substring(beginMathMLContent, endMathmlContent);\n      mathmlWithAnnotation = `${mathml.substring(0, beginMathMLContent)}<semantics>${mathmlContent}<annotation encoding=\"${annotationEncoding}\">${content}</annotation></semantics></math>`;\n    }\n\n    return mathmlWithAnnotation;\n  }\n\n  /**\n   * Removes specific annotation tag in MathML element.\n   * In case of remove the unique annotation, also is removed semantics tag.\n   * @param {String} mathml - valid MathML.\n   * @param {String} annotationEncoding - annotation encoding to remove.\n   * @returns {String} - 'mathml' without the annotation encoding specified.\n   */\n  static removeAnnotation(mathml, annotationEncoding) {\n    let mathmlWithoutAnnotation = mathml;\n    const openAnnotationTag = `<annotation encoding=\"${annotationEncoding}\">`;\n    const closeAnnotationTag = '</annotation>';\n    const startAnnotationIndex = mathml.indexOf(openAnnotationTag);\n    if (startAnnotationIndex !== -1) {\n      let differentAnnotationFound = false;\n      let differentAnnotationIndex = mathml.indexOf('<annotation');\n      while (differentAnnotationIndex !== -1) {\n        if (differentAnnotationIndex !== startAnnotationIndex) {\n          differentAnnotationFound = true;\n        }\n        differentAnnotationIndex = mathml.indexOf('<annotation', differentAnnotationIndex + 1);\n      }\n\n      if (differentAnnotationFound) {\n        const closeIndex = mathml.indexOf(closeAnnotationTag, startAnnotationIndex);\n        const endAnnotationIndex = closeIndex + closeAnnotationTag.length;\n        const startIndex = mathml.substring(0, startAnnotationIndex);\n        mathmlWithoutAnnotation = startIndex + mathml.substring(endAnnotationIndex);\n      } else {\n        mathmlWithoutAnnotation = MathML.removeSemantics(mathml);\n      }\n    }\n\n    return mathmlWithoutAnnotation;\n  }\n\n  /**\n   * Removes semantics tag to mathml.\n   * @param {string} mathml - MathML string.\n   * @returns {string} - 'mathml' without semantics tag.\n   */\n  static removeSemantics(mathml) {\n    const mathTagEnd = '</math>';\n    const openSemantics = '<semantics>';\n    const openAnnotation = '<annotation';\n\n    let mathmlWithoutSemantics = mathml;\n    const startSemantics = mathml.indexOf(openSemantics);\n    if (startSemantics !== -1) {\n      const startAnnotation = mathml.indexOf(openAnnotation, startSemantics + openSemantics.length);\n      if (startAnnotation !== -1) {\n        mathmlWithoutSemantics = mathml.substring(0, startSemantics)\n        + mathml.substring(startSemantics + openSemantics.length, startAnnotation) + mathTagEnd;\n      }\n    }\n\n    return mathmlWithoutSemantics;\n  }\n\n  /**\n   * Transforms all xml mathml ocurrences that contain semantics to the same\n   * xml mathml ocurrences without semantics.\n   * @param {string} text - string that can contain xml mathml ocurrences.\n   * @param {Constants} [characters] - Constant object containing xmlCharacters\n   * or safeXmlCharacters relation.\n   * xmlCharacters by default.\n   * @returns {string} - 'text' with all xml mathml ocurrences without annotation tag.\n   */\n  static removeSemanticsOcurrences(text, characters = Constants.xmlCharacters) {\n    const mathTagStart = `${characters.tagOpener}math`;\n    const mathTagEnd = `${characters.tagOpener}/math${characters.tagCloser}`;\n    const mathTagEndline = `/${characters.tagCloser}`;\n    const { tagCloser } = characters;\n    const semanticsTagStart = `${characters.tagOpener}semantics${characters.tagCloser}`;\n    const annotationTagStart = `${characters.tagOpener}annotation encoding=`;\n\n    let output = '';\n    let start = text.indexOf(mathTagStart);\n    let end = 0;\n    while (start !== -1) {\n      output += text.substring(end, start);\n\n      // MathML can be written as '<math></math>' or '<math />'.\n      const mathTagEndIndex = text.indexOf(mathTagEnd, start);\n      const mathTagEndlineIndex = text.indexOf(mathTagEndline, start);\n      const firstTagCloser = text.indexOf(tagCloser, start);\n      if (mathTagEndIndex !== -1) {\n        end = mathTagEndIndex;\n      } else if (mathTagEndlineIndex === firstTagCloser - 1) {\n        end = mathTagEndlineIndex;\n      }\n\n      const semanticsIndex = text.indexOf(semanticsTagStart, start);\n      if (semanticsIndex !== -1) {\n        const mmlTagStart = text.substring(start, semanticsIndex);\n        const annotationIndex = text.indexOf(annotationTagStart, start);\n        if (annotationIndex !== -1) {\n          const startIndex = semanticsIndex + semanticsTagStart.length;\n          const mmlContent = text.substring(startIndex, annotationIndex);\n          output += mmlTagStart + mmlContent + mathTagEnd;\n          start = text.indexOf(mathTagStart, start + mathTagStart.length);\n          end += mathTagEnd.length;\n        } else {\n          end = start;\n          start = text.indexOf(mathTagStart, start + mathTagStart.length);\n        }\n      } else {\n        end = start;\n        start = text.indexOf(mathTagStart, start + mathTagStart.length);\n      }\n    }\n\n    output += text.substring(end, text.length);\n    return output;\n  }\n\n  /**\n   * Returns true if a MathML contains a certain class.\n   * @param {string} mathML - input MathML.\n   * @param {string} className - className.\n   * @returns {boolean} true if the input MathML contains the input class.\n   * false otherwise.\n   * @static\n   */\n  static containClass(mathML, className) {\n    const classIndex = mathML.indexOf('class');\n    if (classIndex === -1) {\n      return false;\n    }\n    const classTagEndIndex = mathML.indexOf('>', classIndex);\n    const classTag = mathML.substring(classIndex, classTagEndIndex);\n    if (classTag.indexOf(className) !== -1) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if mathml is empty. Otherwise, false.\n   * @param {string} mathml - valid MathML with standard XML tags.\n   * @returns {boolean} - true if mathml is empty. Otherwise, false.\n   */\n  static isEmpty(mathml) {\n    // MathML can have the shape <math></math> or '<math />'.\n    const closeTag = '>';\n    const closeTagInline = '/>';\n    const firstCloseTagIndex = mathml.indexOf(closeTag);\n    const firstCloseTagInlineIndex = mathml.indexOf(closeTagInline);\n    let empty = false;\n    // MathML is always empty in the second shape.\n    if (firstCloseTagInlineIndex !== -1) {\n      if (firstCloseTagInlineIndex === firstCloseTagIndex - 1) {\n        empty = true;\n      }\n    }\n\n    // MathML is always empty in the first shape when there aren't elements\n    // between math tags.\n    if (!empty) {\n      const mathTagEndRegex = new RegExp('</(.+:)?math>');\n      const mathTagEndArray = mathTagEndRegex.exec(mathml);\n      if (mathTagEndArray) {\n        empty = firstCloseTagIndex + 1 === mathTagEndArray.index;\n      }\n    }\n\n    return empty;\n  }\n\n  /**\n   * Encodes html entities inside properties.\n   * @param {String} mathml - valid MathML with standard XML tags.\n   * @returns {String} - 'mathml' with property entities encoded.\n   */\n  static encodeProperties(mathml) {\n    // Search all the properties.\n    const regex = /\\w+=\".*?\"/g;\n    // Encode html entities.\n    const replacer = (match) => {\n      // It has the shape:\n      // <math propertyOne=\"somethingOne\"><children propertyTwo=\"somethingTwo\"></children></math>.\n      const quoteIndex = match.indexOf('\"');\n      const propertyValue = match.substring(quoteIndex + 1, match.length - 1);\n      const propertyValueEncoded = Util.htmlEntities(propertyValue);\n      const matchEncoded = `${match.substring(0, quoteIndex + 1)}${propertyValueEncoded}\"`;\n      return matchEncoded;\n    };\n\n    const mathmlEncoded = mathml.replace(regex, replacer);\n    return mathmlEncoded;\n  }\n}\n","/**\n * This class represents the configuration class.\n * Usually used to retrieve configuration properties generated in the backend into the frontend.\n */\nexport default class Configuration {\n  /**\n   * Adds a properties object to {@link Configuration.properties}.\n   * @param {Object} properties - properties to append to current properties.\n   */\n  static addConfiguration(properties) {\n    Object.assign(Configuration.properties, properties);\n  }\n\n  /**\n  * Static property.\n  * The configuration properties object.\n  * @private\n  * @type {Object}\n  */\n  static get properties() {\n    return Configuration._properties;\n  }\n\n  /**\n   * Static property setter.\n   * Set configuration properties.\n   * @param {Object} value - The property value.\n   * @ignore\n   */\n  static set properties(value) {\n    Configuration._properties = value;\n  }\n\n  /**\n   * Returns the value of a property key.\n   * @param {String} key - Property key\n   * @returns {String} Property value\n   */\n  static get(key) {\n    if (!Object.prototype.hasOwnProperty.call(Configuration.properties, key)) {\n      // Backwards compatibility.\n      if (Object.prototype.hasOwnProperty.call(Configuration.properties, '_wrs_conf_')) {\n        return Configuration.properties[`_wrs_conf_${key}`];\n      }\n      return false;\n    }\n    return Configuration.properties[key];\n  }\n\n  /**\n   * Adds a new property to Configuration class.\n   * @param {String} key - Property key.\n   * @param {Object} value - Property value.\n   */\n  static set(key, value) {\n    Configuration.properties[key] = value;\n  }\n\n  /**\n   * Updates a property object value with new values.\n   * @param {String} key - The property key to be updated.\n   * @param {Object} propertyValue - Object containing the new values.\n   */\n  static update(key, propertyValue) {\n    if (!Configuration.get(key)) {\n      Configuration.set(key, propertyValue);\n    } else {\n      const updateProperty = Object.assign(Configuration.get(key), propertyValue);\n      Configuration.set(key, updateProperty);\n    }\n  }\n}\n\n/**\n * Static properties object. Stores all configuration properties.\n * Needed to attribute accessors.\n * @private\n * @type {Object}\n */\nConfiguration._properties = {\n\tsaveMode: \"base64\",\n\tbase64savemode: \"default\"\n};\n","export default class TextCache {\n  /**\n   * @classdesc\n   * This class represent a client-side text cache class. Contains pairs of\n   * strings (key/value) which can be retrieved in any moment. Usually used\n   * to store AJAX responses for text services like mathml2latex\n   * (c.f {@link Latex} class) or mathml2accessible (c.f {@link Accessibility} class).\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Cache array property storing the cache entries.\n     * @type {Array.<String>}\n     */\n    this.cache = [];\n  }\n\n  /**\n   * This method populates a key/value pair into the {@link this.cache} property.\n   * @param {String} key - Cache key, usually the service string parameter.\n   * @param {String} value - Cache value, usually the service response.\n   */\n  populate(key, value) {\n    this.cache[key] = value;\n  }\n\n  /**\n   * Returns the cache value associated to certain cache key.\n   * @param {String} key - Cache key, usually the service string parameter.\n   * @return {String} value - Cache value, if exists. False otherwise.\n   */\n  get(key) {\n    if (Object.prototype.hasOwnProperty.call(this.cache, key)) {\n      return this.cache[key];\n    }\n    return false;\n  }\n}\n","/**\n * This object represents a custom listener.\n * @typedef {Object} Listener\n * @property {String} Listener.eventName - The listener name.\n * @property {Function} Listener.callback - The listener callback function.\n */\n\nexport default class Listeners {\n  /**\n   * @classdesc\n   * This class represents a custom listeners manager.\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Array containing all custom listeners.\n     * @type {Object[]}\n     */\n    this.listeners = [];\n  }\n\n\n  /**\n   * Add a listener to Listener class.\n   * @param {Object} listener - A listener object.\n   */\n  add(listener) {\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Fires MathType event listeners\n   * @param {String} eventName - event name\n   * @param {Event} event - event object.\n   * @return {boolean} false if event has been prevented. true otherwise.\n   */\n  fire(eventName, event) {\n    for (let i = 0; i < this.listeners.length && !event.cancelled; i += 1) {\n      if (this.listeners[i].eventName === eventName) {\n        // Calling listener.\n        this.listeners[i].callback(event);\n      }\n    }\n    return event.defaultPrevented;\n  }\n\n  /**\n   * Creates a new listener object.\n   * @param {string} eventName - Event name.\n   * @param {Object} callback - Callback function.\n   * @returns {object} the listener object.\n   */\n  static newListener(eventName, callback) {\n    const listener = {};\n    listener.eventName = eventName;\n    listener.callback = callback;\n    return listener;\n  }\n}\n","import Util from './util';\nimport Listeners from './listeners';\n\n/**\n * @typedef {Object} ServiceProviderProperties\n * @property {String} URI - Service URI.\n * @property {String} server - Service server language.\n */\n\n/**\n * @classdesc\n * Class representing a serviceProvider. A serviceProvider is a class containing\n * an arbitrary number of services with the correspondent path.\n */\nexport default class ServiceProvider {\n  /**\n   * Returns Service Provider listeners.\n   * @type {Listeners}\n   */\n  static get listeners() {\n    return ServiceProvider._listeners;\n  }\n\n  /**\n   * Adds a {@link Listener} instance to {@link ServiceProvider} class.\n   * @param {Listener} listener - Instance of {@link Listener}.\n   */\n  static addListener(listener) {\n    ServiceProvider.listeners.add(listener);\n  }\n\n  /**\n   * Fires events in Service Provider.\n   * @param {String} eventName - Event name.\n   * @param {Event} event - Event object.\n   */\n  static fireEvent(eventName, event) {\n    ServiceProvider.listeners.fire(eventName, event);\n  }\n\n  /**\n   * Service parameters.\n   * @type {ServiceProviderProperties}\n   *\n   */\n  static get parameters() {\n    return ServiceProvider._parameters;\n  }\n\n  /**\n   * Service parameters.\n   * @private\n   * @type {ServiceProviderProperties}\n   */\n  static set parameters(parameters) {\n    ServiceProvider._parameters = parameters;\n  }\n\n  /**\n   * Static property.\n   * Return service provider paths.\n   * @private\n   * @type {String}\n   */\n  static get servicePaths() {\n    return ServiceProvider._servicePaths;\n  }\n\n  /**\n   * Static property setter.\n   * Set service paths.\n   * @param {String} value - The property value.\n   * @ignore\n   */\n  static set servicePaths(value) {\n    ServiceProvider._servicePaths = value;\n  }\n\n  /**\n   * Adds a new service to the ServiceProvider.\n   * @param {String} service - Service name.\n   * @param {String} path - Service path.\n   * @static\n   */\n  static setServicePath(service, path) {\n    ServiceProvider.servicePaths[service] = path;\n  }\n\n  /**\n   * Returns the service path for a certain service.\n   * @param {String} serviceName - Service name.\n   * @returns {String} The service path.\n   * @static\n   */\n  static getServicePath(serviceName) {\n    return ServiceProvider.servicePaths[serviceName];\n  }\n\n  /**\n   * Static property.\n   * Service provider integration path.\n   * @type {String}\n   */\n  static get integrationPath() {\n    return ServiceProvider._integrationPath;\n  }\n\n  /**\n   * Static property setter.\n   * Set service provider integration path.\n   * @param {String} value - The property value.\n   * @ignore\n   */\n  static set integrationPath(value) {\n    ServiceProvider._integrationPath = value;\n  }\n\n  /**\n   * Returns the server URL in the form protocol://serverName:serverPort.\n   * @return {String} The client side server path.\n   */\n  static getServerURL() {\n    const url = window.location.href;\n    const arr = url.split('/');\n    const result = `${arr[0]}//${arr[2]}`;\n    return result;\n  }\n\n  /**\n   * Inits {@link this} class. Uses {@link this.integrationPath} as\n   * base path to generate all backend services paths.\n   * @param {Object} parameters - Function parameters.\n   * @param {String} parameters.integrationPath - Service path.\n   */\n  static init(parameters) {\n    ServiceProvider.parameters = parameters;\n    // Services path (tech dependant).\n    let configurationURI = ServiceProvider.createServiceURI('configurationjs');\n    let createImageURI = ServiceProvider.createServiceURI('createimage');\n    let showImageURI = ServiceProvider.createServiceURI('showimage');\n    let getMathMLURI = ServiceProvider.createServiceURI('getmathml');\n    let serviceURI = ServiceProvider.createServiceURI('service');\n\n    // Some backend integrations (like Java o Ruby) have an absolute backend path,\n    // for example: /app/service. For them we calculate the absolute URL path, i.e\n    // protocol://domain:port/app/service\n    if (ServiceProvider.parameters.URI.indexOf('/') === 0) {\n      const serverPath = ServiceProvider.getServerURL();\n      configurationURI = serverPath + configurationURI;\n      showImageURI = serverPath + showImageURI;\n      createImageURI = serverPath + createImageURI;\n      getMathMLURI = serverPath + getMathMLURI;\n      serviceURI = serverPath + serviceURI;\n    }\n\n    ServiceProvider.setServicePath('configurationjs', configurationURI);\n    ServiceProvider.setServicePath('showimage', showImageURI);\n    ServiceProvider.setServicePath('createimage', createImageURI);\n    ServiceProvider.setServicePath('service', serviceURI);\n    ServiceProvider.setServicePath('getmathml', getMathMLURI);\n    ServiceProvider.setServicePath('configurationjs', configurationURI);\n\n    ServiceProvider.listeners.fire('onInit', {});\n  }\n\n  /**\n   * Gets the content from an URL.\n   * @param {String} url - Target URL.\n   * @param {Object} [postVariables] - Object containing post variables.\n   * null if a GET query should be done.\n   * @returns {String} Content of the target URL.\n   * @private\n   * @static\n   */\n  static getUrl(url, postVariables) {\n    const currentPath = window.location.toString().substr(0, window.location.toString().lastIndexOf('/') + 1);\n    const httpRequest = Util.createHttpRequest();\n\n    if (httpRequest) {\n      if (typeof postVariables === 'undefined' || typeof postVariables === 'undefined') {\n        httpRequest.open('GET', url, false);\n      } else if (url.substr(0, 1) === '/' || url.substr(0, 7) === 'http://' || url.substr(0, 8) === 'https://') {\n        httpRequest.open('POST', url, false);\n      } else {\n        httpRequest.open('POST', currentPath + url, false);\n      }\n\n      if (typeof postVariables !== 'undefined' && postVariables) {\n        httpRequest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        httpRequest.send(Util.httpBuildQuery(postVariables));\n      } else {\n        httpRequest.send(null);\n      }\n\n      return httpRequest.responseText;\n    }\n    return '';\n  }\n\n  /**\n   * Returns the response text of a certain service.\n   * @param {String} service - Service name.\n   * @param {String} postVariables - Post variables.\n   * @param {Boolean} get - True if the request is GET instead of POST. false otherwise.\n   * @returns {String} Service response text.\n   */\n  static getService(service, postVariables, get) {\n    let response;\n    if (get === true) {\n      const serviceUrl = `${ServiceProvider.getServicePath(service)}?${postVariables}`;\n      response = ServiceProvider.getUrl(serviceUrl);\n    } else {\n      const serviceUrl = ServiceProvider.getServicePath(service);\n      response = ServiceProvider.getUrl(serviceUrl, postVariables);\n    }\n    return response;\n  }\n\n\n  /**\n   * Returns the server language of a certain service. The possible values\n   * are: php, aspx, java and ruby.\n   * This method has backward compatibility purposes.\n   * @param {String} service - The configuration service.\n   * @returns {String} - The server technology associated with the configuration service.\n   */\n  static getServerLanguageFromService(service) {\n    if (service.indexOf('.php') !== -1) {\n      return 'php';\n    }\n    if (service.indexOf('.aspx') !== -1) {\n      return 'aspx';\n    }\n    if (service.indexOf('wirispluginengine') !== -1) {\n      return 'ruby';\n    }\n    return 'java';\n  }\n\n  /**\n   * Returns the URI associated with a certain service.\n   * @param {String} service - The service name.\n   * @return {String} The service path.\n   */\n  static createServiceURI(service) {\n    const extension = ServiceProvider.serverExtension();\n    return Util.concatenateUrl(ServiceProvider.parameters.URI, service) + extension;\n  }\n\n  static serverExtension() {\n    if (ServiceProvider.parameters.server.indexOf('php') !== -1) {\n      return '.php';\n    }\n    if (ServiceProvider.parameters.server.indexOf('aspx') !== -1) {\n      return '.aspx';\n    }\n    return '';\n  }\n}\n\n/**\n * @property {String} service - The service name.\n * @property {String} path - The service path.\n * @static\n */\nServiceProvider._servicePaths = {};\n\n/**\n * The integration path. Contains the path of the configuration service.\n * Used to define the path for all services.\n * @type {String}\n * @private\n */\nServiceProvider._integrationPath = '';\n\n/**\n * ServiceProvider static listeners.\n * @type {Listeners}\n * @private\n */\nServiceProvider._listeners = new Listeners();\n\n\n/**\n * Service provider parameters.\n * @type {ServiceProviderParameters}\n */\nServiceProvider._parameters = {};\n","import TextCache from './textcache';\nimport MathML from './mathml';\nimport ServiceProvider from './serviceprovider';\nimport Constants from './constants';\nimport Util from './util';\n\n/**\n * @classdesc\n * This class represents a LaTeX parser. Manages the services which allows to convert\n * LaTeX into MathML and MathML into LaTeX.\n */\nexport default class Latex {\n  /**\n   * Static property.\n   * Return latex cache.\n   * @private\n   * @type {Cache}\n   */\n  static get cache() {\n    return Latex._cache;\n  }\n\n  /**\n   * Static property setter.\n   * Set latex cache.\n   * @param {Cache} value - The property value.\n   * @ignore\n  */\n  static set cache(value) {\n    Latex._cache = value;\n  }\n\n  /**\n   * Converts MathML to LaTeX by calling mathml2latex service. For text services\n   * we call a text service with the param mathml2latex.\n   * @param {String} mathml - MathML String.\n   * @return {String} LaTeX string generated by the MathML argument.\n   */\n  static getLatexFromMathML(mathml) {\n    const mathmlWithoutSemantics = MathML.removeSemantics(mathml);\n    /**\n     * @type {TextCache}\n     */\n    const { cache } = Latex;\n\n    const data = {\n      service: 'mathml2latex',\n      mml: mathmlWithoutSemantics,\n    };\n\n    const jsonResponse = JSON.parse(ServiceProvider.getService('service', data));\n\n    // TODO: Error handling.\n    let latex = '';\n\n    if (jsonResponse.status === 'ok') {\n      latex = jsonResponse.result.text;\n      const latexHtmlEntitiesEncoded = Util.htmlEntities(latex);\n      // Inserting LaTeX semantics.\n      const mathmlWithSemantics = MathML.addAnnotation(mathml, latexHtmlEntitiesEncoded, 'LaTeX');\n      cache.populate(latex, mathmlWithSemantics);\n    }\n\n    return latex;\n  }\n\n  /**\n   * Converts LaTeX to MathML by calling latex2mathml service. For text services\n   * we call a text service with the param latex2mathml.\n   * @param {String} latex - String containing a LaTeX formula.\n   * @param {Boolean} includeLatexOnSemantics\n   * - If true LaTeX would me included into MathML semantics.\n   * @return {String} MathML string generated by the LaTeX argument.\n   */\n  static getMathMLFromLatex(latex, includeLatexOnSemantics) {\n    /**\n     * @type {TextCache}\n     */\n    const latexCache = Latex.cache;\n\n    if (Latex.cache.get(latex)) {\n      return Latex.cache.get(latex);\n    }\n    const data = {\n      service: 'latex2mathml',\n      latex,\n    };\n\n    if (includeLatexOnSemantics) {\n      data.saveLatex = '';\n    }\n\n    const jsonResponse = JSON.parse(ServiceProvider.getService('service', data));\n\n    let output;\n    if (jsonResponse.status === 'ok') {\n      let mathml = jsonResponse.result.text;\n      mathml = mathml.split('\\r').join('').split('\\n').join(' ');\n\n      // Populate LatexCache.\n      if (mathml.indexOf('semantics') === -1 && mathml.indexOf('annotation') === -1) {\n        mathml = MathML.addAnnotation(mathml, latex, 'LaTeX');\n        output = mathml;\n      } else {\n        output = mathml;\n      }\n      if (!latexCache.get(latex)) {\n        latexCache.populate(latex, mathml);\n      }\n    } else {\n      output = `$$${latex}$$`;\n    }\n    return output;\n  }\n\n  /**\n   * Converts all occurrences of MathML code to LaTeX.\n   * The MathML code should containing <annotation encoding=\"LaTeX\"/> to be converted.\n   * @param {String} content - A string containing MathML valid code.\n   * @param {Object} characters - An object containing special characters.\n   * @return {String} A string containing all MathML annotated occurrences\n   * replaced by the corresponding LaTeX code.\n   */\n  static parseMathmlToLatex(content, characters) {\n    let output = '';\n    const mathTagBegin = `${characters.tagOpener}math`;\n    const mathTagEnd = `${characters.tagOpener}/math${characters.tagCloser}`;\n    const openTarget = `${characters.tagOpener}annotation encoding=${characters.doubleQuote}LaTeX${characters.doubleQuote}${characters.tagCloser}`;\n    const closeTarget = `${characters.tagOpener}/annotation${characters.tagCloser}`;\n    let start = content.indexOf(mathTagBegin);\n    let end = 0;\n    let mathml;\n    let startAnnotation;\n    let closeAnnotation;\n\n    while (start !== -1) {\n      output += content.substring(end, start);\n      end = content.indexOf(mathTagEnd, start);\n\n      if (end === -1) {\n        end = content.length - 1;\n      } else {\n        end += mathTagEnd.length;\n      }\n\n      mathml = content.substring(start, end);\n\n      startAnnotation = mathml.indexOf(openTarget);\n      if (startAnnotation !== -1) {\n        startAnnotation += openTarget.length;\n        closeAnnotation = mathml.indexOf(closeTarget);\n        let latex = mathml.substring(startAnnotation, closeAnnotation);\n        if (characters === Constants.safeXmlCharacters) {\n          latex = MathML.safeXmlDecode(latex);\n        }\n        output += `$$${latex}$$`;\n        // Populate latex into cache.\n\n        Latex.cache.populate(latex, mathml);\n      } else {\n        output += mathml;\n      }\n      start = content.indexOf(mathTagBegin, end);\n    }\n\n    output += content.substring(end, content.length);\n    return output;\n  }\n\n  /**\n   * Extracts the latex of a determined position in a text.\n   * @param {Node} textNode - textNode to extract the LaTeX\n   * @param {Number} caretPosition - Starting position to find LaTeX.\n   * @param {Object} latexTags - Optional parameter representing tags between latex is inserted.\n   * It has the 'open' attribute for the open tag and the 'close' attribute for the close tag.\n   * \"$$\" by default.\n   * @return {Object} An object with 3 keys: 'latex', 'start' and 'end'. Null if latex is not found.\n   * @static\n   */\n  static getLatexFromTextNode(textNode, caretPosition, latexTags) {\n    // TODO: Set LaTeX Tags as Core variable. Fix the call to this function (third argument).\n    // Tags used for LaTeX formulas.\n    const defaultLatexTags = {\n      open: '$$',\n      close: '$$',\n    };\n    // latexTags is an optional parameter. If is not set, use default latexTags.\n    if (typeof latexTags === 'undefined' || latexTags == null) {\n      latexTags = defaultLatexTags;\n    }\n    // Looking for the first textNode.\n    let startNode = textNode;\n\n    while (startNode.previousSibling && startNode.previousSibling.nodeType === 3) { // TEXT_NODE.\n      startNode = startNode.previousSibling;\n    }\n\n    /**\n     * Returns the next latex position and node from a specific node and position.\n     * @param {Node} currentNode - Node where searching latex.\n     * @param {Number} currentPosition - Current position inside the currentNode.\n     * @param {Object} latexTagsToUse - Tags used at latex beginning and latex final.\n     * \"$$\" by default.\n     * @param {Boolean} tag - Tag containing the current search.\n     * @returns {Object} Object containing the current node and the position.\n     */\n    function getNextLatexPosition(currentNode, currentPosition, tag) {\n      let position = currentNode.nodeValue.indexOf(tag, currentPosition);\n\n      while (position === -1) {\n        currentNode = currentNode.nextSibling;\n\n        if (!currentNode) { // TEXT_NODE.\n          return null; // Not found.\n        }\n\n        position = currentNode.nodeValue ? currentNode.nodeValue.indexOf(latexTags.close) : -1;\n      }\n\n      return {\n        node: currentNode,\n        position,\n      };\n    }\n\n    /**\n     * Determines if a node is previous, or not, to a second one.\n     * @param {Node} node - Start node.\n     * @param {Number} position - Start node position.\n     * @param {Node} endNode - End node.\n     * @param {Number} endPosition - End node position.\n     * @returns {Boolean} True if the starting node is previous thant the en node. false otherwise.\n     */\n    function isPrevious(node, position, endNode, endPosition) {\n      if (node === endNode) {\n        return (position <= endPosition);\n      }\n      while (node && node !== endNode) {\n        node = node.nextSibling;\n      }\n\n      return (node === endNode);\n    }\n\n    let start;\n    let end = {\n      node: startNode,\n      position: 0,\n    };\n    // Is supposed that open and close tags has the same length.\n    const tagLength = latexTags.open.length;\n    do {\n      start = getNextLatexPosition(end.node, end.position, latexTags.open);\n\n      if (start == null || isPrevious(textNode, caretPosition, start.node, start.position)) {\n        return null;\n      }\n\n      end = getNextLatexPosition(start.node, start.position + tagLength, latexTags.close);\n\n      if (end == null) {\n        return null;\n      }\n\n      end.position += tagLength;\n    } while (isPrevious(end.node, end.position, textNode, caretPosition));\n\n    // Isolating latex.\n    let latex;\n\n    if (start.node === end.node) {\n      latex = start.node.nodeValue.substring(start.position + tagLength, end.position - tagLength);\n    } else {\n      const index = start.position + tagLength;\n      latex = start.node.nodeValue.substring(index, start.node.nodeValue.length);\n      let currentNode = start.node;\n\n      do {\n        currentNode = currentNode.nextSibling;\n        if (currentNode === end.node) {\n          latex += end.node.nodeValue.substring(0, end.position - tagLength);\n        } else {\n          latex += currentNode.nodeValue ? currentNode.nodeValue : '';\n        }\n      } while (currentNode !== end.node);\n    }\n\n    return {\n      latex,\n      startNode: start.node,\n      startPosition: start.position,\n      endNode: end.node,\n      endPosition: end.position,\n    };\n  }\n}\n\n/**\n * Text cache. Stores all processed LaTeX strings and it's correspondent MathML string.\n * @type {Cache}\n * @static\n */\nLatex._cache = new TextCache();\n","import translations from '../lang/strings.json';\n/**\n * This class represents a string manager. It's used to load localized strings.\n */\nexport default class StringManager {\n  constructor() {\n    throw new Error('Static class StringManager can not be instantiated.');\n  }\n\n  /**\n   * Returns the associated value of certain string key. If the associated value\n   * doesn't exits returns the original key.\n   * @param {string} key - string key\n   * @returns {string} correspondent value. If doesn't exists original key.\n   */\n  static get(key) {\n    let { language } = this;\n\n    if (!(language in this.strings)) {\n      console.warn(`Unknown language ${language} set in StringManager.`);\n      language = 'en';\n    }\n\n    if (!(key in this.strings[language])) {\n      console.warn(`Unknown key ${key} in StringManager.`);\n      return key;\n    }\n\n    return this.strings[language][key];\n  }\n}\n\n/**\n * Dictionary of dictionaries:\n * Key: language code\n * Value: Key: id of the string\n *        Value: translation of the string\n */\nStringManager.strings = translations;\n\n/**\n * Language of the translations; English by default\n */\nStringManager.language = 'en';\n","/* eslint-disable no-bitwise */\nimport MathML from './mathml';\nimport Configuration from './configuration';\nimport Latex from './latex';\nimport StringManager from './stringmanager';\n\n/**\n * This class represents an utility class.\n */\nexport default class Util {\n  /**\n   * Fires an event in a target.\n   * @param {EventTarget} eventTarget - target where event should be fired.\n   * @param {string} eventName event to fire.\n   * @static\n   */\n  static fireEvent(eventTarget, eventName) {\n    if (document.createEvent) {\n      const eventObject = document.createEvent('HTMLEvents');\n      eventObject.initEvent(eventName, true, true);\n      return !eventTarget.dispatchEvent(eventObject);\n    }\n\n    const eventObject = document.createEventObject();\n    return eventTarget.fireEvent(`on${eventName}`, eventObject);\n  }\n\n  /**\n   * Cross-browser addEventListener/attachEvent function.\n   * @param {EventTarget} eventTarget - target to add the event.\n   * @param {string} eventName - specifies the type of event.\n   * @param {Function} callBackFunction - callback function.\n   * @static\n   */\n  static addEvent(eventTarget, eventName, callBackFunction) {\n    if (eventTarget.addEventListener) {\n      eventTarget.addEventListener(eventName, callBackFunction, true);\n    } else if (eventTarget.attachEvent) {\n      // Backwards compatibility.\n      eventTarget.attachEvent(`on${eventName}`, callBackFunction);\n    }\n  }\n\n  /**\n   * Cross-browser removeEventListener/detachEvent function.\n   * @param {EventTarget} eventTarget - target to add the event.\n   * @param {string} eventName - specifies the type of event.\n   * @param {Function} callBackFunction - function to remove from the event target.\n   * @static\n   */\n  static removeEvent(eventTarget, eventName, callBackFunction) {\n    if (eventTarget.removeEventListener) {\n      eventTarget.removeEventListener(eventName, callBackFunction, true);\n    } else if (eventTarget.detachEvent) {\n      eventTarget.detachEvent(`on${eventName}`, callBackFunction);\n    }\n  }\n\n  /**\n   * Adds the a callback function, for a certain event target, to the following event types:\n   * - dblclick\n   * - mousedown\n   * - mouseup\n   * @param {EventTarget} eventTarget - event target.\n   * @param {Function} doubleClickHandler - function to run when on dblclick event.\n   * @param {Function} mousedownHandler - function to run when on mousedown event.\n   * @param {Function} mouseupHandler - function to run when on mouseup event.\n   * @static\n   */\n  static addElementEvents(eventTarget, doubleClickHandler, mousedownHandler, mouseupHandler) {\n    if (doubleClickHandler) {\n      Util.addEvent(eventTarget, 'dblclick', (event) => {\n        const realEvent = (event) || window.event;\n        const element = realEvent.srcElement ? realEvent.srcElement : realEvent.target;\n        doubleClickHandler(element, realEvent);\n      });\n    }\n\n    if (mousedownHandler) {\n      Util.addEvent(eventTarget, 'mousedown', (event) => {\n        const realEvent = (event) || window.event;\n        const element = realEvent.srcElement ? realEvent.srcElement : realEvent.target;\n        mousedownHandler(element, realEvent);\n      });\n    }\n\n    if (mouseupHandler) {\n      Util.addEvent(eventTarget, 'mouseup', (event) => {\n        const realEvent = (event) || window.event;\n        const element = realEvent.srcElement ? realEvent.srcElement : realEvent.target;\n        mouseupHandler(element, realEvent);\n      });\n    }\n  }\n\n  /**\n   * Adds a class name to a HTMLElement.\n   * @param {HTMLElement} element - the HTML element.\n   * @param {string} className - the class name.\n   * @static\n   */\n  static addClass(element, className) {\n    if (!Util.containsClass(element, className)) {\n      element.className += ` ${className}`;\n    }\n  }\n\n  /**\n   * Checks if a HTMLElement contains a certain class.\n   * @param {HTMLElement} element - the HTML element.\n   * @param {string} className - the className.\n   * @returns {boolean} true if the HTMLElement contains the class name. false otherwise.\n   * @static\n   */\n  static containsClass(element, className) {\n    if (element == null || !('className' in element)) {\n      return false;\n    }\n\n    const currentClasses = element.className.split(' ');\n\n    for (let i = currentClasses.length - 1; i >= 0; i -= 1) {\n      if (currentClasses[i] === className) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Remove a certain class for a HTMLElement.\n   * @param {HTMLElement} element - the HTML element.\n   * @param {string} className - the class name.\n   * @static\n   */\n  static removeClass(element, className) {\n    let newClassName = '';\n    const classes = element.className.split(' ');\n\n    for (let i = 0; i < classes.length; i += 1) {\n      if (classes[i] !== className) {\n        newClassName += `${classes[i]} `;\n      }\n    }\n    element.className = newClassName.trim();\n  }\n\n  /**\n   * Converts old xml initial text attribute (with «») to the correct one(with §lt;§gt;). It's\n   * used to parse old applets.\n   * @param {string} text - string containing safeXml characters\n   * @returns {string} a string with safeXml characters parsed.\n   * @static\n   */\n  static convertOldXmlinitialtextAttribute(text) {\n    // Used to fix a bug with Cas imported from Moodle 1.9 to Moodle 2.x.\n    // This could be removed in future.\n    const val = 'value=';\n\n    const xitpos = text.indexOf('xmlinitialtext');\n    const valpos = text.indexOf(val, xitpos);\n    const quote = text.charAt(valpos + val.length);\n    const startquote = valpos + val.length + 1;\n    const endquote = text.indexOf(quote, startquote);\n\n    const value = text.substring(startquote, endquote);\n\n    let newvalue = value.split('«').join('§lt;');\n    newvalue = newvalue.split('»').join('§gt;');\n    newvalue = newvalue.split('&').join('§');\n    newvalue = newvalue.split('¨').join('§quot;');\n\n    text = text.split(value).join(newvalue);\n    return text;\n  }\n\n  /**\n   * Cross-browser solution for creating new elements.\n   * @param {string} tagName - tag name of the wished element.\n   * @param {Object} attributes - an object where each key is a wished\n   * attribute name and each value is its value.\n   * @param {Object} [creator] - if supplied, this function will use\n   * the \"createElement\" method from this param. Otherwise\n   * document will be used as creator.\n   * @returns {Element} The DOM element with the specified attributes assigned.\n   * @static\n   */\n  static createElement(tagName, attributes, creator) {\n    if (attributes === undefined) {\n      attributes = {};\n    }\n\n    if (creator === undefined) {\n      creator = document;\n    }\n\n    let element;\n\n    /*\n    * Internet Explorer fix:\n    * If you create a new object dynamically, you can't set a non-standard attribute.\n    * For example, you can't set the \"src\" attribute on an \"applet\" object.\n    * Other browsers will throw an exception and will run the standard code.\n    */\n    try {\n      let html = `<${tagName}`;\n\n      Object.keys(attributes).forEach((attributeName) => {\n        html += ` ${attributeName}=\"${Util.htmlEntities(attributes[attributeName])}\"`;\n      });\n      html += '>';\n      element = creator.createElement(html);\n    } catch (e) {\n      element = creator.createElement(tagName);\n      Object.keys(attributes).forEach((attributeName) => {\n        element.setAttribute(attributeName, attributes[attributeName]);\n      });\n    }\n    return element;\n  }\n\n  /**\n   * Creates new HTML from it's HTML code as string.\n   * @param {string} objectCode - html code\n   * @returns {Element} the HTML element.\n   * @static\n   */\n  static createObject(objectCode, creator) {\n    if (creator === undefined) {\n      creator = document;\n    }\n\n    // Internet Explorer can't include \"param\" tag when is setting an innerHTML property.\n    objectCode = objectCode.split('<applet ').join('<span wirisObject=\"WirisApplet\" ').split('<APPLET ').join('<span wirisObject=\"WirisApplet\" '); // It is a 'span' because 'span' objects can contain 'br' nodes.\n    objectCode = objectCode.split('</applet>').join('</span>').split('</APPLET>').join('</span>');\n\n    objectCode = objectCode.split('<param ').join('<br wirisObject=\"WirisParam\" ').split('<PARAM ').join('<br wirisObject=\"WirisParam\" '); // It is a 'br' because 'br' can't contain nodes.\n    objectCode = objectCode.split('</param>').join('</br>').split('</PARAM>').join('</br>');\n\n    const container = Util.createElement('div', {}, creator);\n    container.innerHTML = objectCode;\n\n    function recursiveParamsFix(object) {\n      if (object.getAttribute && object.getAttribute('wirisObject') === 'WirisParam') {\n        const attributesParsed = {};\n\n        for (let i = 0; i < object.attributes.length; i += 1) {\n          if (object.attributes[i].nodeValue !== null) {\n            attributesParsed[object.attributes[i].nodeName] = object.attributes[i].nodeValue;\n          }\n        }\n\n        const param = Util.createElement('param', attributesParsed, creator);\n\n        // IE fix.\n        if (param.NAME) {\n          param.name = param.NAME;\n          param.value = param.VALUE;\n        }\n\n        param.removeAttribute('wirisObject');\n        object.parentNode.replaceChild(param, object);\n      } else if (object.getAttribute && object.getAttribute('wirisObject') === 'WirisApplet') {\n        const attributesParsed = {};\n\n        for (let i = 0; i < object.attributes.length; i += 1) {\n          if (object.attributes[i].nodeValue !== null) {\n            attributesParsed[object.attributes[i].nodeName] = object.attributes[i].nodeValue;\n          }\n        }\n\n        const applet = Util.createElement('applet', attributesParsed, creator);\n        applet.removeAttribute('wirisObject');\n\n        for (let i = 0; i < object.childNodes.length; i += 1) {\n          recursiveParamsFix(object.childNodes[i]);\n\n          if (object.childNodes[i].nodeName.toLowerCase() === 'param') {\n            applet.appendChild(object.childNodes[i]);\n            i -= 1; // When we insert the object child into the applet, object loses one child.\n          }\n        }\n\n        object.parentNode.replaceChild(applet, object);\n      } else {\n        for (let i = 0; i < object.childNodes.length; i += 1) {\n          recursiveParamsFix(object.childNodes[i]);\n        }\n      }\n    }\n\n    recursiveParamsFix(container);\n    return container.firstChild;\n  }\n\n  /**\n   * Converts an Element to its HTML code.\n   * @param {Element} element - entry element.\n   * @return {string} the HTML code of the input element.\n   * @static\n   */\n  static createObjectCode(element) {\n    // In case that the image was not created, the object can be null or undefined.\n    if (typeof element === 'undefined' || element === null) {\n      return null;\n    }\n\n    if (element.nodeType === 1) { // ELEMENT_NODE.\n      let output = `<${element.tagName}`;\n\n      for (let i = 0; i < element.attributes.length; i += 1) {\n        if (element.attributes[i].specified) {\n          output += ` ${element.attributes[i].name}=\"${Util.htmlEntities(element.attributes[i].value)}\"`;\n        }\n      }\n\n      if (element.childNodes.length > 0) {\n        output += '>';\n\n        for (let i = 0; i < element.childNodes.length; i += 1) {\n          output += Util.createObject(element.childNodes[i]);\n        }\n\n        output += `</${element.tagName}>`;\n      } else if (element.nodeName === 'DIV' || element.nodeName === 'SCRIPT') {\n        output += `></${element.tagName}>`;\n      } else {\n        output += '/>';\n      }\n\n      return output;\n    }\n\n    if (element.nodeType === 3) { // TEXT_NODE.\n      return Util.htmlEntities(element.nodeValue);\n    }\n\n    return '';\n  }\n\n  /**\n   * Concatenates two URL paths.\n   * @param {string} path1 - first URL path\n   * @param {string} path2 - second URL path\n   * @returns {string} new URL.\n   */\n  static concatenateUrl(path1, path2) {\n    let separator = '';\n    if ((path1.indexOf('/') !== path1.length) && (path2.indexOf('/') !== 0)) {\n      separator = '/';\n    }\n    return (path1 + separator + path2).replace(/([^:]\\/)\\/+/g, '$1');\n  }\n\n  /**\n   * Parses a text and replaces all HTML special characters by their correspondent entities.\n   * @param {string} input - text to be parsed.\n   * @returns {string} the input text with all their special characters replaced by their entities.\n   * @static\n   */\n  static htmlEntities(input) {\n    return input.split('&').join('&amp;').split('<').join('&lt;')\n      .split('>')\n      .join('&gt;')\n      .split('\"')\n      .join('&quot;');\n  }\n\n  /**\n   * Parses a text and replaces all the HTML entities by their characters.\n   * @param {string} input - text to be parsed\n   * @returns {string} the input text with all their entities replaced by characters.\n   * @static\n   */\n  static htmlEntitiesDecode(input) {\n    // Textarea element decodes when inner html is set.\n    const textarea = document.createElement('textarea');\n    textarea.innerHTML = input;\n    return textarea.value;\n  }\n\n  /**\n   * Returns a cross-browser http request.\n   * @return {object} httpRequest request object.\n   * @returns {XMLHttpRequest|ActiveXObject} the proper request object.\n   */\n  static createHttpRequest() {\n    const currentPath = window.location.toString().substr(0, window.location.toString().lastIndexOf('/') + 1);\n    if (currentPath.substr(0, 7) === 'file://') {\n      throw StringManager.get('exception_cross_site');\n    }\n\n    if (typeof XMLHttpRequest !== 'undefined') {\n      return new XMLHttpRequest();\n    }\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP');\n    } catch (e) {\n      try {\n        return new ActiveXObject('Microsoft.XMLHTTP');\n      } catch (oc) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Converts a hash to a HTTP query.\n   * @param {Object[]} properties - a key/value object.\n   * @returns {string} a HTTP query containing all the key value pairs with\n   * all the special characters replaced by their entities.\n   * @static\n   */\n  static httpBuildQuery(properties) {\n    let result = '';\n\n    Object.keys(properties).forEach((i) => {\n      if (properties[i] != null) {\n        result += `${Util.urlEncode(i)}=${Util.urlEncode(properties[i])}&`;\n      }\n    });\n\n    // Deleting last '&' empty character.\n    if (result.substring(result.length - 1) === '&') {\n      result = result.substring(0, result.length - 1);\n    }\n\n    return result;\n  }\n\n  /**\n   * Convert a hash to string sorting keys to get a deterministic output\n   * @param {Object[]} hash - a key/value object.\n   * @returns {string} a string with the form key1=value1...keyn=valuen\n   * @static\n   */\n  static propertiesToString(hash) {\n    // 1. Sort keys. We sort the keys because we want a deterministic output.\n    const keys = [];\n    Object.keys(hash).forEach((key) => {\n      if (Object.prototype.hasOwnProperty.call(hash, key)) {\n        keys.push(key);\n      }\n    });\n\n    const n = keys.length;\n    for (let i = 0; i < n; i += 1) {\n      for (let j = i + 1; j < n; j += 1) {\n        const s1 = keys[i];\n        const s2 = keys[j];\n        if (Util.compareStrings(s1, s2) > 0) {\n          // Swap.\n          keys[i] = s2;\n          keys[j] = s1;\n        }\n      }\n    }\n\n    // 2. Generate output.\n    let output = '';\n    for (let i = 0; i < n; i += 1) {\n      const key = keys[i];\n      output += key;\n      output += '=';\n      let value = hash[key];\n      value = value.replace('\\\\', '\\\\\\\\');\n      value = value.replace('\\n', '\\\\n');\n      value = value.replace('\\r', '\\\\r');\n      value = value.replace('\\t', '\\\\t');\n\n      output += value;\n      output += '\\n';\n    }\n    return output;\n  }\n\n  /**\n   * Compare two strings using charCodeAt method\n   * @param {string} a - first string to compare.\n   * @param {string} b - second string to compare.\n   * @returns {number} the difference between a and b\n   * @static\n   */\n  static compareStrings(a, b) {\n    let i;\n    const an = a.length;\n    const bn = b.length;\n    const n = (an > bn) ? bn : an;\n    for (i = 0; i < n; i += 1) {\n      const c = Util.fixedCharCodeAt(a, i) - Util.fixedCharCodeAt(b, i);\n      if (c !== 0) {\n        return c;\n      }\n    }\n    return a.length - b.length;\n  }\n\n  /**\n   * Fix charCodeAt() JavaScript function to handle non-Basic-Multilingual-Plane characters.\n   * @param {string} string - input string\n   * @param {number} idx - an integer greater than or equal to 0\n   * and less than the length of the string\n   * @returns {number} an integer representing the UTF-16 code of the string at the given index.\n   * @static\n   */\n  static fixedCharCodeAt(string, idx) {\n    idx = idx || 0;\n    const code = string.charCodeAt(idx);\n    let hi;\n    let low;\n\n    /* High surrogate (could change last hex to 0xDB7F to treat high\n    private surrogates as single characters) */\n\n    if (code >= 0xD800 && code <= 0xDBFF) {\n      hi = code;\n      low = string.charCodeAt(idx + 1);\n      if (Number.isNaN(low)) {\n        throw StringManager.get('exception_high_surrogate');\n      }\n      return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n    }\n\n    if (code >= 0xDC00 && code <= 0xDFFF) { // Low surrogate.\n      /* We return false to allow loops to skip this iteration since should have\n      already handled high surrogate above in the previous iteration. */\n      return false;\n    }\n    return code;\n  }\n\n  /**\n   * Returns an URL with it's query params converted into array.\n   * @param {string} url - input URL.\n   * @returns {Object[]} an array containing all URL query params.\n   * @static\n   */\n  static urlToAssArray(url) {\n    let i;\n    i = url.indexOf('?');\n    if (i > 0) {\n      const query = url.substring(i + 1);\n      const ss = query.split('&');\n      const h = {};\n      for (i = 0; i < ss.length; i += 1) {\n        const s = ss[i];\n        const kv = s.split('=');\n        if (kv.length > 1) {\n          h[kv[0]] = decodeURIComponent(kv[1].replace(/\\+/g, ' '));\n        }\n      }\n      return h;\n    }\n    return {};\n  }\n\n  /**\n   * Returns an encoded URL by replacing each instance of certain characters by\n   * one, two, three or four escape sequences using encodeURIComponent method.\n   * !'()* . will not be encoded.\n   *\n   * @param {string} clearString - URL string to be encoded\n   * @returns {string} URL with it's special characters replaced.\n   * @static\n   */\n  static urlEncode(clearString) {\n    let output = '';\n    // Method encodeURIComponent doesn't encode !'()*~ .\n    output = encodeURIComponent(clearString);\n    return output;\n  }\n\n  // TODO: To parser?\n  /**\n   * Converts the HTML of a image into the output code that WIRIS must return.\n   * By default returns the MathML stored on data-mahml attribute (if imgCode is a formula)\n   * or the Wiriscas attribute of a WIRIS applet.\n   * @param {string} imgCode - the html code from a formula or a CAS image.\n   * @param {boolean} convertToXml - true if the image should be converted to XML.\n   * @param {boolean} convertToSafeXml - true if the image should be converted to safeXML.\n   * @returns {string} the XML or safeXML of a WIRIS image.\n   * @static\n   */\n  static getWIRISImageOutput(imgCode, convertToXml, convertToSafeXml) {\n    const imgObject = Util.createObject(imgCode);\n    if (imgObject) {\n      if (imgObject.className === Configuration.get('imageClassName') || imgObject.getAttribute(Configuration.get('imageMathmlAttribute'))) {\n        if (!convertToXml) {\n          return imgCode;\n        }\n\n        const dataMathML = imgObject.getAttribute(Configuration.get('imageMathmlAttribute'));\n        // To handle annotations, first we need the MathML in XML.\n        let mathML = MathML.safeXmlDecode(dataMathML);\n\n        if (!Configuration.get('saveHandTraces')) {\n          mathML = MathML.removeAnnotation(mathML, 'application/json');\n        }\n\n        if (mathML == null) {\n          mathML = imgObject.getAttribute('alt');\n        }\n\n        if (convertToSafeXml) {\n          const safeMathML = MathML.safeXmlEncode(mathML);\n          return safeMathML;\n        }\n\n        return mathML;\n      }\n    }\n    return imgCode;\n  }\n\n  /**\n   * Gets the node length in characters.\n   * @param {Node} node - HTML node.\n   * @returns {number} node length.\n   * @static\n   */\n  static getNodeLength(node) {\n    const staticNodeLengths = {\n      IMG: 1,\n      BR: 1,\n    };\n\n    if (node.nodeType === 3) { // TEXT_NODE.\n      return node.nodeValue.length;\n    }\n\n    if (node.nodeType === 1) { // ELEMENT_NODE.\n      let length = staticNodeLengths[node.nodeName.toUpperCase()];\n\n      if (length === undefined) {\n        length = 0;\n      }\n\n      for (let i = 0; i < node.childNodes.length; i += 1) {\n        length += Util.getNodeLength(node.childNodes[i]);\n      }\n      return length;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets a selected node or text from an editable HTMLElement.\n   * If the caret is on a text node, concatenates it with all the previous and next text nodes.\n   * @param {HTMLElement} target - the editable HTMLElement.\n   * @param {boolean} isIframe  - specifies if the target is an iframe or not\n   * @param {boolean} forceGetSelection - if true, ignores IE system to get\n   * the current selection and uses window.getSelection()\n   * @returns {object} an object with the 'node' key set if the item is an\n   * element or the keys 'node' and 'caretPosition' if the element is text.\n   * @static\n   */\n  static getSelectedItem(target, isIframe, forceGetSelection) {\n    let windowTarget;\n\n    if (isIframe) {\n      windowTarget = target.contentWindow;\n      windowTarget.focus();\n    } else {\n      windowTarget = window;\n      target.focus();\n    }\n\n    if (document.selection && !forceGetSelection) {\n      const range = windowTarget.document.selection.createRange();\n\n      if (range.parentElement) {\n        if (range.htmlText.length > 0) {\n          if (range.text.length === 0) {\n            return Util.getSelectedItem(target, isIframe, true);\n          }\n\n          return null;\n        }\n\n        windowTarget.document.execCommand('InsertImage', false, '#');\n        let temporalObject = range.parentElement();\n\n        if (temporalObject.nodeName.toUpperCase() !== 'IMG') {\n          // IE9 fix: parentElement() does not return the IMG node,\n          // returns the parent DIV node. In IE < 9, pasteHTML does not work well.\n          range.pasteHTML('<span id=\"wrs_openEditorWindow_temporalObject\"></span>');\n          temporalObject = windowTarget.document.getElementById('wrs_openEditorWindow_temporalObject');\n        }\n\n        let node;\n        let caretPosition;\n\n        if (temporalObject.nextSibling && temporalObject.nextSibling.nodeType === 3) { // TEXT_NODE.\n          node = temporalObject.nextSibling;\n          caretPosition = 0;\n        } else if (temporalObject.previousSibling\n          && temporalObject.previousSibling.nodeType === 3) {\n          node = temporalObject.previousSibling;\n          caretPosition = node.nodeValue.length;\n        } else {\n          node = windowTarget.document.createTextNode('');\n          temporalObject.parentNode.insertBefore(node, temporalObject);\n          caretPosition = 0;\n        }\n\n        temporalObject.parentNode.removeChild(temporalObject);\n\n        return {\n          node,\n          caretPosition,\n        };\n      }\n\n      if (range.length > 1) {\n        return null;\n      }\n\n      return {\n        node: range.item(0),\n      };\n    }\n\n    if (windowTarget.getSelection) {\n      let range;\n      const selection = windowTarget.getSelection();\n\n      try {\n        range = selection.getRangeAt(0);\n      } catch (e) {\n        range = windowTarget.document.createRange();\n      }\n\n      const node = range.startContainer;\n\n      if (node.nodeType === 3) { // TEXT_NODE.\n        return {\n          node,\n          caretPosition: range.startOffset,\n        };\n      }\n\n      if (node !== range.endContainer) {\n        return null;\n      }\n\n      if (node.nodeType === 1) { // ELEMENT_NODE.\n        const position = range.startOffset;\n\n        if (node.childNodes[position]) {\n          return {\n            node: node.childNodes[position],\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns null if there isn't any item or if it is malformed.\n   * Otherwise returns an object containing the node with the MathML image\n   * and the cursor position inside the textarea.\n   * @param {HTMLTextAreaElement} textarea - textarea element.\n   * @returns {Object} An object containing the node, the index of the\n   * beginning  of the selected text, caret position and the start and end position of the\n   * text node.\n   * @static\n   */\n  static getSelectedItemOnTextarea(textarea) {\n    const textNode = document.createTextNode(textarea.value);\n    const textNodeValues = Latex.getLatexFromTextNode(textNode, textarea.selectionStart);\n    if (textNodeValues === null) {\n      return null;\n    }\n\n    return {\n      node: textNode,\n      caretPosition: textarea.selectionStart,\n      startPosition: textNodeValues.startPosition,\n      endPosition: textNodeValues.endPosition,\n    };\n  }\n\n  /**\n   * Looks for elements that match the given name in a HTML code string.\n   * Important: this function is very concrete for WIRIS code.\n   * It takes as preconditions lots of behaviors that are not the general case.\n   * @param {string} code -  HTML code.\n   * @param {string} name - element name.\n   * @param {boolean} autoClosed - true if the elements are autoClosed.\n   * @return {Object[]} an object containing all HTML elements of code matching the name argument.\n   * @static\n   */\n  static getElementsByNameFromString(code, name, autoClosed) {\n    const elements = [];\n    code = code.toLowerCase();\n    name = name.toLowerCase();\n    let start = code.indexOf(`<${name} `);\n\n    while (start !== -1) { // Look for nodes.\n      let endString;\n\n      if (autoClosed) {\n        endString = '>';\n      } else {\n        endString = `</${name}>`;\n      }\n\n      let end = code.indexOf(endString, start);\n\n      if (end !== -1) {\n        end += endString.length;\n        elements.push({\n          start,\n          end,\n        });\n      } else {\n        end = start + 1;\n      }\n\n      start = code.indexOf(`<${name} `, end);\n    }\n\n    return elements;\n  }\n\n  /**\n   * Returns the numeric value of a base64 character.\n   * @param  {string} character - base64 character.\n   * @returns {number} base64 character numeric value.\n   * @static\n   */\n  static decode64(character) {\n    const PLUS = '+'.charCodeAt(0);\n    const SLASH = '/'.charCodeAt(0);\n    const NUMBER = '0'.charCodeAt(0);\n    const LOWER = 'a'.charCodeAt(0);\n    const UPPER = 'A'.charCodeAt(0);\n    const PLUS_URL_SAFE = '-'.charCodeAt(0);\n    const SLASH_URL_SAFE = '_'.charCodeAt(0);\n    const code = character.charCodeAt(0);\n\n    if (code === PLUS || code === PLUS_URL_SAFE) {\n      return 62; // Char '+'.\n    }\n    if (code === SLASH || code === SLASH_URL_SAFE) {\n      return 63; // Char '/'.\n    }\n    if (code < NUMBER) {\n      return -1; // No match.\n    }\n    if (code < NUMBER + 10) {\n      return code - NUMBER + 26 + 26;\n    }\n    if (code < UPPER + 26) {\n      return code - UPPER;\n    }\n    if (code < LOWER + 26) {\n      return code - LOWER + 26;\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts a base64 string to a array of bytes.\n   * @param {string} b64String - base64 string.\n   * @param {number} length - dimension of byte array (by default whole string).\n   * @return {Object[]} the resultant byte array.\n   * @static\n   */\n  static b64ToByteArray(b64String, length) {\n    let tmp;\n\n    if (b64String.length % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4'); // Tipped base64. Length is fixed.\n    }\n\n    const arr = [];\n\n    let l;\n    let placeHolders;\n    if (!length) { // All b64String string.\n      if (b64String.charAt(b64String.length - 2) === '=') {\n        placeHolders = 2;\n      } else if (b64String.charAt(b64String.length - 1) === '=') {\n        placeHolders = 1;\n      } else {\n        placeHolders = 0;\n      }\n      l = placeHolders > 0 ? b64String.length - 4 : b64String.length;\n    } else {\n      l = length;\n    }\n\n    let i;\n    for (i = 0; i < l; i += 4) {\n      // Ignoring code checker standards (bitewise operators).\n      // See https://tracker.moodle.org/browse/CONTRIB-5862 for further information.\n      // @codingStandardsIgnoreStart\n      // eslint-disable-next-line max-len\n      tmp = (Util.decode64(b64String.charAt(i)) << 18) | (Util.decode64(b64String.charAt(i + 1)) << 12) | (Util.decode64(b64String.charAt(i + 2)) << 6) | Util.decode64(b64String.charAt(i + 3));\n\n      arr.push((tmp >> 16) & 0xFF);\n      arr.push((tmp >> 8) & 0xFF);\n      arr.push(tmp & 0xFF);\n      // @codingStandardsIgnoreEnd\n    }\n\n    if (placeHolders) {\n      if (placeHolders === 2) {\n        // Ignoring code checker standards (bitewise operators).\n        // @codingStandardsIgnoreStart\n        // eslint-disable-next-line max-len\n        tmp = (Util.decode64(b64String.charAt(i)) << 2) | (Util.decode64(b64String.charAt(i + 1)) >> 4);\n        arr.push(tmp & 0xFF);\n      } else if (placeHolders === 1) {\n        // eslint-disable-next-line max-len\n        tmp = (Util.decode64(b64String.charAt(i)) << 10) | (Util.decode64(b64String.charAt(i + 1)) << 4) | (Util.decode64(b64String.charAt(i + 2)) >> 2);\n        arr.push((tmp >> 8) & 0xFF);\n        arr.push(tmp & 0xFF);\n        // @codingStandardsIgnoreEnd\n      }\n    }\n    return arr;\n  }\n\n  /**\n   * Returns the first 32-bit signed integer from a byte array.\n   * @param {Object[]} bytes - array of bytes.\n   * @returns {number} the 32-bit signed integer.\n   * @static\n   */\n  static readInt32(bytes) {\n    if (bytes.length < 4) {\n      return false;\n    }\n    const int32 = bytes.splice(0, 4);\n    // @codingStandardsIgnoreStart\n    // eslint-disable-next-line no-mixed-operators\n    return (int32[0] << 24 | int32[1] << 16 | int32[2] << 8 | int32[3] << 0);\n    // @codingStandardsIgnoreEnd\n  }\n\n  /**\n   * Read the first byte from a byte array.\n   * @param {Object} bytes - input byte array.\n   * @returns {number} first byte of the byte array.\n   * @static\n   */\n  static readByte(bytes) {\n    // @codingStandardsIgnoreStart\n    return bytes.shift() << 0;\n    // @codingStandardsIgnoreEnd\n  }\n\n  /**\n   * Read an arbitrary number of bytes, from a fixed position on a byte array.\n   * @param  {Object[]} bytes - byte array.\n   * @param  {number} pos - start position.\n   * @param  {number} len - number of bytes to read.\n   * @returns {Object[]} the byte array.\n   * @static\n   */\n  static readBytes(bytes, pos, len) {\n    return bytes.splice(pos, len);\n  }\n\n  /**\n   * Inserts or modifies formulas or CAS on a textarea.\n   * @param {HTMLTextAreaElement} textarea - textarea target.\n   * @param {string} text - text to add in the textarea. For example, to add the link to the image,\n   * call this function as (textarea, Parser.createImageSrc(mathml));\n   * @static\n   */\n  static updateTextArea(textarea, text) {\n    if (textarea && text) {\n      textarea.focus();\n\n      if (textarea.selectionStart != null) {\n        const { selectionEnd } = textarea;\n        const selectionStart = textarea.value.substring(0, textarea.selectionStart);\n        const selectionEndSub = textarea.value.substring(selectionEnd, textarea.value.length);\n        textarea.value = selectionStart + text + selectionEndSub;\n        textarea.selectionEnd = selectionEnd + text.length;\n      } else {\n        const selection = document.selection.createRange();\n        selection.text = text;\n      }\n    }\n  }\n\n  /**\n   * Modifies existing formula on a textarea.\n   * @param {HTMLTextAreaElement} textarea - text area target.\n   * @param {string} text - text to add in the textarea. For example, if you want to add the link\n   * to the image,you can call this function as\n   * Util.updateTextarea(textarea, Parser.createImageSrc(mathml));\n   * @param {number} start - beginning index from textarea where it needs to be replaced by text.\n   * @param {number} end - ending index from textarea where it needs to be replaced by text\n   * @static\n   */\n  static updateExistingTextOnTextarea(textarea, text, start, end) {\n    textarea.focus();\n    const textareaStart = textarea.value.substring(0, start);\n    textarea.value = textareaStart + text + textarea.value.substring(end, textarea.value.length);\n    textarea.selectionEnd = start + text.length;\n  }\n\n  /**\n   * Add a parameter with it's correspondent value to an URL (GET).\n   * @param {string} path - URL path\n   * @param {string} parameter - parameter\n   * @param {string} value - value\n   * @static\n   */\n  static addArgument(path, parameter, value) {\n    let sep;\n    if (path.indexOf('?') > 0) {\n      sep = '&';\n    } else {\n      sep = '?';\n    }\n    return `${path + sep + parameter}=${value}`;\n  }\n}\n","import Configuration from './configuration';\nimport Util from './util';\n\n/**\n * @classdesc\n * This class represents MathType Image class. Contains all the logic related\n * to MathType images manipulation.\n * All MathType images are generated using the appropriate MathType\n * integration service: showimage or createimage.\n *\n * There are two available image formats:\n * - svg (default)\n * - png\n *\n * There are two formats for the image src attribute:\n * - A data-uri scheme containing the URL-encoded SVG or a PNG's base64.\n * - A link to the showimage service.\n */\nexport default class Image {\n  /**\n   * Removes data attributes from an image.\n   * @param {HTMLImageElement} img - Image where remove data attributes.\n   */\n  static removeImgDataAttributes(img) {\n    const attributesToRemove = [];\n    const { attributes } = img;\n\n    Object.keys(attributes).forEach((key) => {\n      const attribute = attributes[key];\n      if (attribute.name.indexOf('data-') === 0) {\n        // Is preferred keep an array and remove after the search\n        // because when attribute is removed the array of attributes\n        // is modified.\n        attributesToRemove.push(attribute.name);\n      }\n    });\n\n    attributesToRemove.forEach((attribute) => {\n      img.removeAttribute(attribute);\n    });\n  }\n\n  /**\n   * @static\n   * Clones all MathType image attributes from a HTMLImageElement to another.\n   * @param {HTMLImageElement} originImg - The original image.\n   * @param {HTMLImageElement} destImg - The destination image.\n   */\n  static clone(originImg, destImg) {\n    const customEditorAttributeName = Configuration.get('imageCustomEditorName');\n    if (!originImg.hasAttribute(customEditorAttributeName)) {\n      destImg.removeAttribute(customEditorAttributeName);\n    }\n\n    const mathmlAttributeName = Configuration.get('imageMathmlAttribute');\n    const imgAttributes = [\n      mathmlAttributeName,\n      customEditorAttributeName,\n      'alt',\n      'height',\n      'width',\n      'style',\n      'src',\n      'role',\n    ];\n\n    imgAttributes.forEach((iterator) => {\n      const originAttribute = originImg.getAttribute(iterator);\n      if (originAttribute) {\n        destImg.setAttribute(iterator, originAttribute);\n      }\n    });\n  }\n\n  /**\n  * Calculates the metrics of a MathType image given the the service response and the image format.\n  * @param {HTMLImageElement} img - The HTMLImageElement.\n  * @param {String} uri - The URI generated by the image service: can be a data URI scheme or a URL.\n  * @param {Boolean} jsonResponse - True the response of the image service is a\n  * JSON object. False otherwise.\n  */\n  static setImgSize(img, uri, jsonResponse) {\n    let ar;\n    let base64String;\n    let bytes;\n    let svgString;\n    if (jsonResponse) {\n      // Cleaning data:image/png;base64.\n      if (Configuration.get('imageFormat') === 'svg') {\n        // SVG format.\n        // If SVG is encoded in base64 we need to convert the base64 bytes into a SVG string.\n        if (Configuration.get('saveMode') !== 'base64') {\n          ar = Image.getMetricsFromSvgString(uri);\n        } else {\n          base64String = img.src.substr(img.src.indexOf('base64,') + 7, img.src.length);\n          svgString = '';\n          bytes = Util.b64ToByteArray(base64String, base64String.length);\n          for (let i = 0; i < bytes.length; i += 1) {\n            svgString += String.fromCharCode(bytes[i]);\n          }\n          ar = Image.getMetricsFromSvgString(svgString);\n        }\n        // PNG format: we store all metrics information in the first 88 bytes.\n      } else {\n        base64String = img.src.substr(img.src.indexOf('base64,') + 7, img.src.length);\n        bytes = Util.b64ToByteArray(base64String, 88);\n        ar = Image.getMetricsFromBytes(bytes);\n      }\n      // Backwards compatibility: we store the metrics into createimage response.\n    } else {\n      ar = Util.urlToAssArray(uri);\n    }\n    let width = ar.cw;\n    if (!width) {\n      return;\n    }\n    let height = ar.ch;\n    let baseline = ar.cb;\n    const { dpi } = ar;\n    if (dpi) {\n      width = width * 96 / dpi;\n      height = height * 96 / dpi;\n      baseline = baseline * 96 / dpi;\n    }\n    img.width = width;\n    img.height = height;\n    img.style.verticalAlign = `-${height - baseline}px`;\n  }\n\n  /**\n   * Calculates the metrics of an image which has been resized. Is used to restore the original\n   * metrics of a resized image.\n   * @param {HTMLImageElement } img - The resized HTMLImageElement.\n   */\n  static fixAfterResize(img) {\n    img.removeAttribute('style');\n    img.removeAttribute('width');\n    img.removeAttribute('height');\n    // In order to avoid resize with max-width css property.\n    img.style.maxWidth = 'none';\n    if (img.src.indexOf('data:image') !== -1) {\n      if (Configuration.get('imageFormat') === 'svg') {\n        // ...data:image/svg+xml;charset=utf8, = 32.\n        const svg = decodeURIComponent(img.src.substring(32, img.src.length));\n        Image.setImgSize(img, svg, true);\n      } else {\n        // ...data:image/png;base64, == 22.\n        const base64 = img.src.substring(22, img.src.length);\n        Image.setImgSize(img, base64, true);\n      }\n    } else {\n      Image.setImgSize(img, img.src);\n    }\n  }\n\n  /**\n   * Returns the metrics (height, width and baseline) contained in a SVG image generated\n   * by the MathType image service. This image contains as an extra custom attribute:\n   * the baseline (wrs:baseline).\n   * @param {String} svgString - The SVG image.\n   * @return {Array} - The image metrics.\n   */\n  static getMetricsFromSvgString(svgString) {\n    let first = svgString.indexOf('height=\"');\n    let last = svgString.indexOf('\"', first + 8, svgString.length);\n    const height = svgString.substring(first + 8, last);\n\n    first = svgString.indexOf('width=\"');\n    last = svgString.indexOf('\"', first + 7, svgString.length);\n    const width = svgString.substring(first + 7, last);\n\n    first = svgString.indexOf('wrs:baseline=\"');\n    last = svgString.indexOf('\"', first + 14, svgString.length);\n    const baseline = svgString.substring(first + 14, last);\n\n    if (typeof width !== 'undefined') {\n      const arr = [];\n      arr.cw = width;\n      arr.ch = height;\n      if (typeof baseline !== 'undefined') {\n        arr.cb = baseline;\n      }\n      return arr;\n    }\n    return [];\n  }\n\n  /**\n   * Returns the metrics (width, height, baseline and dpi) contained in a PNG byte array.\n   * @param  {Array.<Bytes>} bytes - png byte array.\n   * @return {Array} The png metrics.\n   */\n  static getMetricsFromBytes(bytes) {\n    Util.readBytes(bytes, 0, 8);\n    let width;\n    let height;\n    let typ;\n    let baseline;\n    let dpi;\n    while (bytes.length >= 4) {\n      typ = Util.readInt32(bytes);\n      if (typ === 0x49484452) {\n        width = Util.readInt32(bytes);\n        height = Util.readInt32(bytes);\n        // Read 5 bytes.\n        Util.readInt32(bytes);\n        Util.readByte(bytes);\n      } else if (typ === 0x62615345) { // Baseline: 'baSE'.\n        baseline = Util.readInt32(bytes);\n      } else if (typ === 0x70485973) { // Dpis: 'pHYs'.\n        dpi = Util.readInt32(bytes);\n        dpi = (Math.round(dpi / 39.37));\n        Util.readInt32(bytes);\n        Util.readByte(bytes);\n      }\n      Util.readInt32(bytes);\n    }\n\n    if (typeof width !== 'undefined') {\n      const arr = [];\n      arr.cw = width;\n      arr.ch = height;\n      arr.dpi = dpi;\n      if (baseline) {\n        arr.cb = baseline;\n      }\n\n      return arr;\n    }\n    return [];\n  }\n}\n","import TextCache from './textcache';\nimport ServiceProvider from './serviceprovider';\nimport MathML from './mathml';\nimport StringManager from './stringmanager';\n\n/**\n * @classdesc\n * This class represents MathType accessible class. Converts MathML to accessible text and manages\n * the associated client-side cache.\n */\nexport default class Accessibility {\n  /**\n  * Static property.\n  * Accessibility cache, each entry contains a MathML and its correspondent accessibility text.\n  * @type {TextCache}\n  */\n  static get cache() {\n    return Accessibility._cache;\n  }\n\n  /**\n   * Static property setter.\n   * Set accessibility cache.\n   * @param {TextCahe} value - The property value.\n   * @ignore\n   */\n  static set cache(value) {\n    Accessibility._cache = value;\n  }\n\n  /**\n   * Converts MathML strings to its accessible text representation.\n   * @param {String} mathML - MathML to be converted to accessible text.\n   * @param {String} [language] - Language of the accessible text. 'en' by default.\n   * @param {Array.<String>} [data] - Parameters to send to mathml2accessible service.\n   * @return {String} Accessibility text.\n   */\n  static mathMLToAccessible(mathML, language, data) {\n    if (typeof (language) === 'undefined') {\n      language = 'en';\n    }\n    // Check MathML class. If the class is chemistry,\n    // we add chemistry to data to force accessibility service\n    // to load chemistry grammar.\n    if (MathML.containClass(mathML, 'wrs_chemistry')) {\n      data.mode = 'chemistry';\n    }\n    let accessibleText = '';\n\n    if (Accessibility.cache.get(mathML)) {\n      accessibleText = Accessibility.cache.get(mathML);\n    } else {\n      data.service = 'mathml2accessible';\n      data.lang = language;\n      const accessibleJsonResponse = JSON.parse(ServiceProvider.getService('service', data));\n      if (accessibleJsonResponse.status !== 'error') {\n        accessibleText = accessibleJsonResponse.result.text;\n        Accessibility.cache.populate(mathML, accessibleText);\n      } else {\n        accessibleText = StringManager.get('error_convert_accessibility');\n      }\n    }\n\n    return accessibleText;\n  }\n}\n\n/**\n * Contains an instance of TextCache class to manage the JavaScript accessible cache.\n * Each entry of the cache object contains the MathML and it's correspondent accessibility text.\n * @private\n * @type {TextCache}\n */\nAccessibility._cache = new TextCache();\n","import Util from './util';\nimport Latex from './latex';\nimport MathML from './mathml';\nimport Image from './image';\nimport Accessibility from './accessibility';\nimport ServiceProvider from './serviceprovider';\nimport Configuration from './configuration';\nimport Constants from './constants';\n// eslint-disable-next-line no-unused-vars\nimport md5 from './md5';\n\n/**\n * @classdesc\n * This class represent a MahML parser. Converts MathML into formulas depending on the\n * image format (SVG, PNG, base64) and the save mode (XML, safeXML, Image) configured\n * in the backend.\n */\nexport default class Parser {\n  /**\n   * Converts a MathML string to an img element.\n   * @param {Document} creator - Document object to call createElement method.\n   * @param {string} mathml - MathML code\n   * @param {Object[]} wirisProperties - object containing WIRIS custom properties\n   * @param {language} language - custom language for accessibility.\n   * @returns {HTMLImageElement} the formula image corresponding to initial MathML string.\n   * @static\n   */\n  static mathmlToImgObject(creator, mathml, wirisProperties, language) {\n    const imgObject = creator.createElement('img');\n    imgObject.align = 'middle';\n    imgObject.style.maxWidth = 'none';\n    const data = wirisProperties || {};\n\n    data.mml = mathml;\n    data.lang = language;\n    // Request metrics of the generated image.\n    data.metrics = 'true';\n    data.centerbaseline = 'false';\n\n\n    // Full base64 method (edit & save).\n    if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'default') {\n      data.base64 = true;\n    }\n\n    // Render js params: _wrs_int_wirisProperties contains some js render params.\n    // Since MathML can support render params, js params should be send only to editor.\n\n    imgObject.className = Configuration.get('imageClassName');\n\n    if (mathml.indexOf('class=\"') !== -1) {\n      // We check here if the MathML has been created from a customEditor (such chemistry)\n      // to add custom editor name attribute to img object (if necessary).\n      let mathmlSubstring = mathml.substring(mathml.indexOf('class=\"') + 'class=\"'.length, mathml.length);\n      mathmlSubstring = mathmlSubstring.substring(0, mathmlSubstring.indexOf('\"'));\n      mathmlSubstring = mathmlSubstring.substring(4, mathmlSubstring.length);\n      imgObject.setAttribute(Configuration.get('imageCustomEditorName'), mathmlSubstring);\n    }\n\n    // Performance enabled.\n    if (Configuration.get('wirisPluginPerformance') && (Configuration.get('saveMode') === 'xml' || Configuration.get('saveMode') === 'safeXml')) {\n      let result = JSON.parse(Parser.createShowImageSrc(data, language));\n      if (result.status === 'warning') {\n        // POST call.\n        // if the mathml is malformed, this function will throw an exception.\n        try {\n          result = JSON.parse(ServiceProvider.getService('showimage', data));\n        } catch (e) {\n          return null;\n        }\n      }\n      ({ result } = result);\n      if (result.format === 'png') {\n        imgObject.src = `data:image/png;base64,${result.content}`;\n      } else {\n        imgObject.src = `data:image/svg+xml;charset=utf8,${Util.urlEncode(result.content)}`;\n      }\n      imgObject.setAttribute(Configuration.get('imageMathmlAttribute'), MathML.safeXmlEncode(mathml));\n      Image.setImgSize(imgObject, result.content, true);\n\n      if (Configuration.get('enableAccessibility')) {\n        if (typeof result.alt === 'undefined') {\n          imgObject.alt = Accessibility.mathMLToAccessible(mathml, language, data);\n        } else {\n          imgObject.alt = result.alt;\n        }\n      }\n    } else {\n      const result = Parser.createImageSrc(mathml, data);\n      imgObject.setAttribute(Configuration.get('imageMathmlAttribute'), MathML.safeXmlEncode(mathml));\n      imgObject.src = result;\n      Image.setImgSize(imgObject, result, Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'default');\n      if (Configuration.get('enableAccessibility')) {\n        imgObject.alt = Accessibility.mathMLToAccessible(mathml, language, data);\n      }\n    }\n\n    if (typeof Parser.observer !== 'undefined') {\n      Parser.observer.observe(imgObject);\n    }\n\n    // Role math https://www.w3.org/TR/wai-aria/roles#math.\n    imgObject.setAttribute('role', 'math');\n    return imgObject;\n  }\n\n  /**\n   * Returns the source to showimage service by calling createimage service. The\n   * output of the createimage service is a URL path pointing to showimage service.\n   * This method is called when performance is disabled.\n   * @param {string} mathml - MathML code.\n   * @param {Object[]} data - data object containing service parameters.\n   * @returns {string} the showimage path.\n   */\n  static createImageSrc(mathml, data) {\n    // Full base64 method (edit & save).\n    if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'default') {\n      data.base64 = true;\n    }\n\n    let result = ServiceProvider.getService('createimage', data);\n\n    if (result.indexOf('@BASE@') !== -1) {\n      // Replacing '@BASE@' with the base URL of createimage.\n      const baseParts = ServiceProvider.getServicePath('createimage').split('/');\n      baseParts.pop();\n      result = result.split('@BASE@').join(baseParts.join('/'));\n    }\n\n    return result;\n  }\n\n  /**\n   * Parses initial HTML code. If the HTML contains data generated by WIRIS,\n   * this data would be converted as following:\n   * <pre>\n   * MathML code: Image containing the corresponding MathML formulas.\n   * MathML code with LaTeX annotation : LaTeX string.\n   * </pre>\n   * @param {string} code - HTML code containing MathML data.\n   * @param {string} language - language to create image alt text.\n   * @returns {string} HTML code with the original MathML converted into LaTeX and images.\n   */\n  static initParse(code, language) {\n    /* Note: The code inside this function has been inverted.\n    If you invert again the code then you cannot use correctly LaTeX\n    in Moodle.\n    */\n    code = Parser.initParseSaveMode(code, language);\n    return Parser.initParseEditMode(code);\n  }\n\n  /**\n   * Parses initial HTML code depending on the save mode. Transforms all MathML\n   * occurrences for it's correspondent image or LaTeX.\n   * @param {string} code - HTML code to be parsed\n   * @param {string} language - language to create image alt text.\n   * @returns {string} HTML code parsed.\n   */\n  static initParseSaveMode(code, language) {\n    if (Configuration.get('saveMode')) {\n      // Converting XML to tags.\n      code = Latex.parseMathmlToLatex(code, Constants.safeXmlCharacters);\n      code = Latex.parseMathmlToLatex(code, Constants.xmlCharacters);\n      code = Parser.parseMathmlToImg(code, Constants.safeXmlCharacters, language);\n      code = Parser.parseMathmlToImg(code, Constants.xmlCharacters, language);\n      if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'image') {\n        code = Parser.codeImgTransform(code, 'base642showimage');\n      }\n    }\n    return code;\n  }\n\n  /**\n   * Parses initial HTML code depending on the edit mode.\n   * If 'latex' parseMode is enabled all MathML containing an annotation with encoding='LaTeX' will\n   * be converted into a LaTeX string instead of an image.\n   * @param {string} code - HTML code containing MathML.\n   * @returns {string} parsed HTML code.\n   */\n  static initParseEditMode(code) {\n    if (Configuration.get('parseModes').indexOf('latex') !== -1) {\n      const imgList = Util.getElementsByNameFromString(code, 'img', true);\n      const token = 'encoding=\"LaTeX\">';\n      // While replacing images with latex, the indexes of the found images changes\n      // respecting the original code, so this carry is needed.\n      let carry = 0;\n\n      for (let i = 0; i < imgList.length; i += 1) {\n        const imgCode = code.substring(imgList[i].start + carry, imgList[i].end + carry);\n\n        if (imgCode.indexOf(` class=\"${Configuration.get('imageClassName')}\"`) !== -1) {\n          let mathmlStartToken = ` ${Configuration.get('imageMathmlAttribute')}=\"`;\n          let mathmlStart = imgCode.indexOf(mathmlStartToken);\n\n          if (mathmlStart === -1) {\n            mathmlStartToken = ' alt=\"';\n            mathmlStart = imgCode.indexOf(mathmlStartToken);\n          }\n\n          if (mathmlStart !== -1) {\n            mathmlStart += mathmlStartToken.length;\n            const mathmlEnd = imgCode.indexOf('\"', mathmlStart);\n            const mathml = MathML.safeXmlDecode(imgCode.substring(mathmlStart, mathmlEnd));\n            let latexStartPosition = mathml.indexOf(token);\n\n            if (latexStartPosition !== -1) {\n              latexStartPosition += token.length;\n              const latexEndPosition = mathml.indexOf('</annotation>', latexStartPosition);\n              const latex = mathml.substring(latexStartPosition, latexEndPosition);\n\n              const replaceText = `$$${Util.htmlEntitiesDecode(latex)}$$`;\n              const start = code.substring(0, imgList[i].start + carry);\n              const end = code.substring(imgList[i].end + carry);\n              code = start + replaceText + end;\n              carry += replaceText.length - (imgList[i].end - imgList[i].start);\n            }\n          }\n        }\n      }\n    }\n\n    return code;\n  }\n\n  /**\n   * Parses end HTML code. The end HTML code is HTML code with embedded images\n   * or LaTeX formulas created with MathType. <br>\n   * By default this method converts the formula images and LaTeX strings in MathML. <br>\n   * If image mode is enabled the images will not be converted into MathML. For further information see {@link http://www.wiris.com/plugins/docs/full-mathml-mode}.\n   * @param {string} code - HTML to be parsed\n   * @returns {string} the HTML code parsed.\n   */\n  static endParse(code) {\n    // Transform LaTeX ocurrences to MathML elements.\n    const codeEndParsedEditMode = Parser.endParseEditMode(code);\n    // Transform img elements to MathML elements.\n    const codeEndParseSaveMode = Parser.endParseSaveMode(codeEndParsedEditMode);\n    return codeEndParseSaveMode;\n  }\n\n  /**\n   * Parses end HTML code depending on the edit mode.\n   * - LaTeX is an enabled parse mode, all LaTeX occurrences will be converted into MathML.\n   * @param {string} code - HTML code to be parsed.\n   * @returns {string} HTML code parsed.\n   */\n  static endParseEditMode(code) {\n    // Converting LaTeX to images.\n    if (Configuration.get('parseModes').indexOf('latex') !== -1) {\n      let output = '';\n      let endPosition = 0;\n      let startPosition = code.indexOf('$$');\n      while (startPosition !== -1) {\n        output += code.substring(endPosition, startPosition);\n        endPosition = code.indexOf('$$', startPosition + 2);\n\n        if (endPosition !== -1) {\n          // Before, it was a condition here to execute the next codelines\n          // 'latex.indexOf('<') == -1'.\n          // We don't know why it was used, but seems to have a conflict with\n          // latex formulas that contains '<'.\n          const latex = code.substring(startPosition + 2, endPosition);\n          const decodedLatex = Util.htmlEntitiesDecode(latex);\n          let mathml = Latex.getMathMLFromLatex(decodedLatex, true);\n          if (!Configuration.get('saveHandTraces')) {\n            // Remove hand traces.\n            mathml = MathML.removeAnnotation(mathml, 'application/json');\n          }\n          output += mathml;\n          endPosition += 2;\n        } else {\n          output += '$$';\n          endPosition = startPosition + 2;\n        }\n\n        startPosition = code.indexOf('$$', endPosition);\n      }\n\n      output += code.substring(endPosition, code.length);\n      code = output;\n    }\n\n    return code;\n  }\n\n  /**\n   * Parses end HTML code depending on the save mode. Converts all\n   * images into the element determined by the save mode:\n   * - xml: Parses images formulas into MathML.\n   * - safeXml: Parses images formulas into safeMAthML\n   * - base64: Parses images into base64 images.\n   * - image: Parse images into images (no parsing)\n   * @param {string} code - HTML code to be parsed\n   * @returns {string} HTML code parsed.\n   */\n  static endParseSaveMode(code) {\n    if (Configuration.get('saveMode')) {\n      if (Configuration.get('saveMode') === 'safeXml') {\n        code = Parser.codeImgTransform(code, 'img2mathml');\n      } else if (Configuration.get('saveMode') === 'xml') {\n        code = Parser.codeImgTransform(code, 'img2mathml');\n      } else if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'image') {\n        code = Parser.codeImgTransform(code, 'img264');\n      }\n    }\n\n    return code;\n  }\n\n  /**\n   * Returns the result to call showimage service with the formula md5 as parameter.\n   *  The result could be:\n   * - {'status' : warning'} : The image associated to the MathML md5 is not in cache.\n   * - {'status' : 'ok' ...} : The image associated to the MathML md5 is in cache.\n   * @param {Object[]} data - object containing showimage service parameters.\n   * @param {string} language - string containing the language of the formula.\n   * @returns {Object} JSON object containing showimage response.\n   */\n  static createShowImageSrc(data, language) {\n    const dataMd5 = [];\n    const renderParams = ['mml', 'color', 'centerbaseline', 'zoom', 'dpi', 'fontSize', 'fontFamily', 'defaultStretchy', 'backgroundColor', 'format'];\n    renderParams.forEach((key) => {\n      const param = renderParams[key];\n      if (typeof data[param] !== 'undefined') {\n        dataMd5[param] = data[param];\n      }\n    });\n    // Data variables to get.\n    const dataObject = {};\n    Object.keys(data).forEach((key) => {\n      // We don't need mathml in this request we try to get cached.\n      // Only need the formula md5 calculated before.\n      if (key !== 'mml') {\n        dataObject[key] = data[key];\n      }\n    });\n\n    dataObject.formula = com.wiris.js.JsPluginTools.md5encode(Util.propertiesToString(dataMd5));\n    dataObject.lang = (typeof language === 'undefined') ? 'en' : language;\n    dataObject.version = Configuration.get('version');\n\n    const result = ServiceProvider.getService('showimage', Util.httpBuildQuery(dataObject), true);\n    return result;\n  }\n\n  /**\n   * Transform html img tags inside a html code to mathml, base64 img tags (i.e with base64 on src)\n   * or showimage img tags (i.e with showimage.php on src)\n   * @param  {string} code - HTML code\n   * @param  {string} mode - base642showimage or img2mathml or img264 transform.\n   * @returns {string} html - code transformed.\n   */\n  static codeImgTransform(code, mode) {\n    let output = '';\n    let endPosition = 0;\n    const pattern = /<img/gi;\n    const patternLength = pattern.source.length;\n\n    while (pattern.test(code)) {\n      const startPosition = pattern.lastIndex - patternLength;\n      output += code.substring(endPosition, startPosition);\n\n      let i = startPosition + 1;\n\n      while (i < code.length && endPosition <= startPosition) {\n        const character = code.charAt(i);\n\n        if (character === '\"' || character === '\\'') {\n          const characterNextPosition = code.indexOf(character, i + 1);\n\n          if (characterNextPosition === -1) {\n            i = code.length; // End while.\n          } else {\n            i = characterNextPosition;\n          }\n        } else if (character === '>') {\n          endPosition = i + 1;\n        }\n\n        i += 1;\n      }\n\n      if (endPosition < startPosition) { // The img tag is stripped.\n        output += code.substring(startPosition, code.length);\n        return output;\n      }\n      let imgCode = code.substring(startPosition, endPosition);\n      const imgObject = Util.createObject(imgCode);\n      let xmlCode = imgObject.getAttribute(Configuration.get('imageMathmlAttribute'));\n      let convertToXml;\n      let convertToSafeXml;\n\n      if (mode === 'base642showimage') {\n        if (xmlCode == null) {\n          xmlCode = imgObject.getAttribute('alt');\n        }\n        xmlCode = MathML.safeXmlDecode(xmlCode);\n        imgCode = Parser.mathmlToImgObject(document, xmlCode, null, null);\n        output += Util.createObjectCode(imgCode);\n      } else if (mode === 'img2mathml') {\n        if (Configuration.get('saveMode')) {\n          if (Configuration.get('saveMode') === 'safeXml') {\n            convertToXml = true;\n            convertToSafeXml = true;\n          } else if (Configuration.get('saveMode') === 'xml') {\n            convertToXml = true;\n            convertToSafeXml = false;\n          }\n        }\n        output += Util.getWIRISImageOutput(imgCode, convertToXml, convertToSafeXml);\n      } else if (mode === 'img264') {\n        if (xmlCode === null) {\n          xmlCode = imgObject.getAttribute('alt');\n        }\n        xmlCode = MathML.safeXmlDecode(xmlCode);\n\n        const properties = {};\n        properties.base64 = 'true';\n        imgCode = Parser.mathmlToImgObject(document, xmlCode, properties, null);\n        // Metrics.\n        Image.setImgSize(imgCode, imgCode.src, true);\n        output += Util.createObjectCode(imgCode);\n      }\n    }\n    output += code.substring(endPosition, code.length);\n    return output;\n  }\n\n  /**\n   * Converts all occurrences of MathML to the corresponding image.\n   * @param {string} content - string with valid MathML code.\n   * The MathML code doesn't contain semantics.\n   * @param {Constants} characters - Constant object containing xmlCharacters\n   * or safeXmlCharacters relation.\n   * @param {string} language - a valid language code\n   * in order to generate formula accessibility.\n   * @returns {string} The input string with all the MathML\n   * occurrences replaced by the corresponding image.\n   */\n  static parseMathmlToImg(content, characters, language) {\n    let output = '';\n    const mathTagBegin = `${characters.tagOpener}math`;\n    const mathTagEnd = `${characters.tagOpener}/math${characters.tagCloser}`;\n    let start = content.indexOf(mathTagBegin);\n    let end = 0;\n\n    while (start !== -1) {\n      output += content.substring(end, start);\n      // Avoid WIRIS images to be parsed.\n      const imageMathmlAtrribute = content.indexOf(Configuration.get('imageMathmlAttribute'));\n      end = content.indexOf(mathTagEnd, start);\n\n      if (end === -1) {\n        end = content.length - 1;\n      } else if (imageMathmlAtrribute !== -1) {\n        // First close tag of img attribute\n        // If a mathmlAttribute exists should be inside a img tag.\n        end += content.indexOf('/>', start);\n      } else {\n        end += mathTagEnd.length;\n      }\n\n      if (!MathML.isMathmlInAttribute(content, start) && imageMathmlAtrribute === -1) {\n        let mathml = content.substring(start, end);\n        mathml = (characters.id === Constants.safeXmlCharacters.id)\n          ? MathML.safeXmlDecode(mathml)\n          : MathML.mathMLEntities(mathml);\n        output += Util.createObjectCode(Parser.mathmlToImgObject(document, mathml, null, language));\n      } else {\n        output += content.substring(start, end);\n      }\n\n      start = content.indexOf(mathTagBegin, end);\n    }\n\n    output += content.substring(end, content.length);\n    return output;\n  }\n}\n\n// Mutation observers to avoid wiris image formulas class be removed.\nif (typeof MutationObserver !== 'undefined') {\n  const mutationObserver = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      if (mutation.oldValue === Configuration.get('imageClassName')\n        && mutation.attributeName === 'class'\n        && mutation.target.className.indexOf(Configuration.get('imageClassName')) === -1) {\n        mutation.target.className = Configuration.get('imageClassName');\n      }\n    });\n  });\n\n  Parser.observer = Object.create(mutationObserver);\n  Parser.observer.Config = { attributes: true, attributeOldValue: true };\n  // We use own default config.\n  Parser.observer.observe = function name(target) {\n    Object.getPrototypeOf(this).observe(target, this.Config);\n  };\n}\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-extra-semi */\n\n// The rules above are disabled because we are implementing\n// an external interface.\n\n\nexport default class EditorListener {\n  /**\n   * @classdesc\n   * Determines if the content of the\n   * MathType Editor has changes.\n   * @implements {EditorListeners}\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Indicates if the content of the editor has changed.\n     * @type {Boolean}\n     */\n    this.isContentChanged = false;\n\n    /**\n     * Indicates if the listener should be waiting for changes in the editor.\n     * @type {Boolean}\n     */\n    this.waitingForChanges = false;\n  }\n\n  /**\n   * Sets {@link EditorListener.isContentChanged} property.\n   * @param {Boolean} value - The new vlue.\n   */\n  setIsContentChanged(value) {\n    this.isContentChanged = value;\n  }\n\n  /**\n   * Returns true if the content of the editor has been changed, false otherwise.\n   * @return {Boolean}\n   */\n  getIsContentChanged() {\n    return this.isContentChanged;\n  };\n\n  /**\n   * Determines if the EditorListener should wait for any changes.\n   * @param {Boolean} value - True if the editor should wait for changes, false otherwise.\n   */\n  setWaitingForChanges(value) {\n    this.waitingForChanges = value;\n  }\n\n  /**\n   * EditorListener method to overwrite.\n   * @type {JsEditor}\n   * @ignore\n   */\n  caretPositionChanged(_editor) { };\n\n  /**\n   * EditorListener method to overwrite\n   * @type {JsEditor}\n   * @ignore\n   */\n  clipboardChanged(_editor) { };\n\n  /**\n   * Determines if the content of an editor has been changed.\n   * @param {JsEditor} editor - editor object.\n   */\n  contentChanged(_editor) {\n    if (this.waitingForChanges === true && this.isContentChanged === false) {\n      this.isContentChanged = true;\n    }\n  }\n\n  /**\n   * EditorListener method to overwrite\n   * @param {JsEditor} editor - The editor instance.\n   */\n  styleChanged(_editor) {\n  }\n\n  /**\n   * EditorListener method to overwrite\n   * @param {JsEditor} - The editor instance.\n   */\n  transformationReceived(_editor) {\n  }\n}\n","import Configuration from './configuration';\nimport EditorListener from './editorlistener';\nimport Listeners from './listeners';\nimport MathML from './mathml';\nimport Util from './util';\n\nexport default class ContentManager {\n  /**\n   * @classdesc\n   * This class represents a modal dialog, managing the following:\n   * - The insertion of content into the current instance of the {@link ModalDialog} class.\n   * - The actions to be done once the modal object has been submitted\n   *   (submitAction} method).\n   * - The update of the content when the {@link ModalDialog} class is also updated,\n   *   for example when ModalDialog is re-opened.\n   * - The communication between the {@link ModalDialog} class and itself, if the content\n   *   has been changed (hasChanges} method).\n   * @constructs\n   * @param {Object} contentManagerAttributes - Object containing all attributes needed to\n   * create a new instance.\n   */\n  constructor(contentManagerAttributes) {\n    /**\n     * An object containing MathType editor parameters. See\n     * http://docs.wiris.com/en/mathtype/mathtype_web/sdk-api/parameters for further information.\n     * @type {Object}\n     */\n    this.editorAttributes = {};\n    if ('editorAttributes' in contentManagerAttributes) {\n      this.editorAttributes = contentManagerAttributes.editorAttributes;\n    } else {\n      throw new Error('ContentManager constructor error: editorAttributes property missed.');\n    }\n\n    /**\n     * CustomEditors instance. Contains the custom editors.\n     * @type {CustomEditors}\n     */\n    this.customEditors = null;\n    if ('customEditors' in contentManagerAttributes) {\n      this.customEditors = contentManagerAttributes.customEditors;\n    }\n\n    /**\n* Environment properties. This object contains data about the integration platform.\n* @type {Object}\n* @property {String} editor - Editor name. Usually the HTML editor.\n* @property {String} mode - Save mode. Xml by default.\n* @property {String} version - Plugin version.\n  */\n    this.environment = {};\n    if ('environment' in contentManagerAttributes) {\n      this.environment = contentManagerAttributes.environment;\n    } else {\n      throw new Error('ContentManager constructor error: environment property missed');\n    }\n\n    /**\n      * ContentManager language.\n      * @type {String}\n      */\n    this.language = '';\n    if ('language' in contentManagerAttributes) {\n      this.language = contentManagerAttributes.language;\n    } else {\n      throw new Error('ContentManager constructor error: language property missed');\n    }\n\n    /**\n    * {@link EditorListener} instance. Manages the changes inside the editor.\n    * @type {EditorListener}\n    */\n    this.editorListener = new EditorListener();\n\n    /**\n     * MathType editor instance.\n     * @type {JsEditor}\n     */\n    this.editor = null;\n\n    /**\n     * Navigator user agent.\n     * @type {String}\n     */\n    this.ua = navigator.userAgent.toLowerCase();\n\n    /**\n     * Mobile device properties object\n     * @type {DeviceProperties}\n     */\n    this.deviceProperties = {};\n    this.deviceProperties.isAndroid = this.ua.indexOf('android') > -1;\n    this.deviceProperties.isIOS = ((this.ua.indexOf('ipad') > -1) || (this.ua.indexOf('iphone') > -1));\n\n    /**\n     * Custom editor toolbar.\n     * @type {String}\n     */\n    this.toolbar = null;\n\n    /**\n     * Instance of the {@link ModalDialog} class associated with the current\n     * {@link ContentManager} instance.\n     * @type {ModalDialog}\n     */\n    this.modalDialogInstance = null;\n\n    /**\n     * ContentManager listeners.\n     * @type {Listeners}\n     */\n    this.listeners = new Listeners();\n\n    /**\n     * MathML associated to the ContentManager instance.\n     * @type {String}\n     */\n    this.mathML = null;\n\n    /**\n     * Indicates if the edited element is a new one or not.\n     * @type {Boolean}\n     */\n    this.isNewElement = true;\n\n    /**\n     * {@link IntegrationModel} instance. Needed to call wrapper methods.\n     * @type {IntegrationModel}\n     */\n    this.integrationModel = null;\n\n    /**\n     * Indicates if the editor is loaded.\n     * @type {Boolean}\n     */\n    this.isEditorLoaded = false;\n  }\n\n  /**\n   * Adds a new listener to the current {@link ContentManager} instance.\n   * @param {Object} listener - The listener to be added.\n   */\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Sets an instance of {@link IntegrationModel} class to the current {@link ContentManager}\n   * instance.\n   * @param {IntegrationModel} integrationModel - The {@link IntegrationModel} instance.\n   */\n  setIntegrationModel(integrationModel) {\n    this.integrationModel = integrationModel;\n  }\n\n  /**\n   * Sets the {@link ModalDialog} instance into the current {@link ContentManager} instance.\n   * @param {ModalDialog} modalDialogInstance - The {@link ModalDialog} instance\n   */\n  setModalDialogInstance(modalDialogInstance) {\n    this.modalDialogInstance = modalDialogInstance;\n  }\n\n  /**\n   * Inserts the content into the current {@link ModalDialog} instance updating\n   * the title and inserting the JavaScript editor.\n   */\n  insert() {\n    // Before insert the editor we update the modal object title to avoid weird render display.\n    this.updateTitle(this.modalDialogInstance);\n    this.insertEditor(this.modalDialogInstance);\n  }\n\n  /**\n   * Inserts MathType editor into the {@link ModalDialog.contentContainer}. It waits until\n   * editor's JavaScript is loaded.\n   */\n  insertEditor() {\n    // To know if editor JavaScript is loaded we need to wait until\n    // window.com.wiris.jsEditor.JsEditor.newInstance is ready.\n    if (window.com && window.com.wiris && window.com.wiris.jsEditor\n        && window.com.wiris.jsEditor.JsEditor && window.com.wiris.jsEditor.JsEditor.newInstance) {\n      this.editor = window.com.wiris.jsEditor.JsEditor.newInstance(this.editorAttributes);\n      this.editor.insertInto(this.modalDialogInstance.contentContainer);\n      this.editor.focus();\n      if (this.modalDialogInstance.rtl) {\n        this.editor.action('rtl');\n      }\n      // Setting div in rtl in case of it's activated.\n      if (this.editor.getEditorModel().isRTL()) {\n        this.editor.element.style.direction = 'rtl';\n      }\n\n      // Editor listener: this object manages the changes logic of editor.\n      this.editor.getEditorModel().addEditorListener(this.editorListener);\n\n      // iOS events.\n      if (this.modalDialogInstance.deviceProperties.isIOS) {\n        setTimeout(function hide() { this.modalDialogInstance.hideKeyboard(); }, 400);\n        const formulaDisplayDiv = document.getElementsByClassName('wrs_formulaDisplay')[0];\n        Util.addEvent(formulaDisplayDiv, 'focus', this.modalDialogInstance.handleOpenedIosSoftkeyboard);\n        Util.addEvent(formulaDisplayDiv, 'blur', this.modalDialogInstance.handleClosedIosSoftkeyboard);\n      }\n      // Fire onLoad event. Necessary to set the MathML into the editor\n      // after is loaded.\n      this.listeners.fire('onLoad', {});\n      this.isEditorLoaded = true;\n    } else {\n      setTimeout(ContentManager.prototype.insertEditor.bind(this), 100);\n    }\n  }\n\n  /**\n   * Initializes the current class by loading MathType script.\n   */\n  init() {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    let editorUrl = Configuration.get('editorUrl');\n    // We create an object url for parse url string and work more efficiently.\n    const urlObject = document.createElement('a');\n    urlObject.href = editorUrl;\n\n    // Change to https if necessary.\n    if (window.location.href.indexOf('https://') === 0) {\n      // It check if browser is https and configuration is http.\n      // If this is so, we will replace protocol.\n      if (urlObject.protocol === 'http:') {\n        urlObject.protocol = 'https:';\n      }\n    }\n\n    // Check protocol and remove port if it's standard.\n    if (urlObject.port === '80' || urlObject.port === '443') {\n      editorUrl = `${urlObject.protocol}//${urlObject.hostname}/${urlObject.pathname}`;\n    } else {\n      editorUrl = `${urlObject.protocol}//${urlObject.hostname}:${urlObject.port}/${urlObject.pathname}`;\n    }\n\n    // Editor stats. Use environment property to set it.\n    const stats = {};\n    if ('editor' in this.environment) {\n      stats.editor = this.environment.editor;\n    } else {\n      stats.editor = 'unknown';\n    }\n\n    if ('mode' in this.environment) {\n      stats.mode = this.environment.mode;\n    } else {\n      stats.mode = Configuration.get('saveMode');\n    }\n\n    if ('version' in this.environment) {\n      stats.version = this.environment.version;\n    } else {\n      stats.version = Configuration.get('version');\n    }\n\n    // Load editor URL. We add stats as GET params.\n    script.src = `${editorUrl}?lang=${this.language}&stats-editor=${stats.editor}&stats-mode=${stats.mode}&stats-version=${stats.version}`;\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  }\n\n  /**\n  * Sets the {@link ContentManager.editor} initial content.\n  */\n  setInitialContent() {\n    if (!this.isNewElement) {\n      this.setMathML(this.mathML);\n    }\n  }\n\n  /**\n   * Sets a MathML into {@link ContentManager.editor} instance.\n   * @param {String} mathml - MathML string.\n   * @param {Boolean} focusDisabled - If true editor don't get focus after the MathML is set.\n   * False by default.\n   */\n  setMathML(mathml, focusDisabled) {\n    // By default focus is enabled.\n    if (typeof focusDisabled === 'undefined') {\n      focusDisabled = false;\n    }\n    // Using setMathML method is not a change produced by the user but for the API\n    // so we set to false the contentChange property of editorListener.\n    this.editor.setMathMLWithCallback(mathml, () => {\n      this.editorListener.setWaitingForChanges(true);\n    });\n\n    // We need to wait a little until the callback finish.\n    setTimeout(() => {\n      this.editorListener.setIsContentChanged(false);\n    }, 500);\n\n    // In some scenarios - like closing modal object - editor mustn't be focused.\n    if (!focusDisabled) {\n      this.onFocus();\n    }\n  }\n\n  /**\n   * Sets the focus to the current instance of {@link ContentManager.editor}. Triggered by\n   * {@link ModalDialog.focus}.\n   */\n  onFocus() {\n    if (typeof this.editor !== 'undefined' && this.editor != null) {\n      this.editor.focus();\n    }\n  }\n\n  /**\n   * Updates the edition area by calling {@link IntegrationModel.updateFormula}.\n   * Triggered by {@link ModalDialog.submitAction}.\n   */\n  submitAction() {\n    if (!this.editor.isFormulaEmpty()) {\n      let mathML = this.editor.getMathMLWithSemantics();\n      // Add class for custom editors.\n      if (this.customEditors.getActiveEditor() !== null) {\n        const { toolbar } = this.customEditors.getActiveEditor();\n        mathML = MathML.addCustomEditorClassAttribute(mathML, toolbar);\n      } else {\n        // We need - if exists - the editor name from MathML\n        // class attribute.\n        Object.keys(this.customEditors.editors).forEach((key) => {\n          mathML = MathML.removeCustomEditorClassAttribute(mathML, key);\n        });\n      }\n      const mathmlEntitiesEncoded = MathML.mathMLEntities(mathML);\n      this.integrationModel.updateFormula(mathmlEntitiesEncoded);\n    } else {\n      this.integrationModel.updateFormula(null);\n    }\n\n    this.customEditors.disable();\n    this.integrationModel.notifyWindowClosed();\n\n    // Set disabled focus to prevent lost focus.\n    this.setEmptyMathML();\n    this.customEditors.disable();\n  }\n\n  /**\n   * Sets an empty MathML as {@link ContentManager.editor} content.\n   */\n  setEmptyMathML() {\n    // As second argument we pass.\n    if (this.deviceProperties.isAndroid || this.deviceProperties.isIOS) {\n      // We need to set a empty annotation in order to maintain editor in Hand mode.\n      // Adding dir rtl in case of it's activated.\n      if (this.editor.getEditorModel().isRTL()) {\n        this.setMathML('<math dir=\"rtl\"><semantics><annotation encoding=\"application/json\">[]</annotation></semantics></math>', true);\n      } else {\n        this.setMathML('<math><semantics><annotation encoding=\"application/json\">[]</annotation></semantics></math>', true);\n      }\n    } else if (this.editor.getEditorModel().isRTL()) {\n      this.setMathML('<math dir=\"rtl\"/>', true);\n    } else {\n      this.setMathML('<math/>', true);\n    }\n  }\n\n  /**\n   * Open event. Triggered by {@link ModalDialog.open}. Does the following:\n   * - Updates the {@link ContentManager.editor} content\n   *   (with an empty MathML or an existing formula),\n   * - Updates the {@link ContentManager.editor} toolbar.\n   * - Recovers the the focus.\n   */\n  onOpen() {\n    if (this.isNewElement) {\n      this.setEmptyMathML();\n    } else {\n      this.setMathML(this.mathML);\n    }\n    this.updateToolbar();\n    this.onFocus();\n  }\n\n  /**\n   * Sets the correct toolbar depending if exist other custom toolbars\n   * at the same time (e.g: Chemistry).\n   */\n  updateToolbar() {\n    this.updateTitle(this.modalDialogInstance);\n    const customEditor = this.customEditors.getActiveEditor();\n    if (customEditor) {\n      const toolbar = customEditor.toolbar\n        ? customEditor.toolbar\n        : _wrs_int_wirisProperties.toolbar;\n\n      if (this.toolbar == null || this.toolbar !== toolbar) {\n        this.setToolbar(toolbar);\n      }\n    } else {\n      const toolbar = this.getToolbar();\n      if (this.toolbar == null || this.toolbar !== toolbar) {\n        this.setToolbar(toolbar);\n        this.customEditors.disable();\n      }\n    }\n  }\n\n  /**\n   * Updates the current {@link ModalDialog.title}. If a {@link CustomEditors} is enabled\n   * sets the custom editor title. Otherwise sets the default title.\n   */\n  updateTitle() {\n    const customEditor = this.customEditors.getActiveEditor();\n    if (customEditor) {\n      this.modalDialogInstance.setTitle(customEditor.title);\n    } else {\n      this.modalDialogInstance.setTitle('MathType');\n    }\n  }\n\n  /**\n   * Returns the editor toolbar, depending on the configuration local or server side.\n   * @returns {String} - Toolbar identifier.\n   */\n  getToolbar() {\n    let toolbar = 'general';\n    if ('toolbar' in this.editorAttributes) {\n      ({ toolbar } = this.editorAttributes);\n    }\n    // TODO: Change global integration variable for integration custom toolbar.\n    if (toolbar === 'general') {\n      // eslint-disable-next-line camelcase\n      toolbar = (typeof _wrs_int_wirisProperties === 'undefined' || typeof _wrs_int_wirisProperties.toolbar === 'undefined') ? 'general' : _wrs_int_wirisProperties.toolbar;\n    }\n\n    return toolbar;\n  }\n\n  /**\n   * Sets the current {@link ContentManager.editor} instance toolbar.\n   * @param {String} toolbar - The toolbar name.\n   */\n  setToolbar(toolbar) {\n    this.toolbar = toolbar;\n    this.editor.setParams({ toolbar: this.toolbar });\n  }\n\n  /**\n   * Returns true if the content of the editor has been changed. The logic of the changes\n   * is delegated to {@link EditorListener} class.\n   * @returns {Boolean} True if the editor content has been changed. False otherwise.\n   */\n  hasChanges() {\n    return (!this.editor.isFormulaEmpty() && this.editorListener.getIsContentChanged());\n  }\n\n  /**\n   * Handle keyboard events detected in modal when elements of this class intervene.\n   * @param {KeyboardEvent} keyboardEvent - The keyboard event.\n   */\n  onKeyDown(keyboardEvent) {\n    if (keyboardEvent.key !== undefined && keyboardEvent.repeat === false) {\n      if (keyboardEvent.key === 'Escape' || keyboardEvent.key === 'Esc') { // Code to detect Esc event.\n        // There should be only one element with class name 'wrs_pressed' at the same time.\n        let list = document.getElementsByClassName('wrs_expandButton wrs_expandButtonFor3RowsLayout wrs_pressed');\n        if (list.length === 0) {\n          list = document.getElementsByClassName('wrs_expandButton wrs_expandButtonFor2RowsLayout wrs_pressed');\n          if (list.length === 0) {\n            list = document.getElementsByClassName('wrs_select wrs_pressed');\n            if (list.length === 0) {\n              this.modalDialogInstance.cancelAction();\n              keyboardEvent.stopPropagation();\n              keyboardEvent.preventDefault();\n            }\n          }\n        }\n      } else if (keyboardEvent.shiftKey && keyboardEvent.key === 'Tab') { // Code to detect shift Tab event.\n        if (document.activeElement === this.modalDialogInstance.submitButton) {\n          // Focus is on OK button.\n          this.editor.focus();\n          keyboardEvent.stopPropagation();\n          keyboardEvent.preventDefault();\n        } else {\n          const element = document.querySelector('[title=\"Manual\"]');\n          if (document.activeElement === element) {\n            // Focus is on editor help.\n            this.modalDialogInstance.cancelButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          }\n        }\n      } else if (keyboardEvent.key === 'Tab') { // Code to detect Tab event.\n        if (document.activeElement === this.modalDialogInstance.cancelButton) {\n          // Focus is on cancel button.\n          const element = document.querySelector('[title=\"Manual\"]');\n          element.focus();\n          keyboardEvent.stopPropagation();\n          keyboardEvent.preventDefault();\n        } else {\n          // There should be only one element with class name 'wrs_formulaDisplay'.\n          const element = document.getElementsByClassName('wrs_formulaDisplay')[0];\n          if (element.getAttribute('class') === 'wrs_formulaDisplay wrs_focused') {\n            // Focus is on formuladisplay.\n            this.modalDialogInstance.submitButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          }\n        }\n      }\n    }\n  }\n}\n","/**\n * A custom editor is MathType editor with a different\n * @typedef {Object} CustomEditor\n * @property {String} CustomEditor.name - Custom editor name.\n * @property {String} CustomEditor.toolbar - Custom editor toolbar.\n * @property {String} CustomEditor.icon - Custom editor icon.\n * @property {String} CustomEditor.confVariable - Configuration property to manage\n * the availability of the custom editor.\n * @property {String} CustomEditor.title - Custom editor modal dialog title.\n * @property {String} CustomEditor.tooltip - Custom editor icon tooltip.\n */\n\nexport default class CustomEditors {\n  /**\n   * @classdesc\n   * This class represents the MathType custom editors manager.\n   * A custom editor is MathType editor with a custom  toolbar.\n   * This class associates a {@link CustomEditor} to:\n   * - It's own formulas\n   * - A custom toolbar\n   * - An icon to open it from a HTML editor.\n   * - A tooltip for the icon.\n   * - A global variable to enable or disable it globally.\n   * @constructs\n   */\n  constructor() {\n    /**\n     * The custom editors.\n     * @type {Array.<CustomEditor>}\n     */\n\n    this.editors = [];\n    /**\n     * The active editor name.\n     * @type {String}\n     */\n    this.activeEditor = 'default';\n  }\n\n  /**\n   * Adds a {@link CustomEditor} to editors array.\n   * @param {String} editorName - The editor name.\n   * @param {CustomEditor} editorParams - The custom editor parameters.\n   */\n  addEditor(editorName, editorParams) {\n    const customEditor = {};\n    customEditor.name = editorParams.name;\n    customEditor.toolbar = editorParams.toolbar;\n    customEditor.icon = editorParams.icon;\n    customEditor.confVariable = editorParams.confVariable;\n    customEditor.title = editorParams.title;\n    customEditor.tooltip = editorParams.tooltip;\n    this.editors[editorName] = customEditor;\n  }\n\n  /**\n   * Enables a {@link CustomEditor}.\n   * @param {String} customEditorName - The custom editor name.\n   */\n  enable(customEditorName) {\n    this.activeEditor = customEditorName;\n  }\n\n  /**\n   * Disables a {@link CustomEditor}.\n   */\n  disable() {\n    this.activeEditor = 'default';\n  }\n\n  /**\n   * Returns the active editor.\n   * @return {CustomEditor} - A {@link CustomEditor} if a custom editor is enabled. Null otherwise.\n   */\n  getActiveEditor() {\n    if (this.activeEditor !== 'default') {\n      return this.editors[this.activeEditor];\n    }\n    return null;\n  }\n}\n","/**\n * Represents the configuration properties generated from the frontend (JavaScript variables).\n * @type {Object}\n * @property {string} imageClassName - Default MathType formula image class.\n * @property {string} imageClassName - Default MathType CAS image class.\n * @ignore\n */\nconst jsProperties = {\n  imageCustomEditorName: 'data-custom-editor',\n  imageClassName: 'Wirisformula',\n  CASClassName: 'Wiriscas',\n};\nexport default jsProperties;\n","export default class Event {\n  /**\n   * @classdesc\n   * This class represents a custom event. Events should be fired by the {@link Listener} class.\n   *\n   * ```js\n   *  let customEvent = new Event();\n   *  customEvent.properties = {};\n   *\n   *  let listeners = new Listeners();\n   *  listeners.newListener(eventName, callback);\n   *\n   *  listeners.fire(eventName, customEvent) *\n   * ```\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Indicates if the event should be cancelled.\n     * @type {Boolean}\n     */\n\n    this.cancelled = false;\n    /**\n     * Indicates if the event should be prevented.\n     * @type {Boolean}\n     */\n    this.defaultPrevented = false;\n  }\n\n  /**\n   * Cancels the event.\n   */\n  cancel() {\n    this.cancelled = true;\n  }\n\n  /**\n   * Prevents the default action.\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n","/**\n\n */\nexport default class PopUpMessage {\n  /**\n   * @classdesc\n   * This class represents a dialog message overlaying a DOM element in order to\n   * accept / cancel discard changes. The dialog can be closed i.e the overlay disappears\n   * o canceled. In this last case a callback function should be called.\n   * @constructs\n   * @param {Object} popupMessageAttributes - Object containing popup properties.\n   * @param {HTMLElement} popupMessageAttributes.overlayElement - Element to overlay.\n   * @param {Object} popupMessageAttributes.callbacks - Contains callback\n   * methods for close and cancel actions.\n   * @param {Object} popupMessageAttributes.strings - Contains all the strings needed.\n   */\n  constructor(popupMessageAttributes) {\n    /**\n     * Element to be overlaid when the popup appears.\n     */\n    this.overlayElement = popupMessageAttributes.overlayElement;\n\n    this.callbacks = popupMessageAttributes.callbacks;\n\n    /**\n     * HTMLElement element to wrap all HTML elements inside the popupMessage.\n     */\n    this.overlayWrapper = this.overlayElement.appendChild(document.createElement('div'));\n    this.overlayWrapper.setAttribute('class', 'wrs_popupmessage_overlay_envolture');\n\n    /**\n     * HTMLElement to display the popup message, close button and cancel button.\n     */\n    this.message = this.overlayWrapper.appendChild(document.createElement('div'));\n    this.message.id = 'wrs_popupmessage';\n    this.message.setAttribute('class', 'wrs_popupmessage_panel');\n    this.message.setAttribute('role', 'dialog');\n    this.message.setAttribute('aria-describedby', 'description_txt');\n    const paragraph = document.createElement('p');\n    const text = document.createTextNode(popupMessageAttributes.strings.message);\n    paragraph.appendChild(text);\n    paragraph.id = 'description_txt';\n    this.message.appendChild(paragraph);\n\n    /**\n     * HTML element overlaying the overlayElement.\n     */\n    const overlay = this.overlayWrapper.appendChild(document.createElement('div'));\n    overlay.setAttribute('class', 'wrs_popupmessage_overlay');\n    // We create a overlay that close popup message on click in there\n    overlay.addEventListener('click', this.cancelAction.bind(this));\n\n    /**\n     * HTML element containing cancel and close buttons.\n     */\n    this.buttonArea = this.message.appendChild(document.createElement('div'));\n    this.buttonArea.setAttribute('class', 'wrs_popupmessage_button_area');\n    this.buttonArea.id = 'wrs_popup_button_area';\n\n    // Close button arguments.\n    const buttonSubmitArguments = {\n      class: 'wrs_button_accept',\n      innerHTML: popupMessageAttributes.strings.submitString,\n      id: 'wrs_popup_accept_button',\n    };\n\n    /**\n     * Close button arguments.\n     */\n    this.closeButton = this.createButton(buttonSubmitArguments, this.closeAction.bind(this));\n    this.buttonArea.appendChild(this.closeButton);\n\n    // Cancel button arguments.\n    const buttonCancelArguments = {\n      class: 'wrs_button_cancel',\n      innerHTML: popupMessageAttributes.strings.cancelString,\n      id: 'wrs_popup_cancel_button',\n    };\n\n    /**\n     * Cancel button.\n     */\n    this.cancelButton = this.createButton(buttonCancelArguments, this.cancelAction.bind(this));\n    this.buttonArea.appendChild(this.cancelButton);\n  }\n\n  /**\n   * This method create a button with arguments and return button dom object\n   * @param {Object} parameters - An object containing id, class and innerHTML button text.\n   * @param {String} parameters.id - Button id.\n   * @param {String} parameters.class - Button class name.\n   * @param {String} parameters.innerHTML - Button innerHTML text.\n   * @param {Object} callback- Callback method to call on click event.\n   * @returns {HTMLElement} HTML button.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  createButton(parameters, callback) {\n    let element = {};\n    element = document.createElement('button');\n    element.setAttribute('id', parameters.id);\n    element.setAttribute('class', parameters.class);\n    element.innerHTML = parameters.innerHTML;\n    element.addEventListener('click', callback);\n\n    return element;\n  }\n\n  /**\n   * Shows the popupmessage containing a message, and two buttons\n   * to cancel the action or close the modal dialog.\n   */\n  show() {\n    if (this.overlayWrapper.style.display !== 'block') {\n      // Clear focus with blur for prevent press any key.\n      document.activeElement.blur();\n      this.overlayWrapper.style.display = 'block';\n      this.closeButton.focus();\n    } else {\n      this.overlayWrapper.style.display = 'none';\n      _wrs_modalWindow.focus();\n    }\n  }\n\n  /**\n   * This method cancels the popupMessage: the dialog disappears revealing the overlaid element.\n   * A callback method is called (if defined). For example a method to focus the overlaid element.\n   */\n  cancelAction() {\n    this.overlayWrapper.style.display = 'none';\n    if (typeof this.callbacks.cancelCallback !== 'undefined') {\n      this.callbacks.cancelCallback();\n    }\n  }\n\n  /**\n   * This method closes the popupMessage: the dialog disappears and the close callback is called.\n   * For example to close the overlaid element.\n   */\n  closeAction() {\n    this.cancelAction();\n    if (typeof this.callbacks.closeCallback !== 'undefined') {\n      this.callbacks.closeCallback();\n    }\n  }\n\n  /**\n   * Handle keyboard events detected in modal when elements of this class intervene.\n   * @param {KeyboardEvent} keyboardEvent - The keyboard event.\n   */\n  onKeyDown(keyboardEvent) {\n    if (keyboardEvent.key !== undefined) {\n      // Code to detect Esc event.\n      if (keyboardEvent.key === 'Escape' || keyboardEvent.key === 'Esc') {\n        this.cancelAction();\n        keyboardEvent.stopPropagation();\n        keyboardEvent.preventDefault();\n      } else if (keyboardEvent.key === 'Tab') { // Code to detect Tab event.\n        if (document.activeElement === this.closeButton) {\n          this.cancelButton.focus();\n        } else {\n          this.closeButton.focus();\n        }\n        keyboardEvent.stopPropagation();\n        keyboardEvent.preventDefault();\n      }\n    }\n  }\n}\n","import PopUpMessage from './popupmessage';\nimport Util from './util';\nimport Configuration from './configuration';\nimport Listeners from './listeners';\nimport StringManager from './stringmanager';\n\n/**\n * @typedef {Object} DeviceProperties\n * @property {String} DeviceProperties.orientation - Indicates of the orientation of the device.\n * @property {Boolean} DeviceProperties.isAndroid - True if the device is Android. False otherwise.\n * @property {Boolean} DeviceProperties.isIOS - True if the device is iOS. False otherwise.\n * @property {Boolean} DeviceProperties.isMobile - True if the device is a mobile one.\n * False otherwise.\n * @property {Boolean} DeviceProperties.isDesktop - True if the device is a desktop one.\n * False otherwise.\n */\n\nexport default class ModalDialog {\n  /**\n   * @classdesc\n   * This class represents a modal dialog. The modal dialog admits\n   * a {@link ContentManager} instance to manage the content of the dialog.\n   * @constructs\n   * @param {Object} modalDialogAttributes  - An object containing all modal dialog attributes.\n   */\n  constructor(modalDialogAttributes) {\n    this.attributes = modalDialogAttributes;\n\n    // Metrics.\n    const ua = navigator.userAgent.toLowerCase();\n    const isAndroid = ua.indexOf('android') > -1;\n    const isIOS = ((ua.indexOf('ipad') > -1) || (ua.indexOf('iphone') > -1));\n    this.iosSoftkeyboardOpened = false;\n    this.iosMeasureUnit = ua.indexOf('crios') === -1 ? '%' : 'vh';\n    this.iosDivHeight = `100%${this.iosMeasureUnit}`;\n\n    const deviceWidth = window.outerWidth;\n    const deviceHeight = window.outerHeight;\n\n    const landscape = deviceWidth > deviceHeight;\n    const portrait = deviceWidth < deviceHeight;\n\n    // TODO: Detect isMobile without using editor metrics.\n    const isLandscape = (landscape && this.attributes.height > deviceHeight);\n    const isPortrait = portrait && this.attributes.width > deviceWidth;\n    const isMobile = isLandscape || isPortrait;\n\n    // Obtain number of current instance.\n    this.instanceId = document.getElementsByClassName('wrs_modal_dialogContainer').length;\n\n    // Device object properties.\n\n    /**\n     * @type {DeviceProperties}\n     */\n    this.deviceProperties = {\n      orientation: landscape ? 'landscape' : 'portait',\n      isAndroid,\n      isIOS,\n      isMobile,\n      isDesktop: !isMobile && !isIOS && !isAndroid,\n    };\n\n    this.properties = {\n      created: false,\n      state: '',\n      previousState: '',\n      position: { bottom: 0, right: 10 },\n      size: { height: 338, width: 580 },\n    };\n\n    /**\n     * Object to keep website's style before change it on lock scroll for mobile devices.\n     * @type {Object}\n     * @property {String} bodyStylePosition - Previous body style postion.\n     * @property {String} bodyStyleOverflow - Previous body style overflow.\n     * @property {String} htmlStyleOverflow - Previous body style overflow.\n     * @property {String} windowScrollX - Previous window's scroll Y.\n     * @property {String} windowScrollY - Previous window's scroll X.\n     */\n    this.websiteBeforeLockParameters = null;\n\n    let attributes = {};\n    attributes.class = 'wrs_modal_overlay';\n    attributes.id = this.getElementId(attributes.class);\n    this.overlay = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_title_bar';\n    attributes.id = this.getElementId(attributes.class);\n    this.titleBar = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_title';\n    attributes.id = this.getElementId(attributes.class);\n    this.title = Util.createElement('div', attributes);\n    this.title.innerHTML = '';\n\n    attributes = {};\n    attributes.class = 'wrs_modal_close_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('close');\n    this.closeDiv = Util.createElement('a', attributes);\n    this.closeDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_stack_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('exit_fullscreen');\n    this.stackDiv = Util.createElement('a', attributes);\n    this.stackDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_maximize_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('fullscreen');\n    this.maximizeDiv = Util.createElement('a', attributes);\n    this.maximizeDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_minimize_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('minimize');\n    this.minimizeDiv = Util.createElement('a', attributes);\n    this.minimizeDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_dialogContainer';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.role = 'dialog';\n    this.container = Util.createElement('div', attributes);\n    this.container.setAttribute('aria-labeledby', 'wrs_modal_title[0]');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_wrapper';\n    attributes.id = this.getElementId(attributes.class);\n    this.wrapper = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_content_container';\n    attributes.id = this.getElementId(attributes.class);\n    this.contentContainer = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_controls';\n    attributes.id = this.getElementId(attributes.class);\n    this.controls = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_buttons_container';\n    attributes.id = this.getElementId(attributes.class);\n    this.buttonContainer = Util.createElement('div', attributes);\n\n    // Buttons: all button must be created using createSubmitButton method.\n    this.submitButton = this.createSubmitButton(\n      {\n        id: this.getElementId('wrs_modal_button_accept'),\n        class: 'wrs_modal_button_accept',\n        innerHTML: StringManager.get('accept'),\n      },\n      this.submitAction.bind(this),\n    );\n\n    this.cancelButton = this.createSubmitButton(\n      {\n        id: this.getElementId('wrs_modal_button_cancel'),\n        class: 'wrs_modal_button_cancel',\n        innerHTML: StringManager.get('cancel'),\n      },\n      this.cancelAction.bind(this),\n    );\n\n    this.contentManager = null;\n\n    // Overlay popup.\n    const popupStrings = {\n      cancelString: StringManager.get('cancel'),\n      submitString: StringManager.get('close'),\n      message: StringManager.get('close_modal_warning'),\n    };\n\n    const callbacks = {\n      closeCallback: () => { this.close(); },\n      cancelCallback: () => { this.focus(); },\n    };\n\n    const popupupProperties = {\n      overlayElement: this.container,\n      callbacks,\n      strings: popupStrings,\n    };\n\n    this.popup = new PopUpMessage(popupupProperties);\n\n    /**\n    * Indicates if directionality of the modal dialog is RTL. false by default.\n    * @type {Boolean}\n    */\n    this.rtl = false;\n    if ('rtl' in this.attributes) {\n      this.rtl = this.attributes.rtl;\n    }\n\n    // Event handlers need modal instance context.\n    this.handleOpenedIosSoftkeyboard = this.handleOpenedIosSoftkeyboard.bind(this);\n    this.handleClosedIosSoftkeyboard = this.handleClosedIosSoftkeyboard.bind(this);\n  }\n\n  /**\n   * This method sets an ContentManager instance to ModalDialog. ContentManager\n   * manages the logic of ModalDialog content: submit, update, close and changes.\n   * @param {ContentManager} contentManager - ContentManager instance.\n   */\n  setContentManager(contentManager) {\n    this.contentManager = contentManager;\n  }\n\n  /**\n   * Returns the modal contentElement object.\n   * @returns {ContentManager} the instance of the ContentManager class.\n  */\n  getContentManager() {\n    return this.contentManager;\n  }\n\n  /**\n   * This method is called when the modal object has been submitted. Calls\n   * contentElement submitAction method - if exists - and closes the modal\n   * object. No logic about the content should be placed here,\n   * contentElement.submitAction is the responsible of the content logic.\n   */\n  submitAction() {\n    if (typeof this.contentManager.submitAction !== 'undefined') {\n      this.contentManager.submitAction();\n    }\n    this.close();\n  }\n\n  /**\n   * This method is called when the modal object has been cancelled. If\n   * contentElement has implemented hasChanges method, a confirm popup\n   * will be shown if hasChanges returns true.\n   */\n  cancelAction() {\n    if (typeof this.contentManager.hasChanges === 'undefined') {\n      this.close();\n    } else if (!this.contentManager.hasChanges()) {\n      this.close();\n    } else {\n      this.showPopUpMessage();\n    }\n  }\n\n  /**\n   * Returns a button element.\n   * @param {Object} properties - Input button properties.\n   * @param {String} properties.class - Input button class.\n   * @param {String} properties.innerHTML - Input button innerHTML.\n   * @param {Object} callback - Callback function associated to click event.\n   * @returns {HTMLButtonElement} The button element.\n   *\n   */\n  // eslint-disable-next-line class-methods-use-this\n  createSubmitButton(properties, callback) {\n    class SubmitButton {\n      constructor() {\n        this.element = document.createElement('button');\n        this.element.id = properties.id;\n        this.element.className = properties.class;\n        this.element.innerHTML = properties.innerHTML;\n        Util.addEvent(this.element, 'click', callback);\n      }\n\n      getElement() {\n        return this.element;\n      }\n    }\n    return new SubmitButton(properties, callback).getElement();\n  }\n\n  /**\n   * Creates the modal window object inserting a contentElement object.\n   */\n  create() {\n    /* Modal Window Structure\n    _____________________________________________________________________________________\n    |wrs_modal_dialog_Container                                                         |\n    | _________________________________________________________________________________ |\n    | |title_bar                          minimize_button  stack_button  close_button | |\n    | |_______________________________________________________________________________| |\n    | |wrapper                                                                        | |\n    | | _____________________________________________________________________________ | |\n    | | |content                                                                    | | |\n    | | |                                                                           | | |\n    | | |                                                                           | | |\n    | | |___________________________________________________________________________| | |\n    | | _____________________________________________________________________________ | |\n    | | |controls                                                                   | | |\n    | | | ___________________________________                                       | | |\n    | | | |buttonContainer                  |                                       | | |\n    | | | | _______________________________ |                                       | | |\n    | | | | |button_accept | button_cancel| |                                       | | |\n    | | | |_|_____________ |______________|_|                                       | | |\n    | | |___________________________________________________________________________| | |\n    | |_______________________________________________________________________________| |\n    |___________________________________________________________________________________| */\n\n    this.titleBar.appendChild(this.closeDiv);\n    this.titleBar.appendChild(this.stackDiv);\n    this.titleBar.appendChild(this.maximizeDiv);\n    this.titleBar.appendChild(this.minimizeDiv);\n    this.titleBar.appendChild(this.title);\n\n    if (this.deviceProperties.isDesktop) {\n      this.container.appendChild(this.titleBar);\n    }\n\n    this.wrapper.appendChild(this.contentContainer);\n    this.wrapper.appendChild(this.controls);\n\n    this.controls.appendChild(this.buttonContainer);\n\n    this.buttonContainer.appendChild(this.submitButton);\n    this.buttonContainer.appendChild(this.cancelButton);\n\n    this.container.appendChild(this.wrapper);\n\n    // Check if browser has scrollBar before modal has modified.\n    this.recalculateScrollBar();\n\n    document.body.appendChild(this.container);\n    document.body.appendChild(this.overlay);\n\n    if (this.deviceProperties.isDesktop) { // Desktop.\n      this.createModalWindowDesktop();\n      this.createResizeButtons();\n\n      this.addListeners();\n      // Maximize window only when the configuration is set and the device is not iOS or Android.\n      if (Configuration.get('modalWindowFullScreen')) {\n        this.maximize();\n      }\n    } else if (this.deviceProperties.isAndroid) {\n      this.createModalWindowAndroid();\n    } else if (this.deviceProperties.isIOS && !this.deviceProperties.isMobile) {\n      this.createModalWindowIos();\n    }\n\n    if (this.contentManager != null) {\n      this.contentManager.insert(this);\n    }\n\n    this.properties.open = true;\n    this.properties.created = true;\n\n    // Checks language directionality.\n    if (this.isRTL()) {\n      this.container.style.right = `${window.innerWidth - this.scrollbarWidth - this.container.offsetWidth}px`;\n      this.container.className += ' wrs_modal_rtl';\n    }\n  }\n\n  /**\n   * Creates a button in the modal object to resize it.\n   */\n  createResizeButtons() {\n    // This is a definition of Resize Button Bottom-Right.\n    this.resizerBR = document.createElement('div');\n    this.resizerBR.className = 'wrs_bottom_right_resizer';\n    this.resizerBR.innerHTML = '◢';\n    // This is a definition of Resize Button Top-Left.\n    this.resizerTL = document.createElement('div');\n    this.resizerTL.className = 'wrs_bottom_left_resizer';\n    // Append resize buttons to modal.\n    this.container.appendChild(this.resizerBR);\n    this.titleBar.appendChild(this.resizerTL);\n    // Add events to resize on click and drag.\n    Util.addEvent(this.resizerBR, 'mousedown', this.activateResizeStateBR.bind(this));\n    Util.addEvent(this.resizerTL, 'mousedown', this.activateResizeStateTL.bind(this));\n  }\n\n  /**\n   * Initialize variables for Bottom-Right resize button\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   */\n  activateResizeStateBR(mouseEvent) {\n    this.initializeResizeProperties(mouseEvent, false);\n  }\n\n  /**\n   * Initialize variables for Top-Left resize button\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   */\n  activateResizeStateTL(mouseEvent) {\n    this.initializeResizeProperties(mouseEvent, true);\n  }\n\n  /**\n   * Common method to initialize variables at resize.\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   */\n  initializeResizeProperties(mouseEvent, leftOption) {\n    // Apply class for disable involuntary select text when drag.\n    Util.addClass(document.body, 'wrs_noselect');\n    Util.addClass(this.overlay, 'wrs_overlay_active');\n    this.resizeDataObject = {\n      x: this.eventClient(mouseEvent).X,\n      y: this.eventClient(mouseEvent).Y,\n    };\n    // Save Initial state of modal to compare on drag and obtain the difference.\n    this.initialWidth = parseInt(this.container.style.width, 10);\n    this.initialHeight = parseInt(this.container.style.height, 10);\n    if (!leftOption) {\n      this.initialRight = parseInt(this.container.style.right, 10);\n      this.initialBottom = parseInt(this.container.style.bottom, 10);\n    } else {\n      this.leftScale = true;\n    }\n    if (!this.initialRight) {\n      this.initialRight = 0;\n    }\n    if (!this.initialBottom) {\n      this.initialBottom = 0;\n    }\n    // Disable mouse events on editor when we start to drag modal.\n    document.body.style['user-select'] = 'none';\n  }\n\n  /**\n   * This method opens the modal window, restoring the previous state, position and metrics,\n   * if exists. By default the modal object opens in stack mode.\n   */\n  open() {\n    // Removing close class.\n    this.removeClass('wrs_closed');\n    // Hiding keyboard for mobile devices.\n    const { isIOS } = this.deviceProperties;\n    const { isAndroid } = this.deviceProperties;\n    const { isMobile } = this.deviceProperties;\n    if (isIOS || isAndroid || isMobile) {\n      // Restore scale to 1.\n      this.restoreWebsiteScale();\n      this.lockWebsiteScroll();\n      // Due to editor wait we need to wait until editor focus.\n      setTimeout(() => { this.hideKeyboard(); }, 400);\n    }\n\n    // New modal window. He need to create the whole object.\n    if (!this.properties.created) {\n      this.create();\n    } else {\n      // Previous state closed. Open method can be called even the previous state is open,\n      // for example updating the content of the modal object.\n      if (!this.properties.open) {\n        this.properties.open = true;\n\n        // Restoring the previous open state: if the modal object has been closed\n        // re-open it should preserve the state and the metrics.\n        if (!this.deviceProperties.isAndroid && !this.deviceProperties.isIOS) {\n          this.restoreState();\n        }\n      }\n\n      // Maximize window only when the configuration is set and the device is not iOs or Android.\n      if (this.deviceProperties.isDesktop && Configuration.get('modalWindowFullScreen')) {\n        this.maximize();\n      }\n\n      // In iOS we need to recalculate the size of the modal object because\n      // iOS keyboard is a float div which can overlay the modal object.\n      if (this.deviceProperties.isIOS) {\n        this.iosSoftkeyboardOpened = false;\n        this.setContainerHeight(`${100 + this.iosMeasureUnit}`);\n      }\n    }\n\n    if (this.contentManager.isEditorLoaded === false) {\n      const listener = Listeners.newListener('onLoad', () => {\n        this.contentManager.onOpen(this);\n      });\n      this.contentManager.addListener(listener);\n    } else {\n      this.contentManager.onOpen(this);\n    }\n  }\n\n  /**\n   * Closes modal window and restores viewport header.\n   */\n  close() {\n    this.removeClass('wrs_maximized');\n    this.removeClass('wrs_minimized');\n    this.removeClass('wrs_stack');\n    this.addClass('wrs_closed');\n    this.saveModalProperties();\n    this.unlockWebsiteScroll();\n    this.properties.open = false;\n  }\n\n  /**\n   * Sets the website scale to one.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  restoreWebsiteScale() {\n    let viewportmeta = document.querySelector('meta[name=viewport]');\n    // Let the equal symbols in order to search and make meta's final content.\n    const contentAttrsToUpdate = ['initial-scale=', 'minimum-scale=', 'maximum-scale='];\n    const contentAttrsValuesToUpdate = ['1.0', '1.0', '1.0'];\n    const setMetaAttrFunc = (viewportelement, contentAttrs) => {\n      const contentAttr = viewportelement.getAttribute('content');\n      // If it exists, we need to maintain old values and put our values.\n      if (contentAttr) {\n        const attrArray = contentAttr.split(',');\n        let finalContentMeta = '';\n        const oldAttrs = [];\n        for (let i = 0; i < attrArray.length; i += 1) {\n          let isAttrToUpdate = false;\n          let j = 0;\n          while (!isAttrToUpdate && j < contentAttrs.length) {\n            if (attrArray[i].indexOf(contentAttrs[j])) {\n              isAttrToUpdate = true;\n            }\n            j += 1;\n          }\n\n          if (!isAttrToUpdate) {\n            oldAttrs.push(attrArray[i]);\n          }\n        }\n\n        for (let i = 0; i < contentAttrs.length; i += 1) {\n          const attr = contentAttrs[i] + contentAttrsValuesToUpdate[i];\n          finalContentMeta += i === 0 ? attr : `,${attr}`;\n        }\n\n        for (let i = 0; i < oldAttrs.length; i += 1) {\n          finalContentMeta += `,${oldAttrs[i]}`;\n        }\n        viewportelement.setAttribute('content', finalContentMeta);\n        // It needs to set to empty because setAttribute refresh only when attribute is different.\n        viewportelement.setAttribute('content', '');\n        viewportelement.setAttribute('content', contentAttr);\n      } else {\n        viewportelement.setAttribute('content', 'initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0');\n        viewportelement.removeAttribute('content');\n      }\n    };\n\n    if (!viewportmeta) {\n      viewportmeta = document.createElement('meta');\n      document.getElementsByTagName('head')[0].appendChild(viewportmeta);\n      setMetaAttrFunc(viewportmeta, contentAttrsToUpdate, contentAttrsValuesToUpdate);\n      viewportmeta.remove();\n    } else {\n      setMetaAttrFunc(viewportmeta, contentAttrsToUpdate, contentAttrsValuesToUpdate);\n    }\n  }\n\n  /**\n   * Locks website scroll for mobile devices.\n   */\n  lockWebsiteScroll() {\n    this.websiteBeforeLockParameters = {\n      bodyStylePosition: document.body.style.position ? document.body.style.position : '',\n      bodyStyleOverflow: document.body.style.overflow ? document.body.style.overflow : '',\n      htmlStyleOverflow: document.documentElement.style.overflow ? document.documentElement.style.overflow : '',\n      windowScrollX: window.scrollX,\n      windowScrollY: window.scrollY,\n    };\n  }\n\n  /**\n   * Unlocks website scroll for mobile devices.\n   */\n  unlockWebsiteScroll() {\n    if (this.websiteBeforeLockParameters) {\n      document.body.style.position = this.websiteBeforeLockParameters.bodyStylePosition;\n      document.body.style.overflow = this.websiteBeforeLockParameters.bodyStyleOverflow;\n      document.documentElement.style.overflow = this.websiteBeforeLockParameters.htmlStyleOverflow;\n      const { windowScrollX } = this.websiteBeforeLockParameters;\n      const { windowScrollY } = this.websiteBeforeLockParameters;\n      window.scrollTo(windowScrollX, windowScrollY);\n      this.websiteBeforeLockParameters = null;\n    }\n  }\n\n  /**\n   * Util function to known if browser is IE11.\n   * @returns {Boolean} true if the browser is IE11. false otherwise.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  isIE11() {\n    if (navigator.userAgent.search('Msie/') >= 0 || navigator.userAgent.search('Trident/') >= 0 || navigator.userAgent.search('Edge/') >= 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns if the current language type is RTL.\n   * @return {Boolean} true if current language is RTL. false otherwise.\n   */\n  isRTL() {\n    if (this.attributes.language === 'ar' || this.attributes.language === 'he') {\n      return true;\n    }\n    return this.rtl;\n  }\n\n  /**\n   * Adds a class to all modal ModalDialog DOM elements.\n   * @param {String} className - Class name.\n   */\n  addClass(className) {\n    Util.addClass(this.overlay, className);\n    Util.addClass(this.titleBar, className);\n    Util.addClass(this.overlay, className);\n    Util.addClass(this.container, className);\n    Util.addClass(this.contentContainer, className);\n    Util.addClass(this.stackDiv, className);\n    Util.addClass(this.minimizeDiv, className);\n    Util.addClass(this.maximizeDiv, className);\n    Util.addClass(this.wrapper, className);\n  }\n\n  /**\n   * Remove a class from all modal DOM elements.\n   * @param {String} className - Class name.\n   */\n  removeClass(className) {\n    Util.removeClass(this.overlay, className);\n    Util.removeClass(this.titleBar, className);\n    Util.removeClass(this.overlay, className);\n    Util.removeClass(this.container, className);\n    Util.removeClass(this.contentContainer, className);\n    Util.removeClass(this.stackDiv, className);\n    Util.removeClass(this.minimizeDiv, className);\n    Util.removeClass(this.maximizeDiv, className);\n    Util.removeClass(this.wrapper, className);\n  }\n\n  /**\n   * Create modal dialog for desktop.\n   */\n  createModalWindowDesktop() {\n    this.addClass('wrs_modal_desktop');\n    this.stack();\n  }\n\n  /**\n   * Create modal dialog for non android devices.\n   */\n  createModalWindowAndroid() {\n    this.addClass('wrs_modal_android');\n    window.addEventListener('resize', this.orientationChangeAndroidSoftkeyboard.bind(this));\n  }\n\n  /**\n   * Create modal dialog for iOS devices.\n   */\n  createModalWindowIos() {\n    this.addClass('wrs_modal_ios');\n    // Refresh the size when the orientation is changed.\n    window.addEventListener('resize', this.orientationChangeIosSoftkeyboard.bind(this));\n  }\n\n  /**\n   * Restore previous state, position and size of previous stacked modal dialog.\n   */\n  restoreState() {\n    if (this.properties.state === 'maximized') {\n      // Reset states for prevent return to stack state.\n      this.maximize();\n    } else if (this.properties.state === 'minimized') {\n      // Reset states for prevent return to stack state.\n      this.properties.state = this.properties.previousState;\n      this.properties.previousState = '';\n      this.minimize();\n    } else {\n      this.stack();\n    }\n  }\n\n  /**\n   * Stacks the modal object.\n   */\n  stack() {\n    this.properties.previousState = this.properties.state;\n    this.properties.state = 'stack';\n    this.removeClass('wrs_maximized');\n    this.minimizeDiv.title = StringManager.get('minimize');\n    this.removeClass('wrs_minimized');\n    this.addClass('wrs_stack');\n\n    this.restoreModalProperties();\n\n    if (typeof this.resizerBR !== 'undefined' && typeof this.resizerTL !== 'undefined') {\n      this.setResizeButtonsVisibility();\n    }\n\n    // Need recalculate position of actual modal because window can was changed in fullscreenmode.\n    this.recalculateScrollBar();\n    this.recalculatePosition();\n    this.recalculateScale();\n    this.focus();\n  }\n\n  /**\n   * Minimizes the modal object.\n   */\n  minimize() {\n    // Saving width, height, top and bottom parameters to restore when opening.\n    this.saveModalProperties();\n    if (this.properties.state === 'minimized' && this.properties.previousState === 'stack') {\n      this.stack();\n    } else if (this.properties.state === 'minimized' && this.properties.previousState === 'maximized') {\n      this.maximize();\n    } else {\n      // Setting css to prevent important tag into css style.\n      this.container.style.height = '30px';\n      this.container.style.width = '250px';\n      this.container.style.bottom = '0px';\n      this.container.style.right = '10px';\n\n      this.removeListeners();\n      this.properties.previousState = this.properties.state;\n      this.properties.state = 'minimized';\n      this.setResizeButtonsVisibility();\n      this.minimizeDiv.title = StringManager.get('maximize');\n\n      if (Util.containsClass(this.overlay, 'wrs_stack')) {\n        this.removeClass('wrs_stack');\n      } else {\n        this.removeClass('wrs_maximized');\n      }\n      this.addClass('wrs_minimized');\n    }\n  }\n\n  /**\n   * Maximizes the modal object.\n   */\n  maximize() {\n    // Saving width, height, top and bottom parameters to restore when openning.\n    this.saveModalProperties();\n    if (this.properties.state !== 'maximized') {\n      this.properties.previousState = this.properties.state;\n      this.properties.state = 'maximized';\n    }\n    // Don't permit resize on maximize mode.\n    this.setResizeButtonsVisibility();\n\n    if (Util.containsClass(this.overlay, 'wrs_minimized')) {\n      this.minimizeDiv.title = StringManager.get('minimize');\n      this.removeClass('wrs_minimized');\n    } else if (Util.containsClass(this.overlay, 'wrs_stack')) {\n      this.container.style.left = null;\n      this.container.style.top = null;\n      this.removeClass('wrs_stack');\n    }\n\n    this.addClass('wrs_maximized');\n\n    // Set size to 80% screen with a max size.\n    this.setSize(parseInt(window.innerHeight * 0.8, 10), parseInt(window.innerWidth * 0.8, 10));\n    if (this.container.clientHeight > 700) {\n      this.container.style.height = '700px';\n    }\n    if (this.container.clientWidth > 1200) {\n      this.container.style.width = '1200px';\n    }\n\n    // Setting modal position in center on screen.\n    const { innerHeight } = window;\n    const { innerWidth } = window;\n    const { offsetHeight } = this.container;\n    const { offsetWidth } = this.container;\n    const bottom = innerHeight / 2 - offsetHeight / 2;\n    const right = innerWidth / 2 - offsetWidth / 2;\n\n    this.setPosition(bottom, right);\n    this.recalculateScale();\n    this.recalculatePosition();\n    this.recalculateSize();\n    this.focus();\n  }\n\n  /**\n   * Sets modal size.\n   * @param {Number} height - Height of the ModalDialog\n   * @param {Number} width - Width of the ModalDialog.\n   */\n  setSize(height, width) {\n    this.container.style.height = `${height}px`;\n    this.container.style.width = `${width}px`;\n    this.recalculateSize();\n  }\n\n  /**\n   * Sets modal position using bottom and right style attributes.\n   * @param  {number} bottom - bottom attribute.\n   * @param  {number} right - right attribute.\n   */\n  setPosition(bottom, right) {\n    this.container.style.bottom = `${bottom}px`;\n    this.container.style.right = `${right}px`;\n  }\n\n  /**\n   * Saves position and size parameters of and open ModalDialog. This attributes\n   * are needed to restore it on re-open.\n   */\n  saveModalProperties() {\n    // Saving values of modal only when modal is in stack state.\n    if (this.properties.state === 'stack') {\n      this.properties.position.bottom = parseInt(this.container.style.bottom, 10);\n      this.properties.position.right = parseInt(this.container.style.right, 10);\n      this.properties.size.width = parseInt(this.container.style.width, 10);\n      this.properties.size.height = parseInt(this.container.style.height, 10);\n    }\n  }\n\n  /**\n   * Restore ModalDialog position and size parameters.\n   */\n  restoreModalProperties() {\n    if (this.properties.state === 'stack') {\n      // Restoring Bottom and Right values from last modal.\n      this.setPosition(this.properties.position.bottom, this.properties.position.right);\n      // Restoring Height and Left values from last modal.\n      this.setSize(this.properties.size.height, this.properties.size.width);\n    }\n  }\n\n  /**\n   * Sets the modal dialog initial size.\n   */\n  recalculateSize() {\n    this.wrapper.style.width = `${this.container.clientWidth - 12}px`;\n    this.wrapper.style.height = `${this.container.clientHeight - 38}px`;\n    this.contentContainer.style.height = `${parseInt(this.wrapper.offsetHeight - 50, 10)}px`;\n  }\n\n  /**\n   * Enable or disable visibility of resize buttons in modal window depend on state.\n   */\n  setResizeButtonsVisibility() {\n    if (this.properties.state === 'stack') {\n      this.resizerTL.style.visibility = 'visible';\n      this.resizerBR.style.visibility = 'visible';\n    } else {\n      this.resizerTL.style.visibility = 'hidden';\n      this.resizerBR.style.visibility = 'hidden';\n    }\n  }\n\n  /**\n   * Makes an object draggable adding mouse and touch events.\n   */\n  addListeners() {\n    // Button events (maximize, minimize, stack and close).\n    this.maximizeDiv.addEventListener('click', this.maximize.bind(this), true);\n    this.stackDiv.addEventListener('click', this.stack.bind(this), true);\n    this.minimizeDiv.addEventListener('click', this.minimize.bind(this), true);\n    this.closeDiv.addEventListener('click', this.cancelAction.bind(this));\n\n    // Overlay events (close).\n    this.overlay.addEventListener('click', this.cancelAction.bind(this));\n\n    // Mouse events.\n    Util.addEvent(window, 'mousedown', this.startDrag.bind(this));\n    Util.addEvent(window, 'mouseup', this.stopDrag.bind(this));\n    Util.addEvent(window, 'mousemove', this.drag.bind(this));\n    Util.addEvent(window, 'resize', this.onWindowResize.bind(this));\n    // Key events.\n    Util.addEvent(this.container, 'keydown', this.onKeyDown.bind(this));\n  }\n\n  /**\n   * Removes draggable events from an object.\n   */\n  removeListeners() {\n    // Mouse events.\n    Util.removeEvent(window, 'mousedown', this.startDrag);\n    Util.removeEvent(window, 'mouseup', this.stopDrag);\n    Util.removeEvent(window, 'mousemove', this.drag);\n    Util.removeEvent(window, 'resize', this.onWindowResize);\n    // Key events.\n    Util.removeEvent(this.container, 'keydown', this.onKeyDown);\n  }\n\n\n  /**\n   * Returns mouse or touch coordinates (on touch events ev.ClientX doesn't exists)\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   * @return {Object} With the X and Y coordinates.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  eventClient(mouseEvent) {\n    if (typeof (mouseEvent.clientX) === 'undefined' && mouseEvent.changedTouches) {\n      const client = {\n        X: mouseEvent.changedTouches[0].clientX,\n        Y: mouseEvent.changedTouches[0].clientY,\n      };\n      return client;\n    }\n    const client = {\n      X: mouseEvent.clientX,\n      Y: mouseEvent.clientY,\n    };\n    return client;\n  }\n\n  /**\n   * Start drag function: set the object dragDataObject with the draggable\n   * object offsets coordinates.\n   * when drag starts (on touchstart or mousedown events).\n   * @param {MouseEvent} mouseEvent - Touchstart or mousedown event.\n   */\n  startDrag(mouseEvent) {\n    if (this.properties.state === 'minimized') {\n      return;\n    }\n    if (mouseEvent.target === this.title) {\n      if (typeof this.dragDataObject === 'undefined' || this.dragDataObject === null) {\n        // Save first click mouse point on screen.\n        this.dragDataObject = {\n          x: this.eventClient(mouseEvent).X,\n          y: this.eventClient(mouseEvent).Y,\n        };\n        // Reset last drag position when start drag.\n        this.lastDrag = {\n          x: '0px',\n          y: '0px',\n        };\n        // Init right and bottom values for window modal if it isn't exist.\n        if (this.container.style.right === '') {\n          this.container.style.right = '0px';\n        }\n        if (this.container.style.bottom === '') {\n          this.container.style.bottom = '0px';\n        }\n\n        // Needed for IE11 for apply disabled mouse events on editor because\n        // iexplorer need a dinamic object to apply this property.\n        if (this.isIE11()) {\n          // this.iframe.style['position'] = 'relative';\n        }\n        // Apply class for disable involuntary select text when drag.\n        Util.addClass(document.body, 'wrs_noselect');\n        Util.addClass(this.overlay, 'wrs_overlay_active');\n        // Obtain screen limits for prevent overflow.\n        this.limitWindow = this.getLimitWindow();\n      }\n    }\n  }\n\n  /**\n   * Updates dragDataObject with the draggable object coordinates when\n   * the draggable object is being moved.\n   * @param {MouseEvent} mouseEvent - The mouse event.\n   */\n  drag(mouseEvent) {\n    if (this.dragDataObject) {\n      mouseEvent.preventDefault();\n      // Calculate max and min between actual mouse position and limit of screeen.\n      // It restric the movement of modal into window.\n      let limitY = Math.min(this.eventClient(mouseEvent).Y, this.limitWindow.minPointer.y);\n      limitY = Math.max(this.limitWindow.maxPointer.y, limitY);\n      let limitX = Math.min(this.eventClient(mouseEvent).X, this.limitWindow.minPointer.x);\n      limitX = Math.max(this.limitWindow.maxPointer.x, limitX);\n      // Substract limit with first position to obtain relative pixels increment\n      // to the anchor point.\n      const dragX = `${limitX - this.dragDataObject.x}px`;\n      const dragY = `${limitY - this.dragDataObject.y}px`;\n      // Save last valid position of modal before window overflow.\n      this.lastDrag = {\n        x: dragX,\n        y: dragY,\n      };\n      // This move modal with hadware acceleration.\n      this.container.style.transform = `translate3d(${dragX},${dragY},0)`;\n    }\n    if (this.resizeDataObject) {\n      const { innerWidth } = window;\n      const { innerHeight } = window;\n      let limitX = Math.min(this.eventClient(mouseEvent).X, innerWidth - this.scrollbarWidth - 7);\n      let limitY = Math.min(this.eventClient(mouseEvent).Y, innerHeight - 7);\n      if (limitX < 0) {\n        limitX = 0;\n      }\n\n      if (limitY < 0) {\n        limitY = 0;\n      }\n\n      let scaleMultiplier;\n      if (this.leftScale) {\n        scaleMultiplier = -1;\n      } else {\n        scaleMultiplier = 1;\n      }\n\n      this.container.style.width = `${this.initialWidth + scaleMultiplier * (limitX - this.resizeDataObject.x)}px`;\n      this.container.style.height = `${this.initialHeight + scaleMultiplier * (limitY - this.resizeDataObject.y)}px`;\n      if (!this.leftScale) {\n        if (this.resizeDataObject.x - limitX - this.initialWidth < -580) {\n          this.container.style.right = `${this.initialRight - (limitX - this.resizeDataObject.x)}px`;\n        } else {\n          this.container.style.right = `${this.initialRight + this.initialWidth - 580}px`;\n          this.container.style.width = '580px';\n        }\n        if (this.resizeDataObject.y - limitY < this.initialHeight - 338) {\n          this.container.style.bottom = `${this.initialBottom - (limitY - this.resizeDataObject.y)}px`;\n        } else {\n          this.container.style.bottom = `${this.initialBottom + this.initialHeight - 338}px`;\n          this.container.style.height = '338px';\n        }\n      }\n      this.recalculateScale();\n      this.recalculatePosition();\n    }\n  }\n\n  /**\n   * Returns the boundaries of actual window to limit modal movement.\n   * @return {Object} Object containing mouseX and mouseY coordinates of actual mouse on screen.\n   */\n  getLimitWindow() {\n    // Obtain dimensions of window page.\n    const maxWidth = window.innerWidth;\n    const maxHeight = window.innerHeight;\n\n    // Calculate relative position of mouse point into window.\n    const { offsetHeight } = this.container;\n    const contStyleBottom = parseInt(this.container.style.bottom, 10);\n    const contStyleRight = parseInt(this.container.style.right, 10);\n\n    const { pageXOffset } = window;\n    const dragY = this.dragDataObject.y;\n    const dragX = this.dragDataObject.x;\n\n    const offSetToolbarY = (offsetHeight + contStyleBottom - (maxHeight - (dragY - pageXOffset)));\n    const offSetToolbarX = maxWidth - this.scrollbarWidth - (dragX - pageXOffset) - contStyleRight;\n\n    // Calculate limits with sizes of window, modal and mouse position.\n    const minPointerY = maxHeight - this.container.offsetHeight + offSetToolbarY;\n    const maxPointerY = this.title.offsetHeight - (this.title.offsetHeight - offSetToolbarY);\n    const minPointerX = maxWidth - offSetToolbarX - this.scrollbarWidth;\n    const maxPointerX = (this.container.offsetWidth - offSetToolbarX);\n    const minPointer = { x: minPointerX, y: minPointerY };\n    const maxPointer = { x: maxPointerX, y: maxPointerY };\n    return { minPointer, maxPointer };\n  }\n\n  /**\n   * Returns the scrollbar width size of browser\n   * @returns {Number} The scrollbar width.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getScrollBarWidth() {\n    // Create a paragraph with full width of page.\n    const inner = document.createElement('p');\n    inner.style.width = '100%';\n    inner.style.height = '200px';\n\n    // Create a hidden div to compare sizes.\n    const outer = document.createElement('div');\n    outer.style.position = 'absolute';\n    outer.style.top = '0px';\n    outer.style.left = '0px';\n    outer.style.visibility = 'hidden';\n    outer.style.width = '200px';\n    outer.style.height = '150px';\n    outer.style.overflow = 'hidden';\n    outer.appendChild(inner);\n\n    document.body.appendChild(outer);\n    const widthOuter = inner.offsetWidth;\n\n    // Change type overflow of paragraph for measure scrollbar.\n    outer.style.overflow = 'scroll';\n    let widthInner = inner.offsetWidth;\n\n    // If measure is the same, we compare with internal div.\n    if (widthOuter === widthInner) {\n      widthInner = outer.clientWidth;\n    }\n    document.body.removeChild(outer);\n\n    return (widthOuter - widthInner);\n  }\n\n  /**\n   * Set the dragDataObject to null.\n   */\n  stopDrag() {\n    // Due to we have multiple events that call this function, we need only to execute\n    // the next modifiers one time,\n    // when the user stops to drag and dragDataObject is not null (the object to drag is attached).\n    if (this.dragDataObject || this.resizeDataObject) {\n      // If modal doesn't change, it's not necessary to set position with interpolation.\n      this.container.style.transform = '';\n      if (this.dragDataObject) {\n        this.container.style.right = `${parseInt(this.container.style.right, 10) - parseInt(this.lastDrag.x, 10)}px`;\n        this.container.style.bottom = `${parseInt(this.container.style.bottom, 10) - parseInt(this.lastDrag.y, 10)}px`;\n      }\n      // We make focus on editor after drag modal windows to prevent lose focus.\n      this.focus();\n      // Restore mouse events on iframe.\n      // this.iframe.style['pointer-events'] = 'auto';\n      document.body.style['user-select'] = '';\n      // Restore static state of iframe if we use Internet Explorer.\n      if (this.isIE11()) {\n        // this.iframe.style['position'] = null;\n      }\n      // Active text select event.\n      Util.removeClass(document.body, 'wrs_noselect');\n      Util.removeClass(this.overlay, 'wrs_overlay_active');\n    }\n    this.dragDataObject = null;\n    this.resizeDataObject = null;\n    this.initialWidth = null;\n    this.leftScale = null;\n  }\n\n  /**\n   * Recalculates scale for modal when resize browser window.\n   */\n  onWindowResize() {\n    this.recalculateScrollBar();\n    this.recalculatePosition();\n    this.recalculateScale();\n  }\n\n  /**\n   * Triggers keyboard events:\n   * - Tab key tab to go to submit button.\n   * - Esc key to close the modal dialog.\n   * @param {KeyboardEvent} keyboardEvent - The keyboard event.\n   */\n  onKeyDown(keyboardEvent) {\n    if (keyboardEvent.key !== undefined) {\n      // Popupmessage is not oppened.\n      if (this.popup.overlayWrapper.style.display !== 'block') {\n        // Code to detect Esc event\n        if (keyboardEvent.key === 'Escape' || keyboardEvent.key === 'Esc') {\n          if (this.properties.open) {\n            this.contentManager.onKeyDown(keyboardEvent);\n          }\n        } else if (keyboardEvent.shiftKey && keyboardEvent.key === 'Tab') { // Code to detect shift Tab event.\n          if (document.activeElement === this.cancelButton) {\n            this.submitButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          } else {\n            this.contentManager.onKeyDown(keyboardEvent);\n          }\n        } else if (keyboardEvent.key === 'Tab') { // Code to detect Tab event.\n          if (document.activeElement === this.submitButton) {\n            this.cancelButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          } else {\n            this.contentManager.onKeyDown(keyboardEvent);\n          }\n        }\n      } else { // Popupmessage oppened.\n        this.popup.onKeyDown(keyboardEvent);\n      }\n    }\n  }\n\n  /**\n   * Recalculating position for modal dialog when the browser is resized.\n   */\n  recalculatePosition() {\n    this.container.style.right = `${Math.min(parseInt(this.container.style.right, 10), window.innerWidth - this.scrollbarWidth - this.container.offsetWidth)}px`;\n    if (parseInt(this.container.style.right, 10) < 0) {\n      this.container.style.right = '0px';\n    }\n    this.container.style.bottom = `${Math.min(parseInt(this.container.style.bottom, 10), window.innerHeight - this.container.offsetHeight)}px`;\n    if (parseInt(this.container.style.bottom, 10) < 0) {\n      this.container.style.bottom = '0px';\n    }\n  }\n\n  /**\n   * Recalculating scale for modal when the browser is resized.\n   */\n  recalculateScale() {\n    let sizeModificated = false;\n    if (parseInt(this.container.style.width, 10) > 580) {\n      this.container.style.width = `${Math.min(parseInt(this.container.style.width, 10), window.innerWidth - this.scrollbarWidth)}px`;\n      sizeModificated = true;\n    } else {\n      this.container.style.width = '580px';\n      sizeModificated = true;\n    }\n    if (parseInt(this.container.style.height, 10) > 338) {\n      this.container.style.height = `${Math.min(parseInt(this.container.style.height, 10), window.innerHeight)}px`;\n      sizeModificated = true;\n    } else {\n      this.container.style.height = '338px';\n      sizeModificated = true;\n    }\n    if (sizeModificated) {\n      this.recalculateSize();\n    }\n  }\n\n  /**\n   * Recalculating width of browser scroll bar.\n   */\n  recalculateScrollBar() {\n    this.hasScrollBar = window.innerWidth > document.documentElement.clientWidth;\n    if (this.hasScrollBar) {\n      this.scrollbarWidth = this.getScrollBarWidth();\n    } else {\n      this.scrollbarWidth = 0;\n    }\n  }\n\n  /**\n   * Hide soft keyboards on iOS devices.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  hideKeyboard() {\n    // iOS keyboard can't be detected or hide directly from JavaScript.\n    // So, this method simulates that user focus a text input and blur\n    // the selection.\n    const inputField = document.createElement('input');\n    this.container.appendChild(inputField);\n    inputField.focus();\n    inputField.blur();\n    // Is removed to not see it.\n    inputField.remove();\n  }\n\n  /**\n   * Focus to contentManager object.\n   */\n  focus() {\n    if (this.contentManager != null && typeof this.contentManager.onFocus !== 'undefined') {\n      this.contentManager.onFocus();\n    }\n  }\n\n  /**\n   * Returns true when the device is on portrait mode.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  portraitMode() {\n    return window.innerHeight > window.innerWidth;\n  }\n\n  /**\n   * Event handler that change container size when IOS softkeyboard is opened.\n   */\n  handleOpenedIosSoftkeyboard() {\n    if (!this.iosSoftkeyboardOpened && this.iosDivHeight != null && this.iosDivHeight === `100${this.iosMeasureUnit}`) {\n      if (this.portraitMode()) {\n        this.setContainerHeight(`63${this.iosMeasureUnit}`);\n      } else {\n        this.setContainerHeight(`40${this.iosMeasureUnit}`);\n      }\n    }\n    this.iosSoftkeyboardOpened = true;\n  }\n\n  /**\n   * Event handler that change container size when IOS softkeyboard is closed.\n   */\n  handleClosedIosSoftkeyboard() {\n    this.iosSoftkeyboardOpened = false;\n    this.setContainerHeight(`100${this.iosMeasureUnit}`);\n  }\n\n  /**\n   * Change container sizes when orientation is changed on iOS.\n   */\n  orientationChangeIosSoftkeyboard() {\n    if (this.iosSoftkeyboardOpened) {\n      if (this.portraitMode()) {\n        this.setContainerHeight(`63${this.iosMeasureUnit}`);\n      } else {\n        this.setContainerHeight(`40${this.iosMeasureUnit}`);\n      }\n    } else {\n      this.setContainerHeight(`100${this.iosMeasureUnit}`);\n    }\n  }\n\n  /**\n   * Change container sizes when orientation is changed on Android.\n   */\n  orientationChangeAndroidSoftkeyboard() {\n    this.setContainerHeight('100%');\n  }\n\n  /**\n   * Set iframe container height.\n   * @param {Number} height - New height.\n   */\n  setContainerHeight(height) {\n    this.iosDivHeight = height;\n    this.wrapper.style.height = height;\n  }\n\n  /**\n   * Check content of editor before close action.\n   */\n  showPopUpMessage() {\n    if (this.properties.state === 'minimized') {\n      this.stack();\n    }\n    this.popup.show();\n  }\n\n  /**\n   * Sets the tithle of the modal dialog.\n   * @param {String} title - Modal dialog title.\n   */\n  setTitle(title) {\n    this.title.innerHTML = title;\n  }\n\n  /**\n   * Returns the id of an element, adding the instance number to\n   * the element class name:\n   * className --> className[idNumber]\n   * @param {String} className - The element class name.\n   * @returns {String} A string appending the instance id to the className.\n   */\n  getElementId(className) {\n    return `${className}[${this.instanceId}]`;\n  }\n}\n","/* eslint-disable */\nvar polyfills;\nexport default polyfills;\n\n// Polyfills.\n/*! http://mths.be/codepointat v0.1.0 by @mathias */\nif (!String.prototype.codePointAt) {\n  (function () {\n    'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n    var codePointAt = function (position) {\n      if (this == null) {\n        throw TypeError();\n      }\n      var string = String(this);\n      var size = string.length;\n      // `ToInteger`\n      var index = position ? Number(position) : 0;\n      if (index != index) { // better `isNaN`\n        index = 0;\n      }\n      // Account for out-of-bounds indices:\n      if (index < 0 || index >= size) {\n        return undefined;\n      }\n      // Get the first code unit\n      var first = string.charCodeAt(index);\n      var second;\n      if ( // check if it’s the start of a surrogate pair\n        first >= 0xD800 && first <= 0xDBFF && // high surrogate\n        size > index + 1 // there is a next code unit\n      ) {\n        second = string.charCodeAt(index + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n      }\n      return first;\n    };\n    if (Object.defineProperty) {\n      Object.defineProperty(String.prototype, 'codePointAt', {\n        'value': codePointAt,\n        'configurable': true,\n        'writable': true\n      });\n    } else {\n      String.prototype.codePointAt = codePointAt;\n    }\n  }());\n}\n\n// Object.assign polyfill.\nif (typeof Object.assign != 'function') {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) { // .length of function is 2\n      'use strict';\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) { // Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n","import Parser from './parser';\nimport Util from './util';\nimport StringManager from './stringmanager';\nimport ContentManager from './contentmanager';\nimport Latex from './latex';\nimport MathML from './mathml';\nimport CustomEditors from './customeditors';\nimport Configuration from './configuration';\nimport jsProperties from './jsvariables';\nimport Event from './event';\nimport Listeners from './listeners';\nimport Image from './image';\nimport ServiceProvider from './serviceprovider';\nimport ModalDialog from './modal';\nimport './polyfills';\nimport '../styles/styles.css';\n\n/**\n * @typedef {Object} CoreProperties\n * @property {ServiceProviderProperties} serviceProviderProperties\n * - The ServiceProvider class properties. *\n */\nexport default class Core {\n  /**\n   * @classdesc\n   * This class represents MathType integration Core, managing the following:\n   * - Integration initialization.\n   * - Event managing.\n   * - Insertion of formulas into the edit area.\n   * ```js\n   *       let core = new Core();\n   *       core.addListener(listener);\n   *       core.language = 'en';\n   *\n   *       // Initializing Core class.\n   *       core.init(configurationService);\n   * ```\n   * @constructs\n   * Core constructor.\n   * @param {CoreProperties}\n   */\n  constructor(coreProperties) {\n    /**\n     * Language. Needed for accessibility and locales. 'en' by default.\n     * @type {String}\n     */\n    this.language = 'en';\n\n    /**\n     * Edit mode, 'images' by default. Admits the following values:\n     * - images\n     * - latex\n     * @type {String}\n     */\n    this.editMode = 'images';\n\n    /**\n     * Modal dialog instance.\n     * @type {ModalDialog}\n     */\n    this.modalDialog = null;\n\n    /**\n     * The instance of {@link CustomEditors}. By default\n     * the only custom editor is the Chemistry editor.\n     * @type {CustomEditors}\n     */\n    this.customEditors = new CustomEditors();\n\n    /**\n     * Chemistry editor.\n     * @type {CustomEditor}\n     */\n    const chemEditorParams = {\n      name: 'Chemistry',\n      toolbar: 'chemistry',\n      icon: 'chem.png',\n      confVariable: 'chemEnabled',\n      title: 'ChemType',\n      tooltip: 'Insert a chemistry formula - ChemType', // TODO: Localize tooltip.\n    };\n\n    this.customEditors.addEditor('chemistry', chemEditorParams);\n\n    /**\n     * Environment properties. This object contains data about the integration platform.\n     * @typedef IntegrationEnvironment\n     * @property {String} IntegrationEnvironment.editor - Editor name. For example the HTML editor.\n     * @property {String} IntegrationEnvironment.mode - Integration save mode.\n     * @property {String} IntegrationEnvironment.version - Integration version.\n     *\n     */\n\n    /**\n     * The environment properties object.\n     * @type {IntegrationEnvironment}\n     */\n    this.environment = {};\n\n    /**\n     * @typedef EditionProperties\n     * @property {Boolean} editionProperties.isNewElement - True if the formula is a new one.\n     * False otherwise.\n     * @property {HTMLImageElement} editionProperties.temporalImage- The image element.\n     * Null if the formula is new.\n     * @property {Range} editionProperties.latexRange - Tha range that contains the LaTeX formula.\n     * @property {Range} editionProperties.range - The range that contains the image element.\n     * @property {String} editionProperties.editMode - The edition mode. 'images' by default.\n     */\n\n    /**\n     * The properties of the current edition process.\n     * @type {EditionProperties}\n     */\n    this.editionProperties = {};\n\n    this.editionProperties.isNewElement = true;\n    this.editionProperties.temporalImage = null;\n    this.editionProperties.latexRange = null;\n    this.editionProperties.range = null;\n\n    /**\n     * The {@link IntegrationModel} instance.\n     * @type {IntegrationModel}\n     */\n    this.integrationModel = null;\n\n    /**\n     * The {@link ContentManager} instance.\n     * @type {ContentManager}\n     */\n    this.contentManager = null;\n\n    /**\n     * The current browser.\n     * @type {String}\n     */\n    this.browser = (() => {\n      const ua = navigator.userAgent;\n      let browser = 'none';\n      if (ua.search('Edge/') >= 0) {\n        browser = 'EDGE';\n      } else if (ua.search('Chrome/') >= 0) {\n        browser = 'CHROME';\n      } else if (ua.search('Trident/') >= 0) {\n        browser = 'IE';\n      } else if (ua.search('Firefox/') >= 0) {\n        browser = 'FIREFOX';\n      } else if (ua.search('Safari/') >= 0) {\n        browser = 'SAFARI';\n      }\n      return browser;\n    }\n    )();\n\n    /**\n     * Plugin listeners.\n     * @type {Array.<Object>}\n     */\n    this.listeners = new Listeners();\n\n    /**\n     * Service provider properties.\n     * @type {ServiceProviderProperties}\n     */\n    this.serviceProviderProperties = {};\n    if ('serviceProviderProperties' in coreProperties) {\n      this.serviceProviderProperties = coreProperties.serviceProviderProperties;\n    } else {\n      throw new Error('serviceProviderProperties property missing.');\n    }\n  }\n\n  /**\n   * Static property.\n   * Core listeners.\n   * @private\n   * @type {Listeners}\n   */\n  static get globalListeners() {\n    return Core._globalListeners;\n  }\n\n  /**\n   * Static property setter.\n   * Set core listeners.\n   * @param {Listeners} value - The property value.\n   * @ignore\n   */\n  static set globalListeners(value) {\n    Core._globalListeners = value;\n  }\n\n  /**\n   * Core state. Says if it was loaded previously.\n   * True when Core.init was called. Otherwise, false.\n   * @private\n   * @type {Boolean}\n   */\n  static get initialized() {\n    return Core._initialized;\n  }\n\n  /**\n   * Core state. Says if it was loaded previously.\n   * @param {Boolean} value - True to say that Core.init was called. Otherwise, false.\n   * @ignore\n   */\n  static set initialized(value) {\n    Core._initialized = value;\n  }\n\n  /**\n   * Sets the {@link Core.integrationModel} property.\n   * @param {IntegrationModel} integrationModel - The {@link IntegrationModel} property.\n   */\n  setIntegrationModel(integrationModel) {\n    this.integrationModel = integrationModel;\n  }\n\n  /**\n   * Sets the {@link Core.environment} property.\n   * @param {IntegrationEnvironment} integrationEnvironment -\n   * The {@link IntegrationEnvironment} object.\n   */\n  setEnvironment(integrationEnvironment) {\n    if ('editor' in integrationEnvironment) {\n      this.environment.editor = integrationEnvironment.editor;\n    }\n    if ('mode' in integrationEnvironment) {\n      this.environment.mode = integrationEnvironment.mode;\n    }\n    if ('version' in integrationEnvironment) {\n      this.environment.version = integrationEnvironment.version;\n    }\n  }\n\n  /**\n   * Returns the current {@link ModalDialog} instance.\n   * @returns {ModalDialog} The current {@link ModalDialog} instance.\n   */\n  getModalDialog() {\n    return this.modalDialog;\n  }\n\n  /**\n   * Inits the {@link Core} class, doing the following:\n   * - Calls asynchronously configuration service, retrieving the backend configuration in a JSON.\n   * - Updates {@link Configuration} class with the previous configuration properties.\n   * - Updates the {@link ServiceProvider} class using the configuration service path as reference.\n   * - Loads language strings.\n   * - Fires onLoad event.\n   * @param {Object} serviceParameters - Service parameters.\n   */\n  init() {\n    if (!Core.initialized) {\n      const serviceProviderListener = Listeners.newListener('onInit', () => {\n        const jsConfiguration = ServiceProvider.getService('configurationjs', '', 'get');\n        const jsonConfiguration = JSON.parse(jsConfiguration);\n        Configuration.addConfiguration(jsonConfiguration);\n        // Adding JavaScript (not backend) configuration variables.\n        Configuration.addConfiguration(jsProperties);\n        // Fire 'onLoad' event:\n        // All integration must listen this event in order to know if the plugin\n        // has been properly loaded.\n        StringManager.language = this.language;\n        this.listeners.fire('onLoad', {});\n      });\n\n      ServiceProvider.addListener(serviceProviderListener);\n      ServiceProvider.init(this.serviceProviderProperties);\n\n      Core.initialized = true;\n    } else {\n      // Case when there are more than two editor instances.\n      // After the first editor all the other editors don't need to load any file or service.\n      this.listeners.fire('onLoad', {});\n    }\n  }\n\n  /**\n   * Adds a {@link Listener} to the current instance of the {@link Core} class.\n   * @param {Listener} listener - The listener object.\n   */\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Adds the global {@link Listener} instance to {@link Core} class.\n   * @param {Listener} listener - The event listener to be added.\n   * @static\n   */\n  static addGlobalListener(listener) {\n    Core.globalListeners.add(listener);\n  }\n\n  beforeUpdateFormula(mathml, wirisProperties) {\n    /**\n     * This event is fired before updating the formula.\n     * @type {Object}\n     * @property {String} mathml - MathML to be transformed.\n     * @property {String} editMode - Edit mode.\n     * @property {Object} wirisProperties - Extra attributes for the formula.\n     * @property {String} language - Formula language.\n     */\n    const beforeUpdateEvent = new Event();\n\n    beforeUpdateEvent.mathml = mathml;\n\n    // Cloning wirisProperties object\n    // We don't want wirisProperties object modified.\n    beforeUpdateEvent.wirisProperties = {};\n\n    if (wirisProperties != null) {\n      Object.keys(wirisProperties).forEach((attr) => {\n        beforeUpdateEvent.wirisProperties[attr] = wirisProperties[attr];\n      });\n    }\n\n\n    // Read only.\n    beforeUpdateEvent.language = this.language;\n    beforeUpdateEvent.editMode = this.editMode;\n\n    if (this.listeners.fire('onBeforeFormulaInsertion', beforeUpdateEvent)) {\n      return {};\n    }\n\n    if (Core.globalListeners.fire('onBeforeFormulaInsertion', beforeUpdateEvent)) {\n      return {};\n    }\n\n    return {\n      mathml: beforeUpdateEvent.mathml,\n      wirisProperties: beforeUpdateEvent.wirisProperties,\n    };\n  }\n\n  /**\n   * Converts a MathML into it's correspondent image and inserts the image is\n   * inserted in a HTMLElement target by creating\n   * a new image or updating an existing one.\n   * @param {HTMLElement} focusElement - The HTMLElement to be focused after the insertion.\n   * @param {Window} windowTarget - The window element where the editable content is.\n   * @param {String} mathml - The MathML.\n   * @param {Array.<Object>} wirisProperties - The extra attributes for the formula.\n   * @returns {ReturnObject} - Object with the information of the node or latex to insert.\n   */\n  insertFormula(focusElement, windowTarget, mathml, wirisProperties) {\n    /**\n     * It is the object with the information of the node or latex to insert.\n     * @typedef ReturnObject\n     * @property {Node} [node] - The DOM node to insert.\n     * @property {String} [latex] - The latex to insert.\n     */\n    const returnObject = {};\n\n    if (!mathml) {\n      this.insertElementOnSelection(null, focusElement, windowTarget);\n    } else if (this.editMode === 'latex') {\n      returnObject.latex = Latex.getLatexFromMathML(mathml);\n      // this.integrationModel.getNonLatexNode is an integration wrapper\n      // to have special behaviours for nonLatex.\n      // Not all the integrations have special behaviours for nonLatex.\n      if (!!this.integrationModel.fillNonLatexNode && !returnObject.latex) {\n        const afterUpdateEvent = new Event();\n        afterUpdateEvent.editMode = this.editMode;\n        afterUpdateEvent.windowTarget = windowTarget;\n        afterUpdateEvent.focusElement = focusElement;\n        afterUpdateEvent.latex = returnObject.latex;\n        this.integrationModel.fillNonLatexNode(afterUpdateEvent, windowTarget, mathml);\n      } else {\n        returnObject.node = windowTarget.document.createTextNode(`$$${returnObject.latex}$$`);\n      }\n      this.insertElementOnSelection(returnObject.node, focusElement, windowTarget);\n    } else {\n      returnObject.node = Parser.mathmlToImgObject(windowTarget.document,\n        mathml,\n        wirisProperties, this.language);\n\n      this.insertElementOnSelection(returnObject.node, focusElement, windowTarget);\n    }\n\n    return returnObject;\n  }\n\n  afterUpdateFormula(focusElement, windowTarget, node, latex) {\n    /**\n     * This event is fired after update the formula.\n     * @type {Event}\n     * @param {String} editMode - edit mode.\n     * @param {Object} windowTarget - target window.\n     * @param {Object} focusElement - target element to be focused after update.\n     * @param {String} latex - LaTeX generated by the formula (editMode=latex).\n     * @param {Object} node - node generated after update the formula (text if LaTeX img otherwise).\n     */\n    const afterUpdateEvent = new Event();\n    afterUpdateEvent.editMode = this.editMode;\n    afterUpdateEvent.windowTarget = windowTarget;\n    afterUpdateEvent.focusElement = focusElement;\n    afterUpdateEvent.node = node;\n    afterUpdateEvent.latex = latex;\n\n    if (this.listeners.fire('onAfterFormulaInsertion', afterUpdateEvent)) {\n      return {};\n    }\n\n    if (Core.globalListeners.fire('onAfterFormulaInsertion', afterUpdateEvent)) {\n      return {};\n    }\n\n    return {};\n  }\n\n  /**\n   * Sets the caret after a given Node and set the focus to the owner document.\n   * @param {Node} node - The Node element.\n   */\n  placeCaretAfterNode(node) {\n    this.integrationModel.getSelection();\n    const nodeDocument = node.ownerDocument;\n    if (typeof nodeDocument.getSelection !== 'undefined' && !!node.parentElement) {\n      const range = nodeDocument.createRange();\n      range.setStartAfter(node);\n      range.collapse(true);\n      const selection = nodeDocument.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(range);\n      nodeDocument.body.focus();\n    }\n  }\n\n  /**\n   * Replaces a Selection object with an HTMLElement.\n   * @param {HTMLElement} element - The HTMLElement to replace the selection.\n   * @param {HTMLElement} focusElement - The HTMLElement to be focused after the replace.\n   * @param {Window} windowTarget - The window target.\n   */\n  insertElementOnSelection(element, focusElement, windowTarget) {\n    if (this.editionProperties.isNewElement) {\n      if (element) {\n        if (focusElement.type === 'textarea') {\n          Util.updateTextArea(focusElement, element.textContent);\n        } else if (document.selection && document.getSelection === 0) {\n          let range = windowTarget.document.selection.createRange();\n          windowTarget.document.execCommand('InsertImage', false, element.src);\n\n          if (!('parentElement' in range)) {\n            windowTarget.document.execCommand('delete', false);\n            range = windowTarget.document.selection.createRange();\n            windowTarget.document.execCommand('InsertImage', false, element.src);\n          }\n\n          if ('parentElement' in range) {\n            const temporalObject = range.parentElement();\n\n            if (temporalObject.nodeName.toUpperCase() === 'IMG') {\n              temporalObject.parentNode.replaceChild(element, temporalObject);\n            } else {\n              // IE9 fix: parentNode() does not return the IMG node,\n              // returns the parent DIV node. In IE < 9, pasteHTML does not work well.\n              range.pasteHTML(Util.createObjectCode(element));\n            }\n          }\n        } else {\n          const editorSelection = this.integrationModel.getSelection();\n          let range = null;\n          // In IE is needed keep the range due to after focus the modal window\n          // it can't be retrieved the last selection.\n          if (this.editionProperties.range) {\n            ({ range } = this.editionProperties);\n            this.editionProperties.range = null;\n          } else {\n            range = editorSelection.getRangeAt(0);\n          }\n\n          // Delete if something was surrounded.\n          range.deleteContents();\n\n          let node = range.startContainer;\n          const position = range.startOffset;\n\n          if (node.nodeType === 3) { // TEXT_NODE.\n            node = node.splitText(position);\n            node.parentNode.insertBefore(element, node);\n          } else if (node.nodeType === 1) { // ELEMENT_NODE.\n            node.insertBefore(element, node.childNodes[position]);\n          }\n\n          this.placeCaretAfterNode(element);\n        }\n      } else if (focusElement.type === 'textarea') {\n        focusElement.focus();\n      } else {\n        const editorSelection = this.integrationModel.getSelection();\n        editorSelection.removeAllRanges();\n\n        if (this.editionProperties.range) {\n          const { range } = this.editionProperties;\n          this.editionProperties.range = null;\n          editorSelection.addRange(range);\n        }\n      }\n    } else if (this.editionProperties.latexRange) {\n      if (document.selection && document.getSelection === 0) {\n        this.editionProperties.isNewElement = true;\n        this.editionProperties.latexRange.select();\n        this.insertElementOnSelection(element, focusElement, windowTarget);\n      } else {\n        this.editionProperties.latexRange.deleteContents();\n        this.editionProperties.latexRange.insertNode(element);\n        this.placeCaretAfterNode(element);\n      }\n    } else if (focusElement.type === 'textarea') {\n      let item;\n      // Wrapper for some integrations that can have special behaviours to show latex.\n      if (typeof this.integrationModel.getSelectedItem !== 'undefined') {\n        item = this.integrationModel.getSelectedItem(focusElement, false);\n      } else {\n        item = Util.getSelectedItemOnTextarea(focusElement);\n      }\n      Util.updateExistingTextOnTextarea(focusElement,\n        element.textContent,\n        item.startPosition,\n        item.endPosition);\n    } else {\n      if (element && element.nodeName.toLowerCase() === 'img') { // Editor empty, formula has been erased on edit.\n        // There are editors (e.g: CKEditor) that put attributes in images.\n        // We don't allow that behaviour in our images.\n        Image.removeImgDataAttributes(this.editionProperties.temporalImage);\n        // Clone is needed to maintain event references to temporalImage.\n        Image.clone(element, this.editionProperties.temporalImage);\n      } else {\n        this.editionProperties.temporalImage.remove();\n      }\n      this.placeCaretAfterNode(this.editionProperties.temporalImage);\n    }\n  }\n\n\n  /**\n   * Opens a modal dialog containing MathType editor..\n   * @param {HTMLElement} target - The target HTMLElement where formulas should be inserted.\n   * @param {Boolean} isIframe - True if the target HTMLElement is an iframe. False otherwise.\n   */\n  openModalDialog(target, isIframe) {\n    // Textarea elements don't have normal document ranges. It only accepts latex edit.\n    this.editMode = 'images';\n\n    // In IE is needed keep the range due to after focus the modal window\n    // it can't be retrieved the last selection.\n    try {\n      if (isIframe) {\n        // Is needed focus the target first.\n        target.contentWindow.focus();\n        const selection = target.contentWindow.getSelection();\n        this.editionProperties.range = selection.getRangeAt(0);\n      } else {\n        // Is needed focus the target first.\n        target.focus();\n        const selection = getSelection();\n        this.editionProperties.range = selection.getRangeAt(0);\n      }\n    } catch (e) {\n      this.editionProperties.range = null;\n    }\n\n    if (isIframe === undefined) {\n      isIframe = true;\n    }\n\n    this.editionProperties.latexRange = null;\n\n    if (target) {\n      let selectedItem;\n      if (typeof this.integrationModel.getSelectedItem !== 'undefined') {\n        selectedItem = this.integrationModel.getSelectedItem(target, isIframe);\n      } else {\n        selectedItem = Util.getSelectedItem(target, isIframe);\n      }\n\n      // Check LaTeX if and only if the node is a text node (nodeType==3).\n      if (selectedItem) {\n        // Case when image was selected and button pressed.\n        if (!selectedItem.caretPosition && Util.containsClass(selectedItem.node, Configuration.get('imageClassName'))) {\n          this.editionProperties.temporalImage = selectedItem.node;\n          this.editionProperties.isNewElement = false;\n        } else if (selectedItem.node.nodeType === 3) {\n          // If it's a text node means that editor is working with LaTeX.\n          if (this.integrationModel.getMathmlFromTextNode) {\n            // If integration has this function it isn't set range due to we don't\n            // know if it will be put into a textarea as a text or image.\n            const mathml = this.integrationModel.getMathmlFromTextNode(\n              selectedItem.node,\n              selectedItem.caretPosition,\n            );\n            if (mathml) {\n              this.editMode = 'latex';\n              this.editionProperties.isNewElement = false;\n              this.editionProperties.temporalImage = document.createElement('img');\n              this.editionProperties.temporalImage.setAttribute(\n                Configuration.get('imageMathmlAttribute'),\n                MathML.safeXmlEncode(mathml),\n              );\n            }\n          } else {\n            const latexResult = Latex.getLatexFromTextNode(\n              selectedItem.node,\n              selectedItem.caretPosition,\n            );\n            if (latexResult) {\n              const mathml = Latex.getMathMLFromLatex(latexResult.latex);\n              this.editMode = 'latex';\n              this.editionProperties.isNewElement = false;\n              this.editionProperties.temporalImage = document.createElement('img');\n              this.editionProperties.temporalImage.setAttribute(\n                Configuration.get('imageMathmlAttribute'),\n                MathML.safeXmlEncode(mathml),\n              );\n              const windowTarget = isIframe ? target.contentWindow : window;\n\n              if (target.tagName.toLowerCase() !== 'textarea') {\n                if (document.selection) {\n                  let leftOffset = 0;\n                  let previousNode = latexResult.startNode.previousSibling;\n\n                  while (previousNode) {\n                    leftOffset += Util.getNodeLength(previousNode);\n                    previousNode = previousNode.previousSibling;\n                  }\n\n                  this.editionProperties.latexRange = windowTarget.document.selection.createRange();\n                  this.editionProperties.latexRange.moveToElementText(\n                    latexResult.startNode.parentNode,\n                  );\n                  this.editionProperties.latexRange.move(\n                    'character',\n                    leftOffset + latexResult.startPosition,\n                  );\n                  this.editionProperties.latexRange.moveEnd(\n                    'character',\n                    latexResult.latex.length + 4,\n                  ); // Plus 4 for the '$$' characters.\n                } else {\n                  this.editionProperties.latexRange = windowTarget.document.createRange();\n                  this.editionProperties.latexRange.setStart(\n                    latexResult.startNode,\n                    latexResult.startPosition,\n                  );\n                  this.editionProperties.latexRange.setEnd(\n                    latexResult.endNode,\n                    latexResult.endPosition,\n                  );\n                }\n              }\n            }\n          }\n        }\n      } else if (target.tagName.toLowerCase() === 'textarea') {\n        // By default editMode is 'images', but when target is a textarea it needs to be 'latex'.\n        this.editMode = 'latex';\n      }\n    }\n\n    // Setting an object with the editor parameters.\n    // Editor parameters can be customized in several ways:\n    // 1 - editorAttributes: Contains the default editor attributes,\n    //  usually the metrics in a comma separated string. Always exists.\n    // 2 - editorParameters: Object containing custom editor parameters.\n    // These parameters are defined in the backend. So they affects all integration instances.\n\n    // The backend send the default editor attributes in a coma separated\n    // with the following structure: key1=value1,key2=value2...\n    const defaultEditorAttributesArray = Configuration.get('editorAttributes').split(', ');\n    const defaultEditorAttributes = {};\n    for (let i = 0, len = defaultEditorAttributesArray.length; i < len; i += 1) {\n      const tempAttribute = defaultEditorAttributesArray[i].split('=');\n      const key = tempAttribute[0];\n      const value = tempAttribute[1];\n      defaultEditorAttributes[key] = value;\n    }\n    // Custom editor parameters.\n    const editorAttributes = {};\n    // Editor parameters in backend, usually configuration.ini.\n    const serverEditorParameters = Configuration.get('editorParameters');\n    // Editor parameters through JavaScript configuration.\n    const cliendEditorParameters = this.integrationModel.editorParameters;\n    Object.assign(editorAttributes, defaultEditorAttributes, serverEditorParameters);\n    Object.assign(editorAttributes, defaultEditorAttributes, cliendEditorParameters);\n\n    editorAttributes.language = this.language;\n    editorAttributes.rtl = this.integrationModel.rtl;\n\n    const contentManagerAttributes = {};\n    contentManagerAttributes.editorAttributes = editorAttributes;\n    contentManagerAttributes.language = this.language;\n    contentManagerAttributes.customEditors = this.customEditors;\n    contentManagerAttributes.environment = this.environment;\n\n    if (this.modalDialog == null) {\n      this.modalDialog = new ModalDialog(editorAttributes);\n      this.contentManager = new ContentManager(contentManagerAttributes);\n      // When an instance of ContentManager is created we need to wait until\n      // the ContentManager is ready by listening 'onLoad' event.\n      const listener = Listeners.newListener('onLoad', () => {\n        this.contentManager.isNewElement = this.editionProperties.isNewElement;\n        if (this.editionProperties.temporalImage != null) {\n          const mathML = MathML.safeXmlDecode(this.editionProperties.temporalImage.getAttribute(Configuration.get('imageMathmlAttribute')));\n          this.contentManager.mathML = mathML;\n        }\n      });\n      this.contentManager.addListener(listener);\n      this.contentManager.init();\n      this.modalDialog.setContentManager(this.contentManager);\n      this.contentManager.setModalDialogInstance(this.modalDialog);\n    } else {\n      this.contentManager.isNewElement = this.editionProperties.isNewElement;\n      if (this.editionProperties.temporalImage != null) {\n        const mathML = MathML.safeXmlDecode(this.editionProperties.temporalImage.getAttribute(Configuration.get('imageMathmlAttribute')));\n        this.contentManager.mathML = mathML;\n      }\n    }\n    this.contentManager.setIntegrationModel(this.integrationModel);\n    this.modalDialog.open();\n  }\n\n  /**\n   * Returns the {@link CustomEditors} instance.\n   * @return {CustomEditors} The current {@link CustomEditors} instance.\n   */\n  getCustomEditors() {\n    return this.customEditors;\n  }\n}\n\n/**\n * Core static listeners.\n * @type {Listeners}\n * @private\n */\nCore._globalListeners = new Listeners();\n\n/**\n * Resources state. Says if they were loaded or not.\n * @type {Boolean}\n * @private\n */\nCore._initialized = false;\n","// eslint-disable-next-line no-unused-vars, import/named\nimport Core, { ReturnObject } from './core.src';\nimport Image from './image';\nimport Listeners from './listeners';\nimport Util from './util';\nimport Configuration from './configuration';\nimport ServiceProvider from './serviceprovider';\n\n/**\n * @typedef {Object} IntegrationModelProperties\n * @property {string} configurationService - Configuration service path.\n * This parameter is needed to determine all services paths.\n * @property {HTMLElement} integrationModelProperties.target - HTML target.\n * @property {string} integrationModelProperties.scriptName - Integration script name.\n * Usually the name of the integration script.\n * @property {Object} integrationModelProperties.environment - integration environment properties.\n * @property {Object} [integrationModelProperties.callbackMethodArguments] - object containing\n * callback method arguments.\n * @property {string} [integrationModelProperties.version] - integration version number.\n * @property {Object} [integrationModelProperties.editorObject] - object containing\n * the integration editor instance.\n * @property {boolean} [integrationModelProperties.rtl] - true if the editor is in RTL mode.\n * false otherwise.\n * @property {ServiceProviderProperties} [integrationModelProperties.serviceProviderProperties]\n * - The service parameters.\n * @property {Object} [integrationModelProperties.integrationParameters]\n * - Overwritten integration parameters.\n */\n\nexport default class IntegrationModel {\n  /**\n   * @classdesc\n   * This class represents an integration model, allowing the integration script to\n   * communicate with Core class. Each integration must extend this class.\n   * @constructs\n   * @param {IntegrationModelProperties} integrationModelProperties\n   */\n  constructor(integrationModelProperties) {\n    /**\n     * Language. Needed for accessibility and locales. English by default.\n     */\n    this.language = 'en';\n\n    /**\n     * Service parameters\n     * @type {ServiceProviderProperties}\n     */\n    this.serviceProviderProperties = {};\n    if ('serviceProviderProperties' in integrationModelProperties) {\n      this.serviceProviderProperties = integrationModelProperties.serviceProviderProperties;\n    }\n\n    /**\n     * Configuration service path. The integration service is needed by Core class to\n     * load all the backend configuration into the frontend and also to create the paths\n     * of all services (all services lives in the same route). Mandatory property.\n     */\n    this.configurationService = '';\n    if ('configurationService' in integrationModelProperties) {\n      this.serviceProviderProperties.URI = integrationModelProperties.configurationService;\n      console.warn('Deprecated property configurationService. Use serviceParameters on instead.',\n        [integrationModelProperties.configurationService]);\n    }\n\n    /**\n     * Plugin version. Needed to stats and caching.\n     * @type {string}\n     */\n    this.version = ('version' in integrationModelProperties ? integrationModelProperties.version : '');\n\n    /**\n     * DOM target in which the plugin works. Needed to associate events, insert formulas, etc.\n     * Mandatory property.\n     */\n    this.target = null;\n    if ('target' in integrationModelProperties) {\n      this.target = integrationModelProperties.target;\n    } else {\n      throw new Error('IntegrationModel constructor error: target property missed.');\n    }\n\n    /**\n     * Integration script name. Needed to know the plugin path.\n     */\n    if ('scriptName' in integrationModelProperties) {\n      this.scriptName = integrationModelProperties.scriptName;\n    }\n\n    /**\n     * Object containing the arguments needed by the callback function.\n     */\n    this.callbackMethodArguments = {};\n    if ('callbackMethodArguments' in integrationModelProperties) {\n      this.callbackMethodArguments = integrationModelProperties.callbackMethodArguments;\n    }\n\n    /**\n     * Contains information about the integration environment:\n     * like the name of the editor, the version, etc.\n     */\n    this.environment = {};\n    if ('environment' in integrationModelProperties) {\n      this.environment = integrationModelProperties.environment;\n    }\n\n    /**\n     * Indicates if the DOM target is - or not - and iframe.\n     */\n    this.isIframe = false;\n    if (this.target != null) {\n      this.isIframe = (this.target.tagName.toUpperCase() === 'IFRAME');\n    }\n\n    /**\n     * Instance of the integration editor object. Usually the entry point to access the API\n     * of a HTML editor.\n     */\n    this.editorObject = null;\n    if ('editorObject' in integrationModelProperties) {\n      this.editorObject = integrationModelProperties.editorObject;\n    }\n\n    /**\n     * Specifies if the direction of the text is RTL. false by default.\n     */\n    this.rtl = false;\n    if ('rtl' in integrationModelProperties) {\n      this.rtl = integrationModelProperties.rtl;\n    }\n\n    /**\n     * Specifies if the integration model exposes the locale strings. false by default.\n     */\n    this.managesLanguage = false;\n    if ('managesLanguage' in integrationModelProperties) {\n      this.managesLanguage = integrationModelProperties.managesLanguage;\n    }\n\n    /**\n     * Indicates if an image is selected. Needed to resize the image to the original size in case\n     * the image is resized.\n     * @type {boolean}\n     */\n    this.temporalImageResizing = false;\n\n    /**\n     * The Core class instance associated to the integration model.\n     * @type {Core}\n     */\n    this.core = null;\n\n    /**\n     * Integration model listeners.\n     * @type {Listeners}\n     */\n    this.listeners = new Listeners();\n\n    // Parameters overwrite.\n    if ('integrationParameters' in integrationModelProperties) {\n      IntegrationModel.integrationParameters.forEach((parameter) => {\n        if (parameter in integrationModelProperties.integrationParameters) {\n          // Don't add empty parameters.\n          const value = integrationModelProperties.integrationParameters[parameter];\n          if (Object.keys(value).length !== 0) {\n            this[parameter] = value;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Init function. Usually called from the integration side once the core.js file is loaded.\n   */\n  init() {\n    this.language = this.getLanguage();\n    // We need to wait until Core class is loaded ('onLoad' event) before\n    // call the callback method.\n    const listener = Listeners.newListener('onLoad', () => {\n      this.callbackFunction(this.callbackMethodArguments);\n    });\n\n    // Backwards compatibility.\n    if (this.serviceProviderProperties.URI.indexOf('configuration') !== -1) {\n      const uri = this.serviceProviderProperties.URI;\n      const server = ServiceProvider.getServerLanguageFromService(uri);\n      this.serviceProviderProperties.server = server;\n      const configurationIndex = this.serviceProviderProperties.URI.indexOf('configuration');\n      const subsTring = this.serviceProviderProperties.URI.substring(0, configurationIndex);\n      this.serviceProviderProperties.URI = subsTring;\n    }\n\n    let serviceParametersURI = this.serviceProviderProperties.URI;\n    serviceParametersURI = serviceParametersURI.indexOf('/') === 0 || serviceParametersURI.indexOf('http') === 0\n      ? serviceParametersURI\n      : Util.concatenateUrl(this.getPath(), serviceParametersURI);\n\n    this.serviceProviderProperties.URI = serviceParametersURI;\n\n    const coreProperties = {};\n    coreProperties.serviceProviderProperties = this.serviceProviderProperties;\n    this.setCore(new Core(coreProperties));\n    this.core.addListener(listener);\n    this.core.language = this.language;\n\n    // Initializing Core class.\n    this.core.init();\n    // TODO: Move to Core constructor.\n    this.core.setEnvironment(this.environment);\n  }\n\n  /**\n   * Returns the absolute path of the integration script.\n   * @return {string} - Absolute path for the integration script.\n   */\n  getPath() {\n    if (typeof this.scriptName === 'undefined') {\n      throw new Error('scriptName property needed for getPath.');\n    }\n    const col = document.getElementsByTagName('script');\n    let path = '';\n    for (let i = 0; i < col.length; i += 1) {\n      const j = col[i].src.lastIndexOf(this.scriptName);\n      if (j >= 0) {\n        path = col[i].src.substr(0, j - 1);\n      }\n    }\n    return path;\n  }\n\n  /**\n   * Sets the language property.\n   * @param {string} language - language code.\n   */\n  setLanguage(language) {\n    this.language = language;\n  }\n\n  /**\n   * Sets a Core instance.\n   * @param {Core} core - instance of Core class.\n   */\n  setCore(core) {\n    this.core = core;\n    core.setIntegrationModel(this);\n  }\n\n  /**\n   * Returns the Core instance.\n   * @returns {Core} instance of Core class.\n   */\n  getCore() {\n    return this.core;\n  }\n\n  /**\n   * Sets the object target and updates the iframe property.\n   * @param {HTMLElement} target - target object.\n   */\n  setTarget(target) {\n    this.target = target;\n    this.isIframe = (this.target.tagName.toUpperCase() === 'IFRAME');\n  }\n\n  /**\n   * Sets the editor object.\n   * @param {Object} editorObject - The editor object.\n   */\n  setEditorObject(editorObject) {\n    this.editorObject = editorObject;\n  }\n\n  /**\n   * Opens formula editor to editing a new formula. Can be overwritten in order to make some\n   * actions from integration part before the formula is edited.\n   */\n  openNewFormulaEditor() {\n    this.core.editionProperties.isNewElement = true;\n    this.core.openModalDialog(this.target, this.isIframe);\n  }\n\n  /**\n   * Opens formula editor to editing an existing formula. Can be overwritten in order to make some\n   * actions from integration part before the formula is edited.\n   */\n  openExistingFormulaEditor() {\n    this.core.editionProperties.isNewElement = false;\n    this.core.openModalDialog(this.target, this.isIframe);\n  }\n\n  /**\n   * Wrapper to Core.updateFormula method.\n   * Transform a MathML into a image formula.\n   * Then the image formula is inserted in the specified target, creating a new image (new formula)\n   * or updating an existing one.\n   * @param {string} mathml - MathML to generate the formula.\n   * @param {string} editMode - Edit Mode (LaTeX or images).\n   */\n  updateFormula(mathml) {\n    if (this.editorParameters) {\n      mathml = com.wiris.editor.util.EditorUtils.addAnnotation(mathml, 'application/vnd.wiris.mtweb-params+json', JSON.stringify(this.editorParameters));\n    }\n    let focusElement;\n    let windowTarget;\n    const wirisProperties = null;\n\n    if (this.isIframe) {\n      focusElement = this.target.contentWindow;\n      windowTarget = this.target.contentWindow;\n    } else {\n      focusElement = this.target;\n      windowTarget = window;\n    }\n\n    let obj = this.core.beforeUpdateFormula(mathml, wirisProperties);\n\n    if (!obj) {\n      return '';\n    }\n\n    obj = this.insertFormula(focusElement, windowTarget, obj.mathml, obj.wirisProperties);\n\n    if (!obj) {\n      return '';\n    }\n\n    return this.core.afterUpdateFormula(obj.focusElement, obj.windowTarget, obj.node, obj.latex);\n  }\n\n  /**\n   * Wrapper to Core.insertFormula method.\n   * Inserts the formula in the specified target, creating\n   * a new image (new formula) or updating an existing one.\n   * @param {string} mathml - MathML to generate the formula.\n   * @param {string} editMode - Edit Mode (LaTeX or images).\n   * @returns {ReturnObject} - Object with the information of the node or latex to insert.\n   */\n  insertFormula(focusElement, windowTarget, mathml, wirisProperties) {\n    return this.core.insertFormula(focusElement, windowTarget, mathml, wirisProperties);\n  }\n\n  /**\n   * Returns the target selection.\n   * @returns {Selection} target selection.\n   */\n  getSelection() {\n    if (this.isIframe) {\n      this.target.contentWindow.focus();\n      return this.target.contentWindow.getSelection();\n    }\n    this.target.focus();\n    return window.getSelection();\n  }\n\n  /**\n   * Add events to formulas in the DOM target. The events added are the following:\n   * - doubleClickHandler: handles double click event on formulas by opening an editor\n   * to edit them.\n   * - mouseDownHandler: handles mouse down event on formulas by saving the size of the formula\n   * in case the the formula is resized.\n   * - mouseUpHandler: handles mouse up event on formulas by restoring the saved formula size\n   * in case the formula is resized.\n   */\n  addEvents() {\n    const eventTarget = this.isIframe ? this.target.contentWindow.document : this.target;\n    Util.addElementEvents(\n      eventTarget,\n      (element, event) => {\n        this.doubleClickHandler(element, event);\n      },\n      (element, event) => {\n        this.mousedownHandler(element, event);\n      },\n      (element, event) => {\n        this.mouseupHandler(element, event);\n      },\n    );\n  }\n\n  /**\n   * Handles a double click on the target element. Opens an editor\n   * to re-edit the double-clicked formula.\n   * @param {HTMLElement} element - DOM object target.\n   */\n  doubleClickHandler(element) {\n    if (element.nodeName.toLowerCase() === 'img') {\n      this.core.getCustomEditors().disable();\n      const customEditorAttributeName = Configuration.get('imageCustomEditorName');\n      if (element.hasAttribute(customEditorAttributeName)) {\n        const customEditor = element.getAttribute(customEditorAttributeName);\n        this.core.getCustomEditors().enable(customEditor);\n      }\n      if (Util.containsClass(element, Configuration.get('imageClassName'))) {\n        this.core.editionProperties.temporalImage = element;\n        this.core.editionProperties.isNewElement = true;\n        this.openExistingFormulaEditor();\n      }\n    }\n  }\n\n  /**\n   * Handles a mouse up event on the target element. Restores the image size to avoid\n   * resizing formulas.\n   */\n  mouseupHandler() {\n    if (this.temporalImageResizing) {\n      setTimeout(() => {\n        Image.fixAfterResize(this.temporalImageResizing);\n      }, 10);\n    }\n  }\n\n  /**\n   * Handles a mouse down event on the target element. Saves the formula size to avoid\n   * resizing formulas.\n   * @param {HTMLElement} element - target element.\n   */\n  mousedownHandler(element) {\n    if (element.nodeName.toLowerCase() === 'img') {\n      if (Util.containsClass(element, Configuration.get('imageClassName'))) {\n        this.temporalImageResizing = element;\n      }\n    }\n  }\n\n  /**\n   * Returns the integration language. By default the browser agent. This method\n   * should be overwritten to obtain the integration language, for example using the\n   * plugin API of an HTML editor.\n   * @returns {string} integration language.\n   */\n  getLanguage() {\n    return this.getBrowserLanguage();\n  }\n\n  /**\n   * Returns the browser language.\n   * @returns {string} the browser language.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getBrowserLanguage() {\n    let language = 'en';\n    if (navigator.userLanguage) {\n      language = navigator.userLanguage.substring(0, 2);\n    } else if (navigator.language) {\n      language = navigator.language.substring(0, 2);\n    } else {\n      language = 'en';\n    }\n    return language;\n  }\n\n  /**\n   * This function is called once the {@link Core} is loaded. IntegrationModel class\n   * will fire this method when {@link Core} 'onLoad' event is fired.\n   * This method should content all the logic to init\n   * the integration.\n   */\n  callbackFunction() {\n    // It's needed to wait until the integration target is ready. The event is fired\n    // from the integration side.\n    const listener = Listeners.newListener('onTargetReady', () => {\n      this.addEvents(this.target);\n    });\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Function called when the content submits an action.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  notifyWindowClosed() {\n    // Nothing.\n  }\n\n  /**\n   * Wrapper.\n   * Extracts mathml of a determined text node. This function is used as a wrapper inside core.js\n   * in order to get mathml from a text node that can contain normal LaTeX or other chosen text.\n   * @param {string} textNode - text node to extract the MathML.\n   * @param {int} caretPosition - caret position inside the text node.\n   * @returns {string} MathML inside the text node.\n   */\n\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  getMathmlFromTextNode(textNode, caretPosition) {}\n\n  /**\n   * Wrapper\n   * It fills wrs event object of nonLatex with the desired data.\n   * @param {Object} event - event object.\n   * @param {Object} window dom window object.\n   * @param {string} mathml valid mathml.\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  fillNonLatexNode(event, window, mathml) {}\n\n  /**\n    Wrapper.\n   * Returns selected item from the target.\n   * @param {HTMLElement} target - target element\n   * @param {boolean} iframe\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  getSelectedItem(target, isIframe) {}\n}\n\n// To know if the integration that extends this class implements\n// wrapper methods, they are set as undefined.\nIntegrationModel.prototype.getMathmlFromTextNode = undefined;\nIntegrationModel.prototype.fillNonLatexNode = undefined;\nIntegrationModel.prototype.getSelectedItem = undefined;\n\n/**\n * An object containing a list with the overwritable class constructor properties.\n * @type {Object}\n */\nIntegrationModel.integrationParameters = ['serviceProviderProperties', 'editorParameters'];\n","\n// Elements\n\nlet viewElements = ['abs', 'and', 'annotation', 'annotation-xml', 'apply', 'approx', 'arccos', 'arccosh', 'arccot', 'arccoth', 'arccsc', 'arccsch', 'arcsec', 'arcsech', 'arcsin', 'arcsinh', 'arctan', 'arctanh', 'arg', 'bind', 'bvar', 'card', 'cartesianproduct', 'cbytes', 'ceiling', 'cerror', 'ci', 'cn', 'codomain', 'complexes', 'compose', 'condition', 'conjugate', 'cos', 'cosh', 'cot', 'coth', 'cs', 'csc', 'csch', 'csymbol', 'curl', 'declare', 'degree', 'determinant', 'diff', 'divergence', 'divide', 'domain', 'domainofapplication', 'emptyset', 'eq', 'equivalent', 'eulergamma', 'exists', 'exp', 'exponentiale', 'factorial', 'factorof', 'false', 'floor', 'fn', 'forall', 'gcd', 'geq', 'grad', 'gt', 'ident', 'image', 'imaginary', 'imaginaryi', 'implies', 'in', 'infinity', 'int', 'integers', 'intersect', 'interval', 'inverse', 'lambda', 'laplacian', 'lcm', 'leq', 'limit', 'list', 'ln', 'log', 'logbase', 'lowlimit', 'lt', 'maction', 'maligngroup', 'malignmark', 'matrix', 'matrixrow', 'max', 'mean', 'median', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'min', 'minus', 'mlabeledtr', 'mlongdiv', 'mmultiscripts', 'mn', 'mo', 'mode', 'moment', 'momentabout', 'mover', 'mpadded', 'mphantom', 'mprescripts', 'mroot', 'mrow', 'ms', 'mscarries', 'mscarry', 'msgroup', 'msline', 'mspace', 'msqrt', 'msrow', 'mstack', 'mstyle', 'msub', 'msubsup', 'msup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'naturalnumbers', 'neq', 'none', 'not', 'notanumber', 'notin', 'notprsubset', 'notsubset', 'or', 'otherwise', 'outerproduct', 'partialdiff', 'pi', 'piece', 'piecewise', 'plus', 'power', 'primes', 'product', 'prsubset', 'quotient', 'rationals', 'real', 'reals', 'reln', 'rem', 'root', 'scalarproduct', 'sdev', 'sec', 'sech', 'selector', 'semantics', 'sep', 'set', 'setdiff', 'share', 'sin', 'sinh', 'subset', 'sum', 'tan', 'tanh', 'tendsto', 'times', 'transpose', 'true', 'union', 'uplimit', 'variance', 'vector', 'vectorproduct', 'xor'];\n\n// MathML's \"image\" element collides with CKeditor model's \"image\", so\n// we add a \"math-\" prefix to all MathML elements to avoid any\n// collisions altogether.\nlet viewMath = 'math';\nlet modelElements = new Map( [ ...viewElements, viewMath ].map( element => [ element, 'math-' + element ] ) );\nlet modelMath = modelElements.get( viewMath );\n\n// Attributes\n\nlet attributes = ['columnalign', 'accentunder', /*'src',*/ 'subscriptshift', 'infixlinebreakstyle', 'mslinethickness', 'close', 'rightoverhang', 'longdivstyle', 'linebreak', 'bevelled', 'overflow', 'xml:lang', 'leftoverhang', 'columnwidth', 'equalcolumns', 'id', 'fontfamily', 'separators', 'minlabelspacing', 'scriptlevel', 'height', 'occurrence', 'stackalign', 'color', 'cdgroup', 'veryverythickmathspace', 'rowspacing', 'name', 'other', 'order', 'macros', 'veryverythinmathspace', 'notation', 'columnspan', 'fence', 'valign', 'maxsize', 'indentshiftfirst', 'lspace', 'lquote', 'position', 'crossout', 'equalrows', 'altimg-height', 'voffset', 'dir', 'frame', 'denomalign', '%XLINK.prefix;:href', 'actiontype', 'mode', 'display', 'linethickness', 'maxwidth', 'length', 'columnlines', 'movablelimits', 'lineleading', 'scriptsizemultiplier', 'linebreakstyle', 'charalign', 'charspacing', /*'alt',*/ /*'href',*/ 'rquote', 'altimg', 'verythinmathspace', 'rowlines', 'accent', 'groupalign', 'separator', 'mathbackground', 'nargs', 'indenttarget', 'verythickmathspace', 'mathsize', 'symmetric', 'edge', 'open', 'side', 'thinmathspace', 'fontstyle', 'encoding', 'selection', 'columnspacing', 'decimalpoint', /*'style',*/ 'stretchy', 'cd', 'scriptminsize', 'width', 'indentalignfirst', 'shift', 'index', 'linebreakmultchar', 'xml:space', 'scope', 'largeop', 'alttext', 'altimg-valign', 'base', 'closure', 'minsize', 'indentalign', 'framespacing', 'definitionURL', 'rspace', 'numalign', 'fontweight', 'class', 'rowalign', 'form', 'alignmentscope', 'align', '%XLINK.prefix;:type', 'depth', 'fontsize', 'type', 'background', 'displaystyle', 'superscriptshift', 'mediummathspace', 'rowspan', 'indentshiftlast', 'location', 'xref', 'altimg-width', 'thickmathspace', 'indentalignlast', 'mathcolor', 'indentshift', 'mathvariant', 'xmlns'];\n\n// Schema\n\nlet schema = [\n\n    // <math>\n    {\n        realName: viewMath,\n        modelName: modelMath,\n        definition: {\n            allowWhere: [ '$block', '$inline', '$text' ],\n            allowAttributes: attributes,\n            isBlock: false,\n            isLimit: true,\n            isObject: true,\n        },\n        needsCasting: true,\n        allowsText: true,\n    },\n\n    // The other elements\n    ...viewElements.map( element => ( {\n        realName: element,\n        modelName: modelElements.get( element ),\n        definition: {\n            allowIn: [ ...modelElements.values(), modelElements.get( viewMath ) ],\n            allowAttributes: attributes,\n        },\n        needsCasting: true,\n        allowsText: true, // TODO change this so not all elements allow text inside\n    } ) ),\n\n];\n\nexport {\n    schema, // Array of elements' data; one entry per element\n    attributes, // Array of ALL attributes of all MathML elements\n};\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/xmldataprocessor\n */\n\n/* globals DOMParser, document */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\nimport { NBSP_FILLER } from '../view/filler';\n\n/**\n * The XML data processor class.\n * This data processor implementation uses XML as input and output data.\n * This class is needed because unlike HTML, XML allows to use any tag with any value.\n * For example, `<link>Text</link>` is a valid XML but invalid HTML.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class XmlDataProcessor {\n\t/**\n\t * Creates a new instance of the XML data processor class.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {Array<String>} [options.namespaces=[]] A list of namespaces allowed to use in the XML input.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * A list of namespaces allowed to use in the XML input.\n\t\t *\n\t\t * For example, registering namespaces [ 'attribute', 'container' ] allows to use `<attirbute:tagName></attribute:tagName>`\n\t\t * and `<container:tagName></container:tagName>` input. It is mainly for debugging.\n\t\t *\n\t\t * @public\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis.namespaces = options.namespaces || [];\n\n\t\t/**\n\t\t * DOM parser instance used to parse an XML string to an XML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an XML string.\n\t\t * There is no need to use a dedicated XML writer because the basic HTML writer works well in this case.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case an XML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} An XML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to XML output.\n\t\t// There is no need to use dedicated for XML serializing method because BasicHtmlWriter works well in this case.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided XML string to a view tree.\n\t *\n\t * @param {String} data An XML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input XML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment, { keepOriginalCase: true } );\n\t}\n\n\t/**\n\t * Converts an XML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\t// Stringify namespaces.\n\t\tconst namespaces = this.namespaces.map( nsp => `xmlns:${ nsp }=\"nsp\"` ).join( ' ' );\n\n\t\t// Wrap data into root element with optional namespace definitions.\n\t\tdata = `<xml ${ namespaces }>${ data }</xml>`;\n\n\t\tconst parsedDocument = this._domParser.parseFromString( data, 'text/xml' );\n\n\t\t// Parse validation.\n\t\tconst parserError = parsedDocument.querySelector( 'parsererror' );\n\n\t\tif ( parserError ) {\n\t\t\tthrow new Error( 'Parse error - ' + parserError.textContent );\n\t\t}\n\n\t\tconst fragment = parsedDocument.createDocumentFragment();\n\t\tconst nodes = parsedDocument.documentElement.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","import XmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/xmldataprocessor';\nimport { BR_FILLER } from '@ckeditor/ckeditor5-engine/src/view/filler';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nexport default class MathmlDataProcessor extends XmlDataProcessor {\n\n    /**\n     * Creates a new instance of the MathML data processor class.\n     *\n     * @param {Object} options Configuration options.\n     * @param {Array<String>} [options.namespaces=[]] A list of namespaces allowed to use in the XML input.\n     */\n    constructor( options = {} ) {\n\n        // Call XmlDataProcessor's constructor\n        super( options );\n\n        // Use BR_FILLER instead of NSBP_FILLER to identify <br/> and remove them when retrieving data\n        this._domConverter = new DomConverter( { blockFiller: BR_FILLER } );\n\n    }\n\n\ttoData( viewFragment ) {\n        // Convert view DocumentFragment to DOM DocumentFragment.\n        const domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n        let frontier = [ ...domFragment.children ];\n        let current;\n        while ( current = frontier.pop() ) {\n\n            // Removes any block fillers CKEditor might've added\n            if ( current.nodeName.toLowerCase() == 'br' && current.hasAttribute( 'data-cke-filler' ) && current.closest( 'math' ) ) {\n                current.parentNode.removeChild( current );\n            }\n\n            // Replaces < with &lt;, > with &gt;, & with &amp; in attributes\n            for ( let attr of current.attributes ) {\n                current.setAttribute( attr.name, attr.value\n                    .replace( /&/g, '&amp;' )\n                    .replace( /</g, '&lt;' )\n                    .replace( />/g, '&gt;' )\n                );\n            }\n\n            frontier.push( ...current.children );\n\n        }\n\n        // Convert DOM DocumentFragment to XML output.\n        // There is no need to use dedicated for XML serializing method because BasicHtmlWriter works well in this case.\n        //return this._htmlWriter.getHtml( domFragment );\n        const doc = document.implementation.createHTMLDocument( '' );\n        const container = doc.createElement( 'div' );\n        container.appendChild( domFragment );\n\n        // Cleaned HTML containing MathML\n        // 'abc<math>123</math>def<math>456</math>ghi'\n        return container.innerHTML.replace( /&amp;/g, '&' );\n\n    }\n\n    toView( data ) {\n\n        // Convert HTML entities (e.g. &nbsp;) to character entities (e.g. &#160;)\n        let domParser = new DOMParser();\n        data = data.replace( /&.*?;/g, i => {\n            let out = domParser.parseFromString( i, 'text/html' ).body.childNodes[0].data;\n            return out == '<' || out == '>' ? i : out;\n        } );\n\n        // Convert UTF-8 characters to entities\n        data = data.replace( /[\\u00A0-\\u9999]/gm, i => '&#' + i.charCodeAt( 0 ) + ';' );\n\n        // We need to find and close the dangling open tags like <img> that HTML5 allows but XML does not.\n        data = data.replace( /<(?:area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)[\\s\\S]*?>/g, match => match.replace( /([^\\/])>/, '$1/>' ) );\n\n        // Convert input XML data to DOM DocumentFragment.\n        const domFragment = this._toDom( data );\n\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        return this._domConverter.domToView( domFragment, { keepOriginalCase: true } );\n\n    }\n\n}","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport { schema as mathmlSchema, attributes as mathmlAttributes } from './mathmlschema';\nimport MathmlDataProcessor from './conversion/mathmldataprocessor';\n\nexport default class MathML extends Plugin {\n\n    static get requires() {\n        return [];\n    }\n\n    static get pluginName() {\n        return 'MathML';\n    }\n\n    init() {\n\n        const editor = this.editor;\n        const schema = editor.model.schema;\n\n        /*** Extend model ***/\n\n        // For every element of MathML...\n        for ( const { realName, modelName, definition, needsCasting } of mathmlSchema ) {\n\n            // Register the element with its definition\n            schema.register( modelName, definition );\n\n            // Add casting?\n            if ( needsCasting ) {\n\n                editor.conversion.elementToElement( {\n                    model: modelName,\n                    view: realName\n                } );\n\n                /* Add hardcoded converters for href attribute only, as a\n                preventive measure so as to avoid a similar behavior to PLUGINS-1228*/\n                editor.conversion.attributeToAttribute( {\n                    model: {\n                        name: modelName,\n                        key: 'href',\n                    },\n                    view: {\n                        name: realName,\n                        key: 'href',\n                    }\n                } );\n\n            }\n\n        }\n\n        // Apparently it is needed to register every attribute to be converted.\n        // FIXME this adds global converters for attributes on *any* element.\n        // Ideally, these should work on a per-element basis, but adding all\n        // MathML attributes to all MathML elements is too costly.\n        for ( const attribute of mathmlAttributes ) {\n            editor.conversion.attributeToAttribute( {\n                model: attribute,\n                view: attribute,\n            } );\n        }\n\n        // Allow text in some elements\n        schema.extend( '$text', {\n            allowIn: mathmlSchema\n                        .filter( element => element.allowsText )\n                        .map( element => element.modelName )\n        } );\n\n        // Disallow text attributes (bold, italics, etc.) on text nodes\n        schema.addAttributeCheck( context => {\n            const contextArray = Array.from( context.getNames() );\n            if ( contextArray[ contextArray.length - 1 ] == '$text' && contextArray.some( name => name.startsWith( 'math-' ) ) ) {\n                return false;\n            }\n        } );\n\n        // Data processor to output proper MathML\n        editor.data.processor = new MathmlDataProcessor();\n\n    }\n\n}\n","import MathmlDataProcessor from '@wiris/ckeditor5-mathml/src/conversion/mathmldataprocessor';\n\nimport MathML from '../integration-js/src/mathml.js';\nimport Parser from '../integration-js/src/parser.js';\n\nexport default class CustomMathmlDataProcessor extends MathmlDataProcessor {\n\n    toData( viewFragment ) {\n\n        // Get the processed html from MathmlDataProcessor to remove hand traces\n        let html = super.toData( viewFragment );\n\n        const mathPattern = /<math.*?<\\/math.*?>/g;\n\n        // HTML broken down into pieces like so:\n        let htmlPieces = html.split( mathPattern ); // 'abc', 'def', 'ghi'\n        let mathmlPieces = html.match( mathPattern ) || []; // '<math>123</math>', '<math>456</math>'\n\n        // Variables used in the loop\n        let open, inner, close; // '<math>', '123', '</math>'\n        let innerStartIndex, closeStartIndex; // Index of inner and close\n\n        // Iterate only through the <math>...</math> blocks\n        for ( let i = 0; i < mathmlPieces.length; i++ ) {\n\n            innerStartIndex = mathmlPieces[ i ].indexOf( '>' ) + 1;\n            closeStartIndex = mathmlPieces[ i ].indexOf( '</math', innerStartIndex );\n\n            open = mathmlPieces[ i ].substring( 0, innerStartIndex );\n            inner = mathmlPieces[ i ].substring( innerStartIndex, closeStartIndex );\n            close = mathmlPieces[ i ].substring( closeStartIndex );\n\n            // Remove the annotation tags introduced by \"Hand\"\n            inner = MathML.removeAnnotation( inner, 'application/json' );\n\n            mathmlPieces[ i ] = open + inner + close;\n\n        }\n\n        // Return joined pieces\n        let data = htmlPieces // [ 'abc', 'def', 'ghi' ]\n            .map( ( piece, index ) => [ piece, mathmlPieces[ index ] ] ) // [ [ 'abc', '<math>123</math>' ], [ 'def', '<math>456</math>' ], [ 'ghi', undefined ] ]\n            // Use reduce + concat instead of flat because Edge doesn't support flat\n            .reduce( ( acc, cur ) => acc.concat( cur ), [] ) // [ 'abc', '<math>123</math>', 'def', '<math>456</math>', 'ghi', undefined ]\n            .filter( piece => typeof piece !== 'undefined' ) // [ 'abc', '<math>123</math>', 'def', '<math>456</math>', 'ghi' ]\n            .reduce( ( acc, cur ) => acc + cur ); // 'abc<math>123</math>def<math>456</math>ghi'\n\n        // Convert LaTeX instances to MathML elements\n        data = Parser.endParseEditMode( data );\n\n        return data;\n\n    }\n\n}","import Position from '@ckeditor/ckeditor5-engine/src/model/position';\n\nimport CustomMathmlDataProcessor from './conversion/custommathmldataprocessor'\n\nimport IntegrationModel, { integrationModelProperties } from './integration-js/src/integrationmodel';\nimport Util from './integration-js/src/util';\nimport Configuration from './integration-js/src/configuration';\nimport Latex from './integration-js/src/latex';\n\n/**\n * This class represents the MathType integration for CKEditor5.\n * @extends {IntegrationModel}\n */\nexport default class CKEditor5Integration extends IntegrationModel {\n\n    constructor( ckeditorIntegrationModelProperties ) {\n        const editor = ckeditorIntegrationModelProperties.editorObject;\n\n        if ( typeof editor.config != 'undefined' && typeof editor.config.get('mathTypeParameters') != 'undefined') {\n            ckeditorIntegrationModelProperties.integrationParameters = editor.config.get('mathTypeParameters');\n        }\n        /**\n         * CKEditor5 Integration.\n         *\n         * @param {integrationModelProperties} integrationModelAttributes\n         */\n        super( ckeditorIntegrationModelProperties );\n\n        /**\n         * Folder name used for the integration inside CKEditor plugins folder.\n         */\n        this.integrationFolderName = 'ckeditor_wiris';\n    }\n\n\n    /**\n     * @inheritdoc\n     * @returns {string} - The CKEditor instance language.\n     * @override\n     */\n    getLanguage() {\n        // Returns the CKEDitor instance language.\n        return this.editorObject.config.get( 'language' );\n    }\n\n    /**\n     * Adds callbacks to the following CKEditor listeners:\n     * - 'focus' - updates the current instance.\n     * - 'contentDom' - adds 'doubleclick' callback.\n     * - 'doubleclick' - sets to null data.dialog property to avoid modifications for MathType formulas.\n     * - 'setData' - parses the data converting MathML into images.\n     * - 'afterSetData' - adds an observer to MathType formulas to avoid modifications.\n     * - 'getData' - parses the data converting images into selected save mode (MathML by default).\n     * - 'mode' - recalculates the active element.\n     */\n    addEditorListeners() {\n        const editor = this.editorObject;\n\n        if ( typeof editor.config.wirislistenersdisabled == 'undefined' ||\n            !editor.config.wirislistenersdisabled ) {\n\n            this.checkElement();\n\n        }\n    }\n\n    /**\n     * Checks the current container and assign events in case that it doesn't have them.\n     * CKEditor replaces several times the element element during its execution,\n     * so we must assign the events again to editor element.\n     */\n    checkElement() {\n\n        const editor = this.editorObject;\n        const newElement = editor.sourceElement;\n\n        // If the element wasn't treated, add the events.\n        if ( !newElement.wirisActive ) {\n            this.setTarget(newElement);\n            this.addEvents();\n            // Set the element as treated\n            newElement.wirisActive = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @param {HTMLElement} element - HTMLElement target.\n     * @param {MouseEvent} event - event which trigger the handler.\n     */\n    doubleClickHandler(element, event) {\n        if (element.nodeName.toLowerCase() == 'img') {\n            if (Util.containsClass(element, Configuration.get('imageClassName'))) {\n                // Some plugins (image2, image) open a dialog on double click. On formulas\n                // doubleclick event ends here.\n                if (typeof event.stopPropagation != 'undefined') { // old I.E compatibility.\n                    event.stopPropagation();\n                } else {\n                    event.returnValue = false;\n                }\n                this.core.getCustomEditors().disable();\n                const customEditorAttr = element.getAttribute(Configuration.get('imageCustomEditorName'));\n                if (customEditorAttr) {\n                    this.core.getCustomEditors().enable(customEditorAttr);\n                }\n                this.core.editionProperties.temporalImage = element;\n                this.openExistingFormulaEditor();\n            }\n        }\n    }\n\n\n    /** @inheritdoc */\n    getCorePath() {\n        return null; // TODO\n    }\n\n    /** @inheritdoc */\n    callbackFunction() {\n        super.callbackFunction();\n        this.addEditorListeners();\n    }\n\n    openNewFormulaEditor() {\n\n        // Store the editor selection as it will be lost upon opening the modal\n        this.core.editionProperties.selection = this.editorObject.editing.view.document.selection;\n\n        return super.openNewFormulaEditor();\n\n    }\n\n    /**\n     * Replaces old formula with new MathML or inserts it in caret position if new\n     * @param {String} mathml MathML to update old one or insert\n     * @returns {module:engine/model/element~Element} The model element corresponding to the inserted image\n     */\n    insertMathml( mathml ) {\n        // This returns the value returned by the callback function (writer => {...})\n        return this.editorObject.model.change( writer => {\n\n            const core = this.getCore();\n\n            const mathmlDP = new CustomMathmlDataProcessor();\n\n            // \"<math>\" -> <math>\n            let modelElementNew;\n            if ( mathml ) {\n                const viewFragment = mathmlDP.toView( mathml );\n                // <math> -> <math-math>\n                modelElementNew = this.editorObject.data.toModel( viewFragment ).getChild( 0 );\n            }\n\n            // The DOM <img> object corresponding to the formula\n            if ( core.editionProperties.isNewElement ) {\n\n                let viewSelection = this.core.editionProperties.selection || this.editorObject.editing.view.document.selection;\n                let modelPosition = this.editorObject.editing.mapper.toModelPosition( viewSelection.getLastPosition() );\n\n                if ( modelElementNew ) {\n                    writer.insert( modelElementNew, modelPosition );\n                }\n\n                // Remove selection\n                if ( !viewSelection.isCollapsed ) {\n\n                    for ( const range of viewSelection.getRanges() ) {\n                        writer.remove( this.editorObject.editing.mapper.toModelRange( range ) );\n                    }\n\n                }\n\n            } else {\n\n                const img = core.editionProperties.temporalImage;\n                const viewElement = this.editorObject.editing.view.domConverter.domToView( img );\n                const modelElementOld = this.editorObject.editing.mapper.toModelElement( viewElement );\n\n                // Insert the new <math-math> and remove the old one\n                const position = Position._createBefore( modelElementOld );\n                if ( modelElementNew ) {\n                    writer.insert( modelElementNew, position );\n                }\n                writer.remove( modelElementOld );\n\n            }\n\n            return modelElementNew;\n\n        } );\n    }\n\n    /**\n     * Finds the text node corresponding to given DOM text element.\n     * @param {element} viewElement Element to find corresponding text node of.\n     * @returns {module:engine/model/text~Text|undefined} Text node corresponding to the given element or undefined if it doesn't exist.\n     */\n    findText( viewElement ) {\n\n        // mapper always converts text nodes to *new* model elements so we need to convert the text's parents and then come back down\n        let pivot = viewElement;\n        let element;\n        while ( !element ) {\n            element =\n                this.editorObject.editing.mapper.toModelElement(\n                    this.editorObject.editing.view.domConverter.domToView(\n                        pivot\n                    )\n                );\n            pivot = pivot.parentElement;\n        }\n\n        // Navigate through all the subtree under `pivot` in order to find the correct text node\n        const range = this.editorObject.model.createRangeIn( element );\n        const descendants = Array.from( range.getItems() );\n        for ( const node of descendants ) {\n            if ( node.is( 'textProxy' ) && node.data == viewElement.data ) {\n                return node.textNode;\n            }\n        }\n\n    }\n\n    /** @inheritdoc */\n    insertFormula( focusElement, windowTarget, mathml, wirisProperties ) {\n\n        let returnObject = {};\n\n        if ( !mathml ) {\n            this.insertMathml( '' );\n        } else if ( this.core.editMode == 'latex' ) {\n\n            returnObject.latex = Latex.getLatexFromMathML( mathml );\n            returnObject.node = windowTarget.document.createTextNode( '$$' + returnObject.latex + '$$' );\n\n            this.editorObject.model.change( writer => {\n\n                const latexRange = this.core.editionProperties.latexRange;\n\n                const startNode = this.findText( latexRange.startContainer );\n                const endNode = this.findText( latexRange.endContainer );\n\n                const startPosition = writer.createPositionAt( startNode.parent, startNode.startOffset + latexRange.startOffset );\n                const endPosition = writer.createPositionAt( endNode.parent, endNode.startOffset + latexRange.endOffset );\n\n                const range = writer.createRange(\n                    startPosition,\n                    endPosition,\n                );\n\n                writer.remove( range );\n                writer.insertText( '$$' + returnObject.latex + '$$', startNode.getAttributes(), startPosition );\n\n            } );\n\n        } else {\n            returnObject.node = this.editorObject.editing.view.domConverter.viewToDom(\n                this.editorObject.editing.mapper.toViewElement(\n                    this.insertMathml( mathml )\n                )\n            );\n        }\n\n        return returnObject;\n\n    }\n\n    /**\n     * Function called when the content submits an action.\n     */\n    notifyWindowClosed() {\n        this.editorObject.editing.view.focus();\n    }\n\n}","import Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport CKEditor5Integration from '../integration';\n\nexport default class MathType extends Command {\n\n    constructor( editor ) {\n        super( editor );\n    }\n\n    execute( options = {} ) {\n\n        if ( !options.hasOwnProperty( 'integration' ) || !( options.integration instanceof CKEditor5Integration ) ) {\n            throw 'Must pass a valid CKEditor5Integration instance as attribute \"integration\" of options';\n        }\n\n        const integration = options.integration;\n        // Can be that previously custom editor was used. So is needed disable\n        // all the editors to avoid wrong behaviours.\n        integration.core.getCustomEditors().disable();\n        integration.openNewFormulaEditor();\n\n    }\n\n}","import Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport CKEditor5Integration from '../integration';\n\nexport default class ChemType extends Command {\n\n    constructor( editor ) {\n        super( editor );\n    }\n\n    execute( options = {} ) {\n\n        if ( !options.hasOwnProperty( 'integration' ) || !( options.integration instanceof CKEditor5Integration ) ) {\n            throw 'Must pass a valid CKEditor5Integration instance as attribute \"integration\" of options';\n        }\n\n        const integration = options.integration;\n        // Can be that previously custom editor was used. So is needed disable\n        // all the editors to avoid wrong behaviours.\n        integration.core.getCustomEditors().enable( 'chemistry' );\n        integration.openNewFormulaEditor();\n\n    }\n\n}","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 22.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 300 261.7\\\" style=\\\"enable-background:new 0 0 300 261.7;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{fill:#FFFFFF;}\\n\\t.st1{fill:#EF4A5F;}\\n\\t.st2{fill:#C8202F;}\\n</style>\\n<path class=\\\"st0\\\" d=\\\"M300,32.8c0-16.4-13.4-29.7-29.9-29.7c-2.9,0-7.2,0.8-7.2,0.8c-37.9,9.1-71.3,14-112,14c-0.3,0-0.6,0-1,0\\n\\tc-16.5,0-29.9,13.3-29.9,29.7c0,16.4,13.4,29.7,29.9,29.7l0,0c45.3,0,83.1-5.3,125.3-15.3h0C289.3,59.5,300,47.4,300,32.8\\\"/>\\n<path class=\\\"st0\\\" d=\\\"M90.2,257.7c-11.4,0-21.9-6.4-27-16.7l-60-119.9c-7.5-14.9-1.4-33.1,13.5-40.5c14.9-7.5,33.1-1.4,40.5,13.5\\n\\tl27.3,54.7L121.1,39c5.3-15.8,22.4-24.4,38.2-19.1c15.8,5.3,24.4,22.4,19.1,38.2l-59.6,179c-3.9,11.6-14.3,19.7-26.5,20.6\\n\\tC91.6,257.7,90.9,257.7,90.2,257.7\\\"/>\\n<g>\\n\\t<g>\\n\\t\\t<path class=\\\"st1\\\" d=\\\"M90.2,257.7c-11.4,0-21.9-6.4-27-16.7l-60-119.9c-7.5-14.9-1.4-33.1,13.5-40.5c14.9-7.5,33.1-1.4,40.5,13.5\\n\\t\\t\\tl27.3,54.7L121.1,39c5.3-15.8,22.4-24.4,38.2-19.1c15.8,5.3,24.4,22.4,19.1,38.2l-59.6,179c-3.9,11.6-14.3,19.7-26.5,20.6\\n\\t\\t\\tC91.6,257.7,90.9,257.7,90.2,257.7\\\"/>\\n\\t</g>\\n</g>\\n<g>\\n\\t<g>\\n\\t\\t<path class=\\\"st2\\\" d=\\\"M300,32.8c0-16.4-13.4-29.7-29.9-29.7c-2.9,0-7.2,0.8-7.2,0.8c-37.9,9.1-71.3,14-112,14c-0.3,0-0.6,0-1,0\\n\\t\\t\\tc-16.5,0-29.9,13.3-29.9,29.7c0,16.4,13.4,29.7,29.9,29.7l0,0c45.3,0,83.1-5.3,125.3-15.3h0C289.3,59.5,300,47.4,300,32.8\\\"/>\\n\\t</g>\\n</g>\\n</svg>\\n\"","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 22.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 40.3 49.5\\\" style=\\\"enable-background:new 0 0 40.3 49.5;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{fill:#A4CF61;}\\n</style>\\n<path class=\\\"st0\\\" d=\\\"M39.2,12.1c0-1.9-1.1-3.6-2.7-4.4L24.5,0.9l0,0c-0.7-0.4-1.5-0.6-2.4-0.6c-0.9,0-1.7,0.2-2.4,0.6l0,0L2.3,10.8\\n\\tl0,0C0.9,11.7,0,13.2,0,14.9h0v19.6h0c0,1.7,0.9,3.3,2.3,4.1l0,0l17.4,9.9l0,0c0.7,0.4,1.5,0.6,2.4,0.6c0.9,0,1.7-0.2,2.4-0.6l0,0\\n\\tl12.2-6.9h0c1.5-0.8,2.6-2.5,2.6-4.3c0-2.7-2.2-4.9-4.9-4.9c-0.9,0-1.8,0.3-2.5,0.7l0,0l-9.7,5.6l-12.3-7V17.8l12.3-7l9.9,5.7l0,0\\n\\tc0.7,0.4,1.5,0.6,2.4,0.6C37,17,39.2,14.8,39.2,12.1\\\"/>\\n</svg>\\n\"","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport { integrationModelProperties } from './integration-js/src/integrationmodel';\nimport Core from './integration-js/src/core.src.js';\nimport Parser from './integration-js/src/parser.js';\nimport Util from './integration-js/src/util.js';\nimport Image from './integration-js/src/image.js';\nimport Configuration from './integration-js/src/configuration.js';\nimport Listeners from './integration-js/src/listeners';\nimport IntegrationModel from './integration-js/src/integrationmodel.js';\nimport CoreMathML from './integration-js/src/mathml.js';\nimport Latex from './integration-js/src/latex';\n\nimport MathML from '@wiris/ckeditor5-mathml/src/mathml';\n\nimport { downcast } from './conversion/downcast';\nimport MathType from './commands/mathtype';\nimport ChemType from './commands/chemtype';\nimport CKEditor5Integration from './integration';\n\nimport mathIcon from '../theme/icons/formula.svg';\nimport chemIcon from '../theme/icons/chem.svg';\n\nimport CustomMathmlDataProcessor from './conversion/custommathmldataprocessor';\n\n// Expose WirisPlugin variable to the window.\nwindow.WirisPlugin = {\n    Core: Core,\n    Parser: Parser,\n    Image: Image,\n    MathML: CoreMathML,\n    Util: Util,\n    Configuration: Configuration,\n    Listeners: Listeners,\n    IntegrationModel: IntegrationModel,\n    Latex: Latex\n}\nexport default class MathTypePlugin extends Plugin {\n\n    static get requires() {\n        return [ MathML ];\n    }\n\n    static get pluginName() {\n        return 'MathType';\n    }\n\n    init() {\n\n        const editor = this.editor;\n\n        // Downcaster that converts MathML to Wirisformula <img>\n        editor.conversion.for( 'editingDowncast' ).add( downcast( editor ) );\n\n        // Add integration properties\n        /**\n         * Integration model constructor attributes.\n         * @type {integrationModelProperties}\n         */\n        const integrationProperties = {};\n        integrationProperties.environment = {};\n        integrationProperties.environment.editor = 'CKEditor5';\n        integrationProperties.editorObject = editor;\n        integrationProperties.serviceProviderProperties = {};\n        integrationProperties.serviceProviderProperties.URI = 'https://www.wiris.net/demo/plugins/app';\n        integrationProperties.serviceProviderProperties.server = 'java';\n        integrationProperties.target = editor.sourceElement;\n        integrationProperties.scriptName = 'bundle.js';\n        integrationProperties.managesLanguage = true;\n        // etc\n\n        // There are platforms like Drupal that initialize CKEditor but they hide or remove the container element.\n        // To avoid a wrong behaviour, this integration only starts if the workspace container exists.\n        let integration;\n        if ( integrationProperties.target ) {\n            // Instance of the integration associated to this editor instance\n            integration = new CKEditor5Integration( integrationProperties );\n            integration.init();\n            integration.listeners.fire( 'onTargetReady', {} );\n\n            integration.checkElement();\n\n            this.listenTo( editor.editing.view.document, 'click', ( evt, data ) => {\n                // Is double click\n                if ( data.domEvent.detail == 2 ) {\n                    integration.doubleClickHandler( data.domTarget, data.domEvent );\n                    evt.stop();\n                }\n            }, { priority: 'highest' } );\n\n        }\n\n        // Add command to open the formula editor\n        editor.commands.add( 'MathType', new MathType( editor ) );\n\n        // Add command to open the chemistry formula editor\n        editor.commands.add( 'ChemType', new ChemType( editor ) );\n\n        // Add button for the formula editor\n        editor.ui.componentFactory.add( 'MathType', locale => {\n            const view = new ButtonView( locale );\n\n            view.set( {\n                label: 'Insert a math equation - MathType',\n                icon: mathIcon, // TODO CKEditor5 requires SVG icons\n                tooltip: true\n            } );\n\n            // Callback executed once the image is clicked.\n            view.on( 'execute', () => {\n                editor.execute( 'MathType', {\n                    'integration': integration, // Pass integration as parameter\n                } );\n            } );\n\n            return view;\n        } );\n\n        // Add button for the chemistry formula editor\n        editor.ui.componentFactory.add( 'ChemType', locale => {\n            const view = new ButtonView( locale );\n\n            view.set( {\n                label: 'Insert a chemistry formula - ChemType',\n                icon: chemIcon, // TODO CKEditor5 requires SVG icons\n                tooltip: true\n            } );\n\n            // Callback executed once the image is clicked.\n            view.on( 'execute', () => {\n                editor.execute( 'ChemType', {\n                    'integration': integration, // Pass integration as parameter\n                } );\n            } );\n\n            return view;\n        } );\n\n        editor.editing.view.addObserver( ClickObserver );\n\n        editor.editing.view.document.on( 'keydown', jumpOverMath );\n\n        // Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\n        function jumpOverMath( evt, data ) {\n            if ( data.keyCode == keyCodes.arrowleft ) {\n                const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n                if ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n                    const domParent = domSelection.getRangeAt( 0 ).startContainer;\n\n                    if ( domParent.nodeName == 'img' && domParent.classList.contains( 'Wirisformula' ) ) {\n                        domSelection.collapse( domParent.parentNode, Array.from( domParent.parentNode.children ).indexOf( domParent ) );\n                    }\n\n                }\n\n            } else if ( data.keyCode == keyCodes.arrowright ) {\n                const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n                if ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n                    const domParent = domSelection.getRangeAt( 0 ).startContainer;\n\n                    if ( domParent.nodeName == 'img' && domParent.classList.contains( 'Wirisformula' ) ) {\n                        domSelection.collapse( domParent.parentNode, Array.from( domParent.parentNode.children ).indexOf( domParent ) + 1 );\n                    }\n\n                }\n\n            }\n        }\n\n        // Override MathML plugin's data processor to custom data processor\n        editor.data.processor = new CustomMathmlDataProcessor();\n\n    }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/utils\n */\n\n/**\n * Returns the parent element of given name. Returns undefined if position is not inside desired parent.\n *\n * @param {String} parentName Name of parent element to find.\n * @param {module:engine/model/position~Position|module:engine/model/position~Position} position Position to start searching.\n * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n */\nexport function findAncestor( parentName, position ) {\n\tlet parent = position.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.name === parentName ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key Attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue Default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute( key, value, item, writer, defaultValue = 1 ) {\n\tif ( value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * Common method to create empty table cell - it will create proper model structure as table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer Model writer.\n * @param {module:engine/model/position~Position} insertPosition Position at which table cell should be inserted.\n * @param {Object} attributes Element's attributes.\n */\nexport function createEmptyTableCell( writer, insertPosition, attributes = {} ) {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/upcasttable\n */\n\nimport { createEmptyTableCell } from '../commands/utils';\n\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns {Function} Conversion helper.\n */\nexport default function upcastTable() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst viewTable = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { rows, headingRows, headingColumns } = scanTable( viewTable );\n\n\t\t\t// Only set attributes if values is greater then 0.\n\t\t\tconst attributes = {};\n\n\t\t\tif ( headingColumns ) {\n\t\t\t\tattributes.headingColumns = headingColumns;\n\t\t\t}\n\n\t\t\tif ( headingRows ) {\n\t\t\t\tattributes.headingRows = headingRows;\n\t\t\t}\n\n\t\t\tconst table = conversionApi.writer.createElement( 'table', attributes );\n\n\t\t\t// Insert element on allowed position.\n\t\t\tconst splitResult = conversionApi.splitToAllowedParent( table, data.modelCursor );\n\n\t\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\t\tif ( !splitResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.insert( table, splitResult.position );\n\t\t\tconversionApi.consumable.consume( viewTable, { name: true } );\n\n\t\t\tif ( rows.length ) {\n\t\t\t\t// Upcast table rows in proper order (heading rows first).\n\t\t\t\trows.forEach( row => conversionApi.convertItem( row, conversionApi.writer.createPositionAt( table, 'end' ) ) );\n\t\t\t} else {\n\t\t\t\t// Create one row and one table cell for empty table.\n\t\t\t\tconst row = conversionApi.writer.createElement( 'tableRow' );\n\t\t\t\tconversionApi.writer.insert( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t\tcreateEmptyTableCell( conversionApi.writer, conversionApi.writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\n\t\t\t// Set conversion result range.\n\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t// Range should start before inserted element\n\t\t\t\tconversionApi.writer.createPositionBefore( table ),\n\t\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t\t// before: <allowed>[]</allowed>\n\t\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\t\tconversionApi.writer.createPositionAfter( table )\n\t\t\t);\n\n\t\t\t// Now we need to check where the modelCursor should be.\n\t\t\t// If we had to split parent to insert our element then we want to continue conversion inside split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\t\t\tif ( splitResult.cursorParent ) {\n\t\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\n\t\t\t\t// Otherwise just continue after inserted element.\n\t\t\t} else {\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t} );\n\t};\n}\n\nexport function upcastTableCell( elementName ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `element:${ elementName }`, ( evt, data, conversionApi ) => {\n\t\t\tconst viewTableCell = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTableCell, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableCell = conversionApi.writer.createElement( 'tableCell' );\n\n\t\t\t// Insert element on allowed position.\n\t\t\tconst splitResult = conversionApi.splitToAllowedParent( tableCell, data.modelCursor );\n\n\t\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\t\tif ( !splitResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.insert( tableCell, splitResult.position );\n\t\t\tconversionApi.consumable.consume( viewTableCell, { name: true } );\n\n\t\t\tconst modelCursor = conversionApi.writer.createPositionAt( tableCell, 0 );\n\t\t\tconversionApi.convertChildren( viewTableCell, modelCursor );\n\n\t\t\t// Ensure a paragraph in the model for empty table cells.\n\t\t\tif ( !tableCell.childCount ) {\n\t\t\t\tconversionApi.writer.insertElement( 'paragraph', modelCursor );\n\t\t\t}\n\n\t\t\t// Set conversion result range.\n\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t// Range should start before inserted element\n\t\t\t\tconversionApi.writer.createPositionBefore( tableCell ),\n\t\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t\t// before: <allowed>[]</allowed>\n\t\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\t\tconversionApi.writer.createPositionAfter( tableCell )\n\t\t\t);\n\n\t\t\t// Continue after inserted element.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t} );\n\t};\n}\n\n// Scans table rows and extracts required metadata from the table:\n//\n// headingRows    - the number of rows that goes as table header.\n// headingColumns - max number of row headings.\n// rows           - sorted `<tr>`s as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n//\n// @param {module:engine/view/element~Element} viewTable\n// @returns {{headingRows, headingColumns, rows}}\nfunction scanTable( viewTable ) {\n\tconst tableMeta = {\n\t\theadingRows: 0,\n\t\theadingColumns: 0\n\t};\n\n\t// The `<tbody>` and <thead> sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more then one of\n\t// them.\n\t// As the model does not have those sections, rows from different sections must be sorted.\n\t// For example, below is a valid HTML table:\n\t//\n\t//\t\t<table>\n\t//\t\t\t<tbody><tr><td>2</td></tr></tbody>\n\t//\t\t\t<thead><tr><td>1</td></tr></thead>\n\t//\t\t\t<tbody><tr><td>3</td></tr></tbody>\n\t//\t\t</table>\n\t//\n\t// But browsers will render rows in order as: 1 as heading and 2 and 3 as (body).\n\tconst headRows = [];\n\tconst bodyRows = [];\n\n\t// Currently the editor does not support more then one <thead> section.\n\t// Only the first <thead> from the view will be used as heading rows and others will be converted to body rows.\n\tlet firstTheadElement;\n\n\tfor ( const tableChild of Array.from( viewTable.getChildren() ) ) {\n\t\t// Only <thead>, <tbody> & <tfoot> from allowed table children can have <tr>s.\n\t\t// The else is for future purposes (mainly <caption>).\n\t\tif ( tableChild.name === 'tbody' || tableChild.name === 'thead' || tableChild.name === 'tfoot' ) {\n\t\t\t// Save the first <thead> in the table as table header - all other ones will be converted to table body rows.\n\t\t\tif ( tableChild.name === 'thead' && !firstTheadElement ) {\n\t\t\t\tfirstTheadElement = tableChild;\n\t\t\t}\n\n\t\t\t// There might be some extra empty text nodes between the `tr`s.\n\t\t\t// Make sure further code operates on `tr`s only. (#145)\n\t\t\tconst trs = Array.from( tableChild.getChildren() ).filter( el => el.is( 'element', 'tr' ) );\n\n\t\t\tfor ( const tr of trs ) {\n\t\t\t\t// This <tr> is a child of a first <thead> element.\n\t\t\t\tif ( tr.parent.name === 'thead' && tr.parent === firstTheadElement ) {\n\t\t\t\t\ttableMeta.headingRows++;\n\t\t\t\t\theadRows.push( tr );\n\t\t\t\t} else {\n\t\t\t\t\tbodyRows.push( tr );\n\t\t\t\t\t// For other rows check how many column headings this row has.\n\n\t\t\t\t\tconst headingCols = scanRowForHeadingColumns( tr, tableMeta, firstTheadElement );\n\n\t\t\t\t\tif ( headingCols > tableMeta.headingColumns ) {\n\t\t\t\t\t\ttableMeta.headingColumns = headingCols;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttableMeta.rows = [ ...headRows, ...bodyRows ];\n\n\treturn tableMeta;\n}\n\n// Scans `<tr>` and its children for metadata:\n// - For heading row:\n//     - either adds this row to heading or body rows.\n//     - updates number of heading rows.\n// - For body rows:\n//     - calculates the number of column headings.\n//\n// @param {module:engine/view/element~Element} tr\n// @returns {Number}\nfunction scanRowForHeadingColumns( tr ) {\n\tlet headingColumns = 0;\n\tlet index = 0;\n\n\t// Filter out empty text nodes from tr children.\n\tconst children = Array.from( tr.getChildren() )\n\t\t.filter( child => child.name === 'th' || child.name === 'td' );\n\n\t// Count starting adjacent <th> elements of a <tr>.\n\twhile ( index < children.length && children[ index ].name === 'th' ) {\n\t\tconst th = children[ index ];\n\n\t\t// Adjust columns calculation by the number of spanned columns.\n\t\tconst colspan = parseInt( th.getAttribute( 'colspan' ) || 1 );\n\n\t\theadingColumns = headingColumns + colspan;\n\t\tindex++;\n\t}\n\n\treturn headingColumns;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablewalker\n */\n\n/**\n * Table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableWalkerValue} with proper table cell attributes.\n */\nexport default class TableWalker {\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only those locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeSpanned` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * See {@link module:table/tablewalker~TableWalkerValue} what values are returned by the table walker.\n\t *\n\t * To iterate over a given row:\n\t *\n\t *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t *\t\tfor ( const cellInfo of tableWalker ) {\n\t *\t\t\tconsole.log( 'A cell at row ' + cellInfo.row + ' and column ' + cellInfo.column );\n\t *\t\t}\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *\t\t+----+----+----+----+----+----+\n\t *\t\t| 00      | 02 | 03 | 04 | 05 |\n\t *\t\t|         +----+----+----+----+\n\t *\t\t|         | 12      | 14 | 15 |\n\t *\t\t|         +----+----+----+    +\n\t *\t\t|         | 22           |    |\n\t *\t\t|----+----+----+----+----+    +\n\t *\t\t| 30 | 31 | 32 | 33 | 34 |    |\n\t *\t\t+----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *\t\t'A cell at row 1 and column 2'\n\t *\t\t'A cell at row 1 and column 4'\n\t *\t\t'A cell at row 1 and column 5'\n\t *\t\t'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 1, includeSpanned: true } );\n\t *\n\t *\t\tfor ( const value of tableWalker ) {\n\t *\t\t\tconsole.log( 'Cell at ' + value.row + ' x ' + value.column + ' : ' + ( value.isSpanned ? 'is spanned' : 'has data' ) );\n\t *\t\t}\n\t *\n\t * will log in the console for the table from previous example:\n\t *\n\t *\t\t'Cell at 1 x 0 : is spanned'\n\t *\t\t'Cell at 1 x 1 : is spanned'\n\t *\t\t'Cell at 1 x 2 : has data'\n\t *\t\t'Cell at 1 x 3 : is spanned'\n\t *\t\t'Cell at 1 x 4 : has data'\n\t *\t\t'Cell at 1 x 5 : has data'\n\t *\n\t * @constructor\n\t * @param {module:engine/model/element~Element} table A table over which the walker iterates.\n\t * @param {Object} [options={}] An object with configuration.\n\t * @param {Number} [options.column] A column index for which this iterator will output cells.\n\t * @param {Number} [options.startRow=0] A row index for which this iterator should start.\n\t * @param {Number} [options.endRow] A row index for which this iterator should end.\n\t * @param {Boolean} [options.includeSpanned=false] Also return values for spanned cells.\n\t */\n\tconstructor( table, options = {} ) {\n\t\t/**\n\t\t * The walker's table element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element}\n\t\t */\n\t\tthis.table = table;\n\n\t\t/**\n\t\t * A row index on which this iterator will start.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.startRow = options.startRow || 0;\n\n\t\t/**\n\t\t * A row index on which this iterator will end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.endRow = typeof options.endRow == 'number' ? options.endRow : undefined;\n\n\t\t/**\n\t\t * Enables output of spanned cells that are normally not yielded.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.includeSpanned = !!options.includeSpanned;\n\n\t\t/**\n\t\t * If set, the table walker will only output cells of a given column or cells that overlap it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.column = typeof options.column == 'number' ? options.column : undefined;\n\n\t\t/**\n\t\t * Row indexes to skip from the iteration.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set<Number>}\n\t\t * @private\n\t\t */\n\t\tthis._skipRows = new Set();\n\n\t\t/**\n\t\t * The current row index.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._row = 0;\n\n\t\t/**\n\t\t * The current column index.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._column = 0;\n\n\t\t/**\n\t\t * The cell index in a parent row. For spanned cells when {@link #includeSpanned} is set to `true`,\n\t\t * this represents the index of the next table cell.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._cellIndex = 0;\n\n\t\t/**\n\t\t * Holds a map of spanned cells in a table.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<Number, Map.<Number, module:engine/model/element~Element>>}\n\t\t * @private\n\t\t */\n\t\tthis._spannedCells = new Map();\n\n\t\tthis._nextCellAtColumn = -1;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:table/tablewalker~TableWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns {module:table/tablewalker~TableWalkerValue} The next table walker's value.\n\t */\n\tnext() {\n\t\tconst row = this.table.getChild( this._row );\n\n\t\t// Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n\t\tif ( !row || this._isOverEndRow() ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tlet cell, skipCurrentValue, outValue;\n\n\t\tif ( this._isSpanned( this._row, this._column ) ) {\n\t\t\tcell = this._getSpanned( this._row, this._column );\n\n\t\t\tskipCurrentValue = !this.includeSpanned || this._shouldSkipRow() || this._shouldSkipColumn();\n\t\t\toutValue = this._formatOutValue( cell, this._column, true );\n\t\t} else {\n\t\t\tcell = row.getChild( this._cellIndex );\n\n\t\t\tif ( !cell ) {\n\t\t\t\t// If there are no more cells left in row advance to the next row.\n\t\t\t\tthis._row++;\n\t\t\t\tthis._column = 0;\n\t\t\t\tthis._cellIndex = 0;\n\t\t\t\tthis._nextCellAtColumn = -1;\n\n\t\t\t\treturn this.next();\n\t\t\t}\n\n\t\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) || 1 );\n\t\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) || 1 );\n\n\t\t\t// Record this cell spans if it's not 1x1 cell.\n\t\t\tif ( colspan > 1 || rowspan > 1 ) {\n\t\t\t\tthis._recordSpans( this._row, this._column, rowspan, colspan, cell );\n\t\t\t}\n\n\t\t\tthis._nextCellAtColumn = this._column + colspan;\n\n\t\t\tskipCurrentValue = this._shouldSkipRow() || this._shouldSkipColumn();\n\t\t\toutValue = this._formatOutValue( cell, this._column, false, rowspan, colspan );\n\t\t}\n\n\t\t// Advance to the next column before returning value.\n\t\tthis._column++;\n\n\t\tif ( this._column == this._nextCellAtColumn ) {\n\t\t\tthis._cellIndex++;\n\t\t}\n\n\t\t// The current value will be returned only if current row and column are not skipped.\n\t\treturn skipCurrentValue ? this.next() : outValue;\n\t}\n\n\t/**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param {Number} row Row index to skip.\n\t */\n\tskipRow( row ) {\n\t\tthis._skipRows.add( row );\n\t}\n\n\t/**\n\t * Checks if the current row is over {@link #endRow}.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_isOverEndRow() {\n\t\t// If {@link #endRow) is defined skip all rows above it.\n\t\treturn this.endRow !== undefined && this._row > this.endRow;\n\t}\n\n\t/**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} cell The table cell to output.\n\t * @param {Number} column Column index (use the cached value).\n\t * @param {Boolean} isSpanned Whether the value is returned for a spanned cell location or actual cell.\n\t * @param {Number} rowspan Rowspan of the current cell.\n\t * @param {Number} colspan Colspan of the current cell.\n\t * @returns {{done: boolean, value: {cell: *, row: Number, column: *, rowspan: *, colspan: *, cellIndex: Number}}}\n\t */\n\t_formatOutValue( cell, column, isSpanned, rowspan = 1, colspan = 1 ) {\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\tcell,\n\t\t\t\trow: this._row,\n\t\t\t\tcolumn,\n\t\t\t\tisSpanned,\n\t\t\t\trowspan,\n\t\t\t\tcolspan,\n\t\t\t\tcellIndex: this._cellIndex\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Checks if the current row should be skipped.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_shouldSkipRow() {\n\t\tconst rowIsBelowStartRow = this._row < this.startRow;\n\t\tconst rowIsMarkedAsSkipped = this._skipRows.has( this._row );\n\n\t\treturn rowIsBelowStartRow || rowIsMarkedAsSkipped;\n\t}\n\n\t/**\n\t * Checks if the current column should be skipped.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_shouldSkipColumn() {\n\t\tif ( this.column === undefined ) {\n\t\t\t// The {@link #column} is not defined so output all columns.\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.column != this._column;\n\t}\n\n\t/**\n\t * Checks if the current cell location (row x column) is spanned by another cell.\n\t *\n\t * @private\n\t * @param {Number} row Row index of a cell location to check.\n\t * @param {Number} column Column index of a cell location to check.\n\t * @returns {Boolean}\n\t */\n\t_isSpanned( row, column ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\t// No spans for given row.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row );\n\n\t\t// If spans for given rows has entry for column it means that this location if spanned by other cell.\n\t\treturn rowSpans.has( column );\n\t}\n\n\t/**\n\t * Returns the cell element that is spanned over `row` x `column` location.\n\t *\n\t * @private\n\t * @param {Number} row Row index of the cell location.\n\t * @param {Number} column Column index of the cell location.\n\t * @returns {module:engine/model/element~Element}\n\t */\n\t_getSpanned( row, column ) {\n\t\treturn this._spannedCells.get( row ).get( column );\n\t}\n\n\t/**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @private\n\t * @param {Number} row Row index of a cell.\n\t * @param {Number} column Column index of a cell.\n\t * @param {Number} rowspan Cell height.\n\t * @param {Number} colspan Cell width.\n\t * @param {module:engine/model/element~Element} cell Cell that is spanned.\n\t */\n\t_recordSpans( row, column, rowspan, colspan, cell ) {\n\t\t// This will update all cell locations after current column - ie a cell has colspan set.\n\t\tfor ( let columnToUpdate = column + 1; columnToUpdate <= column + colspan - 1; columnToUpdate++ ) {\n\t\t\tthis._markSpannedCell( row, columnToUpdate, cell );\n\t\t}\n\n\t\t// This will update all rows below current up to row's height.\n\t\tfor ( let rowToUpdate = row + 1; rowToUpdate < row + rowspan; rowToUpdate++ ) {\n\t\t\tfor ( let columnToUpdate = column; columnToUpdate <= column + colspan - 1; columnToUpdate++ ) {\n\t\t\t\tthis._markSpannedCell( rowToUpdate, columnToUpdate, cell );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @private\n\t * @param {Number} row Row index of the cell location.\n\t * @param {Number} column Column index of the cell location.\n\t * @param {module:engine/model/element~Element} cell Cell that is spanned.\n\t */\n\t_markSpannedCell( row, column, cell ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\tthis._spannedCells.set( row, new Map() );\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row );\n\n\t\trowSpans.set( column, cell );\n\t}\n}\n\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n *\n * @typedef {Object} module:table/tablewalker~TableWalkerValue\n * @property {module:engine/model/element~Element} cell The current table cell.\n * @property {Number} row The row index of a cell.\n * @property {Number} column The column index of a cell. Column index is adjusted to widths and heights of previous cells.\n * @param {Boolean} isSpanned Whether the value is returned for a spanned cell location or actual cell.\n * @property {Number} colspan The `colspan` attribute of a cell. It the model attribute is not present, it is set to `1`. For spanned\n * table locations, it is set to `1`.\n * @property {Number} rowspan The `rowspan` attribute of a cell. It the model attribute is not present, it is set to `1`. For spanned\n * table locations, it is set to `1`.\n * @property {Number} cellIndex The index of the current cell in a parent row.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils\n */\n\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { findAncestor } from './commands/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toTableWidget( viewElement, writer ) {\n\twriter.setCustomProperty( 'table', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { hasSelectionHandler: true } );\n}\n\n/**\n * Checks if a given view element is a table widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isTableWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'table' ) && isWidget( viewElement );\n}\n\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedTableWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isTableWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a table widget editing view element if one is among selection's ancestors.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getTableWidgetAncestor( selection ) {\n\tconst parentTable = findAncestor( 'table', selection.getFirstPosition() );\n\n\tif ( parentTable && isTableWidget( parentTable.parent ) ) {\n\t\treturn parentTable.parent;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/downcast\n */\n\nimport TableWalker from './../tablewalker';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { toTableWidget } from '../utils';\n\n/**\n * Model table element to view table element conversion helper.\n *\n * This conversion helper creates the whole table element with child elements.\n *\n * @param {Object} options\n * @param {Boolean} options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertTable( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( table, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Consume attributes if present to not fire attribute change downcast\n\t\tconversionApi.consumable.consume( table, 'attribute:headingRows:table' );\n\t\tconversionApi.consumable.consume( table, 'attribute:headingColumns:table' );\n\n\t\tconst asWidget = options && options.asWidget;\n\n\t\tconst figureElement = conversionApi.writer.createContainerElement( 'figure', { class: 'table' } );\n\t\tconst tableElement = conversionApi.writer.createContainerElement( 'table' );\n\t\tconversionApi.writer.insert( conversionApi.writer.createPositionAt( figureElement, 0 ), tableElement );\n\n\t\tlet tableWidget;\n\n\t\tif ( asWidget ) {\n\t\t\ttableWidget = toTableWidget( figureElement, conversionApi.writer );\n\t\t}\n\n\t\tconst tableWalker = new TableWalker( table );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// Cache for created table rows.\n\t\tconst viewRows = new Map();\n\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tconst { row, cell } = tableWalkerValue;\n\n\t\t\tconst tableSection = getOrCreateTableSection( getSectionName( row, tableAttributes ), tableElement, conversionApi );\n\t\t\tconst tableRow = table.getChild( row );\n\n\t\t\tconst trElement = viewRows.get( row ) || createTr( tableRow, row, tableSection, conversionApi );\n\t\t\tviewRows.set( row, trElement );\n\n\t\t\t// Consume table cell - it will be always consumed as we convert whole table at once.\n\t\t\tconversionApi.consumable.consume( cell, 'insert' );\n\n\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, 'end' );\n\n\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( table, asWidget ? tableWidget : figureElement );\n\t\tconversionApi.writer.insert( viewPosition, asWidget ? tableWidget : figureElement );\n\t} );\n}\n\n/**\n * Model row element to view `<tr>` element conversion helper.\n *\n * This conversion helper creates the whole `<tr>` element with child elements.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertRow( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:tableRow', ( evt, data, conversionApi ) => {\n\t\tconst tableRow = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( tableRow, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = tableRow.parent;\n\n\t\tconst figureElement = conversionApi.mapper.toViewElement( table );\n\t\tconst tableElement = getViewTable( figureElement );\n\n\t\tconst row = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: row, endRow: row } );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// Cache for created table rows.\n\t\tconst viewRows = new Map();\n\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tconst tableSection = getOrCreateTableSection( getSectionName( row, tableAttributes ), tableElement, conversionApi );\n\n\t\t\tconst trElement = viewRows.get( row ) || createTr( tableRow, row, tableSection, conversionApi );\n\t\t\tviewRows.set( row, trElement );\n\n\t\t\t// Consume table cell - it will be always consumed as we convert whole row at once.\n\t\t\tconversionApi.consumable.consume( tableWalkerValue.cell, 'insert' );\n\n\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, 'end' );\n\n\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\t\t}\n\t} );\n}\n\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertCell( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:tableCell', ( evt, data, conversionApi ) => {\n\t\tconst tableCell = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( tableCell, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\t\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: rowIndex, endRow: rowIndex } );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// We need to iterate over a table in order to get proper row & column values from a walker\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tif ( tableWalkerValue.cell === tableCell ) {\n\t\t\t\tconst trElement = conversionApi.mapper.toViewElement( tableRow );\n\t\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, tableRow.getChildIndex( tableCell ) );\n\n\t\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\n\t\t\t\t// No need to iterate further.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on heading rows table attribute change.\n *\n * This converter will:\n *\n * * Rename `<td>` to `<th>` elements or vice versa depending on headings.\n * * Create `<thead>` or `<tbody>` elements if needed.\n * * Remove empty `<thead>` or `<tbody>` if needed.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastTableHeadingRowsChange( options = {} ) {\n\tconst asWidget = !!options.asWidget;\n\n\treturn dispatcher => dispatcher.on( 'attribute:headingRows:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst figureElement = conversionApi.mapper.toViewElement( table );\n\t\tconst viewTable = getViewTable( figureElement );\n\n\t\tconst oldRows = data.attributeOldValue;\n\t\tconst newRows = data.attributeNewValue;\n\n\t\t// The head section has grown so move rows from <tbody> to <thead>.\n\t\tif ( newRows > oldRows ) {\n\t\t\t// Filter out only those rows that are in wrong section.\n\t\t\tconst rowsToMove = Array.from( table.getChildren() ).filter( ( { index } ) => isBetween( index, oldRows - 1, newRows ) );\n\n\t\t\tconst viewTableHead = getOrCreateTableSection( 'thead', viewTable, conversionApi );\n\t\t\tmoveViewRowsToTableSection( rowsToMove, viewTableHead, conversionApi, 'end' );\n\n\t\t\t// Rename all table cells from moved rows to 'th' as they lands in <thead>.\n\t\t\tfor ( const tableRow of rowsToMove ) {\n\t\t\t\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\t\t\t\trenameViewTableCell( tableCell, 'th', conversionApi, asWidget );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\t\t\tremoveTableSectionIfEmpty( 'tbody', viewTable, conversionApi );\n\t\t}\n\t\t// The head section has shrunk so move rows from <thead> to <tbody>.\n\t\telse {\n\t\t\t// Filter out only those rows that are in wrong section.\n\t\t\tconst rowsToMove = Array.from( table.getChildren() )\n\t\t\t\t.filter( ( { index } ) => isBetween( index, newRows - 1, oldRows ) )\n\t\t\t\t.reverse(); // The rows will be moved from <thead> to <tbody> in reverse order at the beginning of a <tbody>.\n\n\t\t\tconst viewTableBody = getOrCreateTableSection( 'tbody', viewTable, conversionApi );\n\t\t\tmoveViewRowsToTableSection( rowsToMove, viewTableBody, conversionApi, 0 );\n\n\t\t\t// Check if cells moved from <thead> to <tbody> requires renaming to <td> as this depends on current heading columns attribute.\n\t\t\tconst tableWalker = new TableWalker( table, { startRow: newRows ? newRows - 1 : newRows, endRow: oldRows - 1 } );\n\n\t\t\tconst tableAttributes = {\n\t\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t\t};\n\n\t\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\t\trenameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget );\n\t\t\t}\n\n\t\t\t// Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\t\t\tremoveTableSectionIfEmpty( 'thead', viewTable, conversionApi );\n\t\t}\n\n\t\tfunction isBetween( index, lower, upper ) {\n\t\t\treturn index > lower && index < upper;\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on heading columns table attribute change.\n *\n * Depending on changed attributes this converter will rename `<td` to `<th>` elements or vice versa depending of the cell column index.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastTableHeadingColumnsChange( options = {} ) {\n\tconst asWidget = !!options.asWidget;\n\n\treturn dispatcher => dispatcher.on( 'attribute:headingColumns:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\tconst oldColumns = data.attributeOldValue;\n\t\tconst newColumns = data.attributeNewValue;\n\n\t\tconst lastColumnToCheck = ( oldColumns > newColumns ? oldColumns : newColumns ) - 1;\n\n\t\tfor ( const tableWalkerValue of new TableWalker( table ) ) {\n\t\t\t// Skip cells that were not in heading section before and after the change.\n\t\t\tif ( tableWalkerValue.column > lastColumnToCheck ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trenameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget );\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on a removed row.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastRemoveRow() {\n\treturn dispatcher => dispatcher.on( 'remove:tableRow', ( evt, data, conversionApi ) => {\n\t\t// Prevent default remove converter.\n\t\tevt.stop();\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst mapper = conversionApi.mapper;\n\n\t\tconst viewStart = mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'tr' ) );\n\t\tconst viewItem = viewStart.nodeAfter;\n\t\tconst tableSection = viewItem.parent;\n\n\t\t// Remove associated <tr> from the view.\n\t\tconst removeRange = viewWriter.createRangeOn( viewItem );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tmapper.unbindViewElement( child );\n\t\t}\n\n\t\t// Check if table section has any children left - if not remove it from the view.\n\t\tif ( !tableSection.childCount ) {\n\t\t\t// No need to unbind anything as table section is not represented in the model.\n\t\t\tviewWriter.remove( viewWriter.createRangeOn( tableSection ) );\n\t\t}\n\t}, { priority: 'higher' } );\n}\n\n// Renames an existing table cell in the view to a given element name.\n//\n// **Note** This method will not do anything if a view table cell was not yet converted.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} desiredCellElementName\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Boolean} asWidget\nfunction renameViewTableCell( tableCell, desiredCellElementName, conversionApi, asWidget ) {\n\tconst viewWriter = conversionApi.writer;\n\tconst viewCell = conversionApi.mapper.toViewElement( tableCell );\n\n\t// View cell might be not yet converted - skip it as it will be properly created by cell converter later on.\n\tif ( !viewCell ) {\n\t\treturn;\n\t}\n\n\tlet renamedCell;\n\n\tif ( asWidget ) {\n\t\tconst editable = viewWriter.createEditableElement( desiredCellElementName, viewCell.getAttributes() );\n\t\trenamedCell = toWidgetEditable( editable, viewWriter );\n\n\t\tviewWriter.insert( viewWriter.createPositionAfter( viewCell ), renamedCell );\n\t\tviewWriter.move( viewWriter.createRangeIn( viewCell ), viewWriter.createPositionAt( renamedCell, 0 ) );\n\t\tviewWriter.remove( viewWriter.createRangeOn( viewCell ) );\n\t} else {\n\t\trenamedCell = viewWriter.rename( desiredCellElementName, viewCell );\n\t}\n\n\tconversionApi.mapper.unbindViewElement( viewCell );\n\tconversionApi.mapper.bindElements( tableCell, renamedCell );\n}\n\n// Renames a table cell element in the view according to its location in the table.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Boolean} asWidget\nfunction renameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget ) {\n\tconst { cell } = tableWalkerValue;\n\n\t// Check whether current columnIndex is overlapped by table cells from previous rows.\n\tconst desiredCellElementName = getCellElementName( tableWalkerValue, tableAttributes );\n\n\tconst viewCell = conversionApi.mapper.toViewElement( cell );\n\n\t// If in single change we're converting attribute changes and inserting cell the table cell might not be inserted into view\n\t// because of child conversion is done after parent.\n\tif ( viewCell && viewCell.name !== desiredCellElementName ) {\n\t\trenameViewTableCell( cell, desiredCellElementName, conversionApi, asWidget );\n\t}\n}\n\n// Creates a table cell element in the view.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {module:engine/view/position~Position} insertPosition\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction createViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options ) {\n\tconst asWidget = options && options.asWidget;\n\tconst cellElementName = getCellElementName( tableWalkerValue, tableAttributes );\n\n\tconst cellElement = asWidget ?\n\t\ttoWidgetEditable( conversionApi.writer.createEditableElement( cellElementName ), conversionApi.writer ) :\n\t\tconversionApi.writer.createContainerElement( cellElementName );\n\n\tconst tableCell = tableWalkerValue.cell;\n\n\tconst firstChild = tableCell.getChild( 0 );\n\tconst isSingleParagraph = tableCell.childCount === 1 && firstChild.name === 'paragraph';\n\n\tconversionApi.writer.insert( insertPosition, cellElement );\n\n\tif ( isSingleParagraph && !hasAnyAttribute( firstChild ) ) {\n\t\tconst innerParagraph = tableCell.getChild( 0 );\n\t\tconst paragraphInsertPosition = conversionApi.writer.createPositionAt( cellElement, 'end' );\n\n\t\tconversionApi.consumable.consume( innerParagraph, 'insert' );\n\n\t\tif ( options.asWidget ) {\n\t\t\tconst fakeParagraph = conversionApi.writer.createContainerElement( 'span' );\n\n\t\t\tconversionApi.mapper.bindElements( innerParagraph, fakeParagraph );\n\t\t\tconversionApi.writer.insert( paragraphInsertPosition, fakeParagraph );\n\n\t\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t\t} else {\n\t\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t\t\tconversionApi.mapper.bindElements( innerParagraph, cellElement );\n\t\t}\n\t} else {\n\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t}\n}\n\n// Creates `<tr>` view element.\n//\n// @param {module:engine/view/element~Element} tableRow\n// @param {Number} rowIndex\n// @param {module:engine/view/element~Element} tableSection\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @returns {module:engine/view/element~Element}\nfunction createTr( tableRow, rowIndex, tableSection, conversionApi ) {\n\t// Will always consume since we're converting <tableRow> element from a parent <table>.\n\tconversionApi.consumable.consume( tableRow, 'insert' );\n\n\tconst trElement = conversionApi.writer.createContainerElement( 'tr' );\n\tconversionApi.mapper.bindElements( tableRow, trElement );\n\n\tconst headingRows = tableRow.parent.getAttribute( 'headingRows' ) || 0;\n\tconst offset = headingRows > 0 && rowIndex >= headingRows ? rowIndex - headingRows : rowIndex;\n\n\tconst position = conversionApi.writer.createPositionAt( tableSection, offset );\n\tconversionApi.writer.insert( position, trElement );\n\n\treturn trElement;\n}\n\n// Returns `th` for heading cells and `td` for other cells for the current table walker value.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\nfunction getCellElementName( tableWalkerValue, tableAttributes ) {\n\tconst { row, column } = tableWalkerValue;\n\tconst { headingColumns, headingRows } = tableAttributes;\n\n\t// Column heading are all tableCells in the first `columnHeading` rows.\n\tconst isColumnHeading = headingRows && headingRows > row;\n\n\t// So a whole row gets <th> element.\n\tif ( isColumnHeading ) {\n\t\treturn 'th';\n\t}\n\n\t// Row heading are tableCells which columnIndex is lower then headingColumns.\n\tconst isRowHeading = headingColumns && headingColumns > column;\n\n\treturn isRowHeading ? 'th' : 'td';\n}\n\n// Returns the table section name for the current table walker value.\n//\n// @param {Number} row\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\nfunction getSectionName( row, tableAttributes ) {\n\treturn row < tableAttributes.headingRows ? 'thead' : 'tbody';\n}\n\n// Creates or returns an existing `<tbody>` or `<thead>` element witch caching.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} viewTable\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Object} cachedTableSection An object that stores cached elements.\n// @returns {module:engine/view/containerelement~ContainerElement}\nfunction getOrCreateTableSection( sectionName, viewTable, conversionApi ) {\n\tconst viewTableSection = getExistingTableSectionElement( sectionName, viewTable );\n\n\treturn viewTableSection ? viewTableSection : createTableSection( sectionName, viewTable, conversionApi );\n}\n\n// Finds an existing `<tbody>` or `<thead>` element or returns undefined.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction getExistingTableSectionElement( sectionName, tableElement ) {\n\tfor ( const tableSection of tableElement.getChildren() ) {\n\t\tif ( tableSection.name == sectionName ) {\n\t\t\treturn tableSection;\n\t\t}\n\t}\n}\n\n// Creates a table section at the end of the table.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @returns {module:engine/view/containerelement~ContainerElement}\nfunction createTableSection( sectionName, tableElement, conversionApi ) {\n\tconst tableChildElement = conversionApi.writer.createContainerElement( sectionName );\n\n\tconst insertPosition = conversionApi.writer.createPositionAt( tableElement, sectionName == 'tbody' ? 'end' : 0 );\n\n\tconversionApi.writer.insert( insertPosition, tableChildElement );\n\n\treturn tableChildElement;\n}\n\n// Removes an existing `<tbody>` or `<thead>` element if it is empty.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction removeTableSectionIfEmpty( sectionName, tableElement, conversionApi ) {\n\tconst tableSection = getExistingTableSectionElement( sectionName, tableElement );\n\n\tif ( tableSection && tableSection.childCount === 0 ) {\n\t\tconversionApi.writer.remove( conversionApi.writer.createRangeOn( tableSection ) );\n\t}\n}\n\n// Moves view table rows associated with passed model rows to the provided table section element.\n//\n// **Note** This method will skip not converted table rows.\n//\n// @param {Array.<module:engine/model/element~Element>} rowsToMove\n// @param {module:engine/view/element~Element} viewTableSection\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Number|'end'|'before'|'after'} offset Offset or one of the flags.\nfunction moveViewRowsToTableSection( rowsToMove, viewTableSection, conversionApi, offset ) {\n\tfor ( const tableRow of rowsToMove ) {\n\t\tconst viewTableRow = conversionApi.mapper.toViewElement( tableRow );\n\n\t\t// View table row might be not yet converted - skip it as it will be properly created by cell converter later on.\n\t\tif ( viewTableRow ) {\n\t\t\tconversionApi.writer.move(\n\t\t\t\tconversionApi.writer.createRangeOn( viewTableRow ),\n\t\t\t\tconversionApi.writer.createPositionAt( viewTableSection, offset )\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Properly finds '<table>' element inside `<figure>` widget.\n//\n// @param {module:engine/view/element~Element} viewFigure\nfunction getViewTable( viewFigure ) {\n\tfor ( const child of viewFigure.getChildren() ) {\n\t\tif ( child.name === 'table' ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n\n// Checks if element has any attribute set.\n//\n// @param {module:engine/model/element~Element element\n// @returns {Boolean}\nfunction hasAnyAttribute( element ) {\n\treturn !![ ...element.getAttributeKeys() ].length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n *\t\teditor.execute( 'insertTable', { rows: 20, columns: 5 } );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertTableCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tconst validParent = getInsertTableParent( selection.getFirstPosition() );\n\n\t\tthis.isEnabled = schema.checkChild( validParent, 'table' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param {Object} options\n\t * @param {Number} [options.rows=2] The number of rows to create in the inserted table.\n\t * @param {Number} [options.columns=2] The number of columns to create in the inserted table.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst rows = parseInt( options.rows ) || 2;\n\t\tconst columns = parseInt( options.columns ) || 2;\n\n\t\tconst insertPosition = findOptimalInsertionPosition( selection, model );\n\n\t\tmodel.change( writer => {\n\t\t\tconst table = tableUtils.createTable( writer, rows, columns );\n\n\t\t\tmodel.insertContent( table, insertPosition );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n// Returns valid parent to insert table\n//\n// @param {module:engine/model/position} position\nfunction getInsertTableParent( position ) {\n\tconst parent = position.parent;\n\n\treturn parent === parent.root ? parent : parent.parent;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/insertrowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowBelow' );\n *\n * To insert a row above the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowAbove' );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertRowCommand extends Command {\n\t/**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} [options.order=\"below\"] The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The order of insertion relative to the row in which the caret is located.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:table/commands/insertrowcommand~InsertRowCommand#order\n\t\t */\n\t\tthis.order = options.order || 'below';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst tableParent = findAncestor( 'table', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableParent;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst tableCell = findAncestor( 'tableCell', selection.getFirstPosition() );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst row = table.getChildIndex( tableRow );\n\t\tconst insertAt = this.order === 'below' ? row + 1 : row;\n\n\t\ttableUtils.insertRows( table, { rows: 1, at: insertAt } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/insertcolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnLeft' );\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnRight' );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertColumnCommand extends Command {\n\t/**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor An editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} [options.order=\"right\"] The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The order of insertion relative to the column in which the caret is located.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:table/commands/insertcolumncommand~InsertColumnCommand#order\n\t\t */\n\t\tthis.order = options.order || 'right';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst tableParent = findAncestor( 'table', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableParent;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst table = tableCell.parent.parent;\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\t\tconst insertAt = this.order === 'right' ? column + 1 : column;\n\n\t\ttableUtils.insertColumns( table, { columns: 1, at: insertAt } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/splitcellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n *\t\teditor.execute( 'splitTableCellVertically' );\n *\n * @extends module:core/command~Command\n */\nexport default class SplitCellCommand extends Command {\n\t/**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be split.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction || 'horizontally';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selection = document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\tconst isHorizontally = this.direction === 'horizontally';\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tif ( isHorizontally ) {\n\t\t\ttableUtils.splitCellHorizontally( tableCell, 2 );\n\t\t} else {\n\t\t\ttableUtils.splitCellVertically( tableCell, 2 );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n *\t\teditor.execute( 'mergeTableCellRight' );\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n *\n * @extends module:core/command~Command\n */\nexport default class MergeCellCommand extends Command {\n\t/**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */\n\tconstructor( editor, options ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be merged with the currently selected one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction;\n\n\t\t/**\n\t\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isHorizontal\n\t\t */\n\t\tthis.isHorizontal = this.direction == 'right' || this.direction == 'left';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst cellToMerge = this._getMergeableCell();\n\n\t\tthis.isEnabled = !!cellToMerge;\n\t\t// In order to check if currently selected cell can be merged with one defined by #direction some computation are done beforehand.\n\t\t// As such we can cache it as a command's value.\n\t\tthis.value = cellToMerge;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\t\tconst cellToMerge = this.value;\n\t\tconst direction = this.direction;\n\n\t\tmodel.change( writer => {\n\t\t\tconst isMergeNext = direction == 'right' || direction == 'down';\n\n\t\t\t// The merge mechanism is always the same so sort cells to be merged.\n\t\t\tconst cellToExpand = isMergeNext ? tableCell : cellToMerge;\n\t\t\tconst cellToRemove = isMergeNext ? cellToMerge : tableCell;\n\n\t\t\t// Cache the parent of cell to remove for later check.\n\t\t\tconst removedTableCellRow = cellToRemove.parent;\n\n\t\t\tmergeTableCells( cellToRemove, cellToExpand, writer );\n\n\t\t\tconst spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n\t\t\tconst cellSpan = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\t\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\t\t// Update table cell span attribute and merge set selection on merged contents.\n\t\t\twriter.setAttribute( spanAttribute, cellSpan + cellToMergeSpan, cellToExpand );\n\t\t\twriter.setSelection( writer.createRangeIn( cellToExpand ) );\n\n\t\t\t// Remove empty row after merging.\n\t\t\tif ( !removedTableCellRow.childCount ) {\n\t\t\t\tremoveEmptyRow( removedTableCellRow, writer );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t *\n\t * @returns {module:engine/model/element~Element|undefined}\n\t * @private\n\t */\n\t_getMergeableCell() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\t// First get the cell on proper direction.\n\t\tconst cellToMerge = this.isHorizontal ?\n\t\t\tgetHorizontalCell( tableCell, this.direction, tableUtils ) :\n\t\t\tgetVerticalCell( tableCell, this.direction );\n\n\t\tif ( !cellToMerge ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If found check if the span perpendicular to merge direction is equal on both cells.\n\t\tconst spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n\t\tconst span = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\n\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\tif ( cellToMergeSpan === span ) {\n\t\t\treturn cellToMerge;\n\t\t}\n\t}\n}\n\n// Returns the cell that can be merged horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getHorizontalCell( tableCell, direction, tableUtils ) {\n\tconst horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\n\tif ( !horizontalCell ) {\n\t\treturn;\n\t}\n\n\t// Sort cells:\n\tconst cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n\tconst cellOnRight = direction == 'right' ? horizontalCell : tableCell;\n\n\t// Get their column indexes:\n\tconst { column: leftCellColumn } = tableUtils.getCellLocation( cellOnLeft );\n\tconst { column: rightCellColumn } = tableUtils.getCellLocation( cellOnRight );\n\n\tconst leftCellSpan = parseInt( cellOnLeft.getAttribute( 'colspan' ) || 1 );\n\n\t// The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\tconst cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n\n\t// If the right cell's column index is different it means that there are rowspanned cells between them.\n\treturn cellsAreTouching ? horizontalCell : undefined;\n}\n\n// Returns the cell that can be merged vertically.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getVerticalCell( tableCell, direction ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\n\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t// Don't search for mergeable cell if direction points out of the table.\n\tif ( ( direction == 'down' && rowIndex === table.childCount - 1 ) || ( direction == 'up' && rowIndex === 0 ) ) {\n\t\treturn;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\tconst isMergeWithBodyCell = direction == 'down' && ( rowIndex + rowspan ) === headingRows;\n\tconst isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n\n\t// Don't search for mergeable cell if direction points out of the current table section.\n\tif ( headingRows && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn;\n\t}\n\n\tconst currentCellRowSpan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n\n\tconst tableMap = [ ...new TableWalker( table, { endRow: rowOfCellToMerge } ) ];\n\n\tconst currentCellData = tableMap.find( value => value.cell === tableCell );\n\tconst mergeColumn = currentCellData.column;\n\n\tconst cellToMergeData = tableMap.find( ( { row, rowspan, column } ) => {\n\t\tif ( column !== mergeColumn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( direction == 'down' ) {\n\t\t\t// If merging a cell below the mergeRow is already calculated.\n\t\t\treturn row === rowOfCellToMerge;\n\t\t} else {\n\t\t\t// If merging a cell above calculate if it spans to mergeRow.\n\t\t\treturn rowOfCellToMerge === row + rowspan;\n\t\t}\n\t} );\n\n\treturn cellToMergeData && cellToMergeData.cell;\n}\n\n// Properly removes empty row from a table. Will update `rowspan` attribute of cells that overlaps removed row.\n//\n// @param {module:engine/model/element~Element} removedTableCellRow\n// @param {module:engine/model/writer~Writer} writer\nfunction removeEmptyRow( removedTableCellRow, writer ) {\n\tconst table = removedTableCellRow.parent;\n\n\tconst removedRowIndex = table.getChildIndex( removedTableCellRow );\n\n\tfor ( const { cell, row, rowspan } of new TableWalker( table, { endRow: removedRowIndex } ) ) {\n\t\tconst overlapsRemovedRow = row + rowspan - 1 >= removedRowIndex;\n\n\t\tif ( overlapsRemovedRow ) {\n\t\t\tupdateNumericAttribute( 'rowspan', rowspan - 1, cell, writer );\n\t\t}\n\t}\n\n\twriter.remove( removedTableCellRow );\n}\n\n// Merges two table cells - will ensure that after merging cells with empty paragraph the result table cell will only have one paragraph.\n// If one of the merged table cell is empty the merged table cell will have contents of the non-empty table cell.\n// If both are empty the merged table cell will have only one empty paragraph.\n//\n// @param {module:engine/model/element~Element} cellToRemove\n// @param {module:engine/model/element~Element} cellToExpand\n// @param {module:engine/model/writer~Writer} writer\nfunction mergeTableCells( cellToRemove, cellToExpand, writer ) {\n\tif ( !isEmpty( cellToRemove ) ) {\n\t\tif ( isEmpty( cellToExpand ) ) {\n\t\t\twriter.remove( writer.createRangeIn( cellToExpand ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellToRemove ), writer.createPositionAt( cellToExpand, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellToRemove );\n}\n\n// Checks if passed table cell contains empty paragraph.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @returns {Boolean}\nfunction isEmpty( tableCell ) {\n\treturn tableCell.childCount == 1 && tableCell.getChild( 0 ).is( 'paragraph' ) && tableCell.getChild( 0 ).isEmpty;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableCell.parent.parent.childCount > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentRow = table.getChildIndex( tableRow );\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRows && currentRow <= headingRows ) {\n\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows - 1, table, writer, 0 );\n\t\t\t}\n\n\t\t\tconst tableMap = [ ...new TableWalker( table, { endRow: currentRow } ) ];\n\n\t\t\tconst cellsToMove = new Map();\n\n\t\t\t// Get cells from removed row that are spanned over multiple rows.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row === currentRow && rowspan > 1 )\n\t\t\t\t.forEach( ( { column, cell, rowspan } ) => cellsToMove.set( column, { cell, rowspanToSet: rowspan - 1 } ) );\n\n\t\t\t// Reduce rowspan on cells that are above removed row and overlaps removed row.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row <= currentRow - 1 && row + rowspan > currentRow )\n\t\t\t\t.forEach( ( { cell, rowspan } ) => updateNumericAttribute( 'rowspan', rowspan - 1, cell, writer ) );\n\n\t\t\t// Move cells to another row.\n\t\t\tconst targetRow = currentRow + 1;\n\t\t\tconst tableWalker = new TableWalker( table, { includeSpanned: true, startRow: targetRow, endRow: targetRow } );\n\n\t\t\tlet previousCell;\n\n\t\t\tfor ( const { row, column, cell } of [ ...tableWalker ] ) {\n\t\t\t\tif ( cellsToMove.has( column ) ) {\n\t\t\t\t\tconst { cell: cellToMove, rowspanToSet } = cellsToMove.get( column );\n\t\t\t\t\tconst targetPosition = previousCell ?\n\t\t\t\t\t\twriter.createPositionAfter( previousCell ) :\n\t\t\t\t\t\twriter.createPositionAt( table.getChild( row ), 0 );\n\n\t\t\t\t\twriter.move( writer.createRangeOn( cellToMove ), targetPosition );\n\t\t\t\t\tupdateNumericAttribute( 'rowspan', rowspanToSet, cellToMove, writer );\n\n\t\t\t\t\tpreviousCell = cellToMove;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousCell = cell;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.remove( tableRow );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removecolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableColumn' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst tableCell = findAncestor( 'tableCell', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableUtils.getColumns( tableCell.parent.parent ) > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\t\tconst row = table.getChildIndex( tableRow );\n\n\t\t// Cache the table before removing or updating colspans.\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t// Get column index of removed column.\n\t\tconst cellData = tableMap.find( value => value.cell === tableCell );\n\t\tconst removedColumn = cellData.column;\n\n\t\tmodel.change( writer => {\n\t\t\t// Update heading columns attribute if removing a row from head section.\n\t\t\tif ( headingColumns && row <= headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns - 1, table );\n\t\t\t}\n\n\t\t\tfor ( const { cell, column, colspan } of tableMap ) {\n\t\t\t\t// If colspaned cell overlaps removed column decrease it's span.\n\t\t\t\tif ( column <= removedColumn && colspan > 1 && column + colspan > removedColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'colspan', colspan - 1, cell, writer );\n\t\t\t\t} else if ( column === removedColumn ) {\n\t\t\t\t\t// The cell in removed column has colspan of 1.\n\t\t\t\t\twriter.remove( cell );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './utils';\nimport TableWalker from '../tablewalker';\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n *\t\teditor.execute( 'setTableRowHeader' );\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header row.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) header rows according to `forceValue`\n\t * parameter instead of the current model state.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentHeadingRows = table.getAttribute( 'headingRows' ) || 0;\n\t\tconst selectionRow = tableRow.index;\n\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst headingRowsToSet = this.value ? selectionRow : selectionRow + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRowsToSet ) {\n\t\t\t\t// Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n\t\t\t\t// Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n\t\t\t\tconst cellsToSplit = getOverlappingCells( table, headingRowsToSet, currentHeadingRows );\n\n\t\t\t\tfor ( const cell of cellsToSplit ) {\n\t\t\t\t\tsplitHorizontally( cell, headingRowsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingRows', headingRowsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\n\t\treturn !!headingRows && tableCell.parent.index < headingRows;\n\t}\n}\n\n// Returns cells that span beyond the new heading section.\n//\n// @param {module:engine/model/element~Element} table The table to check.\n// @param {Number} headingRowsToSet New heading rows attribute.\n// @param {Number} currentHeadingRows Current heading rows attribute.\n// @returns {Array.<module:engine/model/element~Element>}\nfunction getOverlappingCells( table, headingRowsToSet, currentHeadingRows ) {\n\tconst cellsToSplit = [];\n\n\tconst startAnalysisRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n\t// We're analyzing only when headingRowsToSet > 0.\n\tconst endAnalysisRow = headingRowsToSet - 1;\n\n\tconst tableWalker = new TableWalker( table, { startRow: startAnalysisRow, endRow: endAnalysisRow } );\n\n\tfor ( const { row, rowspan, cell } of tableWalker ) {\n\t\tif ( rowspan > 1 && row + rowspan > headingRowsToSet ) {\n\t\t\tcellsToSplit.push( cell );\n\t\t}\n\t}\n\n\treturn cellsToSplit;\n}\n\n// Splits the table cell horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {Number} headingRows\n// @param {module:engine/model/writer~Writer} writer\nfunction splitHorizontally( tableCell, headingRows, writer ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\tconst rowIndex = tableRow.index;\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) );\n\tconst newRowspan = headingRows - rowIndex;\n\n\tconst attributes = {};\n\n\tconst spanToSet = rowspan - newRowspan;\n\n\tif ( spanToSet > 1 ) {\n\t\tattributes.rowspan = spanToSet;\n\t}\n\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\tif ( colspan > 1 ) {\n\t\tattributes.colspan = colspan;\n\t}\n\n\tconst startRow = table.getChildIndex( tableRow );\n\tconst endRow = startRow + newRowspan;\n\tconst tableMap = [ ...new TableWalker( table, { startRow, endRow, includeSpanned: true } ) ];\n\n\tlet columnIndex;\n\n\tfor ( const { row, column, cell, cellIndex } of tableMap ) {\n\t\tif ( cell === tableCell && columnIndex === undefined ) {\n\t\t\tcolumnIndex = column;\n\t\t}\n\n\t\tif ( columnIndex !== undefined && columnIndex === column && row === endRow ) {\n\t\t\tconst tableRow = table.getChild( row );\n\t\t\tconst tableCellPosition = writer.createPositionAt( tableRow, cellIndex );\n\n\t\t\tcreateEmptyTableCell( writer, tableCellPosition, attributes );\n\t\t}\n\t}\n\n\t// Update the rowspan attribute after updating table.\n\tupdateNumericAttribute( 'rowspan', newRowspan, tableCell, writer );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header column.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) header columns according to\n\t * `forceValue` parameter instead of the current model state.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst { column: selectionColumn } = tableUtils.getCellLocation( tableCell );\n\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst headingColumnsToSet = this.value ? selectionColumn : selectionColumn + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\t\treturn !!headingColumns && column < headingColumns;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableutils\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TableWalker from './tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from './commands/utils';\n\n/**\n * The table utilities plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableUtils';\n\t}\n\n\t/**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance in the table below:\n\t *\n\t *\t\t    0   1   2   3\n\t *\t\t  +---+---+---+---+\n\t *\t\t0 | a     | b | c |\n\t *\t\t  +       +   +---+\n\t *\t\t1 |       |   | d |\n\t *\t\t  +---+---+   +---+\n\t *\t\t2 | e     |   | f |\n\t *\t\t  +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t *\t\tconst cellA = table.getNodeByPath( [ 0, 0 ] );\n\t *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t *\t\t// will return { row: 0, column: 0 }\n\t *\n\t *\t\tconst cellD = table.getNodeByPath( [ 1, 0 ] );\n\t *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t *\t\t// will return { row: 1, column: 3 }\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @returns {Object} Returns a `{row, column}` object.\n\t */\n\tgetCellLocation( tableCell ) {\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: rowIndex, endRow: rowIndex } );\n\n\t\tfor ( const { cell, row, column } of tableWalker ) {\n\t\t\tif ( cell === tableCell ) {\n\t\t\t\treturn { row, column };\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an empty table with proper structure. The table needs to be inserted into the model,\n\t * ie. using {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t *\t\tmodel.change( ( writer ) => {\n\t *\t\t\t// Create a table of 2 rows and 7 columns:\n\t *\t\t\tconst table = tableUtils.createTable( writer, 2, 7);\n\t *\n\t *\t\t\t// Insert table to the model at the best position taking current selection:\n\t *\t\t\tmodel.insertContent( table );\n\t *\t\t}\n\t *\n\t * @param {module:engine/model/writer~Writer} writer The model writer.\n\t * @param {Number} rows The number of rows to create.\n\t * @param {Number} columns The number of columns to create.\n\t * @returns {module:engine/model/element~Element} The created table element.\n\t */\n\tcreateTable( writer, rows, columns ) {\n\t\tconst table = writer.createElement( 'table' );\n\n\t\tcreateEmptyRows( writer, table, 0, rows, columns );\n\n\t\treturn table;\n\t}\n\n\t/**\n\t * Inserts rows into a table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *\t\trow index\n\t *\t\t  0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *\t\t    | a | b | c |       `rows` = 2,    | a | b | c |\n\t *\t\t  1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *\t\t    |   | d | e |                      |   |   |   |\n\t *\t\t  2 +   +---+---+       will give:     +   +---+---+ 2\n\t *\t\t    |   | f | g |                      |   |   |   |\n\t *\t\t  3 +---+---+---+                      +   +---+---+ 3\n\t *\t\t                                       |   | d | e |\n\t *\t\t                                       +---+---+---+ 4\n\t *\t\t                                       +   + f | g |\n\t *\t\t                                       +---+---+---+ 5\n\t *\n\t * @param {module:engine/model/element~Element} table The table model element where the rows will be inserted.\n\t * @param {Object} options\n\t * @param {Number} [options.at=0] Row index at which the rows will be inserted.\n\t * @param {Number} [options.rows=1] The number of rows to insert.\n\t */\n\tinsertRows( table, options = {} ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst rowsToInsert = options.rows || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\t\t// Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n\t\t\tif ( headingRows > insertAt ) {\n\t\t\t\twriter.setAttribute( 'headingRows', headingRows + rowsToInsert, table );\n\t\t\t}\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || insertAt === table.childCount ) {\n\t\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, this.getColumns( table ) );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iterate over all rows above inserted rows in order to check for rowspanned cells.\n\t\t\tconst tableIterator = new TableWalker( table, { endRow: insertAt } );\n\n\t\t\t// Will hold number of cells needed to insert in created rows.\n\t\t\t// The number might be different then table cell width when there are rowspanned cells.\n\t\t\tlet cellsToInsert = 0;\n\n\t\t\tfor ( const { row, rowspan, colspan, cell } of tableIterator ) {\n\t\t\t\tconst isBeforeInsertedRow = row < insertAt;\n\t\t\t\tconst overlapsInsertedRow = row + rowspan > insertAt;\n\n\t\t\t\tif ( isBeforeInsertedRow && overlapsInsertedRow ) {\n\t\t\t\t\t// This cell overlaps inserted rows so we need to expand it further.\n\t\t\t\t\twriter.setAttribute( 'rowspan', rowspan + rowsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Calculate how many cells to insert based on the width of cells in a row at insert position.\n\t\t\t\t// It might be lower then table width as some cells might overlaps inserted row.\n\t\t\t\t// In the table above the cell 'a' overlaps inserted row so only two empty cells are need to be created.\n\t\t\t\tif ( row === insertAt ) {\n\t\t\t\t\tcellsToInsert += colspan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, cellsToInsert );\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts columns into a table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *\t\t0   1   2   3                   0   1   2   3   4   5\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t| a     | b |                   | a             | b |\n\t *\t\t+       +---+                   +               +---+\n\t *\t\t|       | c |                   |               | c |\n\t *\t\t+---+---+---+     will give:    +---+---+---+---+---+\n\t *\t\t| d | e | f |                   | d |   |   | e | f |\n\t *\t\t+---+   +---+                   +---+---+---+   +---+\n\t *\t\t| g |   | h |                   | g |   |   |   | h |\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t| i         |                   | i                 |\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t    ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param {module:engine/model/element~Element} table The table model element where the columns will be inserted.\n\t * @param {Object} options\n\t * @param {Number} [options.at=0] Column index at which the columns will be inserted.\n\t * @param {Number} [options.columns=1] The number of columns to insert.\n\t */\n\tinsertColumns( table, options = {} ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst columnsToInsert = options.columns || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' );\n\n\t\t\t// Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n\t\t\tif ( insertAt < headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns + columnsToInsert, table );\n\t\t\t}\n\n\t\t\tconst tableColumns = this.getColumns( table );\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || tableColumns === insertAt ) {\n\t\t\t\tfor ( const tableRow of table.getChildren() ) {\n\t\t\t\t\tcreateCells( columnsToInsert, writer, writer.createPositionAt( tableRow, insertAt ? 'end' : 0 ) );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableWalker = new TableWalker( table, { column: insertAt, includeSpanned: true } );\n\n\t\t\tfor ( const { row, cell, cellIndex } of tableWalker ) {\n\t\t\t\t// When iterating over column the table walker outputs either:\n\t\t\t\t// - cells at given column index (cell \"e\" from method docs),\n\t\t\t\t// - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeSpanned: true`),\n\t\t\t\t// - or a cell from the same row which spans over this column (cell \"a\").\n\n\t\t\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) || 1 );\n\t\t\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) || 1 );\n\n\t\t\t\tif ( cell.index !== insertAt && colspan > 1 ) {\n\t\t\t\t\t// If column is different than `insertAt`, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n\t\t\t\t\t// For such cells expand them by a number of columns inserted.\n\t\t\t\t\twriter.setAttribute( 'colspan', colspan + columnsToInsert, cell );\n\n\t\t\t\t\t// The `includeSpanned` option will output the \"empty\"/spanned column so skip this row already.\n\t\t\t\t\ttableWalker.skipRow( row );\n\n\t\t\t\t\t// This cell will overlap cells in rows below so skip them also (because of `includeSpanned` option) - (cell \"a\")\n\t\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\t\tfor ( let i = row + 1; i < row + rowspan; i++ ) {\n\t\t\t\t\t\t\ttableWalker.skipRow( i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// It's either cell at this column index or spanned cell by a rowspanned cell from row above.\n\t\t\t\t\t// In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n\t\t\t\t\tconst insertPosition = writer.createPositionAt( table.getChild( row ), cellIndex );\n\n\t\t\t\t\tcreateCells( columnsToInsert, writer, insertPosition );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split to 3 cells:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *\t\t+---+---+---+---+---+\n\t *\t\t| a |   |   | b | c |\n\t *\t\t+---+---+---+---+---+\n\t *\t\t| d         | e | f |\n\t *\t\t+---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a         |\n\t *\t\t+---+---+---+\n\t *\t\t| b | c | d |\n\t *\t\t+---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` to 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a     |   |\n\t *\t\t+---+---+---+\n\t *\t\t| b | c | d |\n\t *\t\t+---+---+---+\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {Number} numberOfCells\n\t */\n\tsplitCellVertically( tableCell, numberOfCells = 2 ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( colspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'colspan', updatedSpan, tableCell, writer );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tconst cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\t\t\t}\n\n\t\t\t// Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n\t\t\tif ( colspan < numberOfCells ) {\n\t\t\t\tconst cellsToInsert = numberOfCells - colspan;\n\n\t\t\t\t// First step: expand cells on the same column as split cell.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t\t\t// Get the column index of split cell.\n\t\t\t\tconst { column: splitCellColumn } = tableMap.find( ( { cell } ) => cell === tableCell );\n\n\t\t\t\t// Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n\t\t\t\tconst cellsToUpdate = tableMap.filter( ( { cell, colspan, column } ) => {\n\t\t\t\t\tconst isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n\t\t\t\t\tconst spansOverColumn = ( column < splitCellColumn && column + colspan > splitCellColumn );\n\n\t\t\t\t\treturn isOnSameColumn || spansOverColumn;\n\t\t\t\t} );\n\n\t\t\t\t// Expand cells vertically.\n\t\t\t\tfor ( const { cell, colspan } of cellsToUpdate ) {\n\t\t\t\t\twriter.setAttribute( 'colspan', colspan + cellsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Second step: create columns after split cell.\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\n\t\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tif ( headingColumns > splitCellColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingColumns', headingColumns + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split to 3 cells:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+   +\n\t *\t\t|   |   |   |\n\t *\t\t+   +---+   +\n\t *\t\t|   |   |   |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+---+\n\t *\t\t|   | d | e |\n\t *\t\t+   +---+---+\n\t *\t\t|   | f | g |\n\t *\t\t+   +---+---+\n\t *\t\t|   | h | i |\n\t *\t\t+---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` to 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+---+\n\t *\t\t|   | d | e |\n\t *\t\t+---+---+---+\n\t *\t\t|   | f | g |\n\t *\t\t+---+---+---+\n\t *\t\t|   | h | i |\n\t *\t\t+---+---+---+\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {Number} numberOfCells\n\t */\n\tsplitCellHorizontally( tableCell, numberOfCells = 2 ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\t\tconst splitCellRow = table.getChildIndex( tableRow );\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t// Cache table map before updating table.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, {\n\t\t\t\t\tstartRow: splitCellRow,\n\t\t\t\t\tendRow: splitCellRow + rowspan - 1,\n\t\t\t\t\tincludeSpanned: true\n\t\t\t\t} ) ];\n\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( rowspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'rowspan', updatedSpan, tableCell, writer );\n\n\t\t\t\tconst { column: cellColumn } = tableMap.find( ( { cell } ) => cell === tableCell );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tfor ( const { column, row, cellIndex } of tableMap ) {\n\t\t\t\t\t// As both newly created cells and the split cell might have rowspan,\n\t\t\t\t\t// the insertion of new cells must go to appropriate rows:\n\t\t\t\t\t//\n\t\t\t\t\t// 1. It's a row after split cell + it's height.\n\t\t\t\t\tconst isAfterSplitCell = row >= splitCellRow + updatedSpan;\n\t\t\t\t\t// 2. Is on the same column.\n\t\t\t\t\tconst isOnSameColumn = column === cellColumn;\n\t\t\t\t\t// 3. And it's row index is after previous cell height.\n\t\t\t\t\tconst isInEvenlySplitRow = ( row + splitCellRow + updatedSpan ) % newCellsSpan === 0;\n\n\t\t\t\t\tif ( isAfterSplitCell && isOnSameColumn && isInEvenlySplitRow ) {\n\t\t\t\t\t\tconst position = writer.createPositionAt( table.getChild( row ), cellIndex );\n\n\t\t\t\t\t\tcreateCells( 1, writer, position, newCellsAttributes );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n\t\t\tif ( rowspan < numberOfCells ) {\n\t\t\t\t// We already split the cell in check one so here we split to the remaining number of cells only.\n\t\t\t\tconst cellsToInsert = numberOfCells - rowspan;\n\n\t\t\t\t// This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, { startRow: 0, endRow: splitCellRow } ) ];\n\n\t\t\t\t// First step: expand cells.\n\t\t\t\tfor ( const { cell, rowspan, row } of tableMap ) {\n\t\t\t\t\t// Expand rowspan of cells that are either:\n\t\t\t\t\t// - on the same row as current cell,\n\t\t\t\t\t// - or are below split cell row and overlaps that row.\n\t\t\t\t\tif ( cell !== tableCell && row + rowspan > splitCellRow ) {\n\t\t\t\t\t\tconst rowspanToSet = rowspan + cellsToInsert;\n\n\t\t\t\t\t\twriter.setAttribute( 'rowspan', rowspanToSet, cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Second step: create rows with single cell below split cell.\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tcreateEmptyRows( writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes );\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\t\t\tif ( headingRows > splitCellRow ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the number of columns for a given table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).getColumns( table );\n\t *\n\t * @param {module:engine/model/element~Element} table The table to analyze.\n\t * @returns {Number}\n\t */\n\tgetColumns( table ) {\n\t\t// Analyze first row only as all the rows should have the same width.\n\t\tconst row = table.getChild( 0 );\n\n\t\treturn [ ...row.getChildren() ].reduce( ( columns, row ) => {\n\t\t\tconst columnWidth = parseInt( row.getAttribute( 'colspan' ) || 1 );\n\n\t\t\treturn columns + columnWidth;\n\t\t}, 0 );\n\t}\n}\n\n// Creates empty rows at the given index in an existing table.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/element~Element} table\n// @param {Number} insertAt Row index of row insertion.\n// @param {Number} rows Number of rows to create.\n// @param {Number} tableCellToInsert Number of cells to insert in each row.\nfunction createEmptyRows( writer, table, insertAt, rows, tableCellToInsert, attributes = {} ) {\n\tfor ( let i = 0; i < rows; i++ ) {\n\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\twriter.insert( tableRow, table, insertAt );\n\n\t\tcreateCells( tableCellToInsert, writer, writer.createPositionAt( tableRow, 'end' ), attributes );\n\t}\n}\n\n// Creates cells at a given position.\n//\n// @param {Number} columns Number of columns to create\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/position~Position} insertPosition\nfunction createCells( cells, writer, insertPosition, attributes = {} ) {\n\tfor ( let i = 0; i < cells; i++ ) {\n\t\tcreateEmptyTableCell( writer, insertPosition, attributes );\n\t}\n}\n\n// Evenly distributes the span of a cell to a number of provided cells.\n// The resulting spans will always be integer values.\n//\n// For instance breaking a span of 7 into 3 cells will return:\n//\n//\t\t{ newCellsSpan: 2, updatedSpan: 3 }\n//\n// as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n//\n// @param {Number} span Span value do break.\n// @param {Number} numberOfCells Number of resulting spans.\n// @returns {{newCellsSpan: Number, updatedSpan: Number}}\nfunction breakSpanEvenly( span, numberOfCells ) {\n\tif ( span < numberOfCells ) {\n\t\treturn { newCellsSpan: 1, updatedSpan: 1 };\n\t}\n\n\tconst newCellsSpan = Math.floor( span / numberOfCells );\n\tconst updatedSpan = ( span - newCellsSpan * numberOfCells ) + newCellsSpan;\n\n\treturn { newCellsSpan, updatedSpan };\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-layout-post-fixer\n */\n\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './../commands/utils';\nimport TableWalker from './../tablewalker';\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of a table cells that extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extends beyond it section.\n * 2. It will add empty table cells to those rows which are narrower then the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or part of a table) to the editor from external sources.\n *\n * For example, see the following table which has the cell (FOO) with the rowspan attribute (2):\n *\n *\t\t<table headingRows=\"1\">\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *\t\t\t\t<tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph>BAZ</paragraph></tableCell>\n *\t\t\t\t<tableCell><paragraph>XYZ</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * will be rendered in the view as:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * In the above example the table will be rendered as a table with two rows - one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would expand from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is a default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ contents will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table rows sizes (number of columns).\n * The size of a table row is calculated by counting column spans of table cells - both horizontal (from the same row) and\n * vertical (from rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header - it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and second with colspan (2).\n * The table cell (FOO) does not expand beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * ## Collaboration & Undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without deeper analysis of the nature of a change. As such, it might lead\n * to a structure which was not intended by the user changes. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which editor content might not return to the original state.\n *\n * This will usually happen when one or more users changes size of the table.\n *\n * As en example see a table below:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * and user actions:\n *\n * 1. Both user have table with two rows and two columns.\n * 2. User A adds a column at the end of the table - this will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table- this will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * The last row is shorter then others so table post-fixer will add empty row to tha last row:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * Unfortunately undo doesn't know the nature of changes and depending which user will apply post-fixer changes undoing them might lead to\n * broken table. If User B will undo inserting column to a table the undo engine will undo only operations of\n * inserting empty cells to rows from initial table state (row 1 & 2) but the cell in post-fixed row will remain:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * After undo the table post-fixer will detect that two rows are shorter then other and will fix table to:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableLayoutPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableLayoutPostFixer( writer, model ) );\n}\n\n// The table layout post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableLayoutPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\t// Do not analyze the same table more then once - may happen for multiple changes in the same table.\n\tconst analyzedTables = new Set();\n\n\tfor ( const entry of changes ) {\n\t\tlet table;\n\n\t\tif ( entry.name == 'table' && entry.type == 'insert' ) {\n\t\t\ttable = entry.position.nodeAfter;\n\t\t}\n\n\t\t// Fix table on adding/removing table cells and rows.\n\t\tif ( entry.name == 'tableRow' || entry.name == 'tableCell' ) {\n\t\t\ttable = findAncestor( 'table', entry.position );\n\t\t}\n\n\t\t// Fix table on any table's attribute change - including attributes of table cells.\n\t\tif ( isTableAttributeEntry( entry ) ) {\n\t\t\ttable = findAncestor( 'table', entry.range.start );\n\t\t}\n\n\t\tif ( table && !analyzedTables.has( table ) ) {\n\t\t\t// Step 1: correct rowspans of table cells if necessary.\n\t\t\t// The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n\t\t\twasFixed = fixTableCellsRowspan( table, writer ) || wasFixed;\n\t\t\t// Step 2: fix table rows sizes.\n\t\t\twasFixed = fixTableRowsSizes( table, writer ) || wasFixed;\n\n\t\t\tanalyzedTables.add( table );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes the invalid value of the rowspan attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\nfunction fixTableCellsRowspan( table, writer ) {\n\tlet wasFixed = false;\n\n\tconst cellsToTrim = findCellsToTrim( table );\n\n\tif ( cellsToTrim.length ) {\n\t\twasFixed = true;\n\n\t\tfor ( const data of cellsToTrim ) {\n\t\t\tupdateNumericAttribute( 'rowspan', data.rowspan, data.cell, writer, 1 );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Makes all table rows in a table the same size.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\nfunction fixTableRowsSizes( table, writer ) {\n\tlet wasFixed = false;\n\n\tconst rowsLengths = getRowsLengths( table );\n\tconst tableSize = rowsLengths[ 0 ];\n\n\tconst isValid = Object.values( rowsLengths ).every( length => length === tableSize );\n\n\tif ( !isValid ) {\n\t\tconst maxColumns = Object.values( rowsLengths ).reduce( ( prev, current ) => current > prev ? current : prev, 0 );\n\n\t\tfor ( const [ rowIndex, size ] of Object.entries( rowsLengths ) ) {\n\t\t\tconst columnsToInsert = maxColumns - size;\n\n\t\t\tif ( columnsToInsert ) {\n\t\t\t\tfor ( let i = 0; i < columnsToInsert; i++ ) {\n\t\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( table.getChild( rowIndex ), 'end' ) );\n\t\t\t\t}\n\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Searches for the table cells that extends beyond the table section to which they belong to. It will return an array of objects\n// that holds table cells to be trimmed and correct value of a rowspan attribute to set.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Array.<{{cell, rowspan}}>}\nfunction findCellsToTrim( table ) {\n\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\tconst maxRows = table.childCount;\n\n\tconst cellsToTrim = [];\n\n\tfor ( const { row, rowspan, cell } of new TableWalker( table ) ) {\n\t\t// Skip cells that do not expand over its row.\n\t\tif ( rowspan < 2 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst isInHeader = row < headingRows;\n\n\t\t// Row limit is either end of header section or whole table as table body is after the header.\n\t\tconst rowLimit = isInHeader ? headingRows : maxRows;\n\n\t\t// If table cell expands over its limit reduce it height to proper value.\n\t\tif ( row + rowspan > rowLimit ) {\n\t\t\tconst newRowspan = rowLimit - row;\n\n\t\t\tcellsToTrim.push( { cell, rowspan: newRowspan } );\n\t\t}\n\t}\n\n\treturn cellsToTrim;\n}\n\n// Returns an object with lengths of rows assigned to the corresponding row index.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Object}\nfunction getRowsLengths( table ) {\n\tconst lengths = {};\n\n\tfor ( const { row } of new TableWalker( table, { includeSpanned: true } ) ) {\n\t\tif ( !lengths[ row ] ) {\n\t\t\tlengths[ row ] = 0;\n\t\t}\n\n\t\tlengths[ row ] += 1;\n\t}\n\n\treturn lengths;\n}\n\n// Checks if the differ entry for an attribute change is one of table's attributes.\n//\n// @param entry\n// @returns {Boolean}\nfunction isTableAttributeEntry( entry ) {\n\tconst isAttributeType = entry.type === 'attribute';\n\tconst key = entry.attributeKey;\n\n\treturn isAttributeType && ( key === 'headingRows' || key === 'colspan' || key === 'rowspan' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which inserts `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have empty `paragraph` as a child.\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * Will be fixed to:\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph></paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellParagraphPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableCellContentsPostFixer( writer, model ) );\n}\n\n// The table cell contents post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableCellContentsPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\twasFixed = fixTable( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableRow' ) {\n\t\t\twasFixed = fixTableRow( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableCell' ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( checkTableCellChange( entry ) ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.parent, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTable( table, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const row of table.getChildren() ) {\n\t\twasFixed = fixTableRow( row, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table row.\n//\n// @param {module:engine/model/element~Element} tableRow\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTableRow( tableRow, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\twasFixed = fixTableCellContent( tableCell, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cell content by:\n// - adding paragraph to a table cell without any child.\n// - wrapping direct $text in <paragraph>.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean}\nfunction fixTableCellContent( tableCell, writer ) {\n\t// Insert paragraph to an empty table cell.\n\tif ( tableCell.childCount == 0 ) {\n\t\twriter.insertElement( 'paragraph', tableCell );\n\n\t\treturn true;\n\t}\n\n\t// Check table cell children for directly placed text nodes.\n\t// Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\tconst textNodes = Array.from( tableCell.getChildren() ).filter( child => child.is( 'text' ) );\n\n\tfor ( const child of textNodes ) {\n\t\twriter.wrap( writer.createRangeOn( child ), 'paragraph' );\n\t}\n\n\t// Return true when there were text nodes to fix.\n\treturn !!textNodes.length;\n}\n\n// Check if differ change should fix table cell. This happens on:\n// - removing content from table cell (ie tableCell can be left empty).\n// - adding text node directly into a table cell.\n//\n// @param {Object} differ change entry\n// @returns {Boolean}\nfunction checkTableCellChange( entry ) {\n\tif ( !entry.position || !entry.position.parent.is( 'tableCell' ) ) {\n\t\treturn false;\n\t}\n\n\treturn entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-refresh-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it doesn't have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added we need to ensure that the first `paragraph` is\n * re-rendered so it changes to `<p>` from `<span>`. The easiest way to do it is to re-render whole table cell.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellRefreshPostFixer( model ) {\n\tmodel.document.registerPostFixer( () => tableCellRefreshPostFixer( model ) );\n}\n\nfunction tableCellRefreshPostFixer( model ) {\n\tconst differ = model.document.differ;\n\n\t// Stores cells to be refreshed so the table cell will be refreshed once for multiple changes.\n\tconst cellsToRefresh = new Set();\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tconst parent = change.type == 'insert' || change.type == 'remove' ? change.position.parent : change.range.start.parent;\n\n\t\tif ( parent.is( 'tableCell' ) && checkRefresh( parent, change.type ) ) {\n\t\t\tcellsToRefresh.add( parent );\n\t\t}\n\t}\n\n\tif ( cellsToRefresh.size ) {\n\t\tfor ( const tableCell of cellsToRefresh.values() ) {\n\t\t\tdiffer.refreshItem( tableCell );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Checks if the model table cell requires refreshing to be re-rendered to a proper state in the view.\n//\n// This methods detects changes that will require renaming <span> to <p> (or vice versa) in the view.\n//\n// This method is a simple heuristic that checks only a single change and will sometimes give a false positive result when multiple changes\n// will result in a state that does not require renaming in the view (but will be seen as requiring a refresh).\n//\n// For instance: a `<span>` should be renamed to `<p>` when adding an attribute to a `<paragraph>`.\n// But adding one attribute and removing another one will result in a false positive: the check for added attribute will see one attribute\n// on a paragraph and will falsy qualify such change as adding an attribute to a paragraph without any attribute.\n//\n// @param {module:engine/model/element~Element} tableCell Table cell to check.\n// @param {String} type Type of change.\nfunction checkRefresh( tableCell, type ) {\n\tconst hasInnerParagraph = Array.from( tableCell.getChildren() ).some( child => child.is( 'paragraph' ) );\n\n\t// If there is no paragraph in table cell then the view doesn't require refreshing.\n\t//\n\t// Why? What we really want to achieve is to make all the old paragraphs (which weren't added in this batch) to be\n\t// converted once again, so that the paragraph-in-table-cell converter can correctly create a `<p>` or a `<span>` element.\n\t// If there are no paragraphs in the table cell, we don't care.\n\tif ( !hasInnerParagraph ) {\n\t\treturn false;\n\t}\n\n\t// For attribute change we only refresh if there is a single paragraph as in this case we may want to change existing `<span>` to `<p>`.\n\tif ( type == 'attribute' ) {\n\t\tconst attributesCount = Array.from( tableCell.getChild( 0 ).getAttributeKeys() ).length;\n\n\t\treturn tableCell.childCount === 1 && attributesCount < 2;\n\t}\n\n\t// For other changes (insert, remove) the `<span>` to `<p>` change is needed when:\n\t//\n\t// - another element is added to a single paragraph (childCount becomes >= 2)\n\t// - another element is removed and a single paragraph is left (childCount == 1)\n\treturn tableCell.childCount <= ( type == 'insert' ? 2 : 1 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport upcastTable, { upcastTableCell } from './converters/upcasttable';\nimport {\n\tdowncastInsertCell,\n\tdowncastInsertRow,\n\tdowncastInsertTable,\n\tdowncastRemoveRow,\n\tdowncastTableHeadingColumnsChange,\n\tdowncastTableHeadingRowsChange\n} from './converters/downcast';\n\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport { findAncestor } from './commands/utils';\nimport TableUtils from '../src/tableutils';\n\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer';\nimport injectTableCellRefreshPostFixer from './converters/table-cell-refresh-post-fixer';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\tschema.register( 'table', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ],\n\t\t\tisLimit: true,\n\t\t\tisObject: true,\n\t\t\tisBlock: true\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true\n\t\t} );\n\n\t\t// Allow all $block content inside table cell.\n\t\tschema.extend( '$block', { allowIn: 'tableCell' } );\n\n\t\t// Disallow table in table.\n\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name == 'table' && Array.from( context.getNames() ).includes( 'table' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertTable( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertTable() );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableRow', view: 'tr' } );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertRow( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertRow() );\n\t\tconversion.for( 'downcast' ).add( downcastRemoveRow() );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertCell( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertCell() );\n\n\t\t// Table attributes conversion.\n\t\tconversion.attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\n\t\t// Table heading rows and cols conversion.\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingColumnsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingColumnsChange() );\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingRowsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingRowsChange() );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellRefreshPostFixer( model );\n\t\tinjectTableCellParagraphPostFixer( model );\n\n\t\t// Handle tab key navigation.\n\t\tthis.editor.keystrokes.set( 'Tab', ( ...args ) => this._handleTabOnSelectedTable( ...args ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Tab', this._getTabHandler( true ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Shift+Tab', this._getTabHandler( false ), { priority: 'low' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableUtils ];\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_handleTabOnSelectedTable( domEventData, cancel ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tif ( !selection.isCollapsed && selection.rangeCount === 1 && selection.getFirstRange().isFlat ) {\n\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\tif ( !selectedElement || !selectedElement.is( 'table' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( selectedElement.getChild( 0 ).getChild( 0 ) ) );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a handler for {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * inside table cell.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Whether this handler will move selection to the next cell or previous.\n\t */\n\t_getTabHandler( isForward ) {\n\t\tconst editor = this.editor;\n\n\t\treturn ( domEventData, cancel ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\t\tif ( !tableCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\tconst tableRow = tableCell.parent;\n\t\t\tconst table = tableRow.parent;\n\n\t\t\tconst currentRowIndex = table.getChildIndex( tableRow );\n\t\t\tconst currentCellIndex = tableRow.getChildIndex( tableCell );\n\n\t\t\tconst isFirstCellInRow = currentCellIndex === 0;\n\n\t\t\tif ( !isForward && isFirstCellInRow && currentRowIndex === 0 ) {\n\t\t\t\t// It's the first cell of a table - don't do anything (stay in current position).\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n\t\t\tconst isLastRow = currentRowIndex === table.childCount - 1;\n\n\t\t\tif ( isForward && isLastRow && isLastCellInRow ) {\n\t\t\t\teditor.execute( 'insertTableRowBelow' );\n\n\t\t\t\t// Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n\t\t\t\t// or it got overwritten) do not change the selection.\n\t\t\t\tif ( currentRowIndex === table.childCount - 1 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet cellToFocus;\n\n\t\t\t// Move to first cell in next row.\n\t\t\tif ( isForward && isLastCellInRow ) {\n\t\t\t\tconst nextRow = table.getChild( currentRowIndex + 1 );\n\n\t\t\t\tcellToFocus = nextRow.getChild( 0 );\n\t\t\t}\n\t\t\t// Move to last cell in a previous row.\n\t\t\telse if ( !isForward && isFirstCellInRow ) {\n\t\t\t\tconst previousRow = table.getChild( currentRowIndex - 1 );\n\n\t\t\t\tcellToFocus = previousRow.getChild( previousRow.childCount - 1 );\n\t\t\t}\n\t\t\t// Move to next/previous cell.\n\t\t\telse {\n\t\t\t\tcellToFocus = tableRow.getChild( currentCellIndex + ( isForward ? 1 : -1 ) );\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( cellToFocus ) );\n\t\t\t} );\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/ui/inserttableview\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\nimport './../../theme/inserttable.css';\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class InsertTableView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * A collection of table size box items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * The currently selected number of rows of the new table.\n\t\t *\n\t\t * @observable\n\t\t * @member {Number} #rows\n\t\t */\n\t\tthis.set( 'rows', 0 );\n\n\t\t/**\n\t\t * The currently selected number of columns of the new table.\n\t\t *\n\t\t * @observable\n\t\t * @member {Number} #columns\n\t\t */\n\t\tthis.set( 'columns', 0 );\n\n\t\t/**\n\t\t * The label text displayed under the boxes.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.bind( 'label' )\n\t\t\t.to( this, 'columns', this, 'rows', ( columns, rows ) => `${ rows } × ${ columns }` );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck' ]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__grid' ]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.items\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__label' ]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'label' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( () => {\n\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\n\t\t// Add grid boxes to table selection view.\n\t\tfor ( let index = 0; index < 100; index++ ) {\n\t\t\tconst boxView = new TableSizeGridBoxView();\n\n\t\t\t// Listen to box view 'over' event which indicates that mouse is over this box.\n\t\t\tboxView.on( 'over', () => {\n\t\t\t\t// Translate box index to the row & column index.\n\t\t\t\tconst row = Math.floor( index / 10 );\n\t\t\t\tconst column = index % 10;\n\n\t\t\t\t// As row & column indexes are zero-based transform it to number of selected rows & columns.\n\t\t\t\tthis.set( 'rows', row + 1 );\n\t\t\t\tthis.set( 'columns', column + 1 );\n\t\t\t} );\n\n\t\t\tthis.items.add( boxView );\n\t\t}\n\n\t\tthis.on( 'change:columns', () => {\n\t\t\tthis._highlightGridBoxes();\n\t\t} );\n\n\t\tthis.on( 'change:rows', () => {\n\t\t\tthis._highlightGridBoxes();\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfocus() {\n\t\t// The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n\t\t// The method should be implemented while working on keyboard support for this view. See #22.\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfocusLast() {\n\t\t// The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n\t\t// The method should be implemented while working on keyboard support for this view. See #22.\n\t}\n\n\t/**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t *\n\t * @private\n\t */\n\t_highlightGridBoxes() {\n\t\tconst rows = this.rows;\n\t\tconst columns = this.columns;\n\n\t\tthis.items.map( ( boxView, index ) => {\n\t\t\t// Translate box index to the row & column index.\n\t\t\tconst itemRow = Math.floor( index / 10 );\n\t\t\tconst itemColumn = index % 10;\n\n\t\t\t// Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n\t\t\tconst isOn = itemRow < rows && itemColumn < columns;\n\n\t\t\tboxView.set( 'isOn', isOn );\n\t\t} );\n\t}\n}\n\n/**\n * A single grid box view element.\n *\n * This class is used to render the table size selection grid in {@link module:table/ui/inserttableview~InsertTableView}.\n *\n * @private\n */\nclass TableSizeGridBoxView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the grid box view is \"on\".\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOn\n\t\t */\n\t\tthis.set( 'isOn', false );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-insert-table-dropdown-grid-box',\n\t\t\t\t\tbind.if( 'isOn', 'ck-on' )\n\t\t\t\t]\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tmouseover: bind.to( 'over' )\n\t\t\t}\n\t\t} );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M18 7v1H2V7h16zm0 5v1H2v-1h16z\\\" opacity=\\\".6\\\"/><path d=\\\"M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v16h-1V2z\\\" opacity=\\\".6\\\"/><path d=\\\"M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    addListToDropdown,\n    createDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` dropdown.\n *\n * The `'tableColumn'`, `'tableRow'`, `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        editor.ui.componentFactory.add('insertTable', locale => {\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: tableIcon,\n                label: t('Insert table'),\n                tooltip: true\n            });\n            // Prepare custom view for dropdown's panel.\n            const insertTableView = new InsertTableView(locale);\n            dropdownView.panelView.children.add(insertTableView);\n            insertTableView.delegate('execute').to(dropdownView);\n            dropdownView.buttonView.on('open', () => {\n                // Reset the chooser before showing it to the user.\n                insertTableView.rows = 0;\n                insertTableView.columns = 0;\n            });\n            dropdownView.on('execute', () => {\n                editor.execute('insertTable', {\n                    rows: insertTableView.rows,\n                    columns: insertTableView.columns\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('tableColumn', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('Header column'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableColumnLeft',\n                        label: t('Insert column left')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableColumnRight',\n                        label: t('Insert column right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('Delete column')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Column'), tableColumnIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('Header row'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('Insert row below')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('Insert row above')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('Delete row')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Row'), tableRowIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', locale => {\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('Merge cell up')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellRight',\n                        label: t('Merge cell right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('Merge cell down')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellLeft',\n                        label: t('Merge cell left')\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('Split cell vertically')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('Split cell horizontally')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Merge cells'), tableMergeCellIcon, options, locale);\n        });\n    }\n    /**\n\t * Creates a dropdown view from the set of options.\n\t *\n\t * @private\n\t * @param {String} label The dropdown button label.\n\t * @param {String} icon An icon for the dropdown button.\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @param {module:utils/locale~Locale} locale\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n    _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = [];\n        // Prepare dropdown list items for list dropdown.\n        const itemDefinitions = new Collection();\n        for (const option of options) {\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n}\n// Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option Configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands List of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// Collection of dropdown items to update with given option.\nfunction addListOption(option, editor, commands, itemDefinitions) {\n    const model = option.model = new Model(option.model);\n    const {commandName, bindIsOn} = option.model;\n    if (option.type !== 'separator') {\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({ commandName });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n    }\n    model.set({ withText: true });\n    itemDefinitions.add(option);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n// The editor creator to use.\nimport ClassicEditorBase from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\nimport Autoformat from '@ckeditor/ckeditor5-autoformat/src/autoformat';\nimport CKFinder from '@ckeditor/ckeditor5-ckfinder/src/ckfinder';\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\nimport Heading from '@ckeditor/ckeditor5-heading/src/heading';\nimport Image from '@ckeditor/ckeditor5-image/src/image';\nimport ImageResize from '@ckeditor/ckeditor5-image/src/imageresize';\nimport ImageStyle from '@ckeditor/ckeditor5-image/src/imagestyle';\nimport ImageToolbar from '@ckeditor/ckeditor5-image/src/imagetoolbar';\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\nimport List from '@ckeditor/ckeditor5-list/src/list';\nimport MathType from '@wiris/mathtype-ckeditor5';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport Table from '@ckeditor/ckeditor5-table/src/table';\nimport TableToolbar from '@ckeditor/ckeditor5-table/src/tabletoolbar';\n\nexport default class ClassicEditor extends ClassicEditorBase {}\n\n// Plugins to include in the build.\nClassicEditor.builtinPlugins = [\n\tEssentials,\n\tAutoformat,\n\tCKFinder,\n\tBold,\n\tItalic,\n\tHeading,\n\tImage,\n\tImageResize,\n\tImageStyle,\n\tImageToolbar,\n\tImageUpload,\n\tList,\n\tMathType,\n\tParagraph,\n\tTable,\n\tTableToolbar\n];\n\n// Editor configuration.\nClassicEditor.defaultConfig = {\n\ttoolbar: {\n\t\titems: [\n\t\t\t'heading',\n\t\t\t'|',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'imageUpload',\n\t\t\t'insertTable',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t},\n\timage: {\n\t\ttoolbar: [ 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight' ],\n\t\tstyles: [\n\t\t\t'full',\n\t\t\t'alignLeft',\n\t\t\t'alignRight'\n\t\t]\n\t},\n\ttable: {\n\t\tcontentToolbar: [\n\t\t\t'tableColumn',\n\t\t\t'tableRow',\n\t\t\t'mergeTableCells'\n\t\t]\n\t},\n\t// This value must be kept in sync with the language defined in webpack.config.js.\n\tlanguage: 'en'\n};\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module essentials/essentials\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport ShiftEnter from '@ckeditor/ckeditor5-enter/src/shiftenter';\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Essentials extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Enter, ShiftEnter, Typing, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Essentials';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ckfinder/ckfinder\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport CKFinderUI from './ckfinderui';\nimport CKFinderEditing from './ckfinderediting';\nimport CKFinderUploadAdapter from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\n\n/**\n * The CKFinder feature, a bridge between the CKEditor 5 WYSIWYG editor and the\n * [CKFinder](https://ckeditor.com/ckfinder) file manager and uploader.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:ckfinder/ckfinderediting~CKFinderEditing},\n * * {@link module:ckfinder/ckfinderui~CKFinderUI},\n * * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}.\n *\n * See the {@glink features/image-upload/ckfinder \"CKFinder integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinder extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CKFinder';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ CKFinderEditing, CKFinderUI, CKFinderUploadAdapter ];\n\t}\n}\n\n/**\n * The configuration of the {@link module:ckfinder/ckfinder~CKFinder CKFinder feature}.\n *\n * Read more in {@link module:ckfinder/ckfinder~CKFinderConfig}.\n *\n * @member {module:ckfinder/ckfinder~CKFinderConfig} module:core/editor/editorconfig~EditorConfig#ckfinder\n */\n\n/**\n * The configuration of the {@link module:ckfinder/ckfinder~CKFinder CKFinder feature}\n * and its {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tckfinder: {\n *\t\t\t\t\toptions: {\n *\t\t\t\t\t\tresourceType: 'Images'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CKFinderConfig\n */\n\n/**\n * The configuration options passed to the CKFinder file manager instance.\n *\n * Check the file manager [documentation](https://ckeditor.com/docs/ckfinder/ckfinder3/#!/api/CKFinder.Config-cfg-language)\n * for the complete list of options.\n *\n * @member {Object} module:ckfinder/ckfinder~CKFinderConfig#options\n */\n\n/**\n * The type of the CKFinder opener method.\n *\n * Supported types are:\n *\n * * `'modal'` - opens a CKFinder in a modal,\n * * `'popup'` - opens a CKFinder in a new \"pop-up\" window.\n *\n * Defaults to `'modal'`.\n *\n * @member {String} module:ckfinder/ckfinder~CKFinderConfig#openerMethod\n */\n\n/**\n * The path (URL) to the connector which handles the file upload in the CKFinder file manager.\n * When specified, enables the automatic upload of resources such as images inserted into the content.\n *\n * For instance, to use CKFinder's {@glink @ckfinder ckfinder3-php/commands.html#command_quick_upload quick upload}\n * command, your can use the following (or similar) path:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tckfinder: {\n *\t\t\t\t\tuploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&responseType=json'\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Used by the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter upload adapter}.\n *\n * @member {String} module:ckfinder/ckfinder~CKFinderConfig#uploadUrl\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Bold extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BoldEditing, BoldUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Bold';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Italic extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ItalicEditing, ItalicUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Italic';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/heading\n */\n\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport '../theme/heading.css';\n\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Heading extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ HeadingEditing, HeadingUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Heading';\n\t}\n}\n\n/**\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n * Read more in {@link module:heading/heading~HeadingConfig}.\n *\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\n */\n\n/**\n * The configuration of the heading feature.\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\theading: ... // Heading feature config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HeadingConfig\n */\n\n/**\n * The available heading options.\n *\n * The default value is:\n *\n *\t\tconst headingConfig = {\n *\t\t\toptions: [\n *\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *\t\t\t]\n *\t\t};\n *\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\n * if you choose \"Heading 1\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\n * which will result in rendering (and outputting to data) the `<h2>` element.\n *\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\n * Usually, the first option in the headings dropdown is the \"Paragraph\" option, hence it's also defined on the list.\n * However, you don't need to define its view representation because it's handled by\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\n * the {@link module:heading/headingediting~HeadingEditing} feature).\n *\n * You can **read more** about configuring heading levels and **see more examples** in\n * the {@glink features/headings Headings} guide.\n *\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\n * they should use when applying the first level heading.\n *\n * The defined headings are also available as values passed to the `'heading'` command under their model names.\n * For example, the below code will apply `<heading1>` to the current selection:\n *\n *\t\teditor.execute( 'heading', { value: 'heading1' } );\n *\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\n */\n\n/**\n * Heading option descriptor.\n *\n * @typedef {Object} module:heading/heading~HeadingOption\n * @property {String} model Name of the model element to convert.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\n * @property {String} title The user-readable title of the option.\n * @property {String} class The class which will be added to the dropdown item representing this option.\n * @property {String} [icon] Icon used by {@link module:heading/headingbuttonsui~HeadingButtonsUI}. It can be omitted when using\n * the default configuration.\n * @extends module:engine/conversion/conversion~ConverterDefinition\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageEditing from '../src/image/imageediting';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\nimport ImageTextAlternative from './imagetextalternative';\n\nimport '../theme/image.css';\n\n/**\n * The image plugin.\n *\n * For a detailed overview, check the {@glink features/image image feature} documentation.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * {@link module:image/image/imageediting~ImageEditing},\n * * {@link module:image/imagetextalternative~ImageTextAlternative}.\n *\n * Usually, it is used in conjuction with other plugins from this package. See the {@glink api/image package page}\n * for more information.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Image extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageEditing, Widget, ImageTextAlternative ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Image';\n\t}\n}\n\n/**\n * The configuration of the image features. Used by the image features in the `@ckeditor/ckeditor5-image` package.\n *\n * Read more in {@link module:image/image~ImageConfig}.\n *\n * @member {module:image/image~ImageConfig} module:core/editor/editorconfig~EditorConfig#image\n */\n\n/**\n * The configuration of the image features. Used by the image features in the `@ckeditor/ckeditor5-image` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\timage: ... // Image feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface ImageConfig\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport WidgetResize from '@ckeditor/ckeditor5-widget/src/widgetresize';\nimport ImageResizeCommand from './imageresize/imageresizecommand';\n\nimport '../theme/imageresize.css';\n\n/**\n * The image resize plugin.\n *\n * It adds a possibility to resize each image using handles.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResize extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ WidgetResize ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageResize';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst command = new ImageResizeCommand( editor );\n\n\t\tthis._registerSchema();\n\t\tthis._registerConverters();\n\n\t\teditor.commands.add( 'imageResize', command );\n\n\t\teditor.editing.downcastDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n\t\t\tconst widget = conversionApi.mapper.toViewElement( data.item );\n\n\t\t\tconst resizer = editor.plugins\n\t\t\t\t.get( WidgetResize )\n\t\t\t\t.attachTo( {\n\t\t\t\t\tunit: editor.config.get( 'image.resizeUnit' ) || '%',\n\n\t\t\t\t\tmodelElement: data.item,\n\t\t\t\t\tviewElement: widget,\n\t\t\t\t\tdowncastWriter: conversionApi.writer,\n\n\t\t\t\t\tgetHandleHost( domWidgetElement ) {\n\t\t\t\t\t\treturn domWidgetElement.querySelector( 'img' );\n\t\t\t\t\t},\n\t\t\t\t\tgetResizeHost( domWidgetElement ) {\n\t\t\t\t\t\treturn domWidgetElement;\n\t\t\t\t\t},\n\t\t\t\t\t// TODO consider other positions.\n\t\t\t\t\tisCentered() {\n\t\t\t\t\t\tconst imageStyle = data.item.getAttribute( 'imageStyle' );\n\n\t\t\t\t\t\treturn !imageStyle || imageStyle == 'full' || imageStyle == 'alignCenter';\n\t\t\t\t\t},\n\n\t\t\t\t\tonCommit( newValue ) {\n\t\t\t\t\t\teditor.execute( 'imageResize', { width: newValue } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\tresizer.on( 'updateSize', () => {\n\t\t\t\tif ( !widget.hasClass( 'image_resized' ) ) {\n\t\t\t\t\teditor.editing.view.change( writer => {\n\t\t\t\t\t\twriter.addClass( 'image_resized', widget );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tresizer.bind( 'isEnabled' ).to( command );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_registerSchema() {\n\t\tthis.editor.model.schema.extend( 'image', {\n\t\t\tallowAttributes: 'width'\n\t\t} );\n\t}\n\n\t/**\n\t * Registers image resize converters.\n\t *\n\t * @private\n\t */\n\t_registerConverters() {\n\t\tconst editor = this.editor;\n\n\t\t// Dedicated converter to propagate image's attribute to the img tag.\n\t\teditor.conversion.for( 'downcast' ).add( dispatcher =>\n\t\t\tdispatcher.on( 'attribute:width:image', ( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\n\t\t\t\tif ( data.attributeNewValue !== null ) {\n\t\t\t\t\tviewWriter.setStyle( 'width', data.attributeNewValue, figure );\n\t\t\t\t\tviewWriter.addClass( 'image_resized', figure );\n\t\t\t\t} else {\n\t\t\t\t\tviewWriter.removeStyle( 'width', figure );\n\t\t\t\t\tviewWriter.removeClass( 'image_resized', figure );\n\t\t\t\t}\n\t\t\t} )\n\t\t);\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.attributeToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'figure',\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\twidth: /.+/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'width',\n\t\t\t\t\tvalue: viewElement => viewElement.getStyle( 'width' )\n\t\t\t\t}\n\t\t\t} );\n\t}\n}\n\n/**\n * The available options are `'px'` or `'%'`.\n *\n * Determines size unit applied to resized image.\n *\n * ```js\n * ClassicEditor\n * \t.create( editorElement, {\n * \t\t image: {\n * \t\t\t resizeUnit: 'px'\n * \t\t }\n * \t } )\n * \t.then( ... )\n * \t.catch( ... );\n * ```\n *\n * This option is used by the {@link module:image/imageresize~ImageResize} feature.\n *\n * @default '%'\n * @member {String} module:image/image~ImageConfig#resizeUnit\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\nimport ImageStyleUI from './imagestyle/imagestyleui';\n\n/**\n * The image style plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-styles image styles} documentation.\n *\n * This is a \"glue\" plugin which loads the {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing}\n * and {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyle extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageStyleEditing, ImageStyleUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyle';\n\t}\n}\n\n/**\n * Available image styles.\n *\n * The default value is:\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [ 'full', 'side' ]\n *\t\t};\n *\n * which configures two default styles:\n *\n *  * the \"full\" style which does not apply any class, e.g. for images styled to span 100% width of the content,\n *  * the \"side\" style with the `.image-style-side` CSS class.\n *\n * See {@link module:image/imagestyle/utils~defaultStyles} to learn more about default\n * styles provided by the image feature.\n *\n * The {@link module:image/imagestyle/utils~defaultStyles default styles} can be customized,\n * e.g. to change the icon, title or CSS class of the style. The feature also provides several\n * {@link module:image/imagestyle/utils~defaultIcons default icons} to choose from.\n *\n *\t\timport customIcon from 'custom-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// This will only customize the icon of the \"full\" style.\n *\t\t\t\t// Note: 'right' is one of default icons provided by the feature.\n *\t\t\t\t{ name: 'full', icon: 'right' },\n *\n *\t\t\t\t// This will customize the icon, title and CSS class of the default \"side\" style.\n *\t\t\t\t{ name: 'side', icon: customIcon, title: 'My side style', className: 'custom-side-image' }\n *\t\t\t]\n *\t\t};\n *\n * If none of the default styles is good enough, it is possible to define independent custom styles, too:\n *\n *\t\timport fullSizeIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\n *\t\timport sideIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// A completely custom full size style with no class, used as a default.\n *\t\t\t\t{ name: 'fullSize', title: 'Full size', icon: fullSizeIcon, isDefault: true },\n *\n *\t\t\t\t{ name: 'side', title: 'To the side', icon: sideIcon, className: 'side-image' }\n *\t\t\t]\n *\t\t};\n *\n * Note: Setting `title` to one of {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * Read more about styling images in the {@glink features/image#image-styles Image styles guide}.\n *\n * The feature creates commands based on defined styles, so you can change the style of a selected image by executing\n * the following command:\n *\n *\t\teditor.execute( 'imageStyle' { value: 'side' } );\n *\n * The feature also creates buttons that execute the commands. So, assuming that you use the\n * default image styles setting, you can {@link module:image/image~ImageConfig#toolbar configure the image toolbar}\n * (or any other toolbar) to contain these options:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyle:full', 'imageStyle:side' ]\n *\t\t};\n *\n * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} module:image/image~ImageConfig#styles\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { getSelectedImageWidget } from './image/utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n/**\n * The image toolbar plugin. It creates and manages the image toolbar (the toolbar displayed when an image is selected).\n *\n * For a detailed overview, check the {@glink features/image#image-contextual-toolbar image contextual toolbar} documentation.\n *\n * Instances of toolbar components (e.g. buttons) are created using the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}\n * based on the {@link module:image/image~ImageConfig#toolbar `image.toolbar` configuration option}.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        widgetToolbarRepository.register('image', {\n            ariaLabel: t('Image toolbar'),\n            items: editor.config.get('image.toolbar') || [],\n            getRelatedElement: getSelectedImageWidget\n        });\n    }\n}    /**\n * Items to be placed in the image toolbar.\n * This option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative},\n *\n * three toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * `'imageStyle:full'`, `'imageStyle:side'`, and `'imageTextAlternative'` so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageUploadUI from './imageupload/imageuploadui';\nimport ImageUploadProgress from './imageupload/imageuploadprogress';\nimport ImageUploadEditing from './imageupload/imageuploadediting';\n\n/**\n * The image upload plugin.\n *\n * For a detailed overview, check the {@glink features/image-upload/image-upload image upload feature} documentation.\n *\n * This plugin does not do anything directly, but it loads a set of specific plugins to enable image uploading:\n *\n * * {@link module:image/imageupload/imageuploadediting~ImageUploadEditing},\n * * {@link module:image/imageupload/imageuploadui~ImageUploadUI},\n * * {@link module:image/imageupload/imageuploadprogress~ImageUploadProgress}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUpload extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageUpload';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageUploadEditing, ImageUploadUI, ImageUploadProgress ];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/list\n */\n\nimport ListEditing from './listediting';\nimport ListUI from './listui';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/listediting~ListEditing list editing feature}\n * and {@link module:list/listui~ListUI list UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class List extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ListEditing, ListUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'List';\n\t}\n}\n","import HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\nimport Parser from '../integration-js/src/parser.js';\n\nimport CustomMathmlDataProcessor from './custommathmldataprocessor'\n\nexport function downcast( editor ) {\n    return ( dispatcher ) => {\n        dispatcher.on( 'insert:math-math', ( evt, data, conversionApi ) => {\n\n            const math = data.item;\n\n            // Check whether the change has not been consumed yet and consume it.\n            if ( !conversionApi.consumable.consume( math, 'insert' ) ) {\n                return;\n            }\n\n            // Consume all the children now so they won't get converted later.\n            for ( const child of editor.model.createRangeIn( math ).getItems() ) {\n                conversionApi.consumable.consume( child, 'insert' );\n                for ( const attributeKey of child.getAttributeKeys() ) {\n                    conversionApi.consumable.consume( child, 'attribute:' + attributeKey );\n                }\n            }\n\n            const htmlDataProcessor = new HtmlDataProcessor();\n            const mathmlDP = new CustomMathmlDataProcessor();\n            const mathString = mathmlDP\n                                .toData( math )\n                                .replace( /<math-/g , '<' )\n                                .replace( /<\\/math-/g , '</' );\n\n            let viewElement;\n\n            // If <math> element, parse it and embed it into the model\n            if ( mathString.match( /<math[\\s|>]/g ) ) {\n\n                // Create <img> element that will be inserted in view at `viewPosition`.\n                let imgHtml = Parser.initParse( mathString, editor.config.get( 'language' ) );\n                let imgElement = htmlDataProcessor.toView( imgHtml ).getChild( 0 );\n\n                // If the MathML was correct and the service worked, getAttributes\n                // should be defined, otherwise use empty <math> element\n                if ( !imgElement.getAttributes ) {\n                    console.log( 'No attrs!' );\n                    imgHtml = Parser.initParse( '<math></math>' );\n                    imgElement = htmlDataProcessor.toView( imgHtml ).getChild( 0 );\n                }\n\n                let imgAttributes = {};\n\n                for ( const [ key, value ] of imgElement.getAttributes() ) {\n                    imgAttributes[ key ] = value;\n                }\n\n                viewElement = conversionApi.writer.createEmptyElement( 'img', imgAttributes );\n\n                // Remove filler offset\n                viewElement.getFillerOffset = () => null;\n\n                // Bind the newly created view element to model element so positions will map accordingly in future.\n                conversionApi.mapper.bindElements( data.item, viewElement );\n\n                // Translate position in model to position in view.\n                const viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n                // Add the newly created view element to the view.\n                conversionApi.writer.insert( viewPosition, viewElement );\n\n                // Stop the event propagation.\n                evt.stop();\n\n            }\n\n        }, { priority: 'high' } );\n    };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/table\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TableEditing from './tableediting';\nimport TableUI from './tableui';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\n\nimport '../theme/table.css';\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/table Table feature documentation}.\n *\n * This is a \"glue\" plugin which loads the {@link module:table/tableediting~TableEditing table editing feature}\n * and {@link module:table/tableui~TableUI table UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Table extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableEditing, TableUI, Widget ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Table';\n\t}\n}\n\n/**\n * The configuration of the table features. Used by the table features in the `@ckeditor/ckeditor5-table` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttable: ... // Table feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TableConfig\n */\n\n/**\n * The configuration of the {@link module:table/table~Table} feature.\n *\n * Read more in {@link module:table/table~TableConfig}.\n *\n * @member {module:table/table~TableConfig} module:core/editor/editorconfig~EditorConfig#table\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tabletoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    getSelectedTableWidget,\n    getTableWidgetAncestor\n} from './utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for a table cell content).\n *\n * Table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/table~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/table~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('Table toolbar'),\n                items: tableContentToolbarItems,\n                getRelatedElement: getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('Table toolbar'),\n                items: tableToolbarItems,\n                getRelatedElement: getSelectedTableWidget\n            });\n        }\n    }\n}    /**\n * Items to be placed in the table content toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * Assuming that you use the {@link module:table/tableui~TableUI} feature, the following toolbar items will be available\n * in {@link module:ui/componentfactory~ComponentFactory}:\n *\n * * `'tableRow'`,\n * * `'tableColumn'`,\n * * `'mergeTableCells'`.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\tcontentToolbar: [ 'tableRow', 'tableColumn', 'mergeTableCells' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#contentToolbar\n */\n     /**\n * Items to be placed in the table toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\ttableToolbar: [ 'blockQuote' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#tableToolbar\n */"],"sourceRoot":""}