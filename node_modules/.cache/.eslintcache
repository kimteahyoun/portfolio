[{"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\reportWebVitals.js":"2","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\App.js":"3","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\AboutPage.jsx":"4","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\FooterPage.jsx":"5","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\HomePage.jsx":"6","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\HeaderPage.jsx":"7","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\context\\UserContext.js":"8","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginPage.jsx":"9","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventPage.jsx":"10","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyPage.jsx":"11","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticePage.jsx":"12","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardPage.jsx":"13","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\BestList.jsx":"14","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginFindPass.jsx":"15","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginForm.jsx":"16","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginFindId.jsx":"17","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventRead.jsx":"18","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginRegister.jsx":"19","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginRestore.jsx":"20","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyUpdatePass.jsx":"21","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyBuyListChart.jsx":"22","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventList.jsx":"23","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyBuyList.jsx":"24","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyChatList.jsx":"25","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyInsertReview.jsx":"26","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyMenu.jsx":"27","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyPay.jsx":"28","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyInfo.jsx":"29","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MySellListChart.jsx":"30","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MySellList.jsx":"31","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyReceiveReview.jsx":"32","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardInsert.jsx":"33","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticeList.jsx":"34","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticeRead.jsx":"35","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardList.jsx":"36","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardRead.jsx":"37","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\BestItem.jsx":"38","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\fireStore.js":"39","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventItem.jsx":"40","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EreplyList.jsx":"41","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyChatItem.jsx":"42","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticeItem.jsx":"43","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardItem.jsx":"44","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\index.js":"45","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\reportWebVitals.js":"46","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\App.js":"47","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\HeaderPage.jsx":"48","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\AboutPage.jsx":"49","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\FooterPage.jsx":"50","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\HomePage.jsx":"51","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\context\\UserContext.js":"52","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventPage.jsx":"53","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginPage.jsx":"54","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyPage.jsx":"55","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticePage.jsx":"56","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardPage.jsx":"57","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\BestList.jsx":"58","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventList.jsx":"59","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginForm.jsx":"60","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventRead.jsx":"61","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginFindPass.jsx":"62","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginRestore.jsx":"63","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginRegister.jsx":"64","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyBuyListChart.jsx":"65","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyBuyList.jsx":"66","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginFindId.jsx":"67","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyUpdatePass.jsx":"68","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyInsertReview.jsx":"69","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyMenu.jsx":"70","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyChatList.jsx":"71","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyPay.jsx":"72","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyReceiveReview.jsx":"73","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MySellListChart.jsx":"74","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MySellList.jsx":"75","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyInfo.jsx":"76","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticeRead.jsx":"77","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticeList.jsx":"78","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardList.jsx":"79","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardInsert.jsx":"80","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardRead.jsx":"81","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\BestItem.jsx":"82","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventItem.jsx":"83","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\fireStore.js":"84","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EreplyList.jsx":"85","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyChatItem.jsx":"86","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticeItem.jsx":"87","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardItem.jsx":"88"},{"size":579,"mtime":1666654656601,"results":"89","hashOfConfig":"90"},{"size":362,"mtime":1663027087553,"results":"91","hashOfConfig":"90"},{"size":1190,"mtime":1668589996830,"results":"92","hashOfConfig":"90"},{"size":4918,"mtime":1668756484367,"results":"93","hashOfConfig":"90"},{"size":1515,"mtime":1668189184713,"results":"94","hashOfConfig":"90"},{"size":1730,"mtime":1669477319472,"results":"95","hashOfConfig":"90"},{"size":2702,"mtime":1668744805283,"results":"96","hashOfConfig":"90"},{"size":87,"mtime":1667095100459,"results":"97","hashOfConfig":"90"},{"size":723,"mtime":1668157720068,"results":"98","hashOfConfig":"90"},{"size":368,"mtime":1667984739491,"results":"99","hashOfConfig":"90"},{"size":1294,"mtime":1669182337991,"results":"100","hashOfConfig":"90"},{"size":378,"mtime":1668411150656,"results":"101","hashOfConfig":"90"},{"size":495,"mtime":1668043181014,"results":"102","hashOfConfig":"90"},{"size":1522,"mtime":1669470357224,"results":"103","hashOfConfig":"90"},{"size":3863,"mtime":1668878164126,"results":"104","hashOfConfig":"90"},{"size":3731,"mtime":1668878087470,"results":"105","hashOfConfig":"90"},{"size":2606,"mtime":1668878171312,"results":"106","hashOfConfig":"90"},{"size":2196,"mtime":1669247511980,"results":"107","hashOfConfig":"90"},{"size":16449,"mtime":1669485395930,"results":"108","hashOfConfig":"90"},{"size":1667,"mtime":1669111605523,"results":"109","hashOfConfig":"90"},{"size":5684,"mtime":1668878202131,"results":"110","hashOfConfig":"90"},{"size":1752,"mtime":1669276312771,"results":"111","hashOfConfig":"90"},{"size":3689,"mtime":1669458363810,"results":"112","hashOfConfig":"90"},{"size":2941,"mtime":1669458323322,"results":"113","hashOfConfig":"90"},{"size":9160,"mtime":1669485385531,"results":"114","hashOfConfig":"90"},{"size":4194,"mtime":1668826489244,"results":"115","hashOfConfig":"90"},{"size":2449,"mtime":1669034172950,"results":"116","hashOfConfig":"90"},{"size":5541,"mtime":1669350131602,"results":"117","hashOfConfig":"90"},{"size":9192,"mtime":1669092441584,"results":"118","hashOfConfig":"90"},{"size":1643,"mtime":1669485367962,"results":"119","hashOfConfig":"90"},{"size":3438,"mtime":1669458267131,"results":"120","hashOfConfig":"90"},{"size":2652,"mtime":1669351527747,"results":"121","hashOfConfig":"90"},{"size":6340,"mtime":1669336871725,"results":"122","hashOfConfig":"90"},{"size":3722,"mtime":1669458218249,"results":"123","hashOfConfig":"90"},{"size":1961,"mtime":1668779536907,"results":"124","hashOfConfig":"90"},{"size":4354,"mtime":1669560261951,"results":"125","hashOfConfig":"90"},{"size":10394,"mtime":1669193299170,"results":"126","hashOfConfig":"90"},{"size":768,"mtime":1669286450594,"results":"127","hashOfConfig":"90"},{"size":454,"mtime":1669179930238,"results":"128","hashOfConfig":"90"},{"size":584,"mtime":1669344122468,"results":"129","hashOfConfig":"90"},{"size":4529,"mtime":1669463570717,"results":"130","hashOfConfig":"90"},{"size":1021,"mtime":1669473289434,"results":"131","hashOfConfig":"90"},{"size":534,"mtime":1669344122467,"results":"132","hashOfConfig":"90"},{"size":2943,"mtime":1669111490256,"results":"133","hashOfConfig":"90"},{"size":579,"mtime":1666654656601,"results":"134","hashOfConfig":"135"},{"size":362,"mtime":1663027087553,"results":"136","hashOfConfig":"135"},{"size":1190,"mtime":1668589996830,"results":"137","hashOfConfig":"135"},{"size":2702,"mtime":1668744805283,"results":"138","hashOfConfig":"135"},{"size":4918,"mtime":1668756484367,"results":"139","hashOfConfig":"135"},{"size":1515,"mtime":1668189184713,"results":"140","hashOfConfig":"135"},{"size":1730,"mtime":1669477319472,"results":"141","hashOfConfig":"135"},{"size":87,"mtime":1667095100459,"results":"142","hashOfConfig":"135"},{"size":368,"mtime":1667984739491,"results":"143","hashOfConfig":"135"},{"size":723,"mtime":1668157720068,"results":"144","hashOfConfig":"135"},{"size":1294,"mtime":1669182337991,"results":"145","hashOfConfig":"135"},{"size":378,"mtime":1668411150656,"results":"146","hashOfConfig":"135"},{"size":495,"mtime":1668043181014,"results":"147","hashOfConfig":"135"},{"size":1522,"mtime":1669470357224,"results":"148","hashOfConfig":"135"},{"size":3689,"mtime":1669458363810,"results":"149","hashOfConfig":"135"},{"size":3731,"mtime":1668878087470,"results":"150","hashOfConfig":"135"},{"size":2196,"mtime":1669247511980,"results":"151","hashOfConfig":"135"},{"size":3863,"mtime":1668878164126,"results":"152","hashOfConfig":"135"},{"size":1667,"mtime":1669111605523,"results":"153","hashOfConfig":"135"},{"size":16449,"mtime":1669485395930,"results":"154","hashOfConfig":"135"},{"size":1752,"mtime":1669276312771,"results":"155","hashOfConfig":"135"},{"size":2941,"mtime":1669458323322,"results":"156","hashOfConfig":"135"},{"size":2606,"mtime":1668878171312,"results":"157","hashOfConfig":"135"},{"size":5684,"mtime":1668878202131,"results":"158","hashOfConfig":"135"},{"size":4194,"mtime":1668826489244,"results":"159","hashOfConfig":"135"},{"size":2449,"mtime":1669034172950,"results":"160","hashOfConfig":"135"},{"size":9160,"mtime":1669485385531,"results":"161","hashOfConfig":"135"},{"size":5541,"mtime":1669350131602,"results":"162","hashOfConfig":"135"},{"size":2652,"mtime":1669351527747,"results":"163","hashOfConfig":"135"},{"size":1643,"mtime":1669485367962,"results":"164","hashOfConfig":"135"},{"size":3438,"mtime":1669458267131,"results":"165","hashOfConfig":"135"},{"size":9192,"mtime":1669092441584,"results":"166","hashOfConfig":"135"},{"size":1961,"mtime":1668779536907,"results":"167","hashOfConfig":"135"},{"size":3722,"mtime":1669458218249,"results":"168","hashOfConfig":"135"},{"size":4354,"mtime":1669560261951,"results":"169","hashOfConfig":"135"},{"size":6340,"mtime":1669336871725,"results":"170","hashOfConfig":"135"},{"size":10394,"mtime":1669193299170,"results":"171","hashOfConfig":"135"},{"size":768,"mtime":1669286450594,"results":"172","hashOfConfig":"135"},{"size":584,"mtime":1669344122468,"results":"173","hashOfConfig":"135"},{"size":454,"mtime":1669179930238,"results":"174","hashOfConfig":"135"},{"size":4529,"mtime":1669463570717,"results":"175","hashOfConfig":"135"},{"size":1021,"mtime":1669473289434,"results":"176","hashOfConfig":"135"},{"size":534,"mtime":1669344122467,"results":"177","hashOfConfig":"135"},{"size":2943,"mtime":1669111490256,"results":"178","hashOfConfig":"135"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"19h1gj0",{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"182"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"182"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"182"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"182"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"182"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"182"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"182"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"182"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"182"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"182"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"182"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"182"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"182"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"182"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"182"},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"182"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"182"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"182"},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"182"},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"182"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"182"},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"182"},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"182"},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"182"},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"182"},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"182"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"182"},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"182"},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"182"},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7vf0ej",{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"405","messages":"406","suppressedMessages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"414","messages":"415","suppressedMessages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","suppressedMessages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"420","messages":"421","suppressedMessages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","suppressedMessages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"426","messages":"427","suppressedMessages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"429","messages":"430","suppressedMessages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"432","messages":"433","suppressedMessages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"435","messages":"436","suppressedMessages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","suppressedMessages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"441","messages":"442","suppressedMessages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"444","messages":"445","suppressedMessages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"447","messages":"448","suppressedMessages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","suppressedMessages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"453","messages":"454","suppressedMessages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","suppressedMessages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"459","messages":"460","suppressedMessages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","suppressedMessages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"465","messages":"466","suppressedMessages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"468","messages":"469","suppressedMessages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"471","messages":"472","suppressedMessages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\index.js",[],[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\reportWebVitals.js",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\App.js",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\AboutPage.jsx",["474","475","476","477","478","479","480","481","482","483","484"],[],"import { Height, Style } from '@material-ui/icons';\r\nimport React, { useState } from 'react'\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <div>\r\n      <div className='sql'>\r\n        <Carousel>\r\n          <Carousel.Item>\r\n            <img\r\n              className=\"d-block w-100\"\r\n              src=\"/image/ub.jpg\" height={570}\r\n            />\r\n          </Carousel.Item>\r\n          <Carousel.Item>\r\n            <img\r\n              className=\"d-block w-100\"\r\n              src=\"/image/sj.jpg\" height={570} />\r\n          </Carousel.Item>\r\n          <Carousel.Item>\r\n            <img\r\n              className=\"d-block w-100\"\r\n              src=\"/image/image12.png\" height={570} />\r\n          </Carousel.Item>\r\n        </Carousel>\r\n      </div>\r\n      <div className='vision__statement'>\r\n        <div className='vision__statement__wrapper common__wrapper'>\r\n          <p>\r\n            지갑이 두둑하지는 않지만 새로운 경험을 해보고 싶었지 않으셨나요?\r\n            새로운 경험을 만끽시켜줄 물론마켓이 여러분을 찾아갑니다!\r\n          </p>\r\n          <p>\r\n            채팅부터 결제까지 원스톱으로 이뤄지는 중고거래!\r\n            가성비 좋은 아이템들을 놓치지 마세요!\r\n          </p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div className='fk'>\r\n        <img src='/image/kth.png' />\r\n      </div>\r\n\r\n      <div className='ub'>\r\n        <img src='/image/jungo_auto_x2.jpg' width={1407} height={1060} />\r\n      </div>\r\n      <div className='item'  >\r\n            <img src=\"/image/k1.png\" />\r\n            <img src=\"/image/k2.png\" />\r\n         <p>전국에 있는 내 취향의 브랜드 상품, 물론마켓에서 더 쉽고 안전하게 거래하세요.</p> \r\n          </div>\r\n\r\n\r\n      <div class=\"my-4\" style={{ marginBottom: 140, marginTop: 230 }}>\r\n        <Row>\r\n          <Col style={{ height: '230' }}>\r\n            <Card style={{ width: '200px', height: \"200px\", marginLeft: 230,height:223 }}>\r\n              <Card.Img variant=\"left\" src=\"/image/a4.png\" />\r\n              <Card.Body>\r\n                <Card.Title style={{fontFamily:'font', marginTop:25}}>허재원 - 팀장</Card.Title>\r\n                <Card.Text>\r\n                  총책임자로서 <br />진두지휘\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card style={{ width: '200px', height: \"200px\", marginLeft: 176 }}>\r\n              <Card.Img variant=\"left\" src=\"/image/a6.png\" />\r\n              <Card.Body>\r\n                <Card.Title>김형진 - 팀원</Card.Title>\r\n                <Card.Text>\r\n                  전반적인 관리자 <br />페이지에 집중\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card style={{ width: '200px', height: \"200px\", marginLeft: 100 }}>\r\n              <Card.Img variant=\"left\" src=\"/image/a5.png\" />\r\n              <Card.Body>\r\n                <Card.Title>김태형 - 팀원</Card.Title>\r\n                <Card.Text>\r\n                  홈페이지 및 전반 <br />UI에 집중\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{ marginBottom: 200 }}>\r\n          <Col>\r\n            <Card style={{ width: '200px', height: \"200px\", marginTop: 220, marginLeft: 220 }}>\r\n              <Card.Img variant=\"left\" src=\"/image/a5.png\" />\r\n              <Card.Body>\r\n                <Card.Title>김수형 - 팀원</Card.Title>\r\n                <Card.Text>\r\n                  마이메뉴 및 회사소개 페이지에 집중\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card style={{ width: '200px', height: \"200px\", marginTop: 220, marginLeft: 176 }}>\r\n              <Card.Img variant=\"left\" src=\"/image/a5.png\" />\r\n              <Card.Body>\r\n                <Card.Title>이원준 - 팀원</Card.Title>\r\n                <Card.Text>\r\n                  페이징 기능과 검색<br /> 기능에 집중\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card style={{ width: '200px', height: \"200px\", marginTop: 220, marginLeft: 110 }}>\r\n              <Card.Img variant=\"left\" src=\"/image/a5.png\" />\r\n              <Card.Body>\r\n                <Card.Title>노종혁 - 팀원</Card.Title>\r\n                <Card.Text>\r\n                  마이 메뉴 및 이벤트 페이지에 집중\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default AboutPage\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\FooterPage.jsx",["485"],[],"import React from 'react';\r\nimport { Button, Nav } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst FooterPage = ({ history }) => {\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    const href = e.target.getAttribute(\"href\")\r\n    history.push(href);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <footer role=\"contentinfo\" className='c-jApbnk c-hLzBpK' >\r\n        <div className='c-bxZDGf'>\r\n          <nav className='c-iCiDpy'>\r\n          <Nav>\r\n            <ul className='c-fYLPMS' style={{ display: 'flex' }}>\r\n              <li className='c-jTOXZz'>\r\n               \r\n                <Nav.Link onClick={onClick} href='???'>\r\n                  개인정보 처리 방침\r\n                </Nav.Link>\r\n              </li>\r\n              <li>\r\n                <Nav.Link onClick={onClick} href='???'>\r\n                  브랜드 리소스\r\n                </Nav.Link>\r\n              </li>\r\n              <li>\r\n                <Nav.Link onClick={onClick} href='???'>\r\n                  자주 묻는 질문\r\n                </Nav.Link>\r\n              </li>\r\n            </ul>\r\n            </Nav>\r\n            <p>주소 : 인천광역시 미추홀구 매소홀로488번길 6-32 OO빌딩 5층</p>\r\n          </nav>\r\n        </div>\r\n        <div className='c-gGLWxl'>\r\n          <p>\r\n            <strong>CopyRight 2022. 물론마켓 All rights reserved</strong>\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(FooterPage)","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\HomePage.jsx",["486","487","488"],[],"\r\nimport React from 'react';\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"./Carousel.css\";\r\nimport BestList from './BestList';\r\nimport 'animate.css'; //이거 없으면 animate 안됨.\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <div className='sql'>\r\n\r\n        <img\r\n          sizes='100vw'\r\n          className=\"d-block w-100\"\r\n          src=\"/image/image17.png\"\r\n        />\r\n\r\n      <div className='img5'>\r\n        <img\r\n          size='10px'\r\n          className=\"d-block w-100\"\r\n          src=\"/image/image16.jpg\"\r\n        />\r\n      </div>\r\n\r\n      <div className='animate__animated animate__backInLeft'>\r\n        <img\r\n          size='10px'\r\n          className=\"d-block w-100\"\r\n          src=\"/image/image19.jpg\"\r\n        />\r\n      </div>\r\n\r\n      <h3 className='animate__animated animate__swing animate__repeat-2'>인기상품</h3>\r\n      <hr />\r\n      <BestList />\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\HeaderPage.jsx",["489","490","491"],[],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { UserContext } from './context/UserContext';\r\n\r\nconst HeaderPage = ({ history }) => {\r\n  const { loginUser, setLoginUser } = useContext(UserContext);\r\n\r\n\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    const href = e.target.getAttribute(\"href\")\r\n    history.push(href);\r\n  }\r\n\r\n  const onClickLogout = async (e) => {\r\n    e.preventDefault();\r\n    sessionStorage.removeItem('uid');\r\n    history.push('/')\r\n  }\r\n\r\n\r\n  const callUserRead = async () => {\r\n\r\n    //fetch loginUser info\r\n    const result = await axios.get(`/api/user/read/${sessionStorage.getItem('uid')}`);\r\n    setLoginUser(result.data);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    //refetch loginUser info when it changes \r\n    if (sessionStorage.getItem('uid') !== null) callUserRead();\r\n  }, [sessionStorage.getItem('uid')]);\r\n\r\n\r\n  return (\r\n    <div className='fixed'>\r\n      <Navbar className='fixed-top' bg='secondary' variant=\"dark\" collapseOnSelect expand=\"lg\">\r\n        <Container>\r\n          <Navbar.Brand className='box13' onClick={onClick} href=\"/\">물론마켓</Navbar.Brand>\r\n          <Nav className=\"me-auto\"\r\n            navbarScroll>\r\n            <Nav.Link className='box13' onClick={onClick} href=\"/about\">회사소개</Nav.Link>\r\n            <NavDropdown title=\"상품\" id=\"navbarScrollingDropdown\">\r\n              <NavDropdown.Item onClick={onClick} href=\"/pboard/list\">상품 목록</NavDropdown.Item>\r\n              {sessionStorage.getItem('uid') &&\r\n                <NavDropdown.Item onClick={onClick} href={`/pboard/insert/${loginUser.unickname}`}>상품 등록</NavDropdown.Item>\r\n\r\n              }\r\n            </NavDropdown>\r\n\r\n            <Nav.Link className='box13' href={`/notice/list`} onClick={onClick}>\r\n              공지사항\r\n            </Nav.Link>\r\n            <Nav.Link className='box13' href={`/event/list`} onClick={onClick}>\r\n              이벤트\r\n            </Nav.Link>\r\n          </Nav>\r\n          <Nav>\r\n\r\n            {sessionStorage.getItem('uid') ?\r\n              <>\r\n                <Nav.Link href={`/my/menu`} onClick={onClick}>\r\n                  {loginUser.unickname}\r\n                </Nav.Link>\r\n\r\n                <Nav.Link onClick={onClickLogout}>\r\n                  로그아웃\r\n                </Nav.Link>\r\n              </> :\r\n              <Nav.Link onClick={onClick} href='/login/form'>로그인</Nav.Link>\r\n            }\r\n\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(HeaderPage)","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\context\\UserContext.js",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginPage.jsx",["492"],[],"import { Route } from \"react-router-dom\"\r\nimport LoginFindId from \"./LoginFindId\"\r\nimport LoginFindPass from \"./LoginFindPass\"\r\nimport LoginForm from \"./LoginForm\"\r\nimport LoginRegister from \"./LoginRegister\"\r\nimport LoginRestore from \"./LoginRestore\"\r\nimport LoginUpdatePass from \"../my/MyUpdatePass\"\r\n\r\nconst LoginPage = () => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Route path=\"/login/form\" component={LoginForm} />\r\n      <Route path=\"/login/register\" component={LoginRegister} />\r\n      <Route path=\"/login/restore/:uid\" component={LoginRestore}/>\r\n      <Route path=\"/login/findpass\" component={LoginFindPass}/>\r\n      <Route path=\"/login/findid\" component={LoginFindId}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventPage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyPage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticePage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardPage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\BestList.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginFindPass.jsx",["493","494","495"],[],"import React, { useState } from 'react'\r\nimport { Alert, Button, Card, Form, Row } from 'react-bootstrap';\r\nimport { Grid, TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst LoginFindPass = ({ history }) => {\r\n  const [message, setMessage] = useState('비밀번호를 재발급하는 데 약 7-8초의 시간이 소요됩니다.');\r\n  const [form, setForm] = useState({\r\n    uid: '',\r\n    uemail: ''\r\n  })\r\n\r\n  const onCheckEmail = (form) => {\r\n    var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\r\n    const result = regExp.test(form);\r\n    if (!result) {\r\n      Swal.fire({\r\n        text: \"이메일 양식을 준수해 주세요\",\r\n        icon: 'error',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  const { uid, uemail } = form;\r\n\r\n  const onChangeForm = (e) => {\r\n    setForm(prev=>({\r\n      ...prev,\r\n      [e.target.name]: e.target.value\r\n    }))\r\n  }\r\n\r\n  const onFindPass = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (uid === '' || uemail === '') {\r\n      Swal.fire({\r\n        text: \"아이디와 이메일을 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n      return;\r\n    }\r\n\r\n    if (!onCheckEmail(form.uemail)) {\r\n      return;\r\n    }\r\n\r\n    //find pass\r\n    try {\r\n      const result = await axios.post('/api/user/findpw', form);\r\n\r\n      if (result.data === 1) {\r\n        Swal.fire({\r\n          text: \"입력한 아이디는 가입되지 않은 아이디입니다\",\r\n          icon: 'warning',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n      } \r\n      \r\n      else if (result.data === 2) {\r\n        Swal.fire({\r\n          text: \"입력하신 이메일은 가입되지 않은 이메일입니다\",\r\n          icon: 'warning',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n      }\r\n      \r\n      else if(result.data===3){\r\n        Swal.fire({\r\n          text: \"가입된 메일 주소로 임시 재발급 비밀번호가 발급되었습니다!\",\r\n          icon: 'success',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n        history.push('/login/form')\r\n      }\r\n    } catch (e) {\r\n      if (e) {\r\n        Swal.fire({\r\n          text: \"예상치 못한 오류가 발생하였습니다\",\r\n          icon: 'error',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row className='d-flex justify-content-center my-5'>\r\n        <Card style={{ width: '30rem' }} className=\"p-3\">\r\n          <Form onSubmit={onFindPass}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"id\"\r\n                label=\"id\"\r\n                value={form.uid}\r\n                name=\"uid\"\r\n                autoComplete=\"unick\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"email\"\r\n                value={form.uemail}\r\n                name=\"uemail\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n            <hr />\r\n            <Button type='submit' style={{ width: '50%' }}>임시비밀번호 발급</Button>\r\n            <Alert>{message}</Alert>\r\n          </Form>\r\n        </Card>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginFindPass","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginForm.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginFindId.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventRead.jsx",["496"],[],"import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport \"../Pagination.css\";\r\nimport { Button } from 'react-bootstrap';\r\nimport EreplyList from './EreplyList';\r\n\r\nconst EventRead = ({ history, match }) => {\r\n\r\n  const ecode = match.params.ecode;\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [eventRead, setEventRead] = useState({\r\n    etitle: '',\r\n    econtent: '',\r\n    ewriter: '',\r\n    regDate: '',\r\n  });\r\n  useEffect(() => {\r\n    callEventRead();\r\n  }, [])\r\n\r\n  const callEventRead = async () => {\r\n    setLoading(true);\r\n    const result = await axios.get(`/api/event/read/${ecode}`)\r\n    setEventRead(result.data);\r\n    setLoading(false);\r\n  }\r\n\r\n  const { etitle, econtent, ewriter, regDate } = eventRead;\r\n\r\n  if (loading) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n      style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n  )\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className='event_notice'>\r\n      <h2 className='title'>이벤트</h2>\r\n      <div className='event_article'>\r\n        <article className='article event_article' style={{ height: '272px' }}>\r\n          \r\n        <div className=\"article_title\">\r\n            <h2 style={{ border: 'none' }}>\r\n              제목ㅡ{etitle}\r\n            </h2>\r\n            <div style={{width:'100%',   borderBottom: '3px solid #000'}}>\r\n              <span style={{ float: 'left' }} aria-label='등록일'>\r\n                작성자: {ewriter}\r\n              </span>\r\n              <h5 className='article_date' style={{ float: 'right' }} aria-label='등록일'>\r\n                {regDate}\r\n              </h5>\r\n            </div>\r\n          </div>\r\n\r\n          <section className='article_data'>\r\n            <div className='fr_view'>\r\n              내용ㅡ {econtent}\r\n            </div>\r\n          </section>\r\n        </article>\r\n      </div>\r\n\r\n      {/* 댓글정보는 bno가 필요하기 때문에 bno를 가져가야 함. */}\r\n      <EreplyList ecode={ecode} />\r\n      <Button onClick={() => { history.go(-1) }}>목록으로</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EventRead\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginRegister.jsx",["497","498","499","500","501"],[],"import { Grid, MenuItem, TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Alert, Modal, Button, Card, Form, Row } from 'react-bootstrap';\r\nimport DaumPostcode from \"react-daum-postcode\";\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\n\r\nconst LoginRegister = ({ history }) => {\r\n\r\n  const [message, setMessage] = useState('');\r\n  const [image, setImage] = useState('');\r\n  const [isPopupOpen, setIsPopupOpen] = useState(false)\r\n  const [address, setAddress] = useState('');\r\n  const [pass1, setPass1] = useState('');\r\n\r\n  const onCheckPassword = (form) => {\r\n    var regExp = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/\r\n    const result = regExp.test(form);\r\n    if (!result) {\r\n      Swal.fire({\r\n        text: \"비밀번호 양식을 준수해 주세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  const onCheckPhonenumber = (form) => {\r\n    var regExp = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n    const result = regExp.test(form);\r\n    if (!result) {\r\n      Swal.fire({\r\n        text: \"전화번호 양식을 준수해 주세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  const onCheckEmail = (form) => {\r\n    var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\r\n    const result = regExp.test(form);\r\n    if (!result) {\r\n      Swal.fire({\r\n        text: \"이메일 양식을 준수해 주세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  const onCheckUnickanme = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (form.unickname === '') {\r\n      Swal.fire({\r\n        text: \"닉네임을 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      return;\r\n    }\r\n\r\n    const result = await axios.get(`/api/user/check?unickname=${form.unickname}`);\r\n    result.data === 1 ?\r\n      Swal.fire({\r\n        text: \"사용 가능한 닉네임입니다\",\r\n        icon: 'success',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      :\r\n      Swal.fire({\r\n        text: \"닉네임이 중복되었습니다\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n  }\r\n\r\n  const onConfirmPassword = () => {\r\n    upass !== pass1 ?\r\n      setMessage('비밀번호가 일치하지 않습니다.')\r\n      :\r\n      setMessage('비밀번호가 일치합니다.');\r\n  }\r\n\r\n  const onCheckUid = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (form.uid === '') {\r\n      Swal.fire({\r\n        text: \"아이디를 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      return;\r\n    }\r\n\r\n    const result = await axios.get(`/api/user/read/${form.uid}`);\r\n    result.data === '' ?\r\n      Swal.fire({\r\n        text: \"사용 가능한 아이디입니다\",\r\n        icon: 'success',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      :\r\n      Swal.fire({\r\n        text: \"중복된 아이디라서 사용할 수 없습니다\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n  }\r\n\r\n  const [form, setForm] = useState({\r\n    uid: '',\r\n    upass: '',\r\n    uname: '',\r\n    unickname: '',\r\n    uemail: '',\r\n    utel: '',\r\n    uaddress: '',\r\n    ucondition: '1',\r\n    ugender: '',\r\n    ubirth: '',\r\n    file: null\r\n  })\r\n\r\n  const { uid, upass, uname, unickname, uemail, ucondition, utel, ugender, ubirth, file } = form;\r\n\r\n  const onChangeForm = (e) => {\r\n    setForm(prev=>({\r\n      ...prev,\r\n      [e.target.name]: e.target.value\r\n    }))\r\n  }\r\n\r\n  const onRegister = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (uid === '' || upass === '') {\r\n      Swal.fire({\r\n        text: \"아이디나 비밀번호를 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      return;\r\n    }\r\n\r\n    else if (ugender === \"\" || ugender === \"성별\") {\r\n      Swal.fire({\r\n        text: \"성별을 선택하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      return;\r\n    }\r\n\r\n    else if (uname === '') {\r\n      Swal.fire({\r\n        text: \"이름을 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      return;\r\n    }\r\n\r\n    else if (pass1 === '') {\r\n      Swal.fire({\r\n        text: \"확인용 비밀번호를 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n      })\r\n      return;\r\n    }\r\n\r\n    else if (upass !== pass1) {\r\n      Swal.fire({\r\n        text: \"확인용 비밀번호와 변경하고자 하는 비밀번호가 일치하지 않습니다\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n      return;\r\n    }\r\n\r\n    else if (onCheckPassword(form.upass) === false) {\r\n      return;\r\n    }\r\n\r\n    else if (onCheckPhonenumber(form.utel) === false) {\r\n      return;\r\n    }\r\n\r\n    else if (!onCheckEmail(form.uemail)) {\r\n      return;\r\n    }\r\n\r\n\r\n    Swal.fire({\r\n      text: \"회원으로 등록하시겠습니까?\",\r\n      icon: 'info',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '등록',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n\r\n      //identification process\r\n      if (result.isConfirmed) {\r\n        const result = await axios.get(`/api/user/sendAuthSMS?utel=${form.utel}`)\r\n\r\n        const authnum = prompt('인증번호를 입력하세요.');\r\n        \r\n        if (authnum !== String(result.data)) {\r\n          Swal.fire({\r\n            text: \"인증번호가 올바르지 않습니다.\",\r\n            icon: 'warning',\r\n            confirmButtonColor: '#3085d6',\r\n          })\r\n          return;\r\n        } \r\n\r\n        const formData = new FormData();\r\n        formData.append('uid', uid);\r\n        formData.append('upass', upass);\r\n        formData.append('uname', uname);\r\n        formData.append('unickname', unickname);\r\n        formData.append('uemail', uemail);\r\n        formData.append('utel', utel);\r\n        formData.append('uaddress', address);\r\n        formData.append('file', file);\r\n        formData.append('ucondition', ucondition);\r\n        formData.append('ugender', ugender);\r\n        formData.append('ubirth', ubirth);\r\n\r\n        try {\r\n          await axios.post('/api/user/insert', formData);\r\n          Swal.fire({\r\n            text: \"등록을 완료하였습니다!\",\r\n            icon: 'success',\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n          })\r\n          history.push('/login/form')\r\n        } catch (e) {\r\n          if (e.message === 'Request failed with status code 500') {\r\n            Swal.fire({\r\n              text: \"이미지 파일의 확장자는 jpg, png만 가능합니다.\",\r\n              icon: 'error',\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n            })\r\n          }\r\n        }\r\n\r\n      }\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  const onChangeFormFile = (e) => {\r\n    setForm({\r\n      ...form,\r\n      file: e.target.files[0],\r\n    })\r\n    setImage(URL.createObjectURL(e.target.files[0]))\r\n\r\n  }\r\n\r\n\r\n  //주소 받는 API\r\n  const handlePostCode = (data) => {\r\n\r\n    let fullAddress = data.address;\r\n    let extraAddress = '';\r\n\r\n    if (data.addressType === 'R') {\r\n      if (data.bname !== '') {\r\n        extraAddress += data.bname;\r\n      }\r\n      if (data.buildingName !== '') {\r\n        extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n      }\r\n      fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\r\n    }\r\n    setAddress(fullAddress)\r\n  }\r\n\r\n  const postCodeStyle = {\r\n    display: \"block\",\r\n    position: \"absolute\",\r\n    top: \"10%\",\r\n    width: \"600px\",\r\n    height: \"600px\",\r\n    padding: \"7px\",\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n      <div className='modal-address'>\r\n        {isPopupOpen && (\r\n          <div>\r\n            <DaumPostcode\r\n              style={postCodeStyle} onClose={() => setIsPopupOpen(false)} onComplete={handlePostCode} />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <Row className='d-flex justify-content-center my-5'>\r\n        <Card style={{ width: '30rem' }} className=\"p-3\">\r\n          <Form>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                label=\"id\"\r\n                value={uid}\r\n                name=\"uid\"\r\n                helperText=\"15자 이하로 기입\"\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <Button onClick={onCheckUid} className='mt-3'>아이디 중복 확인</Button>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                label=\"Password\"\r\n                helperText=\"8-10자 영문대소문자와 숫자를 조합\"\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                value={upass}\r\n                name=\"upass\"\r\n                autoComplete=\"upass\"\r\n                type=\"password\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"upass\"\r\n                label=\"confirm Password\"\r\n                value={pass1}\r\n                name=\"upass\"\r\n                autoComplete=\"upass\"\r\n                type=\"password\"\r\n                onChange={(e) => setPass1(e.target.value)}\r\n              />\r\n            </Grid>\r\n            {message && <Alert>{message}</Alert>}\r\n            <Button onClick={onConfirmPassword} className='mt-3'>패스워드 일치 확인</Button>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                label=\"uname\"\r\n                value={uname}\r\n                name=\"uname\"\r\n                autoComplete=\"uname\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                type='date'\r\n                variant=\"outlined\"\r\n                maxLength='6'\r\n                required\r\n                fullWidth\r\n                id=\"ubirth\"\r\n                value={ubirth}\r\n                name=\"ubirth\"\r\n                autoComplete=\"ubirth\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"unickname\"\r\n                label=\"unickname\"\r\n                value={unickname}\r\n                name=\"unickname\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <Button className='mt-3' onClick={onCheckUnickanme}>닉네임 중복확인</Button>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                value={address}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"adresss\"\r\n                helperText=\"주소 직접 입력은 불가능합니다\"\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                label=\"adresss\"\r\n                name=\"uaddress\"\r\n                autoComplete=\"uaddress\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <Button type='button'\r\n              style={{ marginRight: 60, marginTop: 25 }}\r\n              onClick={() => setIsPopupOpen(true)}>우편번호 검색</Button>\r\n            <Button className='postCode_btn'\r\n              style={{ marginLeft: 60, marginTop: 25 }}\r\n              type='button'\r\n              onClick={() => setIsPopupOpen(false)} >닫기</Button>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"utel\"\r\n                label=\"utel\"\r\n                value={utel}\r\n                helperText='010-0000-0000 or 010-000-0000'\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                name=\"utel\"\r\n                autoComplete=\"utel\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"uemail\"\r\n                label=\"이메일 주소\"\r\n                helperText=\"실제 이메일과 다를 시 비밀번호를 재발급 받는 데 지장이 있습니다\"\r\n                value={uemail}\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                name=\"uemail\"\r\n                autoComplete=\"uemail\"\r\n                onChange={onChangeForm}\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <TextField\r\n              select\r\n              label='성별을 선택하세요'\r\n              fullWidth\r\n              value={ugender}\r\n              name='ugender'\r\n              onChange={onChangeForm}>\r\n              <MenuItem value='성별'>성별</MenuItem>\r\n              <MenuItem value='남자'>남자</MenuItem>\r\n              <MenuItem value='여자'>여자</MenuItem>\r\n            </TextField>\r\n            프로필 사진등록\r\n            <br />\r\n\r\n            <img src={image} width={100} />\r\n            <Form.Control className='my-3'\r\n              onChange={onChangeFormFile}\r\n              type=\"file\" />\r\n            <hr />\r\n            <Button onClick={onRegister} type=\"submit\" style={{ width: '100%' }}>회원가입</Button>\r\n          </Form>\r\n        </Card>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginRegister","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\login\\LoginRestore.jsx",["502"],[],"import axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst LoginRestore = ({ history, match }) => {\r\n  const uid = match.params.uid;\r\n\r\n  //restore id\r\n  const OnRestore = () => {\r\n    Swal.fire({\r\n      text: \"아이디를 복원하시겠습니까?\",\r\n      icon: 'info',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '복원',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n\r\n      if (result.isConfirmed) {\r\n        const formData = new FormData();\r\n        formData.append(\"uid\", uid);\r\n\r\n        try {\r\n          await axios.post('/api/user/restore', formData);\r\n          Swal.fire({\r\n            text: \"아이디 복원을 완료하였습니다!\",\r\n            icon: 'success',\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n          })\r\n          history.push('/login/form');\r\n        } catch (e) {\r\n          if (e) {\r\n            Swal.fire({\r\n              text: \"예상치 못한 오류가 발생하였습니다\",\r\n              icon: 'error',\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n            })\r\n          }\r\n        }\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <img src='/image/fn.jpg' width={930} height={410} style={{marginTop:20}} />\r\n      <div style={{ marginTop: 50 }}>\r\n              <Button onClick={OnRestore}>계정복구</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginRestore","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyUpdatePass.jsx",["503"],[],"import React, { useState } from 'react';\r\nimport { Button, Row, Alert, Card } from 'react-bootstrap';\r\nimport { Grid, TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { useContext } from 'react';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst MyUpdatePass = ({ history }) => {\r\n    const [pass1, setPass1] = useState('')\r\n    const { loginUser } = useContext(UserContext);\r\n    const [isCheck, setIsCheck] = useState(false);\r\n\r\n    //  8 ~ 10 char combination of number + alaphabet\r\n    const onCheckPassword = (form) => {\r\n        var regExp = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/\r\n        const result = regExp.test(form);\r\n        if (!result) return result;\r\n    }\r\n\r\n    const onSwalAlert = () => {\r\n        Swal.fire({\r\n            text: \"비밀번호 일치여부를 확인하여주세요\",\r\n            icon: 'warning',\r\n            confirmButtonColor: '#3085d6',\r\n        })\r\n    }\r\n\r\n    const [form, setForm] = useState({\r\n        uid: loginUser.uid,\r\n        upass: ''\r\n    })\r\n\r\n    const { uid, upass } = form;\r\n\r\n    const onChangeForm = (e) => {\r\n        setForm(prev=>({\r\n            ...prev,\r\n            [e.target.name]: e.target.value\r\n        }))\r\n    }\r\n\r\n    //validate password\r\n    const onCheckPass = async (e) => {\r\n        e.preventDefault();\r\n        if (pass1 === '') {\r\n            Swal.fire({\r\n                text: \"비밀번호를 입력하세요\",\r\n                icon: 'warning',\r\n                confirmButtonColor: '#3085d6',\r\n            })\r\n        }\r\n\r\n        else if (onCheckPassword(form.upass) === false) {\r\n            Swal.fire({\r\n                text: \"비밀번호 양식을 준수해주세요\",\r\n                icon: 'warning',\r\n                confirmButtonColor: '#3085d6',\r\n            })\r\n        }\r\n\r\n        else if (upass !== pass1) {\r\n            Swal.fire({\r\n                text: \"비밀번호가 서로 일치하지 않습니다!\",\r\n                icon: 'warning',\r\n                confirmButtonColor: '#3085d6',\r\n            })\r\n        }\r\n\r\n        else if (upass === pass1) {\r\n            Swal.fire({\r\n                text: \"비밀번호가 일치합니다!\",\r\n                icon: 'success',\r\n                confirmButtonColor: '#3085d6',\r\n            })\r\n            setIsCheck(true);\r\n        }\r\n    }\r\n\r\n    const onUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        Swal.fire({\r\n            text: \"수정하시겠습니까?\",\r\n            icon: 'info',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: '수정',\r\n            cancelButtonText: '취소'\r\n        }).then(async (result) => {\r\n\r\n            if (result.isConfirmed) {\r\n                const formData = new FormData();\r\n                formData.append(\"uid\", uid);\r\n                formData.append(\"upass\", upass);\r\n\r\n                try {\r\n                    await axios.post('/api/user/updatepw/', formData);\r\n                    Swal.fire({\r\n                        text: \"비밀번호가 변경되었습니다!\",\r\n                        icon: 'success',\r\n                        confirmButtonColor: '#3085d6',\r\n                    })\r\n                    history.push(`/my/info/${sessionStorage.getItem('uid')}`)\r\n                } catch (e) {\r\n                    Swal.fire({\r\n                        text: \"예상치 못한 오류가 발생하였습니다.\",\r\n                        icon: 'error',\r\n                        confirmButtonColor: '#3085d6',\r\n                    })\r\n                }\r\n\r\n            }\r\n            //취소 click.\r\n            else if(result.isDismissed){\r\n                setIsCheck(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='d-flex justify-content-center mt-5'>\r\n            <Row className='mt-3'>\r\n                <Card style={{ width: '30rem' }} className=\"p-3\">\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"비밀번호\"\r\n                            helperText=\"8-10자 영문대소문자와 숫자를 조합\"\r\n                            FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                            value={form.upass}\r\n                            name=\"upass\"\r\n                            autoComplete=\"upass\"\r\n                            type=\"password\"\r\n                            onChange={onChangeForm}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <hr />\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"upass\"\r\n                            label=\"비밀번호 확인\"\r\n                            value={pass1}\r\n                            name=\"upass\"\r\n                            autoComplete=\"upass\"\r\n                            type=\"password\"\r\n                            onChange={(e) => setPass1(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Button onClick={onCheckPass} className='mt-3'>패스워드 일치 확인</Button>\r\n\r\n                    <Button onClick={isCheck === true ? onUpdate :\r\n                        onSwalAlert} className='mt-3'>비밀번호 변경</Button>\r\n                </Card>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyUpdatePass","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyBuyListChart.jsx",["504","505"],[],"import axios from 'axios';\r\nimport React, { useContext, useRef } from 'react'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport qs from 'qs';\r\n\r\nexport const options = {\r\n    chart: {\r\n        title: \"Company Performance\",\r\n        subtitle: \"Sales, Expenses, and Profit: 2014-2017\",\r\n    },\r\n};\r\n\r\nconst MyBuyListChart = ({location}) => {\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const buyer = search.buyer;\r\n    const [data, setData] = useState('');\r\n    const chartType = useRef('Bar');\r\n    const title = useRef('직업별인원수');\r\n\r\n    const options = {\r\n        chart: {\r\n            title: title.current,\r\n        },\r\n        title: title.current\r\n    };\r\n\r\n    const callChart = async () => {\r\n        //fetch data from db + put it in state variable\r\n        let result = await axios.get(`/api/tradeinfo/buy/chart?buyer=${buyer}`);\r\n        let array = chageData(result.data);\r\n        setData(array);\r\n    }\r\n\r\n    const chageData = (result) => {\r\n        title.current = '2022 월별 구매 총액';\r\n        chartType.current = 'Line';\r\n\r\n        let array = [];\r\n        array.push(['월', '총액']);\r\n        result.forEach(item => {\r\n            array.push([item.month, item.payprice]);\r\n        });\r\n        return array;\r\n    }\r\n\r\n    useEffect(() => {\r\n        callChart();\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{ marginTop: 100 }}>\r\n             <Chart\r\n                chartType={chartType.current}\r\n                width=\"100%\"\r\n                height=\"400px\"\r\n                data={data}\r\n                options={options} /> \r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyBuyListChart","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventList.jsx",["506","507"],[],"import React, { useEffect, useState } from 'react'\r\nimport { Row, Spinner, Table } from 'react-bootstrap';\r\nimport qs from 'qs'\r\nimport axios from 'axios';\r\nimport EventItem from './EventItem';\r\nimport Pagination from 'react-js-pagination';\r\nimport { MenuItem, TextField } from '@material-ui/core';\r\n\r\nconst EventList = ({ location, history }) => {\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const [query, setQuery] = useState('');\r\n    const [searchType, setSearchType] = useState('제목');\r\n    const [eventList, setEventList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [total, setTotal] = useState(1);\r\n    const page = parseInt(search.page) || 1;\r\n    const num = 5;\r\n\r\n    //loading on ㅡ> render ㅡ> loading off\r\n    const callEventList = async () => {\r\n        setLoading(true);\r\n        const result = await axios.get(`/api/event/list?page=${page}&num=${num}&searchType=${searchType}&keyword=${query}`);\r\n        setEventList(result.data.list);\r\n        setTotal(result.data.total);\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n    //enter ㅡ> fetching\r\n    const callFiltered = (e) => {\r\n        if (e.keyCode === 13) {\r\n            callEventList();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        callEventList();\r\n    }, [page])\r\n\r\n    if (loading) return (\r\n        <Spinner animation=\"border\" variant=\"primary\"\r\n            style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n    )\r\n\r\n    return (\r\n        <div className='main'>\r\n            <TextField className='search' style={{ marginTop: 100, marginLeft: 900, marginBottom: 50, width: 120 }}\r\n                select\r\n                value={searchType}\r\n                name='searchType'\r\n                onChange={(e) => setSearchType(e.target.value)}>\r\n                <MenuItem value='제목' style={{}}>제목</MenuItem>\r\n                <MenuItem value='내용'>내용</MenuItem>\r\n                <MenuItem value='작성자'>작성자</MenuItem>\r\n                <MenuItem value='작성날짜'>작성날짜</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField value={query}\r\n                className='search2'\r\n                style={{ marginLeft: 15, marginBottom: 50, width: 200, marginTop: 100 }}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                callFiltered={callFiltered}>\r\n            </TextField>\r\n\r\n            <Table striped>\r\n                <thead>\r\n                    <tr >\r\n                        <th>관리자 이름</th>\r\n                        <th>제목</th>\r\n                        <th>내용</th>\r\n                        <th>작성일자</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {eventList.map(eventlist =>\r\n                        <>\r\n                            <EventItem key={eventlist.ecode} eventlist={eventlist} />\r\n                        </>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <br />\r\n            <br />\r\n\r\n            <div style={{ marginRight: 30 }}>\r\n                <Pagination\r\n                    activePage={page}\r\n                    itemsCountPerPage={6}\r\n                    totalItemsCount={total}\r\n                    pageRangeDisplayed={10}\r\n                    prevPageText={\"‹\"}\r\n                    nextPageText={\"›\"}\r\n                    onChange={(e) => history.push(`/event/list?page=${e}`)}\r\n                /> </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default EventList","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyBuyList.jsx",["508"],[],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Spinner, Table } from 'react-bootstrap';\r\nimport Pagination from 'react-js-pagination';\r\n\r\nconst MyBuyList = ({ location, history }) => {\r\n  const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n  const [buyList, setBuyList] = useState(['aaa']);\r\n  const [total, setTotal] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const page = parseInt(search.page) || 1;\r\n  const buyer = search.buyer;\r\n  \r\n  const callBuyList = async () => {\r\n    setLoading(true);\r\n    const result = await axios.get(`/api/tradeinfo/buylist?buyer=${buyer}&page=${page}`)\r\n    setBuyList(result.data.list);\r\n    setTotal(result.data.total);\r\n    setLoading(false);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    callBuyList();\r\n  }, [page])\r\n\r\n  if (loading) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n      style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <Table striped className='mt-5'>\r\n        <thead>\r\n          <tr >\r\n            <th>판매가격</th>\r\n            <th>판매일자</th>\r\n            <th>후기쓰기</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {buyList.map(list =>\r\n            <>\r\n              <tr key={list.paycode}>\r\n                <td>{list.payprice}</td>\r\n                <td>{list.regDate}</td>\r\n                {(list.buyercondition === 0) ?\r\n                  /* buyer=seller, seller=buyer로 거꾸로 바꿔주기만 하면 seller가 buyer에 관한 리뷰를 쓸 수 있음. */\r\n                  <td><Button onClick={() => history.push(`/my/review/insert/${list.paycode}?buyer=${list.buyer}&seller=${list.seller}&pcode=${list.pcode}`)}>\r\n                    후기쓰러가기</Button></td>\r\n                  :\r\n                  <td>후기 작성완료</td>\r\n                }\r\n              </tr>\r\n            </>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n\r\n      {buyList.length !== 0 ? <div style={{ marginRight: 190 }}>\r\n        <Pagination\r\n          activePage={page}\r\n          itemsCountPerPage={6}\r\n          totalItemsCount={total}\r\n          pageRangeDisplayed={10}\r\n          prevPageText={\"‹\"}\r\n          nextPageText={\"›\"}\r\n          onChange={(e) => history.push(`/pboard/list?page=${e}`)}\r\n        /> </div>\r\n        : <div style={{ marginTop: 200 }}>\r\n          <h1 style={{ fontSize: 60, color: 'red', marginBottom: 200 }}>해당 검색 결과가 존재하지 않습니다.</h1>\r\n        </div>\r\n      }\r\n    </div >\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default MyBuyList","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyChatList.jsx",["509"],[],"import { addDoc, collection, deleteDoc, doc, getFirestore, limit, onSnapshot, orderBy, query, where } from 'firebase/firestore';\r\nimport qs from 'qs';\r\nimport { default as React, useContext, useEffect, useState } from 'react';\r\nimport { Button, Form, Row } from 'react-bootstrap';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { app } from '../fireStore';\r\nimport MyChatItem from './MyChatItem';\r\nimport './MyChatList.css';\r\n\r\nconst MyChatList = ({ location, history }) => {\r\n    const db = getFirestore(app);\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const pwriter_id = search.pwriter_id;\r\n    const pcode = search.pcode;\r\n    const [Message, setMessage] = useState('');\r\n    const [messageList, setMessageList] = useState([]);\r\n    const [chatId, setChatId] = useState('unde');\r\n    const { loginUser } = useContext(UserContext);\r\n\r\n    const getRoomList = () => {\r\n        const q = query(\r\n            collection(db, `chatroom`),\r\n            where('who', 'array-contains', sessionStorage.getItem('uid')),\r\n            limit(100)\r\n        );\r\n\r\n        //chatroom fetch\r\n        onSnapshot(q, (snapshot) => {\r\n\r\n            snapshot.forEach((doc) => {\r\n                const li = document.createElement('li');\r\n\r\n                li.className = 'list-group-item';\r\n\r\n                li.innerHTML = `\r\n                <h6>${sessionStorage.getItem('uid') === doc.data().who[0] ?\r\n                        doc.data().who[1]\r\n                        :\r\n                        doc.data().who[0]}</h6>\r\n                        <p class='text-small'>${doc.id}</p>\r\n                `;\r\n\r\n                //same chatId onclick ㅡ> duplicate x\r\n                if ((doc.id !== chatId) && (chatId.includes('unde'))) {\r\n                    document.getElementsByClassName('list-group chat-list')[0].append(li);\r\n                }\r\n            });\r\n\r\n\r\n            for (let i = 0; i < document.getElementsByClassName('list-group-item').length; ++i) {\r\n                document.getElementsByClassName('list-group-item')[i].addEventListener(\"click\", function (e) {\r\n                    setChatId(document.getElementsByClassName(\"text-small\")[i].innerHTML)\r\n                })\r\n            }\r\n            //if no chatroom\r\n            const li = document.createElement('div');\r\n\r\n            li.innerHTML = `\r\n            <h1 class='no-chatroom'>개설된 채팅방이 없습니다</h1>`\r\n                ;\r\n\r\n                //no chatId ㅡ>  guidance\r\n            if (!document.querySelector(\".list-group-item\"))\r\n                document.getElementsByClassName('row')[0].append(li);\r\n\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    //Doc element를 최초 생성\r\n    const sendMessage = async (e) => {\r\n        if (e.keyCode === 13) {\r\n            if (Message === '') {\r\n                alert('보낼 내용을 입력하세요')\r\n                return;\r\n            }\r\n            if (e.ctrlKey) {\r\n                let val = e.target.value;\r\n                let start = e.target.selectionStart;\r\n                let end = e.target.selectionEnd;\r\n                e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\r\n                setMessage(e.target.value);\r\n                return false; //  prevent focus\r\n            }\r\n\r\n            const docRef = doc(db, 'chatroom', `${chatId}`);\r\n            const colRef = collection(docRef, 'messagelist')\r\n            await addDoc(colRef, {\r\n                text: Message,\r\n                date: new Date().getTime(),\r\n                uid: sessionStorage.getItem('uid'),\r\n                unickname: loginUser.unickname,\r\n                uprofile: loginUser.uprofile\r\n            });\r\n            setMessage('');\r\n        }\r\n    }\r\n\r\n    const getMessageList = () => {\r\n        const q = query(\r\n            collection(db, `chatroom/${chatId}/messagelist`),\r\n            orderBy('date', 'asc'),\r\n            limit(100)\r\n        );\r\n\r\n        onSnapshot(q, (snapshot) => {\r\n            let rows = [];\r\n            snapshot.forEach((doc) => {\r\n                rows.push({\r\n                    id: doc.id,\r\n                    uid: doc.data().uid,\r\n                    text: doc.data().text,\r\n                    date: doc.data().date,\r\n                    unickname: doc.data().unickname,\r\n                    uprofile: doc.data().uprofile\r\n                });\r\n            });\r\n            setMessageList(rows);\r\n        });\r\n    }\r\n\r\n    const onDelete = async (id) => {\r\n        if (!window.confirm(`메세지를 삭제하시겠습니까?`)) return;\r\n        await deleteDoc(doc(db, `chatroom/${chatId}/messagelist`, id));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRoomList();\r\n        getMessageList();\r\n    }, [chatId]);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <li className=\"container\" style={{ marginTop: 100 }}>\r\n            <li className=\"row\" style={{margin:'150px 0px'}}>\r\n\r\n                <li className=\"col-3 p-0\">\r\n\r\n                    <ul className=\"list-group chat-list\">\r\n                    </ul>\r\n\r\n                </li>\r\n                <li className=\"col-9 p-0\">\r\n                 \r\n                        <li className=\"chat-room\">\r\n                            <div className=\"wrap\">\r\n                                {messageList.map(message =>\r\n                                    <div className={message.uid === sessionStorage.uid ? 'chat ch2' : 'chat ch1'}>\r\n                                        <MyChatItem key={message.id}\r\n                                            message={message}\r\n                                            onDelete={onDelete} />\r\n                                    </div>\r\n                                )}\r\n\r\n                            </div>\r\n\r\n                            <Row className=\"mt-5 justify-content-center\">\r\n                                <Form className=\"d-flex my-3\" style={{ width: '52rem' }}>\r\n                                    <Form.Control\r\n                                        as=\"textarea\"\r\n                                        value={Message}\r\n                                        onChange={(e) => setMessage(e.target.value)}\r\n                                        onKeyDown={sendMessage}\r\n                                        placeholder='enter를 누르세요' className=\"mx-2\" />\r\n                                </Form>\r\n                                <div>\r\n                                    {sessionStorage.getItem('uid') !== pwriter_id &&\r\n                                        <Button onClick={() => history.push(`/my/pay/${pcode}`)}>결제창 이동</Button>}\r\n                                    <Button style={{ marginLeft: 80 }} onClick={() => history.go(-1)}>뒤로가기</Button>\r\n                                </div>\r\n                            </Row>\r\n                        </li>\r\n                </li>\r\n            </li>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MyChatList","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyInsertReview.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyMenu.jsx",["510"],[],"import React, { useContext, useState } from 'react';\r\nimport { Button, Offcanvas, Row } from 'react-bootstrap';\r\nimport { UserContext } from '../context/UserContext';\r\nconst MyMenu = ({ history }) => {\r\n    const { loginUser } = useContext(UserContext);\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    \r\n    return (\r\n\r\n        <div>\r\n            <Offcanvas show={show} onHide={handleClose}>\r\n                <Offcanvas.Header closeButton>\r\n                    <Offcanvas.Title>my menu</Offcanvas.Title>\r\n                </Offcanvas.Header>\r\n                <Offcanvas.Body>\r\n                    <Row>\r\n                        <Button variant='secondary' className='my-5 ' onClick={() => history.push(`/my/info/${loginUser.uid}`)}>\r\n                            내 정보\r\n                        </Button>\r\n\r\n                        <Button variant='secondary' className='my-5' onClick={() => history.push(`/my/review?receiver=${loginUser.unickname}`)}>\r\n                            내가 받은 리뷰\r\n                        </Button>\r\n\r\n                        <Button variant='secondary' className='my-5' onClick={() => history.push(`/my/chat`)}>\r\n                            내 채팅\r\n                        </Button>\r\n\r\n                        <Button variant='secondary' className='my-5' onClick={() => history.push(`/my/sell?seller=${loginUser.unickname}`)}>\r\n                            내 판매 내역\r\n                        </Button>\r\n\r\n                        <Button variant='secondary' className='my-5' onClick={() => history.push(`/my/buy?buyer=${loginUser.unickname}`)}>\r\n                            내 구매 내역\r\n                        </Button>\r\n\r\n\r\n                    </Row>\r\n                </Offcanvas.Body>\r\n            </Offcanvas>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <div className='img26'>\r\n                <img\r\n                    size='10px'\r\n                    className=\"d-block w-100\"\r\n                    src=\"/image/image26.jpg\"\r\n                />\r\n            </div>\r\n\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <Button variant=\"warning\" onClick={handleShow} className=\"ball\">메뉴</Button>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyMenu\r\n\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyPay.jsx",["511","512","513","514"],[],"import axios from 'axios';\r\nimport React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { UserContext } from '../context/UserContext';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst MyPay = ({ history, match }) => {\r\n  const { loginUser } = useContext(UserContext);\r\n  const pcode = match.params.pcode;\r\n  const [productInfo, SetProductInfo] = useState({\r\n    pwriter: '',\r\n    pprice: '',\r\n    pname: ''\r\n  });\r\n\r\n  const callPboardRead = async () => {\r\n    const result = await axios.get(`/api/pboard/read/${pcode}`)\r\n    SetProductInfo(result.data);\r\n\r\n  }\r\n\r\n  const { pwriter, pprice, pname } = productInfo;\r\n\r\n  const onClickPayment = () => {\r\n    const { IMP } = window;\r\n    IMP.init('imp37385705'); // 결제 데이터 정의\r\n    const data = {\r\n      pg: 'html5_inicis', // PG사 (필수항목)\r\n      pay_method: 'card', // 결제수단 (필수항목)\r\n      merchant_uid: `pay_${new Date().getTime()}`, // 주문번호 (필수항목)\r\n      name: pname, // 주문명 (필수항목)\r\n      amount: pprice, // 금액이고 반드시 숫자로 써야함. (필수항목)\r\n      custom_data: { name: '부가정보', desc: '세부 부가정보' },\r\n      buyer_name: loginUser.uname, // 구매자 이름\r\n      buyer_tel: loginUser.utel, // 구매자 전화번호 (필수항목)\r\n      buyer_email: loginUser.uemail, // 구매자 이메일\r\n      buyer_addr: loginUser.uaddress,\r\n    };\r\n    IMP.request_pay(data, callback);\r\n  }\r\n\r\n  const callback = async (response) => {\r\n    const { success, error_msg, imp_uid, merchant_uid, buyer_email, pay_method, paid_amount } = response;\r\n    try {\r\n      const result = await axios.post(`/pay/complete/${imp_uid}`);\r\n\r\n      //verify forgery\r\n      if (result.data.response.amount === paid_amount) {\r\n        console.log('검증 완료')\r\n      } else {\r\n        Swal.fire({\r\n          text: \"위변조 검증이 성공적으로 이뤄지지 않았습니다. 다시 결제를 시도해주세요\",\r\n          icon: 'error',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n      }\r\n\r\n    } catch (e) {\r\n      if (e) {\r\n        Swal.fire({\r\n          text: \"예상치 못한 오류가 발생하였습니다.\",\r\n          icon: 'error',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n      }\r\n    }\r\n\r\n    //pay done\r\n    if (success) {\r\n      const formData = new FormData();\r\n      formData.append(\"payprice\", paid_amount);\r\n      formData.append(\"seller\", pwriter);\r\n      formData.append(\"buyer\", loginUser.unickname);\r\n      formData.append(\"paytype\", pay_method);\r\n      formData.append(\"payemail\", buyer_email);\r\n      formData.append(\"paycode\", merchant_uid);\r\n      formData.append(\"pcode\", pcode);\r\n\r\n      //pay + review insert\r\n      try {\r\n        await axios.post('/pay/insert', formData);\r\n\r\n        Swal.fire({\r\n          title: '결제 완료!',\r\n          text: \"리뷰를 쓰러 가시겠습니까?\",\r\n          icon: 'info',\r\n          showCancelButton: true,\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n          confirmButtonText: '이동',\r\n          cancelButtonText: '취소'\r\n        }).then(async (result) => {\r\n          if (result.isConfirmed) {\r\n            history.push(`/my/review/insert/${merchant_uid}?seller=${pwriter}&buyer=${loginUser.unickname}&pcode=${pcode}`)\r\n          }\r\n          else if (result.isDismissed) {\r\n            history.push('/my/menu')\r\n          }\r\n        })\r\n\r\n      } catch (e) {\r\n        if (e) {\r\n          Swal.fire({\r\n            text: \"예상치 못한 오류가 발생하였습니다.\",\r\n            icon: 'error',\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n          })\r\n        }\r\n      }\r\n\r\n\r\n    } else {\r\n      Swal.fire({\r\n        text: `결제가 실패하였습니다 : ${error_msg}`,\r\n        icon: 'error',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const jquery = document.createElement(\"script\");\r\n    jquery.src = \"https://code.jquery.com/jquery-1.12.4.min.js\";\r\n    const iamport = document.createElement(\"script\");\r\n    iamport.src = \"https://cdn.iamport.kr/js/iamport.payment-1.1.7.js\";\r\n    document.head.appendChild(jquery);\r\n    document.head.appendChild(iamport);\r\n    callPboardRead();\r\n    return () => {\r\n      document.head.removeChild(jquery); document.head.removeChild(iamport);\r\n    }\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div className='pay'>\r\n      <div className='img23'>\r\n        <img\r\n          size='10px'\r\n          className=\"d-block w-100\"\r\n          src=\"/image/image23.jpg\"\r\n        />\r\n      </div>\r\n      <div className='img21'>\r\n        <img\r\n          size='10px'\r\n          className=\"d-block w-100\"\r\n          src=\"/image/img21.jpg\"\r\n        />\r\n      </div>\r\n\r\n      <Button variant=\"warning\" style={{ width: '200px', height: '100px' }}\r\n        className='pay' onClick={onClickPayment}>결제하기</Button>\r\n      <div className='animate__animated animate__fadeInUp'>\r\n        <img\r\n          size='10px'\r\n          className=\"d-block w-100\"\r\n          src=\"/image/image24.jpg\"\r\n        />\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPay;","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyInfo.jsx",["515","516","517","518"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useContext } from 'react';\r\nimport { Alert, Button, Form, Row, Spinner } from 'react-bootstrap';\r\nimport DaumPostcodeEmbed from 'react-daum-postcode';\r\nimport { UserContext } from '../context/UserContext';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst MyInfo = ({ match, history }) => {\r\n  const { loginUser, setLoginUser } = useContext(UserContext);\r\n  const [isPopupOpen, setIsPopupOpen] = useState(false)\r\n  const [image, setImage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [address, setAddress] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const uid = match.params.uid;\r\n\r\n\r\n\r\n  const onChangeLoginUser = (e) => {\r\n    setLoginUser(prev => ({\r\n      ...prev,\r\n      [e.target.name]: e.target.value\r\n    }));\r\n  }\r\n\r\n  //validate phonenumber\r\n  const onCheckPhonenumber = (loginuser) => {\r\n    var regExp = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n    const result = regExp.test(loginuser);\r\n    if (!result) {\r\n      Swal.fire({\r\n        text: \"전화번호 양식을 준수해주세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  //validate email\r\n  const onCheckEmail = (loginuser) => {\r\n    var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\r\n    const result = regExp.test(loginuser);\r\n    if (!result) {\r\n      Swal.fire({\r\n        text: \"이메일 양식을 준수해 주세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  //check duplication of nickname\r\n  const onCheckUnickanme = async (e) => {\r\n    e.preventDefault();\r\n    if (loginUser.unickname === '') {\r\n      Swal.fire({\r\n        text: \"닉네임을 입력하세요\",\r\n        icon: 'warning',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n      })\r\n    }\r\n\r\n    const result = await axios.get(`/api/user/check?unickname=${loginUser.unickname}`);\r\n    result.data === 1 ?\r\n      setMessage('사용 가능한 닉네임입니다.')\r\n      :\r\n      setMessage('해당 닉네임은 사용할 수 없습니다')\r\n  }\r\n\r\n\r\n\r\n\r\n  const onChangeLoginUserFile = (e) => {\r\n    setLoginUser({\r\n      ...loginUser,\r\n      file: e.target.files[0],\r\n    })\r\n    setImage(URL.createObjectURL(e.target.files[0]));\r\n  }\r\n\r\n\r\n  const callUser = async () => {\r\n    setLoading(true);\r\n    const result = await axios.get(`/api/user/read/${uid}`);\r\n    setLoginUser(result.data);\r\n    setImage(result.data.uprofile);\r\n    setLoading(false);\r\n  }\r\n\r\n  //fetching address API\r\n  const handlePostCode = (data) => {\r\n\r\n    let fullAddress = data.address;\r\n    let extraAddress = '';\r\n\r\n    if (data.addressType === 'R') {\r\n      if (data.bname !== '') {\r\n        extraAddress += data.bname;\r\n      }\r\n      if (data.buildingName !== '') {\r\n        extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n      }\r\n      fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\r\n    }\r\n    setAddress(fullAddress)\r\n  }\r\n\r\n  const postCodeStyle = {\r\n    display: \"block\",\r\n    position: \"absolute\",\r\n    top: \"10%\",\r\n    width: \"600px\",\r\n    height: \"600px\",\r\n    padding: \"7px\",\r\n  };\r\n\r\n  //update myinfo\r\n  const onUpdate = () => {\r\n\r\n    if (onCheckPhonenumber(loginUser.utel) === false) {\r\n      return;\r\n    }\r\n\r\n    if (!onCheckEmail(loginUser.uemail)) {\r\n      return;\r\n    }\r\n\r\n    Swal.fire({\r\n      text: \"정말로 수정하시겠습니까?\",\r\n      icon: 'info',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '수정',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const formData = new FormData();\r\n        formData.append(\"uid\", uid);\r\n        formData.append(\"unickname\", loginUser.unickname);\r\n        formData.append(\"uprofile\", loginUser.uprofile);\r\n        formData.append(\"uaddress\", address || loginUser.uaddress);\r\n        formData.append(\"uemail\", loginUser.uemail);\r\n        formData.append(\"utel\", loginUser.utel);\r\n        formData.append(\"file\", loginUser.file);\r\n\r\n        try {\r\n          await axios.post('/api/user/update', formData);\r\n          Swal.fire({\r\n            text: \"수정을 완료하였습니다!\",\r\n            icon: 'success',\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n          })\r\n        } catch (e) {\r\n          if (e) {\r\n            Swal.fire({\r\n              text: \"예상치 못한 오류가 발생하였습니다\",\r\n              icon: 'error',\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n            })\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  //deactivate membership\r\n  const onDelete = () => {\r\n\r\n    Swal.fire({\r\n      text: \"회원을 탈퇴하시겠습니까?\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '수정',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const formData = new FormData();\r\n        formData.append(\"uid\", loginUser.uid);\r\n        await axios.post('/api/user/deactivate', formData);\r\n        Swal.fire({\r\n          text: \"탈퇴가 완료되었습니다!\",\r\n          icon: 'success',\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n        })\r\n        sessionStorage.removeItem('uid');\r\n        history.push('/');\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    callUser();\r\n  }, [uid]);\r\n\r\n  if (loading) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n      style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div className='modal-address'>\r\n        {isPopupOpen && (\r\n          <div>\r\n            <DaumPostcodeEmbed\r\n              style={postCodeStyle} onClose={() => setIsPopupOpen(false)} onComplete={handlePostCode} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className='d-flex justify-content-center mt-5' >\r\n        <Row className='mt-3'>\r\n          <Form style={{ marginLeft:'70px' }}>\r\n            <Form.Group className=\"mb-3\" style={{ width: '300px' }}>\r\n              <Form.Label>NickName</Form.Label>\r\n              <Form.Control\r\n                placeholder=\"닉네임\"\r\n                name='unickname'\r\n                value={loginUser.unickname}\r\n                onChange={onChangeLoginUser} />\r\n              {message && <Alert>{message}</Alert>}\r\n              <Button className='mt-3' onClick={onCheckUnickanme}>닉네임 중복확인</Button>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-3\" style={{ width: '300px' }}>\r\n              <Form.Label>Tel</Form.Label>\r\n              <Form.Control\r\n                name='utel'\r\n                placeholder=\"Tel\"\r\n                value={loginUser.utel}\r\n                onChange={onChangeLoginUser} />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\">\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-3\" style={{ width: '300px' }}>\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                name='uemail'\r\n                placeholder=\"Email\"\r\n                value={loginUser.uemail}\r\n                onChange={onChangeLoginUser} />\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-3\" style={{ width: '300px' }}>\r\n              <Form.Label>Address</Form.Label>\r\n              <Form.Control\r\n                name='uaddress'\r\n                value={address || loginUser.uaddress}\r\n                onChange={onChangeLoginUser} />\r\n            </Form.Group>\r\n\r\n            <Button type='button'\r\n              style={{ marginLeft:'-150px', marginTop: 2 }}\r\n              onClick={() => setIsPopupOpen(true)}>우편번호 검색</Button>\r\n            <Button className='postCode_btn'\r\n              style={{ marginLeft: 60, marginTop: 2 }}\r\n              type='button'\r\n              onClick={() => setIsPopupOpen(false)} >닫기</Button>\r\n\r\n            <Form.Control\r\n              className=\"my-3\" style={{ width: '300px' }}\r\n              type=\"file\"\r\n              onChange={onChangeLoginUserFile}\r\n            />\r\n            <img src={image} style={{ width: \"300px\", height: \"350px\", marginLeft: '-150px' }} />\r\n\r\n            <div style={{ marginTop: 20, marginLeft:'-100px' }}>\r\n              <Button className='ff'\r\n              style={{marginLeft:'-10px'}}\r\n                onClick={onUpdate}>\r\n                정보 변경하기\r\n              </Button>\r\n              <Button className='ff1' onClick={onDelete}>회원탈퇴</Button>\r\n              <Button className='mx-5' onClick={() => history.push(`/my/pass/update`)}>\r\n                비밀번호 변경\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default MyInfo","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MySellListChart.jsx",["519","520"],[],"import axios from 'axios';\r\nimport React, { useContext, useRef } from 'react'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport qs from 'qs';\r\n\r\n\r\n\r\nconst MySellListChart = ({ location }) => {\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const seller = search.seller;\r\n    const [data, setData] = useState('');\r\n    const chartType = useRef('Bar');\r\n    const title = useRef('직업별인원수');\r\n\r\n    const options = {\r\n        title: title.current,\r\n        lineWidth: 4,\r\n        curveType: \"function\",\r\n\r\n    };\r\n\r\n\r\n\r\n    const callChart = async () => {\r\n        //fetch data from db + put it in state variable\r\n        let result = await axios.get(`/api/tradeinfo/sell/chart?seller=${seller}`);\r\n        let array = changeData(result.data);\r\n        setData(array);\r\n    }\r\n\r\n    const changeData = (result) => {\r\n        title.current = '2022 월별 판매 총액';\r\n        chartType.current = 'Line';\r\n\r\n        let array = [];\r\n        array.push(['월', '총액']);\r\n        result.forEach(item => {\r\n            array.push([item.month, item.payprice]);\r\n        });\r\n        return array;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        callChart();\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{ marginTop: 100 }}>\r\n         \r\n                <Chart\r\n                    chartType={chartType.current}\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options} />\r\n              \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MySellListChart","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MySellList.jsx",["521"],[],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Spinner, Table } from 'react-bootstrap';\r\nimport Pagination from 'react-js-pagination';\r\n\r\nconst MySellList = ({ location, history }) => {\r\n    const [sellList, setSellList] = useState(['aaa']);\r\n    const [total, setTotal] = useState(1);\r\n    const [loading, setLoading] = useState(false);\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const page = parseInt(search.page) || 1;\r\n    const seller = search.seller;\r\n\r\n    const callSellList = async () => {\r\n        setLoading(true);\r\n        const result = await axios.get(`/api/tradeinfo/selllist?seller=${seller}&page=${page}`)\r\n        setSellList(result.data.list);\r\n        setTotal(result.data.total);\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        callSellList();\r\n    }, [page])\r\n\r\n    if (loading) return (\r\n        <Spinner animation=\"border\" variant=\"primary\"\r\n            style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Table striped className='mt-5'>\r\n                <thead>\r\n                    <tr >\r\n                        <th>판매가격</th>\r\n                        <th>판매일자</th>\r\n                        <th>후기쓰기</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {sellList.map(list =>\r\n                        <>\r\n                            <tr key={list.paycode}>\r\n                                <td>{list.payprice}</td>\r\n                                <td>{list.regDate}</td>\r\n                                {(list.sellercondition === 0) ?\r\n                                    /* buyer=seller, seller=buyer로 거꾸로 바꿔주기만 하면 seller가 buyer에 관한 리뷰를 쓸 수 있음. */\r\n                                    <td><Button onClick={() => history.push(`/my/review/insert/${list.paycode}?buyer=${list.seller}&seller=${list.buyer}&pcode=${list.pcode}`)}>\r\n                                        후기쓰러가기</Button></td>\r\n                                    :\r\n                                    <td>후기 작성 완료</td>}\r\n                            </tr>\r\n                        </>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n\r\n            {sellList.length !== 0 ? <div style={{ marginRight: 190 }}>\r\n                <Pagination\r\n                    activePage={page}\r\n                    itemsCountPerPage={6}\r\n                    totalItemsCount={total}\r\n                    pageRangeDisplayed={10}\r\n                    prevPageText={\"‹\"}\r\n                    nextPageText={\"›\"}\r\n                    onChange={(e) => history.push(`/pboard/list?page=${e}`)}\r\n                /> </div> : <div style={{ marginTop: 200 }}>\r\n                <h1 style={{ fontSize: 60, color: 'red',marginBottom:200 }}>해당 검색 결과가 존재하지 않습니다.</h1>\r\n            </div>}\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default MySellList","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyReceiveReview.jsx",["522"],[],"import { Rating } from '@mui/material';\r\nimport axios from 'axios';\r\nimport qs from 'qs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Pagination from 'react-js-pagination';\r\nimport '../Pagination.css';\r\n\r\nconst MyReceiveReview = ({ location, history }) => {\r\n\r\n  const [list, setList] = useState(['aaa']);\r\n  const [total, setTotal] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n  const unickname = search.receiver\r\n  const page = parseInt(search.page) || 1;\r\n\r\n  const callReceivewReview = async () => {\r\n    setLoading(true);\r\n    const result = await axios.get(`/api/review/list?page=${page}&num=6&receiver=${unickname}`);\r\n    setList(result.data.list);\r\n    setTotal(result.data.total);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    callReceivewReview();\r\n  }, [location]);\r\n\r\n  if (loading) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n      style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n  )\r\n  \r\n  return (\r\n    <div className='main'>\r\n      <Table striped className='mt-5'>\r\n        <thead>\r\n          <tr >\r\n            <th>후기내용</th>\r\n            <th>보낸사람</th>\r\n            <th>작성일자</th>\r\n            <th>평점</th>\r\n\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.map(list =>\r\n            <>\r\n              <tr key={list.rvcode}>\r\n                <td>{list.rvcontent}</td>\r\n                <td>{list.sender}</td>\r\n                <td>{list.regDate}</td>\r\n                <td>  <Rating\r\n                  emptySymbol=\"fa fa-star-o fa-2x\"\r\n                  fullSymbol=\"fa fa-star fa-2x\"\r\n                  value={list.point}\r\n                  readOnly\r\n                  fractions={5} precision={0.5} max={5} /></td>\r\n              </tr>\r\n\r\n            </>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n\r\n\r\n      {list.length !== 0 ? <div style={{ marginRight: -120 }}>\r\n        <Pagination\r\n          activePage={page}\r\n          itemsCountPerPage={6}\r\n          totalItemsCount={total}\r\n          pageRangeDisplayed={10}\r\n          prevPageText={\"‹\"}\r\n          nextPageText={\"›\"}\r\n          onChange={(e) => history.push(`/my/review?receiver=${unickname}&page=${e}`)}\r\n        />\r\n      </div>\r\n        : <div style={{ marginTop: 200 }}>\r\n          <h1 style={{ fontSize: 60, color: 'red', marginBottom: 170 }}>해당 검색 결과가 존재하지 않습니다.</h1>\r\n        </div>}\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default MyReceiveReview","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardInsert.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticeList.jsx",["523","524"],[],"import React, { useEffect, useState } from 'react'\r\nimport { Row, Spinner, Table } from 'react-bootstrap';\r\nimport qs from 'qs'\r\nimport axios from 'axios';\r\nimport NoticeItem from './NoticeItem';\r\nimport Pagination from 'react-js-pagination';\r\nimport { MenuItem, TextField } from '@material-ui/core';\r\n\r\nconst NoticeList = ({ location, history }) => {\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const [query, setQuery] = useState('');\r\n    const [searchType, setSearchType] = useState('제목');\r\n    const [noticeList, setNoticeList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [total, setTotal] = useState(1);\r\n    const page = parseInt(search.page) || 1;\r\n    const num = 5;\r\n\r\n    //로딩 on ㅡ> 출력 ㅡ> 로딩 off\r\n    const callNoticeList = async () => {\r\n        setLoading(true);\r\n        const result = await axios.get(`/api/notice/list?page=${page}&num=${num}&searchType=${searchType}&keyword=${query}`);\r\n        setNoticeList(result.data.list);\r\n        setTotal(result.data.total);\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n\r\n    //검색 시 목록 출력\r\n    const callFiltered = (e) => {\r\n        if (e.keyCode === 13) {\r\n            callNoticeList();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        callNoticeList();\r\n    }, [page])\r\n\r\n    if (loading) return (\r\n        <Spinner animation=\"border\" variant=\"primary\"\r\n            style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n    )\r\n\r\n    return (\r\n        <div className='main'>\r\n            <TextField style={{ marginTop: 100, marginLeft: 900, marginBottom: 50, width: 120 }}\r\n                className='search'\r\n                select\r\n                value={searchType}\r\n                name='searchType'\r\n                onChange={(e) => setSearchType(e.target.value)}>\r\n                <MenuItem value='제목' style={{}}>제목</MenuItem>\r\n                <MenuItem value='내용'>내용</MenuItem>\r\n                <MenuItem value='작성자'>작성자</MenuItem>\r\n                <MenuItem value='작성날짜'>등록날짜</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField value={query}\r\n                className='search2'\r\n                style={{ marginLeft: 15, marginBottom: 50, width: 200, marginTop: 100 }}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                callFiltered={callFiltered}>\r\n            </TextField>\r\n\r\n            <Table striped>\r\n                <thead>\r\n                    <tr >\r\n                        <th>관리자 이름</th>\r\n                        <th>제목</th>\r\n                        <th>내용</th>\r\n                        <th>작성일자</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {noticeList.map(noticelist =>\r\n                        <>\r\n                            <NoticeItem key={noticelist.ncode} noticelist={noticelist} />\r\n                        </>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <br />\r\n            <br />\r\n\r\n            <div style={{ marginRight: 30 }}>\r\n                <Pagination\r\n                    activePage={page}\r\n                    itemsCountPerPage={6}\r\n                    totalItemsCount={total}\r\n                    pageRangeDisplayed={10}\r\n                    prevPageText={\"‹\"}\r\n                    nextPageText={\"›\"}\r\n                    onChange={(e) => history.push(`/notice/list?page=${e}`)}\r\n                /> </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default NoticeList","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticeRead.jsx",["525"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst NoticeRead = ({ match, history }) => {\r\n  const ncode = match.params.ncode;\r\n  const [loading, setLoading] = useState(false);\r\n  const [noticeRead, setNoticeRead] = useState({\r\n    ntitle: '',\r\n    ncontent: '',\r\n    nwriter: '',\r\n    regDate: '',\r\n    ncode: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    callNoticeRead();\r\n  }, [])\r\n\r\n\r\n  const callNoticeRead = async () => {\r\n    setLoading(true);\r\n    const result = await axios.get(`/api/notice/read/${ncode}`)\r\n    setNoticeRead(result.data);\r\n    setLoading(false);\r\n  }\r\n\r\n  const { ntitle, ncontent, nwriter, regDate } = noticeRead;\r\n\r\n  if (loading) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n      style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n  )\r\n\r\n  return (\r\n    <div className='event_notice'>\r\n      <h2 className='title'>공지사항</h2>\r\n      <div>\r\n        <article className='article event_article' style={{ height: '272px' }}>\r\n\r\n          <div className=\"article_title\">\r\n            <h2 style={{ border: 'none' }}>\r\n              제목ㅡ{ntitle}\r\n            </h2>\r\n            <div style={{width:'100%',   borderBottom: '3px solid #000'}}>\r\n              <span style={{ float: 'left' }} aria-label='등록일'>\r\n                작성자: {nwriter}\r\n              </span>\r\n              <h5 className='article_date' style={{ float: 'right' }} aria-label='등록일'>\r\n                {regDate}\r\n              </h5>\r\n            </div>\r\n          </div>\r\n\r\n          <section className='article_data'>\r\n            <div className='fr_view'>\r\n              내용ㅡ{ncontent}\r\n            </div>\r\n          </section>\r\n        </article>\r\n      </div>\r\n      <Button onClick={() => { history.go(-1) }}>목록으로</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoticeRead\r\n\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardList.jsx",["526","527","528"],[],"import { MenuItem, TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport qs from 'qs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Row, Spinner } from 'react-bootstrap';\r\nimport Pagination from 'react-js-pagination';\r\nimport '../Pagination.css';\r\nimport PboardItem from './PboardItem';\r\n\r\nconst PboardList = ({ location, history }) => {\r\n    const [postList, setPostList] = useState(['aaa']);\r\n    const [total, setTotal] = useState(1);\r\n    const [loading, setLoading] = useState(false);\r\n    const [query, setQuery] = useState('');\r\n    const [searchType, setSearchType] = useState('제목');\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const page = parseInt(search.page) || 1;\r\n    const num = 6;\r\n\r\n    //loading on ㅡ> render ㅡ> loading off\r\n    const callPostList = async () => {\r\n        setLoading(true);\r\n        const result = await axios.get(`/api/pboard/list?page=${page}&num=${num}&searchType=${searchType}&keyword=${query}`);\r\n        setPostList(result.data.list);\r\n        setTotal(result.data.total);\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n    //enter ㅡ> new render\r\n    const callFilterd = (e) => {\r\n        if (e.keyCode === 13) {\r\n            callPostList();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //update plike on PboardItem\r\n    const callPlike = async () => {\r\n        const result = await axios.get(`/api/pboard/list?page=${page}&num=${num}&searchType=${searchType}&keyword=${query}`);\r\n        setPostList(result.data.list);\r\n        setTotal(result.data.total);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        callPostList();\r\n    }, [page])\r\n\r\n\r\n    // progress bar when loading\r\n    if (loading) return (\r\n        <Spinner animation=\"border\" variant=\"primary\"\r\n            style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n    )\r\n\r\n    const onPageChange=(e)=>{\r\n        history.push(`/pboard/list?page=${e}`)\r\n        window.scrollTo({\r\n            top:0,\r\n            left:150,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ marginLeft: 100 }}>\r\n            <div className='img4'>\r\n                <img\r\n                    sizes='100vw'\r\n                    className=\"d-block w-100\"\r\n                    src=\"/image/image.9.jpg\"\r\n                />\r\n            </div>\r\n            <div className='img10'>\r\n                <img\r\n                    sizes='100vw'\r\n                    className=\"d-block w-100\"\r\n                    src=\"/image/image18.jpg\"\r\n                />\r\n            </div>\r\n\r\n            <TextField className=\"search\" style={{ marginLeft: 600, marginBottom: 50, width: 120 }}\r\n                select\r\n                value={searchType}\r\n                name='searchType'\r\n                onChange={(e) => setSearchType(e.target.value)}>\r\n                <MenuItem className=\"ppp\" value='제목'>제목</MenuItem>\r\n                <MenuItem value='내용'>내용</MenuItem>\r\n                <MenuItem value='제목과 내용'>제목과 내용</MenuItem>\r\n                <MenuItem value='작성자'>작성자</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField className=\"search2\" value={query}\r\n                style={{ marginLeft: 15, marginBottom: 50, width: 200 }}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                onKeyDown={callFilterd}>\r\n            </TextField>\r\n\r\n\r\n            <Row style={{ marginLeft: 55 }}>\r\n                {postList.map(postList =>\r\n                    <PboardItem key={postList.pcode} callPlike={callPlike} postList={postList} />\r\n\r\n                )}\r\n            </Row>\r\n\r\n            <br />\r\n            <br />\r\n\r\n            {postList.length !== 0 ? <div style={{ marginLeft:640 }}>\r\n                <Pagination\r\n                    activePage={page}\r\n                    itemsCountPerPage={6}\r\n                    totalItemsCount={total}\r\n                    pageRangeDisplayed={10}\r\n                    prevPageText={\"‹\"}\r\n                    nextPageText={\"›\"}\r\n                    onChange={(e)=>onPageChange(e)}\r\n                /> </div> : <div style={{ marginTop: 200 }}>\r\n                <h1 style={{ fontSize: 60, color: 'red', marginBottom: 200 }}>해당 검색 결과가 존재하지 않습니다.</h1>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PboardList\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardRead.jsx",["529"],[],"import { Card, Grid, TextField } from '@material-ui/core';\r\nimport { Rating } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { addDoc, collection, getFirestore, limit, onSnapshot, query, where } from 'firebase/firestore';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, ButtonGroup, Form, Row, Spinner } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { app } from '../fireStore';\r\n\r\nconst PboardRead = ({ match, history }) => {\r\n  const pcode = match.params.pcode;\r\n  const db = getFirestore(app);\r\n  const { loginUser } = useContext(UserContext);\r\n  const [image, setImage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [comparisonPcode, setComparisonPcode] = useState([]);\r\n  const [postRead, setPostRead] = useState({\r\n    ptitle: '',\r\n    pcontent: '',\r\n    pwriter: '',\r\n    plike: '',\r\n    pimage: '',\r\n    viewcnt: '',\r\n    regDate: '',\r\n    pname: '',\r\n    upoint: '',\r\n    file: null,\r\n    uid: ''\r\n  });\r\n  const { uid, ptitle, upoint, pcontent, pwriter, pimage, pprice, pname, file } = postRead;\r\n\r\n\r\n\r\n  const callPostRead = async () => {\r\n    setLoading(true);\r\n\r\n    //pcode o ㅡ>rendering on || pcode x ㅡ>move to PboardList\r\n    try {\r\n      const result = await axios.get(`/api/pboard/read/${pcode}`)\r\n\r\n      const q = query(\r\n        collection(db, `chatroom`),\r\n        where('who', 'array-contains', sessionStorage.getItem('uid')),\r\n        limit(100)\r\n      );\r\n  \r\n      onSnapshot(q, (snapshot) => {\r\n        let rows = [];\r\n        snapshot.forEach((doc) => {\r\n          rows.push(doc.data().pcode);\r\n        });\r\n        setComparisonPcode(rows);\r\n      });\r\n\r\n      //sell,remove o ㅡ> not allow access\r\n      if (result.data.pcondition === 0) {\r\n        setPostRead(result.data);\r\n        setImage(result.data.pimage);\r\n      } else {\r\n        Swal.fire({\r\n          text: \"해당 상품은 판매되었거나 삭제된 상품입니다\",\r\n          icon: 'error',\r\n          confirmButtonColor: '#3085d6',\r\n        })\r\n        setTimeout(() => history.push('/pboard/list'), 1000);\r\n      }\r\n    } catch (e) {\r\n      if (e) {\r\n        Swal.fire({\r\n          text: \"예상치 못한 오류가 발생하였습니다\",\r\n          icon: 'error',\r\n          confirmButtonColor: '#3085d6',\r\n        })\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n\r\n  const onChangeForm = (e) => {\r\n    setPostRead(postRead => ({\r\n      ...postRead,\r\n      [e.target.name]: e.target.value\r\n    })\r\n    )\r\n  }\r\n\r\n  const onChangeFile = (e) => {\r\n    setPostRead(postRead => ({\r\n      ...postRead,\r\n      file: e.target.files[0]\r\n    }))\r\n    setImage(URL.createObjectURL(e.target.files[0]))\r\n  }\r\n\r\n  const onUpdate = (e) => {\r\n    e.preventDefault();\r\n\r\n    Swal.fire({\r\n      text: \"정말로 수정하시겠습니까?\",\r\n      icon: 'info',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '수정',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n\r\n      //수정 click\r\n      if (result.isConfirmed) {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"pcode\", pcode);\r\n        formData.append(\"pcontent\", pcontent);\r\n        formData.append(\"ptitle\", ptitle);\r\n        formData.append(\"pprice\", pprice);\r\n        formData.append(\"pwriter\", pwriter);\r\n        formData.append(\"pimage\", pimage);\r\n        formData.append(\"pname\", pname);\r\n\r\n        try {\r\n          await axios.post('/api/pboard/update', formData);\r\n          Swal.fire({\r\n            text: \"수정을 완료하였습니다!\",\r\n            icon: 'success',\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n          })\r\n        } catch (e) {\r\n\r\n          //limit on file size\r\n          e.message === 'Network Error' ?\r\n            Swal.fire({\r\n              text: '파일의 용량이 250MB를 초과하여 업로드할 수 없습니다.',\r\n              icon: 'error',\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n            })\r\n            :\r\n            Swal.fire({\r\n              text: '예상치 못한 오류가 발생하였습니다',\r\n              icon: 'error',\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n            })\r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  const onDelete = (e) => {\r\n    e.preventDefault();\r\n    Swal.fire({\r\n      text: \"정말로 삭제하시겠습니까?\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '삭제',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n\r\n      //삭제 click\r\n      if (result.isConfirmed) {\r\n        try {\r\n          await axios.post('/api/pboard/delete?pcode=' + pcode);\r\n          Swal.fire({\r\n            text: \"삭제를 완료하였습니다!\",\r\n            icon: 'success',\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n          })\r\n          history.push('/pboard/list')\r\n        } catch (e) {\r\n          if (e) {\r\n            Swal.fire({\r\n              text: '예상치 못한 오류가 발생하였습니다.',\r\n              icon: 'error',\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n            })\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n\r\n    })\r\n  }\r\n\r\n  const setRoomList = async () => {\r\n\r\n    if (comparisonPcode.includes(pcode)===false) {\r\n      const docRef = collection(db, 'chatroom');\r\n      await addDoc(docRef, {\r\n        who: [sessionStorage.getItem('uid'), uid],\r\n        date: new Intl.DateTimeFormat('kr', { dateStyle: 'full', timeStyle: 'full' })\r\n          .format(new Date()),\r\n        pcode: pcode\r\n      });\r\n    }\r\n    history.push(`/my/chat?pcode=${pcode}&pwriter_id=${uid}`)\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    callPostRead();\r\n  }, [])\r\n\r\n\r\n  if (loading) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n      style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n  )\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Row className='d-flex justify-content-center my-5'>\r\n        <Card style={{ width: '50rem' }} className=\"p-3\">\r\n          <Form>\r\n            <img src={image || 'https://dummyimage.com/100x100'} alt=\"빈이미지\" width={300} height={300} />\r\n            <Form.Control className='my-3'\r\n              type=\"file\"\r\n              onChange={onChangeFile} />\r\n\r\n            <hr />\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={pwriter}\r\n                readOnly\r\n                label=\"작성자\"\r\n                name=\"pwriter\"\r\n                autoComplete=\"pwriter\"\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={ptitle}\r\n                onChange={loginUser.unickname === pwriter && onChangeForm}\r\n                label=\"제목\"\r\n                helperText='제목은 50까지로 제한'\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                name=\"ptitle\"\r\n                autoComplete=\"ptitle\"\r\n              />\r\n            </Grid>\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField multiline\r\n                minRows={12}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={pcontent}\r\n                onChange={loginUser.unickname === pwriter && onChangeForm}\r\n                label=\"내용\"\r\n                helperText='내용은 300자까지로 제한'\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                name=\"pcontent\"\r\n                autoComplete=\"pcontent\"\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                helperText='원하는 가격을 입력하세요'\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                value={pprice}\r\n                onChange={loginUser.unickname === pwriter && onChangeForm}\r\n                name=\"pprice\"\r\n                type='number'\r\n                autoComplete=\"pprice\"\r\n              />\r\n            </Grid>\r\n\r\n            <hr />\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                helperText='상품명은 30자까지로 제한'\r\n                label='상품명'\r\n                FormHelperTextProps={{ style: { fontSize: 15 } }}\r\n                value={pname}\r\n                onChange={loginUser.unickname === pwriter && onChangeForm}\r\n                name=\"pname\"\r\n              />\r\n            </Grid>\r\n            <hr />\r\n\r\n            {upoint ? <>\r\n              <span style={{ marginRight: 50, fontSize: 20 }}>판매자 별점</span>\r\n              <Rating\r\n                emptySymbol=\"fa fa-star-o fa-2x\"\r\n                fullSymbol=\"fa fa-star fa-2x\"\r\n                value={upoint}\r\n                readOnly\r\n                fractions={5} precision={0.5} max={5} />({upoint})\r\n            </>\r\n              : <h1>거래 이력이 없습니다.</h1>}\r\n            <div style={{ marginTop: 30 }}>\r\n\r\n              <ButtonGroup>\r\n                {loginUser.unickname === pwriter &&\r\n                  <>\r\n                    <Button onClick={onUpdate} style={{ marginRight: 90 }}>상품 수정</Button>\r\n                    <Button style={{ marginRight: 90 }} onClick={onDelete} >상품 삭제</Button>\r\n                  </>}\r\n                {loginUser.unickname !== pwriter &&\r\n                  <Button style={{ marginRight: 90 }} onClick={() => setRoomList()}>채팅하기</Button>}\r\n                <Button onClick={() => history.go(-1)}>뒤로가기</Button>\r\n              </ButtonGroup>\r\n            </div>\r\n\r\n          </Form>\r\n        </Card>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PboardRead","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\BestItem.jsx",["530"],[],"import { Button } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\n\r\nconst BestItem = ({ bestList,history }) => {\r\n  const { pcode, plike, ptitle, pimage } = bestList;\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    const href = e.target.getAttribute(\"href\")\r\n    history.push(href);\r\n  }\r\n  return (\r\n\r\n    <div>\r\n      <img src={pimage} alt={ptitle} width={300} height={300} border={2} />\r\n      <p>{ptitle}</p>\r\n      <p>좋아요: {plike}</p>\r\n      <Button  variant='secondary'>\r\n        <Nav.Link href={`/pboard/read/${pcode}`} onClick={onClick}>자세히보기</Nav.Link>\r\n      </Button>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default withRouter(BestItem)","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\fireStore.js",[],[],"C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EventItem.jsx",["531","532","533","534","535","536","537","538"],[],"import React from 'react'\r\nimport { Button, ButtonGroup, Card, Col, Container, Nav, Row } from 'react-bootstrap'\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nconst EventItem = ({ history,eventlist }) => {\r\n  const { ecode, etitle, econtent, ewriter, regDate} = eventlist;\r\n\r\n  return (\r\n                <tr style={{cursor:'pointer'}} onClick={()=>history.push(`/event/read/${ecode}`)}>\r\n                <td>{ewriter}</td>\r\n                    <td>{etitle}</td>\r\n                    <td>{econtent}</td>\r\n                    <td>{regDate}</td>\r\n                </tr>\r\n  )\r\n}\r\n\r\nexport default withRouter(EventItem);","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\event\\EreplyList.jsx",["539"],[],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Pagination from \"react-js-pagination\";\r\nimport { UserContext } from '../context/UserContext';\r\nimport '../Pagination.css';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst EreplyList = ({ ecode }) => {\r\n  const { loginUser } = useContext(UserContext);\r\n  const [list, setList] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [total, setTotal] = useState(0);\r\n  const [ercontent, setErcontent] = useState('');\r\n  const num = 6;\r\n\r\n  const callEreply = async () => {\r\n    const result = await axios.get(`/api/ereply/list?ecode=${ecode}&page=${page}&num=${num}`);\r\n    setList(result.data.list);\r\n    setTotal(result.data.total);\r\n  }\r\n\r\n  useEffect(() => {\r\n    callEreply();\r\n  }, [page]);\r\n\r\n  const onInsert = async (e) => {\r\n    e.preventDefault();\r\n    if (ercontent === '') {\r\n      alert('내용을 입력해 주세요!');\r\n      return;\r\n    }\r\n    const data = {\r\n      ecode: ecode,\r\n      erwriter: loginUser.unickname,\r\n      ercontent: ercontent\r\n    };\r\n    await axios.post('/api/ereply/insert', data);\r\n    setErcontent('');\r\n    callEreply();\r\n    setPage(page);\r\n  }\r\n\r\n  const onDelete = async (ercode) => {\r\n\r\n    Swal.fire({\r\n      text: \"정말로 삭제하시겠습니까?\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: '삭제',\r\n      cancelButtonText: '취소'\r\n    }).then(async (result) => {\r\n\r\n      if (result.isConfirmed) {\r\n\r\n        try {\r\n          await axios.post(`/api/ereply/delete/${ercode}`)\r\n          Swal.fire({\r\n            text: \"댓글이 삭제되었습니다\",\r\n            icon: 'success',\r\n            confirmButtonColor: '#3085d6',\r\n          })\r\n          callEreply();\r\n        } catch (e) {\r\n          Swal.fire({\r\n            text: \"예상치 못한 오류가 발생하였습니다.\",\r\n            icon: 'error',\r\n            confirmButtonColor: '#3085d6',\r\n          })\r\n        }\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  if (!list) return <h1>Loading......</h1>\r\n\r\n  return (\r\n    <div>\r\n      {sessionStorage.getItem('uid') &&\r\n        <Form onSubmit={onInsert}>\r\n          <Form.Label className='d-flex justify-content-left' style={{ fontSize: 20 }}>\r\n            댓글 입력\r\n          </Form.Label>\r\n          <Form.Control\r\n            class='ereply_content'\r\n            value={ercontent}\r\n            onChange={(e) => setErcontent(e.target.value)}\r\n            placeholder='내용을 입력하세요...' />\r\n        </Form>}\r\n\r\n      <hr />\r\n      {list.map(reply =>\r\n        <div class='u_cbox_comment_box u_cbox_type_profile' key={reply.ercode}>\r\n          <div class='u_cbox_area'>\r\n            <div class='u_cbox_info'>\r\n              <span>\r\n                {reply.erwriter}\r\n              </span>\r\n            </div>\r\n            <div class='u_cbox_text_wrap'>\r\n              <span class='u_cbox_contents'>\r\n                {reply.ercontent}\r\n              </span>\r\n            </div>\r\n            <div class='u_cbox_info_base'>\r\n              <span class='u_cbox_date'>\r\n                {reply.regDate}\r\n              </span>\r\n              <span class='u_cbox_recomm_set'>\r\n                {/*       <Button>수정</Button> */}\r\n                <Button onClick={() => onDelete(reply.ercode)}>삭제</Button>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Pagination\r\n        activePage={page}\r\n        itemsCountPerPage={num}\r\n        totalItemsCount={total}\r\n        pageRangeDisplayed={5}\r\n        prevPageText={\"‹\"}\r\n        nextPageText={\"›\"}\r\n        onChange={(e) => setPage(e)} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EreplyList\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\my\\MyChatItem.jsx",["540","541","542","543"],[],"import React, { useContext } from 'react';\r\nimport { Badge, Button } from 'react-bootstrap';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst MyChatItem = ({ message, onDelete }) => {\r\n    const { text, date, uid, id, unickname, uprofile } = message;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <p style={{ fontSize: 20 }}>\r\n                    {unickname}</p>\r\n\r\n                <img className='icon' src={uprofile} />\r\n\r\n                <span className='chat_span'>{JSON.stringify(new Intl.DateTimeFormat('kr', { dateStyle: 'short', timeStyle: 'short' })\r\n                    .format(date))}</span>\r\n            </div>\r\n            <div className=\"textbox\">\r\n                <p style={{ textAlign: 'left' }}>\r\n                    {text}\r\n                </p>\r\n                {uid === sessionStorage.getItem('uid') && <Button className='mt-3' onClick={() => onDelete(id)}>삭제</Button>}\r\n            </div>\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default MyChatItem","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\notice\\NoticeItem.jsx",["544","545","546","547","548","549","550","551"],[],"import React from 'react'\r\nimport { Button, ButtonGroup, Card, Col, Container, Nav, Row } from 'react-bootstrap'\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nconst NoticeItem = ({ history, noticelist }) => {\r\n  const { ncode, ntitle, ncontent, nwriter, regDate } = noticelist;\r\n\r\n  return (\r\n    <tr style={{ cursor: 'pointer' }} onClick={() => history.push(`/notice/read/${ncode}`)}>\r\n      <td>{nwriter}</td>\r\n      <td>{ntitle}</td>\r\n      <td>{ncontent}</td>\r\n      <td>{regDate}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default withRouter(NoticeItem);","C:\\Users\\Administrator\\Desktop\\다운받은거\\project-master\\src\\pboard\\PboardItem.jsx",["552","553","554"],[],"import axios from 'axios';\r\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { Button, ButtonGroup, Card, Col, Nav } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst PboardItem = ({ postList, history, callPlike }) => {\r\n\r\n  const { pcode, ptitle, pcontent, pwriter, pimage, viewcnt, plike } = postList;\r\n  const { loginUser } = useContext(UserContext);\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  //plike on PboardItem + truth of user whether click like or not \r\n  const callLoveList = useCallback(async () => {\r\n    const result = await axios.get(`/api/pboardlove/isloveread?unickname=${loginUser.unickname}&pcode=${pcode}`)\r\n\r\n    //initial state of plike = false\r\n    setToggle(result.data.lovecondition || false);\r\n  }, [])\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    const href = e.target.getAttribute(\"href\")\r\n    history.push(href);\r\n  }\r\n\r\n  //toggle like button \r\n  const onToggleLike = async () => {\r\n    const formData = new FormData();\r\n    formData.append('pcode', pcode);\r\n    formData.append('unickname', loginUser.unickname);\r\n\r\n    toggle === false ?\r\n      await axios.post(`/api/pboardlove/love`, formData)\r\n      :\r\n      await axios.post(`/api/pboardlove/dislove`, formData);\r\n\r\n    setToggle(!toggle);\r\n    callPlike();\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    callLoveList();\r\n  }, [toggle])\r\n\r\n\r\n  return (\r\n    <>\r\n      \r\n        <Col md=\"auto\" style={{ marginTop: 60 }}>\r\n\r\n          <Card border='success' bg='light' style={{ width: '25rem', marginRight:40,height: 700, padding: 10 }}>\r\n            <Card.Body style={{ marginBottom: 50 }}>\r\n              <Card.Header style={{ fontSize: 20, height: 50 }}>\r\n                <span style={{ float: 'left' }}>작성자: {pwriter}</span>\r\n                <span style={{ float: 'right' }}>조회수: {viewcnt}</span>\r\n              </Card.Header>\r\n              <Card.Img src={pimage} height='300' />\r\n              <Card.Title style={{ textAlign: 'left', marginTop: 22 }}>제목: {ptitle}</Card.Title>\r\n              <hr />\r\n              <Card.Text style={{ textAlign: 'left', marginTop: 22 }}>내용: {pcontent}</Card.Text>\r\n            </Card.Body>\r\n            <ButtonGroup>\r\n              <Button className='btn-10' onClick={sessionStorage.getItem('uid') && onToggleLike} variant=\"primary\">\r\n                <img src={\r\n                  toggle ? \"../image/heart.png\" : \"../image/emptyheart.png\"} width={15} />\r\n                &nbsp;&nbsp;{plike}\r\n              </Button>\r\n\r\n              <Button style={{ marginLeft: 100 }} variant='secondary'>\r\n                <Nav.Link className='box' onClick={onClick} href={`/pboard/read/${pcode}`}>자세히보기</Nav.Link>\r\n              </Button>\r\n            </ButtonGroup>\r\n\r\n          </Card>\r\n        </Col>\r\n      \r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default withRouter(PboardItem)","C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\reportWebVitals.js",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\App.js",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\HeaderPage.jsx",["555","556","557"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\AboutPage.jsx",["558","559","560","561","562","563","564","565","566","567","568"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\FooterPage.jsx",["569"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\HomePage.jsx",["570","571","572"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\context\\UserContext.js",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventPage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginPage.jsx",["573"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyPage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticePage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardPage.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\BestList.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventList.jsx",["574","575"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginForm.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventRead.jsx",["576"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginFindPass.jsx",["577","578","579"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginRestore.jsx",["580"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginRegister.jsx",["581","582","583"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyBuyListChart.jsx",["584","585"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyBuyList.jsx",["586"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\login\\LoginFindId.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyUpdatePass.jsx",["587"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyInsertReview.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyMenu.jsx",["588"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyChatList.jsx",["589","590"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyPay.jsx",["591","592","593","594"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyReceiveReview.jsx",["595"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MySellListChart.jsx",["596","597"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MySellList.jsx",["598"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyInfo.jsx",["599","600","601","602"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticeRead.jsx",["603"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticeList.jsx",["604","605"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardList.jsx",["606","607","608"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardInsert.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardRead.jsx",["609"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\BestItem.jsx",["610"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EventItem.jsx",["611","612","613","614","615","616","617","618","619"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\fireStore.js",[],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\event\\EreplyList.jsx",["620"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\my\\MyChatItem.jsx",["621","622","623","624"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\notice\\NoticeItem.jsx",["625","626","627","628","629","630","631","632","633"],[],"C:\\Users\\Administrator\\Desktop\\프로잭트 마지막 백업\\src\\pboard\\PboardItem.jsx",["634","635","636"],[],{"ruleId":"637","severity":1,"message":"638","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":16},{"ruleId":"637","severity":1,"message":"641","line":1,"column":18,"nodeType":"639","messageId":"640","endLine":1,"endColumn":23},{"ruleId":"637","severity":1,"message":"642","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":25},{"ruleId":"643","severity":1,"message":"644","line":15,"column":13,"nodeType":"645","endLine":18,"endColumn":15},{"ruleId":"643","severity":1,"message":"644","line":21,"column":13,"nodeType":"645","endLine":23,"endColumn":50},{"ruleId":"643","severity":1,"message":"644","line":26,"column":13,"nodeType":"645","endLine":28,"endColumn":55},{"ruleId":"643","severity":1,"message":"644","line":47,"column":9,"nodeType":"645","endLine":47,"endColumn":37},{"ruleId":"643","severity":1,"message":"644","line":51,"column":9,"nodeType":"645","endLine":51,"endColumn":74},{"ruleId":"643","severity":1,"message":"644","line":54,"column":13,"nodeType":"645","endLine":54,"endColumn":40},{"ruleId":"643","severity":1,"message":"644","line":55,"column":13,"nodeType":"645","endLine":55,"endColumn":40},{"ruleId":"646","severity":1,"message":"647","line":63,"column":77,"nodeType":"648","messageId":"649","endLine":63,"endColumn":83},{"ruleId":"637","severity":1,"message":"650","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":16},{"ruleId":"643","severity":1,"message":"644","line":14,"column":9,"nodeType":"645","endLine":18,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":21,"column":9,"nodeType":"645","endLine":25,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":29,"column":9,"nodeType":"645","endLine":33,"endColumn":11},{"ruleId":"637","severity":1,"message":"642","line":2,"column":40,"nodeType":"639","messageId":"640","endLine":2,"endColumn":48},{"ruleId":"651","severity":1,"message":"652","line":37,"column":6,"nodeType":"653","endLine":37,"endColumn":37,"suggestions":"654"},{"ruleId":"651","severity":1,"message":"655","line":37,"column":7,"nodeType":"656","endLine":37,"endColumn":36},{"ruleId":"637","severity":1,"message":"657","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":23},{"ruleId":"637","severity":1,"message":"658","line":8,"column":19,"nodeType":"639","messageId":"640","endLine":8,"endColumn":29},{"ruleId":"659","severity":1,"message":"660","line":15,"column":35,"nodeType":"661","messageId":"662","endLine":15,"endColumn":36,"suggestions":"663"},{"ruleId":"659","severity":1,"message":"660","line":15,"column":68,"nodeType":"661","messageId":"662","endLine":15,"endColumn":69,"suggestions":"664"},{"ruleId":"651","severity":1,"message":"665","line":21,"column":6,"nodeType":"653","endLine":21,"endColumn":8,"suggestions":"666"},{"ruleId":"637","severity":1,"message":"667","line":3,"column":27,"nodeType":"639","messageId":"640","endLine":3,"endColumn":36},{"ruleId":"637","severity":1,"message":"668","line":4,"column":17,"nodeType":"639","messageId":"640","endLine":4,"endColumn":22},{"ruleId":"659","severity":1,"message":"660","line":45,"column":35,"nodeType":"661","messageId":"662","endLine":45,"endColumn":36,"suggestions":"669"},{"ruleId":"659","severity":1,"message":"660","line":45,"column":68,"nodeType":"661","messageId":"662","endLine":45,"endColumn":69,"suggestions":"670"},{"ruleId":"643","severity":1,"message":"644","line":500,"column":13,"nodeType":"645","endLine":500,"endColumn":44},{"ruleId":"643","severity":1,"message":"644","line":58,"column":7,"nodeType":"645","endLine":58,"endColumn":82},{"ruleId":"637","severity":1,"message":"671","line":2,"column":23,"nodeType":"639","messageId":"640","endLine":2,"endColumn":28},{"ruleId":"637","severity":1,"message":"672","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":27},{"ruleId":"651","severity":1,"message":"673","line":50,"column":8,"nodeType":"653","endLine":50,"endColumn":10,"suggestions":"674"},{"ruleId":"637","severity":1,"message":"675","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":13},{"ruleId":"651","severity":1,"message":"676","line":38,"column":8,"nodeType":"653","endLine":38,"endColumn":14,"suggestions":"677"},{"ruleId":"651","severity":1,"message":"678","line":25,"column":6,"nodeType":"653","endLine":25,"endColumn":12,"suggestions":"679"},{"ruleId":"651","severity":1,"message":"680","line":133,"column":8,"nodeType":"653","endLine":133,"endColumn":16,"suggestions":"681"},{"ruleId":"643","severity":1,"message":"644","line":49,"column":17,"nodeType":"645","endLine":53,"endColumn":19},{"ruleId":"651","severity":1,"message":"682","line":139,"column":6,"nodeType":"653","endLine":139,"endColumn":8,"suggestions":"683"},{"ruleId":"643","severity":1,"message":"644","line":144,"column":9,"nodeType":"645","endLine":148,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":151,"column":9,"nodeType":"645","endLine":155,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":161,"column":9,"nodeType":"645","endLine":165,"endColumn":11},{"ruleId":"659","severity":1,"message":"660","line":44,"column":35,"nodeType":"661","messageId":"662","endLine":44,"endColumn":36,"suggestions":"684"},{"ruleId":"659","severity":1,"message":"660","line":44,"column":68,"nodeType":"661","messageId":"662","endLine":44,"endColumn":69,"suggestions":"685"},{"ruleId":"651","severity":1,"message":"686","line":205,"column":6,"nodeType":"653","endLine":205,"endColumn":11,"suggestions":"687"},{"ruleId":"643","severity":1,"message":"644","line":277,"column":13,"nodeType":"645","endLine":277,"endColumn":98},{"ruleId":"637","severity":1,"message":"672","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":27},{"ruleId":"651","severity":1,"message":"673","line":48,"column":8,"nodeType":"653","endLine":48,"endColumn":10,"suggestions":"688"},{"ruleId":"651","severity":1,"message":"689","line":25,"column":8,"nodeType":"653","endLine":25,"endColumn":14,"suggestions":"690"},{"ruleId":"651","severity":1,"message":"691","line":29,"column":6,"nodeType":"653","endLine":29,"endColumn":16,"suggestions":"692"},{"ruleId":"637","severity":1,"message":"675","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":13},{"ruleId":"651","severity":1,"message":"693","line":39,"column":8,"nodeType":"653","endLine":39,"endColumn":14,"suggestions":"694"},{"ruleId":"651","severity":1,"message":"695","line":19,"column":6,"nodeType":"653","endLine":19,"endColumn":8,"suggestions":"696"},{"ruleId":"651","severity":1,"message":"697","line":49,"column":8,"nodeType":"653","endLine":49,"endColumn":14,"suggestions":"698"},{"ruleId":"643","severity":1,"message":"644","line":71,"column":17,"nodeType":"645","endLine":75,"endColumn":19},{"ruleId":"643","severity":1,"message":"644","line":78,"column":17,"nodeType":"645","endLine":82,"endColumn":19},{"ruleId":"651","severity":1,"message":"699","line":210,"column":6,"nodeType":"653","endLine":210,"endColumn":8,"suggestions":"700"},{"ruleId":"637","severity":1,"message":"701","line":4,"column":10,"nodeType":"639","messageId":"640","endLine":4,"endColumn":14},{"ruleId":"637","severity":1,"message":"650","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":16},{"ruleId":"637","severity":1,"message":"702","line":2,"column":18,"nodeType":"639","messageId":"640","endLine":2,"endColumn":29},{"ruleId":"637","severity":1,"message":"703","line":2,"column":31,"nodeType":"639","messageId":"640","endLine":2,"endColumn":35},{"ruleId":"637","severity":1,"message":"704","line":2,"column":37,"nodeType":"639","messageId":"640","endLine":2,"endColumn":40},{"ruleId":"637","severity":1,"message":"705","line":2,"column":42,"nodeType":"639","messageId":"640","endLine":2,"endColumn":51},{"ruleId":"637","severity":1,"message":"706","line":2,"column":53,"nodeType":"639","messageId":"640","endLine":2,"endColumn":56},{"ruleId":"637","severity":1,"message":"675","line":2,"column":58,"nodeType":"639","messageId":"640","endLine":2,"endColumn":61},{"ruleId":"637","severity":1,"message":"701","line":3,"column":10,"nodeType":"639","messageId":"640","endLine":3,"endColumn":14},{"ruleId":"651","severity":1,"message":"707","line":26,"column":6,"nodeType":"653","endLine":26,"endColumn":12,"suggestions":"708"},{"ruleId":"637","severity":1,"message":"672","line":1,"column":17,"nodeType":"639","messageId":"640","endLine":1,"endColumn":27},{"ruleId":"637","severity":1,"message":"709","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":15},{"ruleId":"637","severity":1,"message":"710","line":3,"column":10,"nodeType":"639","messageId":"640","endLine":3,"endColumn":21},{"ruleId":"643","severity":1,"message":"644","line":16,"column":17,"nodeType":"645","endLine":16,"endColumn":56},{"ruleId":"637","severity":1,"message":"650","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":16},{"ruleId":"637","severity":1,"message":"702","line":2,"column":18,"nodeType":"639","messageId":"640","endLine":2,"endColumn":29},{"ruleId":"637","severity":1,"message":"703","line":2,"column":31,"nodeType":"639","messageId":"640","endLine":2,"endColumn":35},{"ruleId":"637","severity":1,"message":"704","line":2,"column":37,"nodeType":"639","messageId":"640","endLine":2,"endColumn":40},{"ruleId":"637","severity":1,"message":"705","line":2,"column":42,"nodeType":"639","messageId":"640","endLine":2,"endColumn":51},{"ruleId":"637","severity":1,"message":"706","line":2,"column":53,"nodeType":"639","messageId":"640","endLine":2,"endColumn":56},{"ruleId":"637","severity":1,"message":"675","line":2,"column":58,"nodeType":"639","messageId":"640","endLine":2,"endColumn":61},{"ruleId":"637","severity":1,"message":"701","line":3,"column":10,"nodeType":"639","messageId":"640","endLine":3,"endColumn":14},{"ruleId":"651","severity":1,"message":"711","line":19,"column":6,"nodeType":"653","endLine":19,"endColumn":8,"suggestions":"712"},{"ruleId":"651","severity":1,"message":"713","line":45,"column":6,"nodeType":"653","endLine":45,"endColumn":14,"suggestions":"714"},{"ruleId":"643","severity":1,"message":"644","line":66,"column":17,"nodeType":"645","endLine":67,"endColumn":91},{"ruleId":"637","severity":1,"message":"642","line":2,"column":40,"nodeType":"639","messageId":"640","endLine":2,"endColumn":48},{"ruleId":"651","severity":1,"message":"652","line":37,"column":6,"nodeType":"653","endLine":37,"endColumn":37,"suggestions":"715"},{"ruleId":"651","severity":1,"message":"655","line":37,"column":7,"nodeType":"656","endLine":37,"endColumn":36},{"ruleId":"637","severity":1,"message":"638","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":16},{"ruleId":"637","severity":1,"message":"641","line":1,"column":18,"nodeType":"639","messageId":"640","endLine":1,"endColumn":23},{"ruleId":"637","severity":1,"message":"642","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":25},{"ruleId":"643","severity":1,"message":"644","line":15,"column":13,"nodeType":"645","endLine":18,"endColumn":15},{"ruleId":"643","severity":1,"message":"644","line":21,"column":13,"nodeType":"645","endLine":23,"endColumn":50},{"ruleId":"643","severity":1,"message":"644","line":26,"column":13,"nodeType":"645","endLine":28,"endColumn":55},{"ruleId":"643","severity":1,"message":"644","line":47,"column":9,"nodeType":"645","endLine":47,"endColumn":37},{"ruleId":"643","severity":1,"message":"644","line":51,"column":9,"nodeType":"645","endLine":51,"endColumn":74},{"ruleId":"643","severity":1,"message":"644","line":54,"column":13,"nodeType":"645","endLine":54,"endColumn":40},{"ruleId":"643","severity":1,"message":"644","line":55,"column":13,"nodeType":"645","endLine":55,"endColumn":40},{"ruleId":"646","severity":1,"message":"647","line":63,"column":77,"nodeType":"648","messageId":"649","endLine":63,"endColumn":83},{"ruleId":"637","severity":1,"message":"650","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":16},{"ruleId":"643","severity":1,"message":"644","line":45,"column":9,"nodeType":"645","endLine":49,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":52,"column":9,"nodeType":"645","endLine":56,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":60,"column":9,"nodeType":"645","endLine":64,"endColumn":11},{"ruleId":"637","severity":1,"message":"657","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":23},{"ruleId":"637","severity":1,"message":"675","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":13},{"ruleId":"651","severity":1,"message":"676","line":40,"column":8,"nodeType":"653","endLine":40,"endColumn":14,"suggestions":"716"},{"ruleId":"651","severity":1,"message":"665","line":21,"column":6,"nodeType":"653","endLine":21,"endColumn":8,"suggestions":"717"},{"ruleId":"637","severity":1,"message":"658","line":8,"column":19,"nodeType":"639","messageId":"640","endLine":8,"endColumn":29},{"ruleId":"659","severity":1,"message":"660","line":15,"column":35,"nodeType":"661","messageId":"662","endLine":15,"endColumn":36,"suggestions":"718"},{"ruleId":"659","severity":1,"message":"660","line":15,"column":68,"nodeType":"661","messageId":"662","endLine":15,"endColumn":69,"suggestions":"719"},{"ruleId":"643","severity":1,"message":"644","line":58,"column":7,"nodeType":"645","endLine":58,"endColumn":82},{"ruleId":"659","severity":1,"message":"660","line":63,"column":35,"nodeType":"661","messageId":"662","endLine":63,"endColumn":36,"suggestions":"720"},{"ruleId":"659","severity":1,"message":"660","line":63,"column":68,"nodeType":"661","messageId":"662","endLine":63,"endColumn":69,"suggestions":"721"},{"ruleId":"643","severity":1,"message":"644","line":556,"column":13,"nodeType":"645","endLine":556,"endColumn":44},{"ruleId":"637","severity":1,"message":"672","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":27},{"ruleId":"651","severity":1,"message":"673","line":50,"column":8,"nodeType":"653","endLine":50,"endColumn":10,"suggestions":"722"},{"ruleId":"651","severity":1,"message":"678","line":25,"column":6,"nodeType":"653","endLine":25,"endColumn":12,"suggestions":"723"},{"ruleId":"637","severity":1,"message":"671","line":2,"column":23,"nodeType":"639","messageId":"640","endLine":2,"endColumn":28},{"ruleId":"643","severity":1,"message":"644","line":49,"column":17,"nodeType":"645","endLine":53,"endColumn":19},{"ruleId":"651","severity":1,"message":"680","line":189,"column":8,"nodeType":"653","endLine":189,"endColumn":16,"suggestions":"724"},{"ruleId":"643","severity":1,"message":"644","line":223,"column":33,"nodeType":"645","endLine":223,"endColumn":66},{"ruleId":"651","severity":1,"message":"725","line":141,"column":6,"nodeType":"653","endLine":141,"endColumn":8,"suggestions":"726"},{"ruleId":"643","severity":1,"message":"644","line":146,"column":9,"nodeType":"645","endLine":150,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":153,"column":9,"nodeType":"645","endLine":157,"endColumn":11},{"ruleId":"643","severity":1,"message":"644","line":163,"column":9,"nodeType":"645","endLine":167,"endColumn":11},{"ruleId":"651","severity":1,"message":"691","line":29,"column":6,"nodeType":"653","endLine":29,"endColumn":16,"suggestions":"727"},{"ruleId":"637","severity":1,"message":"672","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":27},{"ruleId":"651","severity":1,"message":"673","line":48,"column":8,"nodeType":"653","endLine":48,"endColumn":10,"suggestions":"728"},{"ruleId":"651","severity":1,"message":"689","line":25,"column":8,"nodeType":"653","endLine":25,"endColumn":14,"suggestions":"729"},{"ruleId":"659","severity":1,"message":"660","line":44,"column":35,"nodeType":"661","messageId":"662","endLine":44,"endColumn":36,"suggestions":"730"},{"ruleId":"659","severity":1,"message":"660","line":44,"column":68,"nodeType":"661","messageId":"662","endLine":44,"endColumn":69,"suggestions":"731"},{"ruleId":"651","severity":1,"message":"686","line":205,"column":6,"nodeType":"653","endLine":205,"endColumn":11,"suggestions":"732"},{"ruleId":"643","severity":1,"message":"644","line":277,"column":13,"nodeType":"645","endLine":277,"endColumn":98},{"ruleId":"651","severity":1,"message":"695","line":19,"column":6,"nodeType":"653","endLine":19,"endColumn":8,"suggestions":"733"},{"ruleId":"637","severity":1,"message":"675","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":13},{"ruleId":"651","severity":1,"message":"693","line":39,"column":8,"nodeType":"653","endLine":39,"endColumn":14,"suggestions":"734"},{"ruleId":"651","severity":1,"message":"697","line":49,"column":8,"nodeType":"653","endLine":49,"endColumn":14,"suggestions":"735"},{"ruleId":"643","severity":1,"message":"644","line":71,"column":17,"nodeType":"645","endLine":75,"endColumn":19},{"ruleId":"643","severity":1,"message":"644","line":78,"column":17,"nodeType":"645","endLine":82,"endColumn":19},{"ruleId":"651","severity":1,"message":"699","line":211,"column":6,"nodeType":"653","endLine":211,"endColumn":8,"suggestions":"736"},{"ruleId":"637","severity":1,"message":"701","line":4,"column":10,"nodeType":"639","messageId":"640","endLine":4,"endColumn":14},{"ruleId":"637","severity":1,"message":"650","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":16},{"ruleId":"637","severity":1,"message":"702","line":2,"column":18,"nodeType":"639","messageId":"640","endLine":2,"endColumn":29},{"ruleId":"637","severity":1,"message":"703","line":2,"column":31,"nodeType":"639","messageId":"640","endLine":2,"endColumn":35},{"ruleId":"637","severity":1,"message":"704","line":2,"column":37,"nodeType":"639","messageId":"640","endLine":2,"endColumn":40},{"ruleId":"637","severity":1,"message":"705","line":2,"column":42,"nodeType":"639","messageId":"640","endLine":2,"endColumn":51},{"ruleId":"637","severity":1,"message":"706","line":2,"column":53,"nodeType":"639","messageId":"640","endLine":2,"endColumn":56},{"ruleId":"637","severity":1,"message":"675","line":2,"column":58,"nodeType":"639","messageId":"640","endLine":2,"endColumn":61},{"ruleId":"637","severity":1,"message":"701","line":3,"column":10,"nodeType":"639","messageId":"640","endLine":3,"endColumn":14},{"ruleId":"637","severity":1,"message":"737","line":6,"column":26,"nodeType":"639","messageId":"640","endLine":6,"endColumn":34},{"ruleId":"651","severity":1,"message":"707","line":26,"column":6,"nodeType":"653","endLine":26,"endColumn":12,"suggestions":"738"},{"ruleId":"637","severity":1,"message":"672","line":1,"column":17,"nodeType":"639","messageId":"640","endLine":1,"endColumn":27},{"ruleId":"637","severity":1,"message":"709","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":15},{"ruleId":"637","severity":1,"message":"710","line":3,"column":10,"nodeType":"639","messageId":"640","endLine":3,"endColumn":21},{"ruleId":"643","severity":1,"message":"644","line":16,"column":17,"nodeType":"645","endLine":16,"endColumn":56},{"ruleId":"637","severity":1,"message":"650","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":16},{"ruleId":"637","severity":1,"message":"702","line":2,"column":18,"nodeType":"639","messageId":"640","endLine":2,"endColumn":29},{"ruleId":"637","severity":1,"message":"703","line":2,"column":31,"nodeType":"639","messageId":"640","endLine":2,"endColumn":35},{"ruleId":"637","severity":1,"message":"704","line":2,"column":37,"nodeType":"639","messageId":"640","endLine":2,"endColumn":40},{"ruleId":"637","severity":1,"message":"705","line":2,"column":42,"nodeType":"639","messageId":"640","endLine":2,"endColumn":51},{"ruleId":"637","severity":1,"message":"706","line":2,"column":53,"nodeType":"639","messageId":"640","endLine":2,"endColumn":56},{"ruleId":"637","severity":1,"message":"675","line":2,"column":58,"nodeType":"639","messageId":"640","endLine":2,"endColumn":61},{"ruleId":"637","severity":1,"message":"701","line":3,"column":10,"nodeType":"639","messageId":"640","endLine":3,"endColumn":14},{"ruleId":"637","severity":1,"message":"739","line":6,"column":26,"nodeType":"639","messageId":"640","endLine":6,"endColumn":34},{"ruleId":"651","severity":1,"message":"711","line":19,"column":6,"nodeType":"653","endLine":19,"endColumn":8,"suggestions":"740"},{"ruleId":"651","severity":1,"message":"713","line":45,"column":6,"nodeType":"653","endLine":45,"endColumn":14,"suggestions":"741"},{"ruleId":"643","severity":1,"message":"644","line":66,"column":17,"nodeType":"645","endLine":67,"endColumn":91},"no-unused-vars","'Height' is defined but never used.","Identifier","unusedVar","'Style' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callUserRead'. Either include it or remove the dependency array.","ArrayExpression",["742"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'LoginUpdatePass' is defined but never used.","'setMessage' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["743","744"],["745","746"],"React Hook useEffect has a missing dependency: 'callEventRead'. Either include it or remove the dependency array.",["747"],"'useEffect' is defined but never used.","'Modal' is defined but never used.",["748","749"],["750","751"],"'Alert' is defined but never used.","'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'callChart'. Either include it or remove the dependency array.",["752"],"'Row' is defined but never used.","React Hook useEffect has a missing dependency: 'callEventList'. Either include it or remove the dependency array.",["753"],"React Hook useEffect has a missing dependency: 'callBuyList'. Either include it or remove the dependency array.",["754"],"React Hook useEffect has missing dependencies: 'getMessageList' and 'getRoomList'. Either include them or remove the dependency array.",["755"],"React Hook useEffect has a missing dependency: 'callPboardRead'. Either include it or remove the dependency array.",["756"],["757","758"],["759","760"],"React Hook useEffect has a missing dependency: 'callUser'. Either include it or remove the dependency array.",["761"],["762"],"React Hook useEffect has a missing dependency: 'callSellList'. Either include it or remove the dependency array.",["763"],"React Hook useEffect has a missing dependency: 'callReceivewReview'. Either include it or remove the dependency array.",["764"],"React Hook useEffect has a missing dependency: 'callNoticeList'. Either include it or remove the dependency array.",["765"],"React Hook useEffect has a missing dependency: 'callNoticeRead'. Either include it or remove the dependency array.",["766"],"React Hook useEffect has a missing dependency: 'callPostList'. Either include it or remove the dependency array.",["767"],"React Hook useEffect has a missing dependency: 'callPostRead'. Either include it or remove the dependency array.",["768"],"'Link' is defined but never used.","'ButtonGroup' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","'Nav' is defined but never used.","React Hook useEffect has a missing dependency: 'callEreply'. Either include it or remove the dependency array.",["769"],"'Badge' is defined but never used.","'UserContext' is defined but never used.","React Hook useCallback has missing dependencies: 'loginUser.unickname' and 'pcode'. Either include them or remove the dependency array.",["770"],"React Hook useEffect has a missing dependency: 'callLoveList'. Either include it or remove the dependency array.",["771"],["772"],["773"],["774"],["775","776"],["777","778"],["779","780"],["781","782"],["783"],["784"],["785"],"React Hook useEffect has a missing dependency: 'callOnlyRead'. Either include it or remove the dependency array.",["786"],["787"],["788"],["789"],["790","791"],["792","793"],["794"],["795"],["796"],["797"],["798"],"'econtent' is assigned a value but never used.",["799"],"'ncontent' is assigned a value but never used.",["800"],["801"],{"desc":"802","fix":"803"},{"messageId":"804","fix":"805","desc":"806"},{"messageId":"807","fix":"808","desc":"809"},{"messageId":"804","fix":"810","desc":"806"},{"messageId":"807","fix":"811","desc":"809"},{"desc":"812","fix":"813"},{"messageId":"804","fix":"814","desc":"806"},{"messageId":"807","fix":"815","desc":"809"},{"messageId":"804","fix":"816","desc":"806"},{"messageId":"807","fix":"817","desc":"809"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"messageId":"804","fix":"828","desc":"806"},{"messageId":"807","fix":"829","desc":"809"},{"messageId":"804","fix":"830","desc":"806"},{"messageId":"807","fix":"831","desc":"809"},{"desc":"832","fix":"833"},{"desc":"818","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"849","fix":"850"},{"desc":"851","fix":"852"},{"desc":"802","fix":"853"},{"desc":"820","fix":"854"},{"desc":"812","fix":"855"},{"messageId":"804","fix":"856","desc":"806"},{"messageId":"807","fix":"857","desc":"809"},{"messageId":"804","fix":"858","desc":"806"},{"messageId":"807","fix":"859","desc":"809"},{"messageId":"804","fix":"860","desc":"806"},{"messageId":"807","fix":"861","desc":"809"},{"messageId":"804","fix":"862","desc":"806"},{"messageId":"807","fix":"863","desc":"809"},{"desc":"818","fix":"864"},{"desc":"822","fix":"865"},{"desc":"824","fix":"866"},{"desc":"867","fix":"868"},{"desc":"837","fix":"869"},{"desc":"818","fix":"870"},{"desc":"835","fix":"871"},{"messageId":"804","fix":"872","desc":"806"},{"messageId":"807","fix":"873","desc":"809"},{"messageId":"804","fix":"874","desc":"806"},{"messageId":"807","fix":"875","desc":"809"},{"desc":"832","fix":"876"},{"desc":"841","fix":"877"},{"desc":"839","fix":"878"},{"desc":"843","fix":"879"},{"desc":"845","fix":"880"},{"desc":"847","fix":"881"},{"desc":"849","fix":"882"},{"desc":"851","fix":"883"},"Update the dependencies array to be: [callUserRead]",{"range":"884","text":"885"},"removeEscape",{"range":"886","text":"887"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"888","text":"889"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"890","text":"887"},{"range":"891","text":"889"},"Update the dependencies array to be: [callEventRead]",{"range":"892","text":"893"},{"range":"894","text":"887"},{"range":"895","text":"889"},{"range":"896","text":"887"},{"range":"897","text":"889"},"Update the dependencies array to be: [callChart]",{"range":"898","text":"899"},"Update the dependencies array to be: [callEventList, page]",{"range":"900","text":"901"},"Update the dependencies array to be: [callBuyList, page]",{"range":"902","text":"903"},"Update the dependencies array to be: [chatId, getMessageList, getRoomList]",{"range":"904","text":"905"},"Update the dependencies array to be: [callPboardRead]",{"range":"906","text":"907"},{"range":"908","text":"887"},{"range":"909","text":"889"},{"range":"910","text":"887"},{"range":"911","text":"889"},"Update the dependencies array to be: [callUser, uid]",{"range":"912","text":"913"},{"range":"914","text":"899"},"Update the dependencies array to be: [callSellList, page]",{"range":"915","text":"916"},"Update the dependencies array to be: [callReceivewReview, location]",{"range":"917","text":"918"},"Update the dependencies array to be: [callNoticeList, page]",{"range":"919","text":"920"},"Update the dependencies array to be: [callNoticeRead]",{"range":"921","text":"922"},"Update the dependencies array to be: [callPostList, page]",{"range":"923","text":"924"},"Update the dependencies array to be: [callPostRead]",{"range":"925","text":"926"},"Update the dependencies array to be: [callEreply, page]",{"range":"927","text":"928"},"Update the dependencies array to be: [loginUser.unickname, pcode]",{"range":"929","text":"930"},"Update the dependencies array to be: [callLoveList, toggle]",{"range":"931","text":"932"},{"range":"933","text":"885"},{"range":"934","text":"901"},{"range":"935","text":"893"},{"range":"936","text":"887"},{"range":"937","text":"889"},{"range":"938","text":"887"},{"range":"939","text":"889"},{"range":"940","text":"887"},{"range":"941","text":"889"},{"range":"942","text":"887"},{"range":"943","text":"889"},{"range":"944","text":"899"},{"range":"945","text":"903"},{"range":"946","text":"905"},"Update the dependencies array to be: [callOnlyRead]",{"range":"947","text":"948"},{"range":"949","text":"918"},{"range":"950","text":"899"},{"range":"951","text":"916"},{"range":"952","text":"887"},{"range":"953","text":"889"},{"range":"954","text":"887"},{"range":"955","text":"889"},{"range":"956","text":"913"},{"range":"957","text":"922"},{"range":"958","text":"920"},{"range":"959","text":"924"},{"range":"960","text":"926"},{"range":"961","text":"928"},{"range":"962","text":"930"},{"range":"963","text":"932"},[985,1016],"[callUserRead]",[491,492],"",[491,491],"\\",[524,525],[524,524],[550,552],"[callEventRead]",[1291,1292],[1291,1291],[1324,1325],[1324,1324],[1386,1388],"[callChart]",[1299,1305],"[callEventList, page]",[854,860],"[callBuyList, page]",[4633,4641],"[chatId, getMessageList, getRoomList]",[4230,4232],"[callPboardRead]",[1333,1334],[1333,1333],[1366,1367],[1366,1366],[5563,5568],"[callUser, uid]",[1245,1247],[905,911],"[callSellList, page]",[976,986],"[callReceivewReview, location]",[1290,1296],"[callNoticeList, page]",[498,500],"[callNoticeRead]",[1618,1624],"[callPostList, page]",[5767,5769],"[callPostRead]",[874,880],"[callEreply, page]",[856,858],"[loginUser.unickname, pcode]",[1447,1455],"[callLoveList, toggle]",[985,1016],[1306,1312],[550,552],[491,492],[491,491],[524,525],[524,524],[1745,1746],[1745,1745],[1778,1779],[1778,1778],[1386,1388],[850,856],[6637,6645],[4327,4329],"[callOnlyRead]",[976,986],[1245,1247],[905,911],[1333,1334],[1333,1333],[1366,1367],[1366,1366],[5563,5568],[498,500],[1290,1296],[1618,1624],[5759,5761],[874,880],[856,858],[1447,1455]]